#line 1 "vendor/samsung/common/sepolicy/aosp/security_classes"
# FLASK

#
# Define the security object classes
#

# Classes marked as userspace are classes
# for userspace object managers

class security
class process
class system
class capability

# file-related classes
class filesystem
class file
class dir
class fd
class lnk_file
class chr_file
class blk_file
class sock_file
class fifo_file

# network-related classes
class socket
class tcp_socket
class udp_socket
class rawip_socket
class node
class netif
class netlink_socket
class packet_socket
class key_socket
class unix_stream_socket
class unix_dgram_socket

# sysv-ipc-related classes
class sem
class msg
class msgq
class shm
class ipc

#
# userspace object manager classes
#

# passwd/chfn/chsh
class passwd			# userspace

# SE-X Windows stuff (more classes below)
class x_drawable		# userspace
class x_screen			# userspace
class x_gc			# userspace
class x_font			# userspace
class x_colormap		# userspace
class x_property		# userspace
class x_selection		# userspace
class x_cursor			# userspace
class x_client			# userspace
class x_device			# userspace
class x_server			# userspace
class x_extension		# userspace

# extended netlink sockets
class netlink_route_socket
class netlink_firewall_socket
class netlink_tcpdiag_socket
class netlink_nflog_socket
class netlink_xfrm_socket
class netlink_selinux_socket
class netlink_audit_socket
class netlink_ip6fw_socket
class netlink_dnrt_socket

class dbus			# userspace
class nscd			# userspace

# IPSec association
class association

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket

class appletalk_socket

class packet

# Kernel access key retention
class key

class context			# userspace

class dccp_socket

class memprotect

class db_database		# userspace
class db_table			# userspace
class db_procedure		# userspace
class db_column			# userspace
class db_tuple			# userspace
class db_blob			# userspace

# network peer labels
class peer

# Capabilities >= 32
class capability2

# More SE-X Windows stuff
class x_resource		# userspace
class x_event			# userspace
class x_synthetic_event		# userspace
class x_application_data	# userspace

# kernel services that need to override task security, e.g. cachefiles
class kernel_service

class tun_socket

# Still More SE-X Windows stuff
class x_pointer			# userspace
class x_keyboard		# userspace

# More Database stuff
class db_schema			# userspace
class db_view			# userspace
class db_sequence		# userspace
class db_language		# userspace

class binder
class zygote

# Property service
class property_service          # userspace

# Service manager
class service_manager           # userspace

# Keystore Key
class keystore_key              # userspace

# FLASK
#line 1 "vendor/samsung/common/sepolicy/aosp/initial_sids"
# FLASK

#
# Define initial security identifiers
#

sid kernel
sid security
sid unlabeled
sid fs
sid file
sid file_labels
sid init
sid any_socket
sid port
sid netif
sid netmsg
sid node
sid igmp_packet
sid icmp_socket
sid tcp_socket
sid sysctl_modprobe
sid sysctl
sid sysctl_fs
sid sysctl_kernel
sid sysctl_net
sid sysctl_net_unix
sid sysctl_vm
sid sysctl_dev
sid kmod
sid policy
sid scmp_packet
sid devnull

# FLASK
#line 1 "vendor/samsung/common/sepolicy/aosp/access_vectors"
#
# Define common prefixes for access vectors
#
# common common_name { permission_name ... }


#
# Define a common prefix for file access vectors.
#

common file
{
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
	unlink
	link
	rename
	execute
	swapon
	quotaon
	mounton
}


#
# Define a common prefix for socket access vectors.
#

common socket
{
# inherited from file
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
# socket-specific
	bind
	connect
	listen
	accept
	getopt
	setopt
	shutdown
	recvfrom
	sendto
	recv_msg
	send_msg
	name_bind
}

#
# Define a common prefix for ipc access vectors.
#

common ipc
{
	create
	destroy
	getattr
	setattr
	read
	write
	associate
	unix_read
	unix_write
}

#
#  Define a common prefix for userspace database object access vectors.
#

common database
{
	create
	drop
	getattr
	setattr
	relabelfrom
	relabelto
}

#
# Define a common prefix for pointer and keyboard access vectors.
#

common x_device
{
	getattr
	setattr
	use
	read
	write
	getfocus
	setfocus
	bell
	force_cursor
	freeze
	grab
	manage
	list_property
	get_property
	set_property
	add
	remove
	create
	destroy
}

#
# Define the access vectors.
#
# class class_name [ inherits common_name ] { permission_name ... }


#
# Define the access vector interpretation for file-related objects.
#

class filesystem
{
	mount
	remount
	unmount
	getattr
	relabelfrom
	relabelto
	transition
	associate
	quotamod
	quotaget
}

class dir
inherits file
{
	add_name
	remove_name
	reparent
	search
	rmdir
	open
	audit_access
	execmod
}

class file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
	open
	audit_access
}

class lnk_file
inherits file
{
	open
	audit_access
	execmod
}

class chr_file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
	open
	audit_access
}

class blk_file
inherits file
{
	open
	audit_access
	execmod
}

class sock_file
inherits file
{
	open
	audit_access
	execmod
}

class fifo_file
inherits file
{
	open
	audit_access
	execmod
}

class fd
{
	use
}


#
# Define the access vector interpretation for network-related objects.
#

class socket
inherits socket

class tcp_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
	node_bind
	name_connect
}

class udp_socket
inherits socket
{
	node_bind
}

class rawip_socket
inherits socket
{
	node_bind
}

class node
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
	enforce_dest
	dccp_recv
	dccp_send
	recvfrom
	sendto
}

class netif
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
	dccp_recv
	dccp_send
	ingress
	egress
}

class netlink_socket
inherits socket

class packet_socket
inherits socket

class key_socket
inherits socket

class unix_stream_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
}

class unix_dgram_socket
inherits socket

#
# Define the access vector interpretation for process-related objects
#

class process
{
	fork
	transition
	sigchld # commonly granted from child to parent
	sigkill # cannot be caught or ignored
	sigstop # cannot be caught or ignored
	signull # for kill(pid, 0)
	signal  # all other signals
	ptrace
	getsched
	setsched
	getsession
	getpgid
	setpgid
	getcap
	setcap
	share
	getattr
	setexec
	setfscreate
	noatsecure
	siginh
	setrlimit
	rlimitinh
	dyntransition
	setcurrent
	execmem
	execstack
	execheap
	setkeycreate
	setsockcreate
}


#
# Define the access vector interpretation for ipc-related objects
#

class ipc
inherits ipc

class sem
inherits ipc

class msgq
inherits ipc
{
	enqueue
}

class msg
{
	send
	receive
}

class shm
inherits ipc
{
	lock
}


#
# Define the access vector interpretation for the security server.
#

class security
{
	compute_av
	compute_create
	compute_member
	check_context
	load_policy
	compute_relabel
	compute_user
	setenforce     # was avc_toggle in system class
	setbool
	setsecparam
	setcheckreqprot
	read_policy
}


#
# Define the access vector interpretation for system operations.
#

class system
{
	ipc_info
	syslog_read
	syslog_mod
	syslog_console
	module_request
}

#
# Define the access vector interpretation for controling capabilies
#

class capability
{
	# The capabilities are defined in include/linux/capability.h
	# Capabilities >= 32 are defined in the capability2 class.
	# Care should be taken to ensure that these are consistent with
	# those definitions. (Order matters)

	chown
	dac_override
	dac_read_search
	fowner
	fsetid
	kill
	setgid
	setuid
	setpcap
	linux_immutable
	net_bind_service
	net_broadcast
	net_admin
	net_raw
	ipc_lock
	ipc_owner
	sys_module
	sys_rawio
	sys_chroot
	sys_ptrace
	sys_pacct
	sys_admin
	sys_boot
	sys_nice
	sys_resource
	sys_time
	sys_tty_config
	mknod
	lease
	audit_write
	audit_control
	setfcap
}

class capability2
{
	mac_override	# unused by SELinux
	mac_admin	# unused by SELinux
	syslog
	wake_alarm
	block_suspend
}

#
# Define the access vector interpretation for controlling
# changes to passwd information.
#
class passwd
{
	passwd	# change another user passwd
	chfn	# change another user finger info
	chsh	# change another user shell
	rootok  # pam_rootok check (skip auth)
	crontab # crontab on another user
}

#
# SE-X Windows stuff
#
class x_drawable
{
	create
	destroy
	read
	write
	blend
	getattr
	setattr
	list_child
	add_child
	remove_child
	list_property
	get_property
	set_property
	manage
	override
	show
	hide
	send
	receive
}

class x_screen
{
	getattr
	setattr
	hide_cursor
	show_cursor
	saver_getattr
	saver_setattr
	saver_hide
	saver_show
}

class x_gc
{
	create
	destroy
	getattr
	setattr
	use
}

class x_font
{
	create
	destroy
	getattr
	add_glyph
	remove_glyph
	use
}

class x_colormap
{
	create
	destroy
	read
	write
	getattr
	add_color
	remove_color
	install
	uninstall
	use
}

class x_property
{
	create
	destroy
	read
	write
	append
	getattr
	setattr
}

class x_selection
{
	read
	write
	getattr
	setattr
}

class x_cursor
{
	create
	destroy
	read
	write
	getattr
	setattr
	use
}

class x_client
{
	destroy
	getattr
	setattr
	manage
}

class x_device
inherits x_device

class x_server
{
	getattr
	setattr
	record
	debug
	grab
	manage
}

class x_extension
{
	query
	use
}

class x_resource
{
	read
	write
}

class x_event
{
	send
	receive
}

class x_synthetic_event
{
	send
	receive
}

#
# Extended Netlink classes
#
class netlink_route_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_firewall_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_tcpdiag_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_nflog_socket
inherits socket

class netlink_xfrm_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_selinux_socket
inherits socket

class netlink_audit_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
	nlmsg_relay
	nlmsg_readpriv
	nlmsg_tty_audit
}

class netlink_ip6fw_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_dnrt_socket
inherits socket

# Define the access vector interpretation for controlling
# access and communication through the D-BUS messaging
# system.
#
class dbus
{
	acquire_svc
	send_msg
}

# Define the access vector interpretation for controlling
# access through the name service cache daemon (nscd).
#
class nscd
{
	getpwd
	getgrp
	gethost
	getstat
	admin
	shmempwd
	shmemgrp
	shmemhost
	getserv
	shmemserv
}

# Define the access vector interpretation for controlling
# access to IPSec network data by association
#
class association
{
	sendto
	recvfrom
	setcontext
	polmatch
}

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket
inherits socket

class appletalk_socket
inherits socket

class packet
{
	send
	recv
	relabelto
	flow_in		# deprecated
	flow_out	# deprecated
	forward_in
	forward_out
}

class key
{
	view
	read
	write
	search
	link
	setattr
	create
}

class context
{
	translate
	contains
}

class dccp_socket
inherits socket
{
	node_bind
	name_connect
}

class memprotect
{
	mmap_zero
}

class db_database
inherits database
{
	access
	install_module
	load_module
	get_param	# deprecated
	set_param	# deprecated
}

class db_table
inherits database
{
	use		# deprecated
	select
	update
	insert
	delete
	lock
}

class db_procedure
inherits database
{
	execute
	entrypoint
	install
}

class db_column
inherits database
{
	use		# deprecated
	select
	update
	insert
}

class db_tuple
{
	relabelfrom
	relabelto
	use		# deprecated
	select
	update
	insert
	delete
}

class db_blob
inherits database
{
	read
	write
	import
	export
}

# network peer labels
class peer
{
	recv
}

class x_application_data
{
	paste
	paste_after_confirm
	copy
}

class kernel_service
{
	use_as_override
	create_files_as
}

class tun_socket
inherits socket
{
	attach_queue
}

class x_pointer
inherits x_device

class x_keyboard
inherits x_device

class db_schema
inherits database
{
	search
	add_name
	remove_name
}

class db_view
inherits database
{
	expand
}

class db_sequence
inherits database
{
	get_value
	next_value
	set_value
}

class db_language
inherits database
{
	implement
	execute
}

class binder
{
	impersonate
	call
	set_context_mgr
	transfer
}

class zygote
{
	specifyids
	specifyrlimits
	specifyinvokewith
	specifyseinfo
}

class property_service
{
	set
}

class service_manager
{
	add
	find
	list
}

##SEC_SEforAndroid : add 4 classes
class keystore_key
{
	test
	get
	insert
	delete
	exist
	saw
	reset
	password
	lock
	unlock
	zero
	sign
	verify
	grant
	duplicate
	clear_uid
	reset_uid
	sync_uid
	password_uid
	set_max_retry_count
	get_by_uid
	insert_as_user
	delete_as_user
}
#line 1 "vendor/samsung/common/sepolicy/aosp/global_macros"
#####################################
# Common groupings of object classes.
#














#####################################
# Common groupings of permissions.
#





















#####################################
# Common socket permission sets.




#line 1 "vendor/samsung/common/sepolicy/global_macros"
# from aosp/neverallow_macros
#
# Common neverallow permissions




#line 1 "vendor/samsung/common/sepolicy/aosp/mls_macros"
########################################
#
# gen_cats(N)
#
# declares categores c0 to c(N-1)
#
#line 10




########################################
#
# gen_sens(N)
#
# declares sensitivites s0 to s(N-1) with dominance
# in increasing numeric order with s0 lowest, s(N-1) highest
#
#line 24




#line 34


########################################
#
# gen_levels(N,M)
#
# levels from s0 to (N-1) with categories c0 to (M-1)
#
#line 45




########################################
#
# Basic level names for system low and high
#


#line 1 "vendor/samsung/common/sepolicy/mls"
#########################################
# MLS declarations
#

# Generate the desired number of sensitivities and categories.

#line 6
# Each sensitivity has a name and zero or more aliases.
#line 6
sensitivity s0;
#line 6

#line 6

#line 6
# Define the ordering of the sensitivity levels (least to greatest)
#line 6
dominance { s0  }
#line 6

category c0;
#line 7
category c1;
#line 7
category c2;
#line 7
category c3;
#line 7
category c4;
#line 7
category c5;
#line 7
category c6;
#line 7
category c7;
#line 7
category c8;
#line 7
category c9;
#line 7
category c10;
#line 7
category c11;
#line 7
category c12;
#line 7
category c13;
#line 7
category c14;
#line 7
category c15;
#line 7
category c16;
#line 7
category c17;
#line 7
category c18;
#line 7
category c19;
#line 7
category c20;
#line 7
category c21;
#line 7
category c22;
#line 7
category c23;
#line 7
category c24;
#line 7
category c25;
#line 7
category c26;
#line 7
category c27;
#line 7
category c28;
#line 7
category c29;
#line 7
category c30;
#line 7
category c31;
#line 7
category c32;
#line 7
category c33;
#line 7
category c34;
#line 7
category c35;
#line 7
category c36;
#line 7
category c37;
#line 7
category c38;
#line 7
category c39;
#line 7
category c40;
#line 7
category c41;
#line 7
category c42;
#line 7
category c43;
#line 7
category c44;
#line 7
category c45;
#line 7
category c46;
#line 7
category c47;
#line 7
category c48;
#line 7
category c49;
#line 7
category c50;
#line 7
category c51;
#line 7
category c52;
#line 7
category c53;
#line 7
category c54;
#line 7
category c55;
#line 7
category c56;
#line 7
category c57;
#line 7
category c58;
#line 7
category c59;
#line 7
category c60;
#line 7
category c61;
#line 7
category c62;
#line 7
category c63;
#line 7
category c64;
#line 7
category c65;
#line 7
category c66;
#line 7
category c67;
#line 7
category c68;
#line 7
category c69;
#line 7
category c70;
#line 7
category c71;
#line 7
category c72;
#line 7
category c73;
#line 7
category c74;
#line 7
category c75;
#line 7
category c76;
#line 7
category c77;
#line 7
category c78;
#line 7
category c79;
#line 7
category c80;
#line 7
category c81;
#line 7
category c82;
#line 7
category c83;
#line 7
category c84;
#line 7
category c85;
#line 7
category c86;
#line 7
category c87;
#line 7
category c88;
#line 7
category c89;
#line 7
category c90;
#line 7
category c91;
#line 7
category c92;
#line 7
category c93;
#line 7
category c94;
#line 7
category c95;
#line 7
category c96;
#line 7
category c97;
#line 7
category c98;
#line 7
category c99;
#line 7
category c100;
#line 7
category c101;
#line 7
category c102;
#line 7
category c103;
#line 7
category c104;
#line 7
category c105;
#line 7
category c106;
#line 7
category c107;
#line 7
category c108;
#line 7
category c109;
#line 7
category c110;
#line 7
category c111;
#line 7
category c112;
#line 7
category c113;
#line 7
category c114;
#line 7
category c115;
#line 7
category c116;
#line 7
category c117;
#line 7
category c118;
#line 7
category c119;
#line 7
category c120;
#line 7
category c121;
#line 7
category c122;
#line 7
category c123;
#line 7
category c124;
#line 7
category c125;
#line 7
category c126;
#line 7
category c127;
#line 7
category c128;
#line 7
category c129;
#line 7
category c130;
#line 7
category c131;
#line 7
category c132;
#line 7
category c133;
#line 7
category c134;
#line 7
category c135;
#line 7
category c136;
#line 7
category c137;
#line 7
category c138;
#line 7
category c139;
#line 7
category c140;
#line 7
category c141;
#line 7
category c142;
#line 7
category c143;
#line 7
category c144;
#line 7
category c145;
#line 7
category c146;
#line 7
category c147;
#line 7
category c148;
#line 7
category c149;
#line 7
category c150;
#line 7
category c151;
#line 7
category c152;
#line 7
category c153;
#line 7
category c154;
#line 7
category c155;
#line 7
category c156;
#line 7
category c157;
#line 7
category c158;
#line 7
category c159;
#line 7
category c160;
#line 7
category c161;
#line 7
category c162;
#line 7
category c163;
#line 7
category c164;
#line 7
category c165;
#line 7
category c166;
#line 7
category c167;
#line 7
category c168;
#line 7
category c169;
#line 7
category c170;
#line 7
category c171;
#line 7
category c172;
#line 7
category c173;
#line 7
category c174;
#line 7
category c175;
#line 7
category c176;
#line 7
category c177;
#line 7
category c178;
#line 7
category c179;
#line 7
category c180;
#line 7
category c181;
#line 7
category c182;
#line 7
category c183;
#line 7
category c184;
#line 7
category c185;
#line 7
category c186;
#line 7
category c187;
#line 7
category c188;
#line 7
category c189;
#line 7
category c190;
#line 7
category c191;
#line 7
category c192;
#line 7
category c193;
#line 7
category c194;
#line 7
category c195;
#line 7
category c196;
#line 7
category c197;
#line 7
category c198;
#line 7
category c199;
#line 7
category c200;
#line 7
category c201;
#line 7
category c202;
#line 7
category c203;
#line 7
category c204;
#line 7
category c205;
#line 7
category c206;
#line 7
category c207;
#line 7
category c208;
#line 7
category c209;
#line 7
category c210;
#line 7
category c211;
#line 7
category c212;
#line 7
category c213;
#line 7
category c214;
#line 7
category c215;
#line 7
category c216;
#line 7
category c217;
#line 7
category c218;
#line 7
category c219;
#line 7
category c220;
#line 7
category c221;
#line 7
category c222;
#line 7
category c223;
#line 7
category c224;
#line 7
category c225;
#line 7
category c226;
#line 7
category c227;
#line 7
category c228;
#line 7
category c229;
#line 7
category c230;
#line 7
category c231;
#line 7
category c232;
#line 7
category c233;
#line 7
category c234;
#line 7
category c235;
#line 7
category c236;
#line 7
category c237;
#line 7
category c238;
#line 7
category c239;
#line 7
category c240;
#line 7
category c241;
#line 7
category c242;
#line 7
category c243;
#line 7
category c244;
#line 7
category c245;
#line 7
category c246;
#line 7
category c247;
#line 7
category c248;
#line 7
category c249;
#line 7
category c250;
#line 7
category c251;
#line 7
category c252;
#line 7
category c253;
#line 7
category c254;
#line 7
category c255;
#line 7
category c256;
#line 7
category c257;
#line 7
category c258;
#line 7
category c259;
#line 7
category c260;
#line 7
category c261;
#line 7
category c262;
#line 7
category c263;
#line 7
category c264;
#line 7
category c265;
#line 7
category c266;
#line 7
category c267;
#line 7
category c268;
#line 7
category c269;
#line 7
category c270;
#line 7
category c271;
#line 7
category c272;
#line 7
category c273;
#line 7
category c274;
#line 7
category c275;
#line 7
category c276;
#line 7
category c277;
#line 7
category c278;
#line 7
category c279;
#line 7
category c280;
#line 7
category c281;
#line 7
category c282;
#line 7
category c283;
#line 7
category c284;
#line 7
category c285;
#line 7
category c286;
#line 7
category c287;
#line 7
category c288;
#line 7
category c289;
#line 7
category c290;
#line 7
category c291;
#line 7
category c292;
#line 7
category c293;
#line 7
category c294;
#line 7
category c295;
#line 7
category c296;
#line 7
category c297;
#line 7
category c298;
#line 7
category c299;
#line 7
category c300;
#line 7
category c301;
#line 7
category c302;
#line 7
category c303;
#line 7
category c304;
#line 7
category c305;
#line 7
category c306;
#line 7
category c307;
#line 7
category c308;
#line 7
category c309;
#line 7
category c310;
#line 7
category c311;
#line 7
category c312;
#line 7
category c313;
#line 7
category c314;
#line 7
category c315;
#line 7
category c316;
#line 7
category c317;
#line 7
category c318;
#line 7
category c319;
#line 7
category c320;
#line 7
category c321;
#line 7
category c322;
#line 7
category c323;
#line 7
category c324;
#line 7
category c325;
#line 7
category c326;
#line 7
category c327;
#line 7
category c328;
#line 7
category c329;
#line 7
category c330;
#line 7
category c331;
#line 7
category c332;
#line 7
category c333;
#line 7
category c334;
#line 7
category c335;
#line 7
category c336;
#line 7
category c337;
#line 7
category c338;
#line 7
category c339;
#line 7
category c340;
#line 7
category c341;
#line 7
category c342;
#line 7
category c343;
#line 7
category c344;
#line 7
category c345;
#line 7
category c346;
#line 7
category c347;
#line 7
category c348;
#line 7
category c349;
#line 7
category c350;
#line 7
category c351;
#line 7
category c352;
#line 7
category c353;
#line 7
category c354;
#line 7
category c355;
#line 7
category c356;
#line 7
category c357;
#line 7
category c358;
#line 7
category c359;
#line 7
category c360;
#line 7
category c361;
#line 7
category c362;
#line 7
category c363;
#line 7
category c364;
#line 7
category c365;
#line 7
category c366;
#line 7
category c367;
#line 7
category c368;
#line 7
category c369;
#line 7
category c370;
#line 7
category c371;
#line 7
category c372;
#line 7
category c373;
#line 7
category c374;
#line 7
category c375;
#line 7
category c376;
#line 7
category c377;
#line 7
category c378;
#line 7
category c379;
#line 7
category c380;
#line 7
category c381;
#line 7
category c382;
#line 7
category c383;
#line 7
category c384;
#line 7
category c385;
#line 7
category c386;
#line 7
category c387;
#line 7
category c388;
#line 7
category c389;
#line 7
category c390;
#line 7
category c391;
#line 7
category c392;
#line 7
category c393;
#line 7
category c394;
#line 7
category c395;
#line 7
category c396;
#line 7
category c397;
#line 7
category c398;
#line 7
category c399;
#line 7
category c400;
#line 7
category c401;
#line 7
category c402;
#line 7
category c403;
#line 7
category c404;
#line 7
category c405;
#line 7
category c406;
#line 7
category c407;
#line 7
category c408;
#line 7
category c409;
#line 7
category c410;
#line 7
category c411;
#line 7
category c412;
#line 7
category c413;
#line 7
category c414;
#line 7
category c415;
#line 7
category c416;
#line 7
category c417;
#line 7
category c418;
#line 7
category c419;
#line 7
category c420;
#line 7
category c421;
#line 7
category c422;
#line 7
category c423;
#line 7
category c424;
#line 7
category c425;
#line 7
category c426;
#line 7
category c427;
#line 7
category c428;
#line 7
category c429;
#line 7
category c430;
#line 7
category c431;
#line 7
category c432;
#line 7
category c433;
#line 7
category c434;
#line 7
category c435;
#line 7
category c436;
#line 7
category c437;
#line 7
category c438;
#line 7
category c439;
#line 7
category c440;
#line 7
category c441;
#line 7
category c442;
#line 7
category c443;
#line 7
category c444;
#line 7
category c445;
#line 7
category c446;
#line 7
category c447;
#line 7
category c448;
#line 7
category c449;
#line 7
category c450;
#line 7
category c451;
#line 7
category c452;
#line 7
category c453;
#line 7
category c454;
#line 7
category c455;
#line 7
category c456;
#line 7
category c457;
#line 7
category c458;
#line 7
category c459;
#line 7
category c460;
#line 7
category c461;
#line 7
category c462;
#line 7
category c463;
#line 7
category c464;
#line 7
category c465;
#line 7
category c466;
#line 7
category c467;
#line 7
category c468;
#line 7
category c469;
#line 7
category c470;
#line 7
category c471;
#line 7
category c472;
#line 7
category c473;
#line 7
category c474;
#line 7
category c475;
#line 7
category c476;
#line 7
category c477;
#line 7
category c478;
#line 7
category c479;
#line 7
category c480;
#line 7
category c481;
#line 7
category c482;
#line 7
category c483;
#line 7
category c484;
#line 7
category c485;
#line 7
category c486;
#line 7
category c487;
#line 7
category c488;
#line 7
category c489;
#line 7
category c490;
#line 7
category c491;
#line 7
category c492;
#line 7
category c493;
#line 7
category c494;
#line 7
category c495;
#line 7
category c496;
#line 7
category c497;
#line 7
category c498;
#line 7
category c499;
#line 7
category c500;
#line 7
category c501;
#line 7
category c502;
#line 7
category c503;
#line 7
category c504;
#line 7
category c505;
#line 7
category c506;
#line 7
category c507;
#line 7
category c508;
#line 7
category c509;
#line 7
category c510;
#line 7
category c511;
#line 7
category c512;
#line 7
category c513;
#line 7
category c514;
#line 7
category c515;
#line 7
category c516;
#line 7
category c517;
#line 7
category c518;
#line 7
category c519;
#line 7
category c520;
#line 7
category c521;
#line 7
category c522;
#line 7
category c523;
#line 7
category c524;
#line 7
category c525;
#line 7
category c526;
#line 7
category c527;
#line 7
category c528;
#line 7
category c529;
#line 7
category c530;
#line 7
category c531;
#line 7
category c532;
#line 7
category c533;
#line 7
category c534;
#line 7
category c535;
#line 7
category c536;
#line 7
category c537;
#line 7
category c538;
#line 7
category c539;
#line 7
category c540;
#line 7
category c541;
#line 7
category c542;
#line 7
category c543;
#line 7
category c544;
#line 7
category c545;
#line 7
category c546;
#line 7
category c547;
#line 7
category c548;
#line 7
category c549;
#line 7
category c550;
#line 7
category c551;
#line 7
category c552;
#line 7
category c553;
#line 7
category c554;
#line 7
category c555;
#line 7
category c556;
#line 7
category c557;
#line 7
category c558;
#line 7
category c559;
#line 7
category c560;
#line 7
category c561;
#line 7
category c562;
#line 7
category c563;
#line 7
category c564;
#line 7
category c565;
#line 7
category c566;
#line 7
category c567;
#line 7
category c568;
#line 7
category c569;
#line 7
category c570;
#line 7
category c571;
#line 7
category c572;
#line 7
category c573;
#line 7
category c574;
#line 7
category c575;
#line 7
category c576;
#line 7
category c577;
#line 7
category c578;
#line 7
category c579;
#line 7
category c580;
#line 7
category c581;
#line 7
category c582;
#line 7
category c583;
#line 7
category c584;
#line 7
category c585;
#line 7
category c586;
#line 7
category c587;
#line 7
category c588;
#line 7
category c589;
#line 7
category c590;
#line 7
category c591;
#line 7
category c592;
#line 7
category c593;
#line 7
category c594;
#line 7
category c595;
#line 7
category c596;
#line 7
category c597;
#line 7
category c598;
#line 7
category c599;
#line 7
category c600;
#line 7
category c601;
#line 7
category c602;
#line 7
category c603;
#line 7
category c604;
#line 7
category c605;
#line 7
category c606;
#line 7
category c607;
#line 7
category c608;
#line 7
category c609;
#line 7
category c610;
#line 7
category c611;
#line 7
category c612;
#line 7
category c613;
#line 7
category c614;
#line 7
category c615;
#line 7
category c616;
#line 7
category c617;
#line 7
category c618;
#line 7
category c619;
#line 7
category c620;
#line 7
category c621;
#line 7
category c622;
#line 7
category c623;
#line 7
category c624;
#line 7
category c625;
#line 7
category c626;
#line 7
category c627;
#line 7
category c628;
#line 7
category c629;
#line 7
category c630;
#line 7
category c631;
#line 7
category c632;
#line 7
category c633;
#line 7
category c634;
#line 7
category c635;
#line 7
category c636;
#line 7
category c637;
#line 7
category c638;
#line 7
category c639;
#line 7
category c640;
#line 7
category c641;
#line 7
category c642;
#line 7
category c643;
#line 7
category c644;
#line 7
category c645;
#line 7
category c646;
#line 7
category c647;
#line 7
category c648;
#line 7
category c649;
#line 7
category c650;
#line 7
category c651;
#line 7
category c652;
#line 7
category c653;
#line 7
category c654;
#line 7
category c655;
#line 7
category c656;
#line 7
category c657;
#line 7
category c658;
#line 7
category c659;
#line 7
category c660;
#line 7
category c661;
#line 7
category c662;
#line 7
category c663;
#line 7
category c664;
#line 7
category c665;
#line 7
category c666;
#line 7
category c667;
#line 7
category c668;
#line 7
category c669;
#line 7
category c670;
#line 7
category c671;
#line 7
category c672;
#line 7
category c673;
#line 7
category c674;
#line 7
category c675;
#line 7
category c676;
#line 7
category c677;
#line 7
category c678;
#line 7
category c679;
#line 7
category c680;
#line 7
category c681;
#line 7
category c682;
#line 7
category c683;
#line 7
category c684;
#line 7
category c685;
#line 7
category c686;
#line 7
category c687;
#line 7
category c688;
#line 7
category c689;
#line 7
category c690;
#line 7
category c691;
#line 7
category c692;
#line 7
category c693;
#line 7
category c694;
#line 7
category c695;
#line 7
category c696;
#line 7
category c697;
#line 7
category c698;
#line 7
category c699;
#line 7
category c700;
#line 7
category c701;
#line 7
category c702;
#line 7
category c703;
#line 7
category c704;
#line 7
category c705;
#line 7
category c706;
#line 7
category c707;
#line 7
category c708;
#line 7
category c709;
#line 7
category c710;
#line 7
category c711;
#line 7
category c712;
#line 7
category c713;
#line 7
category c714;
#line 7
category c715;
#line 7
category c716;
#line 7
category c717;
#line 7
category c718;
#line 7
category c719;
#line 7
category c720;
#line 7
category c721;
#line 7
category c722;
#line 7
category c723;
#line 7
category c724;
#line 7
category c725;
#line 7
category c726;
#line 7
category c727;
#line 7
category c728;
#line 7
category c729;
#line 7
category c730;
#line 7
category c731;
#line 7
category c732;
#line 7
category c733;
#line 7
category c734;
#line 7
category c735;
#line 7
category c736;
#line 7
category c737;
#line 7
category c738;
#line 7
category c739;
#line 7
category c740;
#line 7
category c741;
#line 7
category c742;
#line 7
category c743;
#line 7
category c744;
#line 7
category c745;
#line 7
category c746;
#line 7
category c747;
#line 7
category c748;
#line 7
category c749;
#line 7
category c750;
#line 7
category c751;
#line 7
category c752;
#line 7
category c753;
#line 7
category c754;
#line 7
category c755;
#line 7
category c756;
#line 7
category c757;
#line 7
category c758;
#line 7
category c759;
#line 7
category c760;
#line 7
category c761;
#line 7
category c762;
#line 7
category c763;
#line 7
category c764;
#line 7
category c765;
#line 7
category c766;
#line 7
category c767;
#line 7
category c768;
#line 7
category c769;
#line 7
category c770;
#line 7
category c771;
#line 7
category c772;
#line 7
category c773;
#line 7
category c774;
#line 7
category c775;
#line 7
category c776;
#line 7
category c777;
#line 7
category c778;
#line 7
category c779;
#line 7
category c780;
#line 7
category c781;
#line 7
category c782;
#line 7
category c783;
#line 7
category c784;
#line 7
category c785;
#line 7
category c786;
#line 7
category c787;
#line 7
category c788;
#line 7
category c789;
#line 7
category c790;
#line 7
category c791;
#line 7
category c792;
#line 7
category c793;
#line 7
category c794;
#line 7
category c795;
#line 7
category c796;
#line 7
category c797;
#line 7
category c798;
#line 7
category c799;
#line 7
category c800;
#line 7
category c801;
#line 7
category c802;
#line 7
category c803;
#line 7
category c804;
#line 7
category c805;
#line 7
category c806;
#line 7
category c807;
#line 7
category c808;
#line 7
category c809;
#line 7
category c810;
#line 7
category c811;
#line 7
category c812;
#line 7
category c813;
#line 7
category c814;
#line 7
category c815;
#line 7
category c816;
#line 7
category c817;
#line 7
category c818;
#line 7
category c819;
#line 7
category c820;
#line 7
category c821;
#line 7
category c822;
#line 7
category c823;
#line 7
category c824;
#line 7
category c825;
#line 7
category c826;
#line 7
category c827;
#line 7
category c828;
#line 7
category c829;
#line 7
category c830;
#line 7
category c831;
#line 7
category c832;
#line 7
category c833;
#line 7
category c834;
#line 7
category c835;
#line 7
category c836;
#line 7
category c837;
#line 7
category c838;
#line 7
category c839;
#line 7
category c840;
#line 7
category c841;
#line 7
category c842;
#line 7
category c843;
#line 7
category c844;
#line 7
category c845;
#line 7
category c846;
#line 7
category c847;
#line 7
category c848;
#line 7
category c849;
#line 7
category c850;
#line 7
category c851;
#line 7
category c852;
#line 7
category c853;
#line 7
category c854;
#line 7
category c855;
#line 7
category c856;
#line 7
category c857;
#line 7
category c858;
#line 7
category c859;
#line 7
category c860;
#line 7
category c861;
#line 7
category c862;
#line 7
category c863;
#line 7
category c864;
#line 7
category c865;
#line 7
category c866;
#line 7
category c867;
#line 7
category c868;
#line 7
category c869;
#line 7
category c870;
#line 7
category c871;
#line 7
category c872;
#line 7
category c873;
#line 7
category c874;
#line 7
category c875;
#line 7
category c876;
#line 7
category c877;
#line 7
category c878;
#line 7
category c879;
#line 7
category c880;
#line 7
category c881;
#line 7
category c882;
#line 7
category c883;
#line 7
category c884;
#line 7
category c885;
#line 7
category c886;
#line 7
category c887;
#line 7
category c888;
#line 7
category c889;
#line 7
category c890;
#line 7
category c891;
#line 7
category c892;
#line 7
category c893;
#line 7
category c894;
#line 7
category c895;
#line 7
category c896;
#line 7
category c897;
#line 7
category c898;
#line 7
category c899;
#line 7
category c900;
#line 7
category c901;
#line 7
category c902;
#line 7
category c903;
#line 7
category c904;
#line 7
category c905;
#line 7
category c906;
#line 7
category c907;
#line 7
category c908;
#line 7
category c909;
#line 7
category c910;
#line 7
category c911;
#line 7
category c912;
#line 7
category c913;
#line 7
category c914;
#line 7
category c915;
#line 7
category c916;
#line 7
category c917;
#line 7
category c918;
#line 7
category c919;
#line 7
category c920;
#line 7
category c921;
#line 7
category c922;
#line 7
category c923;
#line 7
category c924;
#line 7
category c925;
#line 7
category c926;
#line 7
category c927;
#line 7
category c928;
#line 7
category c929;
#line 7
category c930;
#line 7
category c931;
#line 7
category c932;
#line 7
category c933;
#line 7
category c934;
#line 7
category c935;
#line 7
category c936;
#line 7
category c937;
#line 7
category c938;
#line 7
category c939;
#line 7
category c940;
#line 7
category c941;
#line 7
category c942;
#line 7
category c943;
#line 7
category c944;
#line 7
category c945;
#line 7
category c946;
#line 7
category c947;
#line 7
category c948;
#line 7
category c949;
#line 7
category c950;
#line 7
category c951;
#line 7
category c952;
#line 7
category c953;
#line 7
category c954;
#line 7
category c955;
#line 7
category c956;
#line 7
category c957;
#line 7
category c958;
#line 7
category c959;
#line 7
category c960;
#line 7
category c961;
#line 7
category c962;
#line 7
category c963;
#line 7
category c964;
#line 7
category c965;
#line 7
category c966;
#line 7
category c967;
#line 7
category c968;
#line 7
category c969;
#line 7
category c970;
#line 7
category c971;
#line 7
category c972;
#line 7
category c973;
#line 7
category c974;
#line 7
category c975;
#line 7
category c976;
#line 7
category c977;
#line 7
category c978;
#line 7
category c979;
#line 7
category c980;
#line 7
category c981;
#line 7
category c982;
#line 7
category c983;
#line 7
category c984;
#line 7
category c985;
#line 7
category c986;
#line 7
category c987;
#line 7
category c988;
#line 7
category c989;
#line 7
category c990;
#line 7
category c991;
#line 7
category c992;
#line 7
category c993;
#line 7
category c994;
#line 7
category c995;
#line 7
category c996;
#line 7
category c997;
#line 7
category c998;
#line 7
category c999;
#line 7
category c1000;
#line 7
category c1001;
#line 7
category c1002;
#line 7
category c1003;
#line 7
category c1004;
#line 7
category c1005;
#line 7
category c1006;
#line 7
category c1007;
#line 7
category c1008;
#line 7
category c1009;
#line 7
category c1010;
#line 7
category c1011;
#line 7
category c1012;
#line 7
category c1013;
#line 7
category c1014;
#line 7
category c1015;
#line 7
category c1016;
#line 7
category c1017;
#line 7
category c1018;
#line 7
category c1019;
#line 7
category c1020;
#line 7
category c1021;
#line 7
category c1022;
#line 7
category c1023;
#line 7


# Generate level definitions for each sensitivity and category.
level s0:c0.c1023;
#line 10



#################################################
# MLS policy constraints
#

#
# Process constraints
#

# Process transition:  Require equivalence unless the subject is trusted.
mlsconstrain process { transition dyntransition }
	     ((h1 eq h2 and l1 eq l2) or t1 == mlstrustedsubject);

# Process read operations: No read up unless trusted.
mlsconstrain process { getsched getsession getpgid getcap getattr ptrace share }
	     (l1 dom l2 or t1 == mlstrustedsubject);

# Process write operations:  No write down unless trusted.
mlsconstrain process { sigkill sigstop signal setsched setpgid setcap setrlimit ptrace share }
	     (l1 domby l2 or t1 == mlstrustedsubject);

#
# Socket constraints
#

# Create/relabel operations:  Subject must be equivalent to object unless
# the subject is trusted.  Sockets inherit the range of their creator.
mlsconstrain { socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } { create relabelfrom relabelto }
	     ((h1 eq h2 and l1 eq l2) or t1 == mlstrustedsubject);

# Datagram send: Sender must be dominated by receiver unless one of them is
# trusted.
mlsconstrain unix_dgram_socket { sendto }
	     (l1 domby l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);

# Stream connect:  Client must be equivalent to server unless one of them
# is trusted.
mlsconstrain unix_stream_socket { connectto }
	     (l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);

#
# Directory/file constraints
#

# Create/relabel operations:  Subject must be equivalent to object unless
# the subject is trusted. Also, files should always be single-level.
# Do NOT exempt mlstrustedobject types from this constraint.
mlsconstrain { dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } { create relabelfrom relabelto }
	     (l2 eq h2 and (l1 eq l2 or t1 == mlstrustedsubject));


# Read operations: Subject must dominate object unless the subject
# or the object is trusted.
mlsconstrain dir { read getattr search }
	     (l1 dom l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject);

mlsconstrain { file lnk_file sock_file chr_file blk_file } { read getattr execute }
	     (l1 dom l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject);

# Write operations: Subject must be dominated by the object unless the
# subject or the object is trusted.
mlsconstrain dir { write setattr rename add_name remove_name reparent rmdir }
	     (l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject);

mlsconstrain { file lnk_file sock_file chr_file blk_file } { write setattr append unlink link rename }
	     (l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject);

# Special case for FIFOs.
# These can be unnamed pipes, in which case they will be labeled with the
# creating process' label. Thus we also have an exemption when the "object"
# is a MLS trusted subject and can receive data at any level.
mlsconstrain fifo_file { read getattr }
	     (l1 dom l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject or t2 == mlstrustedsubject);

mlsconstrain fifo_file { write setattr append unlink link rename }
	     (l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject or t2 == mlstrustedsubject);

#
# IPC constraints
#

# Create/destroy: equivalence or trusted.
mlsconstrain { sem msgq shm ipc } { create destroy }
	     (l2 eq h2 and (l1 eq l2 or t1 == mlstrustedsubject));

# Read ops: No read up unless trusted.
mlsconstrain { sem msgq shm ipc } { getattr read associate unix_read }
	     (l1 dom l2 or t1 == mlstrustedsubject);

# Write ops: No write down unless trusted.
mlsconstrain { sem msgq shm ipc } { write unix_write }
	     (l1 domby l2 or t1 == mlstrustedsubject);

#
# Binder IPC constraints
#
# Presently commented out, as apps are expected to call one another.
# This would only make sense if apps were assigned categories
# based on allowable communications rather than per-app categories.
#mlsconstrain binder call
#	(l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);
#line 1 "vendor/samsung/common/sepolicy/aosp/policy_capabilities"
# Enable new networking controls.
policycap network_peer_controls;

# Enable open permission check.
policycap open_perms;
#line 1 "vendor/samsung/common/sepolicy/aosp/te_macros"
#####################################
# domain_trans(olddomain, type, newdomain)
# Allow a transition from olddomain to newdomain
# upon executing a file labeled with type.
# This only allows the transition; it does not
# cause it to occur automatically - use domain_auto_trans
# if that is what you want.
#
#line 21


#####################################
# domain_auto_trans(olddomain, type, newdomain)
# Automatically transition from olddomain to newdomain
# upon executing a file labeled with type.
#
#line 33


#####################################
# file_type_trans(domain, dir_type, file_type)
# Allow domain to create a file labeled file_type in a
# directory labeled dir_type.
# This only allows the transition; it does not
# cause it to occur automatically - use file_type_auto_trans
# if that is what you want.
#
#line 49


#####################################
# file_type_auto_trans(domain, dir_type, file_type)
# Automatically label new files with file_type when
# they are created by domain in directories labeled dir_type.
#
#line 62


#####################################
# r_dir_file(domain, type)
# Allow the specified domain to read directories, files
# and symbolic links of the specified type.
#line 71


#####################################
# unconfined_domain(domain)
# Allow the specified domain to perform more privileged operations
# than would be typically allowed. Please see the comments at the
# top of unconfined.te.
#
#line 82


#####################################
# tmpfs_domain(domain)
# Define and allow access to a unique type for
# this domain when creating tmpfs / shmem / ashmem files.
#line 93


#####################################
# init_daemon_domain(domain)
# Set up a transition from init to the daemon domain
# upon executing its binary.
#line 102


#####################################
# app_domain(domain)
# Allow a base set of permissions required for all apps.
#line 113


#####################################
# net_domain(domain)
# Allow a base set of permissions required for network access.
#line 120


#####################################
# bluetooth_domain(domain)
# Allow a base set of permissions required for bluetooth access.
#line 127


#####################################
# unix_socket_connect(clientdomain, socket, serverdomain)
# Allow a local socket connection from clientdomain via
# socket to serverdomain.
#line 136


#####################################
# unix_socket_send(clientdomain, socket, serverdomain)
# Allow a local socket send from clientdomain via
# socket to serverdomain.
#line 145


#####################################
# binder_use(domain)
# Allow domain to use Binder IPC.
#line 159


#####################################
# binder_call(clientdomain, serverdomain)
# Allow clientdomain to perform binder IPC to serverdomain.
#line 171


#####################################
# binder_service(domain)
# Mark a domain as being a Binder service domain.
# Used to allow binder IPC to the various system services.
#line 179


#####################################
# wakelock_use(domain)
# Allow domain to manage wake locks
#line 189


#####################################
# selinux_check_access(domain)
# Allow domain to check SELinux permissions via selinuxfs.
#line 198


#####################################
# selinux_check_context(domain)
# Allow domain to check SELinux contexts via selinuxfs.
#line 206


#####################################
# selinux_setenforce(domain)
# Allow domain to set SELinux to enforcing.
#line 214


#####################################
# selinux_setbool(domain)
# Allow domain to set SELinux booleans.
#line 222


#####################################
# security_access_policy(domain)
# Read only access to all policy files and
# selinuxfs
#line 231


#####################################
# selinux_manage_policy(domain)
# Ability to manage policy files and
# trigger runtime reload.
#line 244


#####################################
# mmac_manage_policy(domain)
# Ability to manage mmac policy files,
# trigger runtime reload, change
# mmac enforcing mode and access logcat.
#line 257


#####################################
# access_kmsg(domain)
# Ability to read from kernel logs
# and execute the klogctl syscall
# in a non destructive manner. See
# man 2 klogctl
#line 267


#####################################
# write_klog(domain)
# Ability to write to kernel log via
# klog_write()
# See system/core/libcutil/klog.c
#line 278


#####################################
# create_pty(domain)
# Allow domain to create and use a pty, isolated from any other domain ptys.
#line 292


#####################################
# Non system_app application set
#


#####################################
# Recovery only
# SELinux rules which apply only to recovery mode
#


#####################################
# Userdebug or eng builds
# SELinux rules which apply only to userdebug or eng builds
#


#####################################
# permissive_or_unconfined
# Returns "permissive $1" if FORCE_PERMISSIVE_TO_UNCONFINED is false,
# and "unconfined($1)" otherwise.
#
# This is used for experimental domains, where we want to ensure
# the domain is unconfined+enforcing once new SELinux policy development
# has ceased.
#


#####################################
# write_logd(domain)
# Ability to write to android log
# daemon via sockets
#line 331


#####################################
# read_logd(domain)
# Ability to read from android
# log daemon via sockets
#line 339


#####################################
# control_logd(domain)
# Ability to control
# android log daemon via sockets
#line 349


#####################################
# use_keystore(domain)
# Ability to use keystore.
# Keystore is requires the following permissions
# to call getpidcon.
#line 361

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/te_macros"
#####################################
# qmux_socket(clientdomain)
# Allow client domain to connecto and send
# via a local socket to the qmux domain.
# Also allow the client domain to remove
# its own socket.
#line 11


#####################################
# diag_rw(clientdomain)
# Allow domains to read and write
# /dev/diag nodes.
# Note any app domian and untrusted_app
# are to be restricted from using this.
#line 21


#####################################
# cnd_nims_socket_perm(clientdomain)
# allow cnd to read /proc/pid/cmdline to get appname
# allow cnd to use inet socket created by app.
#line 32

#line 1 "vendor/samsung/common/sepolicy/te_macros"
#system.te:allow system_app dumplog_data_file:dir create_dir_perms;
#system.te:allow system_app dumplog_data_file:file create_file_perms;

#####################################
# access_logcat(domain)
# Ability to read from logcat logs
# and execute the logcat command
#line 11


#####################################
# access_audit_logs(domain)
# Ability to read audit logs
#line 18


#####################################
# dumplog_read(domain)
# Allow domain to read dumplogs.
#line 26


#####################################
# dumplog_create(domain)
# Allow domain to read,write and create dumplogs.
#line 38


#####################################
# modify_kmsg(domain)
# Ability to read from kernel logs
# and execute the klogctl syscall
# in a non destructive manner. See
# man 2 klogctl
#line 49


# TODO Add timedaemon macro perhaps

# mobicore_use(domain)
# Allow domain to use mobicore
#line 60


#####################################
# mobicore_create(domain)
# Allow domain to create mobicore devices
# TODO fill in mobicore rules here
#line 70


#####################################
# absolute_create(domain)
# Allow domain to create absolute file
# TODO fill in absolute rules here
#line 79


#####################################
# absolute_use(domain)
# Allow domain to use absolute file
# TODO fill in absolute rules here
#line 88


#####################################
# secure_storage_create(domain)
# Allow domain to create secure_storage
# TODO fill in secure_storage rules here
#line 100


#####################################
# apk_data_create(domain)
# Allow domain to create apk_data
# TODO fill in apk_data rules here
#line 110


#####################################
# app_data_create(domain)
# Allow domain to create app_data
# TODO fill in app_data rules here
#line 120


#####################################
# unix_socket_rw(domain, domain)
# Allow domain to use unix_socket_rw file
# TODO fill in unix_socket_rw rules here
#line 129


#####################################
# container_trusted_agent( domain)
# Allow domain full control of container data files and dirs
#line 145


#####################################
# execute_dump(domain)
# Allow domain to execute dumpstate, bugreport, dumpsys
# TODO fill in execute_dump rules here
#line 155


#####################################
# set_prop(domain)
# Allow domain to set security prop
# TODO fill in set_prop rules here
#line 165


#####################################
# platform_app_domain(domain)
# Allow permissions specific to platform apps.
#line 173



#####################################
# selinux_getenforce(domain)
# Allow domain to check whether SELinux is enforcing.
#line 182


#####################################
# selinux_setenforce(domain)
# Allow domain to set SELinux to enforcing.
#line 191


#####################################
# Additional macro:




######################################
# enable AOSP Neverallow



######################################
# not to include ENG Policy



#line 1 "vendor/samsung/common/sepolicy/aosp/attributes"
######################################
# Attribute declarations
#

# All types used for devices.
attribute dev_type;

# All types used for processes.
attribute domain;

# All types used for filesystems.
attribute fs_type;

# All types used for context= mounts.
attribute contextmount_type;

# All types used for files that can exist on a labeled fs.
# Do not use for pseudo file types.
attribute file_type;

# All types used for domain entry points.
attribute exec_type;

# All types used for /data files.
attribute data_file_type;

# All types use for sysfs files.
attribute sysfs_type;

# Attribute used for all sdcards
attribute sdcard_type;

# All types used for nodes/hosts.
attribute node_type;

# All types used for network interfaces.
attribute netif_type;

# All types used for network ports.
attribute port_type;

# All types used for property service
attribute property_type;

# All types used for services managed by service_manager.
attribute service_manager_type;

# All domains that can override MLS restrictions.
# i.e. processes that can read up and write down.
attribute mlstrustedsubject;

# All types that can override MLS restrictions.
# i.e. files that can be read by lower and written by higher
attribute mlstrustedobject;

# Domains that are allowed all permissions ("unconfined").
attribute unconfineddomain;

# All domains used for apps.
attribute appdomain;

# All domains used for apps with network access.
attribute netdomain;

# All domains used for apps with bluetooth access.
attribute bluetoothdomain;

# All domains used for binder service domains.
attribute binderservicedomain;
#line 1 "vendor/samsung/common/sepolicy/attributes"
#
# attribute
#

############ aosp and sec_common #############
# Tag to domains that container should not access
attribute untrusteddomain;

# Tag to types that container should not access
attribute untrusted_type;

# Tag for platform_app type only 
attribute commonplatformappdomain;

# Tag for platform_app type only 
attribute platformappdomain;

# Tag for system_app type only 
attribute systemappdomain;

# Tag for trusteddomain 
attribute trusteddomain;

# Tag for trusteddomain 
attribute device_domain;

# Tag for trusteddomain 
attribute system_domain;

# Tag for trusteddomain 
attribute trusted_app_domain;

# Tag for efs file 
attribute efs_type;

# Tag for read only filesystem type
attribute r_fs_type;

# Tag for read/write filesystem type
attribute rw_fs_type;

# Tag for read/execute filesystem type
attribute rx_fs_type;

# Tag for socket_file_type
attribute socket_file_type;

# Tag for library_file_type
attribute library_file_type;

# Tag for log_file_type
attribute log_file_type;

# Tag for cache_file_type
attribute cache_file_type;

# Tag for security_file_type
attribute security_file_type;

# Tag for misc_rw_file_type
attribute misc_rw_file_type;

# Allow domains used for untrusted (signed with non-trusted key) apps.
attribute untrustedappdomain;

# All app private data directories that should be accessable by all apps
attribute app_public_data_type;

# All app data directories
# only used for the domain which have mlstrustedsubject and privilege, because it includes container app data
attribute app_data_type;

# For ashmem tmpfs
attribute tmpfs_file_type;

# Restrict type.
attribute appdomain_no_write_file;
attribute appdomain_no_read_file;
attribute domain_no_read_file;
attribute domain_no_write_file;
attribute domain_no_read_knoxfile;
attribute domain_no_write_knoxfile;
attribute domain_no_set_prop;
attribute appdomain_no_read_chr_device;
attribute appdomain_no_write_chr_device;
attribute domain_no_readwrite_chr_device;
attribute domain_no_readwrite_blk_device;
attribute untrustedapp_no_readwrite_device;
attribute domain_no_read_fs;
attribute domain_no_write_fs;
attribute domain_no_read_knoxfs;
attribute domain_no_write_knoxfs;

attribute cts_domain;
attribute cts_appdomain;
attribute cts_trusted_domain;

############ knox_common #############
# All file types used by the container
attribute container_file_type;

# common rules for container
attribute containerdomain;

# Secure storage locations for container service
attribute container_service_secure_type;
attribute newAttr1;
attribute newAttr2;
attribute newAttr3;
attribute newAttr4;
attribute newAttr5;
attribute newAttr6;
attribute newAttr7;
attribute newAttr8;
attribute newAttr9;
attribute newAttr10;
attribute newAttr11;
attribute newAttr12;
attribute newAttr13;
attribute newAttr14;
attribute newAttr15;
attribute newAttr16;
attribute newAttr17;
attribute newAttr18;
attribute newAttr19;
attribute newAttr20;
attribute newAttr21;
attribute newAttr22;
attribute newAttr23;
attribute newAttr24;
attribute newAttr25;
attribute newAttr26;
attribute newAttr27;
attribute newAttr28;
attribute newAttr29;
attribute newAttr30;
attribute newAttr31;
attribute newAttr32;
attribute newAttr33;
attribute newAttr34;
attribute newAttr35;
attribute newAttr36;
attribute newAttr37;
attribute newAttr38;
attribute newAttr39;
attribute newAttr40;
attribute newAttr41;
attribute newAttr42;
attribute newAttr43;
attribute newAttr44;
attribute newAttr45;
attribute newAttr46;
attribute newAttr47;
attribute newAttr48;
attribute newAttr49;
attribute newAttr50;
attribute newAttr51;
attribute newAttr52;
attribute newAttr53;
attribute newAttr54;
attribute newAttr55;
attribute newAttr56;
attribute newAttr57;
attribute newAttr58;
attribute newAttr59;
attribute newAttr60;
attribute newAttr61;
attribute newAttr62;
attribute newAttr63;
attribute newAttr64;
attribute newAttr65;
attribute newAttr66;
attribute newAttr67;
attribute newAttr68;
attribute newAttr69;
attribute newAttr70;
attribute newAttr71;
attribute newAttr72;
attribute newAttr73;
attribute newAttr74;
attribute newAttr75;
attribute newAttr76;
attribute newAttr77;
attribute newAttr78;
attribute newAttr79;
attribute newAttr80;
attribute newAttr81;
attribute newAttr82;
attribute newAttr83;
attribute newAttr84;
attribute newAttr85;
attribute newAttr86;
attribute newAttr87;
attribute newAttr88;
attribute newAttr89;
attribute newAttr90;
attribute newAttr91;
attribute newAttr92;
attribute newAttr93;
attribute newAttr94;
attribute newAttr95;
attribute newAttr96;
attribute newAttr97;
attribute newAttr98;

############ qcom_common #############



############ slsi_common #############




#line 1 "vendor/samsung/common/sepolicy/aosp/adbd.te"
# adbd seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type adbd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49;


#line 5
 allow adbd self:process setcurrent;
#line 5
 allow adbd su:process dyntransition;
#line 8



#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow adbd shell_exec:file { getattr open read execute };
#line 10
allow adbd shell:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow shell shell_exec:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow shell adbd:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
dontaudit adbd shell:process noatsecure;
#line 10
# XXX dontaudit candidate but requires further study.
#line 10
allow adbd shell:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition adbd shell_exec:process shell;
#line 10


# Do not sanitize the environment or open fds of the shell.
allow adbd shell:process noatsecure;

# Set UID and GID to shell.  Set supplementary groups.
allow adbd self:capability { setuid setgid };

# Drop capabilities from bounding set on user builds.
allow adbd self:capability setpcap;

# Create and use network sockets.

#line 22
typeattribute adbd netdomain;
#line 22


# Access /dev/android_adb or /dev/usb-ffs/adb/ep0
allow adbd adb_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow adbd functionfs:dir search;
allow adbd functionfs:file { { getattr open read ioctl lock } { open append write } };

# Use a pseudo tty.
allow adbd devpts:chr_file { { getattr open read ioctl lock } { open append write } };

# adb push/pull /data/local/tmp.
allow adbd shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow adbd shell_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# adb push/pull sdcard.
allow adbd sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow adbd sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# adb pull /data/anr/traces.txt
allow adbd anr_data_file:dir { open getattr read search ioctl };
allow adbd anr_data_file:file { getattr open read ioctl lock };

# Set service.adb.*, sys.powerctl properties.

#line 45
allow adbd property_socket:sock_file write;
#line 45
allow adbd init:unix_stream_socket connectto;
#line 45

allow adbd shell_prop:property_service set;
allow adbd powerctl_prop:property_service set;

# Run /system/bin/bu
allow adbd system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Perform binder IPC to surfaceflinger (screencap)
# XXX Run screencap in a separate domain?

#line 54
# Call the servicemanager and transfer references to it.
#line 54
allow adbd servicemanager:binder { call transfer };
#line 54
# servicemanager performs getpidcon on clients.
#line 54
allow servicemanager adbd:dir search;
#line 54
allow servicemanager adbd:file { read open };
#line 54
allow servicemanager adbd:process getattr;
#line 54
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 54
# all domains in domain.te.
#line 54


#line 55
# Call the server domain and optionally transfer references to it.
#line 55
allow adbd surfaceflinger:binder { call transfer };
#line 55
# Allow the serverdomain to transfer references to the client on the reply.
#line 55
allow surfaceflinger adbd:binder transfer;
#line 55
# Receive and use open files from the server.
#line 55
allow adbd surfaceflinger:fd use;
#line 55

# b/13188914
allow adbd gpu_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Read /data/misc/adb/adb_keys.
allow adbd adb_keys_file:dir search;
allow adbd adb_keys_file:file { getattr open read ioctl lock };


#line 63
  # Write debugging information to /data/adb
#line 63
  # when persist.adb.trace_mask is set
#line 63
  # https://code.google.com/p/android/issues/detail?id=72895
#line 63
 allow adbd adb_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 63
 allow adbd adb_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 69


# ndk-gdb invokes adb forward to forward the gdbserver socket.
allow adbd app_data_file:dir search;
allow adbd gad_untrusted_app_data_file:dir search;
#line 73
allow adbd app_data_file:sock_file write;
allow adbd gad_untrusted_app_data_file:sock_file write;
#line 74
allow adbd appdomain:unix_stream_socket connectto;

# b/18078338 - allow read access to executable types on /system
# to assist with debugging OTA issues.
allow adbd exec_type:file { getattr open read ioctl lock };

# ndk-gdb invokes adb pull of app_process, linker, and libc.so.
allow adbd zygote_exec:file { getattr open read ioctl lock };
allow adbd system_file:file { getattr open read ioctl lock };

allow adbd kernel:security read_policy;
#line 1 "vendor/samsung/common/sepolicy/aosp/app.te"
###
### Domain for all zygote spawned apps
###
### This file is the base policy for all zygote spawned apps.
### Other policy files, such as isolated_app.te, untrusted_app.te, etc
### extend from this policy. Only policies which should apply to ALL
### zygote spawned apps should be added here.
###

# Dalvik Compiler JIT Mapping.
allow appdomain self:process execmem;
allow appdomain ashmem_device:chr_file execute;

# Receive and use open file descriptors inherited from zygote.
allow appdomain zygote:fd use;

# gdbserver for ndk-gdb reads the zygote.
# valgrind needs mmap exec for zygote
allow appdomain zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# gdbserver for ndk-gdb ptrace attaches to app process.
allow appdomain self:process ptrace;

# Read system properties managed by zygote.
allow appdomain zygote_tmpfs:file read;

# Notify zygote of death;
allow appdomain zygote:process sigchld;

# Notify shell and adbd of death when spawned via runas for ndk-gdb.
allow appdomain shell:process sigchld;
allow appdomain adbd:process sigchld;

# child shell or gdbserver pty access for runas.
allow appdomain devpts:chr_file { getattr read write ioctl };

# Use pipes and sockets provided by system_server via binder or local socket.
allow appdomain system_server:fifo_file { { getattr open read ioctl lock } { open append write } };
allow appdomain system_server:unix_stream_socket { read write setopt getattr getopt shutdown };
allow appdomain system_server:tcp_socket { read write getattr getopt shutdown };

# Communication with other apps via fifos
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#allow appdomain appdomain:fifo_file rw_file_perms;

# Communicate with surfaceflinger.
allow appdomain surfaceflinger:unix_stream_socket { read write setopt getattr getopt shutdown };

# App sandbox file accesses.
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#allow appdomain app_data_file:dir create_dir_perms;
#allow appdomain app_data_file:notdevfile_class_set create_file_perms;

# lib subdirectory of /data/data dir is system-owned.
allow appdomain system_data_file:dir { open getattr read search ioctl };
allow appdomain system_data_file:file { execute execute_no_trans open execmod };

# Keychain and user-trusted credentials
allow appdomain keychain_data_file:dir { open getattr read search ioctl };
allow appdomain keychain_data_file:file { getattr open read ioctl lock };
allow appdomain misc_user_data_file:dir { open getattr read search ioctl };
allow appdomain misc_user_data_file:file { getattr open read ioctl lock };

# Access to OEM provided data and apps
allow appdomain oemfs:dir { open getattr read search ioctl };
allow appdomain oemfs:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Execute the shell or other system executables.
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#allow appdomain shell_exec:file rx_file_perms;
allow appdomain system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Execute dex2oat when apps call dexclassloader
allow appdomain dex2oat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Read/write wallpaper file (opened by system).
allow appdomain wallpaper_file:file { getattr read write };

# Write to /data/anr/traces.txt.
allow appdomain anr_data_file:dir search;
allow appdomain anr_data_file:file { open append };

# Allow apps to send dump information to dumpstate
allow appdomain dumpstate:fd use;
allow appdomain dumpstate:unix_stream_socket { read write getopt getattr shutdown };
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#allow appdomain shell_data_file:file { write getattr };

# Write to /proc/net/xt_qtaguid/ctrl file.
allow appdomain qtaguid_proc:file { { getattr open read ioctl lock } { open append write } };
# Everybody can read the xt_qtaguid resource tracking misc dev.
# So allow all apps to read from /dev/xt_qtaguid.
allow appdomain qtaguid_device:chr_file { getattr open read ioctl lock };

# Grant GPU access to all processes started by Zygote.
# They need that to render the standard UI.
allow appdomain gpu_device:chr_file { { { getattr open read ioctl lock } { open append write } } execute };

# Use the Binder.
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#binder_use(appdomain)
# Perform binder IPC to binder services.
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#binder_call(appdomain, binderservicedomain)
# Perform binder IPC to other apps.
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#binder_call(appdomain, appdomain)

# Already connected, unnamed sockets being passed over some other IPC
# hence no sock_file or connectto permission. This appears to be how
# Chrome works, may need to be updated as more apps using isolated services
# are examined.
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#allow appdomain appdomain:unix_stream_socket { getopt getattr read write shutdown };

# Backup ability for every app. BMS opens and passes the fd
# to any app that has backup ability. Hence, no open permissions here.
allow appdomain backup_data_file:file { read write getattr };
allow appdomain cache_backup_file:file { read write getattr };
allow appdomain cache_backup_file:dir getattr;
# Backup ability using 'adb backup'
allow appdomain system_data_file:lnk_file getattr;

# Allow read/stat of /data/media files passed by Binder or local socket IPC.
allow appdomain media_rw_data_file:file { read getattr };

# Read and write /data/data/com.android.providers.telephony files passed over Binder.
allow appdomain radio_data_file:file { read write getattr };

# Read and write system app data files passed over Binder.
# Motivating case was /data/data/com.android.settings/cache/*.jpg for
# cropping or taking user photos.
allow untrusted_app system_app_data_file:file { read write getattr };
allow umcagent_app system_app_data_file:file { read write getattr };
allow vpn_untrusted_app system_app_data_file:file { read write getattr };
allow trustonicpartner_app system_app_data_file:file { read write getattr };
allow llk_untrusted_app system_app_data_file:file { read write getattr };
allow filtered_untrusted_app system_app_data_file:file { read write getattr };
allow filtered_google_app system_app_data_file:file { read write getattr };
allow knox_untrusted_app system_app_data_file:file { read write getattr };
allow irm_app system_app_data_file:file { read write getattr };
allow gad_untrusted_app system_app_data_file:file { read write getattr };
allow carrier_app system_app_data_file:file { read write getattr };
#line 134

# Access SDcard via the fuse mount.
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#allow appdomain fuse:dir create_dir_perms;
#allow appdomain fuse:file create_file_perms;

# Access OBBs (vfat images) mounted by vold (b/17633509)
#SEC_SEforAndroid : Conflict with good requirements, moved to /sepolicy/app.te
#allow appdomain vfat:dir r_dir_perms;
#allow appdomain vfat:file r_file_perms;

# Allow apps to use the USB Accessory interface.
# http://developer.android.com/guide/topics/connectivity/usb/accessory.html
#
# USB devices are first opened by the system server (USBDeviceManagerService)
# and the file descriptor is passed to the right Activity via binder.
allow appdomain usb_device:chr_file { read write getattr ioctl };
allow appdomain usbaccessory_device:chr_file { read write getattr };

# For art.
allow appdomain dalvikcache_data_file:file execute;
allow appdomain dalvikcache_data_file:lnk_file { getattr open read ioctl lock };

# /data/dalvik-cache/profiles
allow appdomain dalvikcache_profiles_data_file:dir { search getattr };
allow appdomain dalvikcache_profiles_data_file:file { { getattr open read ioctl lock } { open append write } };

# Allow any app to read shared RELRO files.
allow appdomain shared_relro_file:dir search;
allow appdomain shared_relro_file:file { getattr open read ioctl lock };

# Allow apps to read/execute installed binaries
allow appdomain apk_data_file:dir { open getattr read search ioctl };
allow appdomain apk_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };

# /data/resource-cache
allow appdomain resourcecache_data_file:file { getattr open read ioctl lock };
allow appdomain resourcecache_data_file:dir { open getattr read search ioctl };

###
### CTS-specific rules
###

# For cts/tools/device-setup/TestDeviceSetup/src/android/tests/getinfo/RootProcessScanner.java.
# Reads /proc/pid/status and statm entries to check that
# no unexpected root processes are running.
# Also for cts/tests/tests/security/src/android/security/cts/VoldExploitTest.java
# Reads /proc/pid/cmdline of vold.
# SEC removed and moved to /sepolicy/app.te
#allow appdomain domain:dir { open read search getattr };
#allow appdomain domain:{ file lnk_file } { open read getattr };

# For cts/tests/tests/permission/src/android/permission/cts/FileSystemPermissionTest.java.
# testRunAsHasCorrectCapabilities
allow appdomain runas_exec:file getattr;
# Others are either allowed elsewhere or not desired.

# For cts/tests/tests/security/src/android/security/cts/SELinuxTest.java
# Check SELinux policy and contexts.

#line 193
allow appdomain selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 193
allow appdomain kernel:security compute_av;
#line 193
allow appdomain self:netlink_selinux_socket *;
#line 193


#line 194
allow appdomain selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 194
allow appdomain kernel:security check_context;
#line 194

# Validate that each process is running in the correct security context.
allow appdomain domain:process getattr;

# logd access

#line 199

#line 199
allow appdomain logdr_socket:sock_file write;
#line 199
allow appdomain logd:unix_stream_socket connectto;
#line 199

#line 199


#line 200
# Group AID_LOG checked by filesystem & logd
#line 200
# to permit control commands
#line 200

#line 200
allow appdomain logd_socket:sock_file write;
#line 200
allow appdomain logd:unix_stream_socket connectto;
#line 200

#line 200

# application inherit logd write socket (urge is to deprecate this long term)
allow appdomain zygote:unix_dgram_socket write;

allow appdomain keystore:keystore_key { test get insert delete exist saw sign verify };


#line 206
 allow keystore appdomain:dir search;
#line 206
 allow keystore appdomain:file { read open };
#line 206
 allow keystore appdomain:process getattr;
#line 206
  
#line 206
# Call the server domain and optionally transfer references to it.
#line 206
allow appdomain keystore:binder { call transfer };
#line 206
# Allow the serverdomain to transfer references to the client on the reply.
#line 206
allow keystore appdomain:binder transfer;
#line 206
# Receive and use open files from the server.
#line 206
allow appdomain keystore:fd use;
#line 206

#line 206


###
### Neverallow rules
###
### These are things that Android apps should NEVER be able to do
###
##SEC_SEforAndroid
#line 370

#line 1 "vendor/samsung/common/sepolicy/aosp/binderservicedomain.te"
# Rules common to all binder service domains

# Allow dumpstate to collect information from binder services
allow binderservicedomain dumpstate:fd use;
allow binderservicedomain dumpstate:unix_stream_socket { read write getopt getattr };
allow binderservicedomain shell_data_file:file { getattr write };

# Allow dumpsys to work from adb shell or the serial console
allow binderservicedomain devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow binderservicedomain console_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Receive and write to a pipe received over Binder from an app.
allow binderservicedomain appdomain:fd use;
allow binderservicedomain appdomain:fifo_file write;

allow binderservicedomain keystore:keystore_key { test get insert delete exist saw sign verify };


#line 18
 allow keystore binderservicedomain:dir search;
#line 18
 allow keystore binderservicedomain:file { read open };
#line 18
 allow keystore binderservicedomain:process getattr;
#line 18
  
#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow binderservicedomain keystore:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow keystore binderservicedomain:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow binderservicedomain keystore:fd use;
#line 18

#line 18

#line 1 "vendor/samsung/common/sepolicy/aosp/bluetooth.te"
# bluetooth subsystem
type bluetooth, domain, newAttr1, newAttr4, newAttr7, newAttr5, newAttr8, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;

#line 3
typeattribute bluetooth appdomain;
#line 3
# Label ashmem objects with our own unique type.
#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type bluetooth_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition bluetooth tmpfs:file bluetooth_tmpfs;
#line 3
allow bluetooth bluetooth_tmpfs:file { read write };
#line 3

#line 3
# Map with PROT_EXEC.
#line 3
allow bluetooth bluetooth_tmpfs:file execute;
#line 3


#line 4
typeattribute bluetooth netdomain;
#line 4


# Data file accesses.
allow bluetooth bluetooth_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bluetooth bluetooth_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Socket creation under /data/misc/bluedroid.
type_transition bluetooth bluetooth_data_file:sock_file bluetooth_socket;
allow bluetooth bluetooth_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# bluetooth factory file accesses.

#line 15
allow bluetooth bluetooth_efs_file:dir { open getattr read search ioctl };
#line 15
allow bluetooth bluetooth_efs_file:{ file lnk_file } { getattr open read ioctl lock };
#line 15


# Device accesses.
allow bluetooth { tun_device uhid_device hci_attach_dev }:chr_file { { getattr open read ioctl lock } { open append write } };

# Other domains that can create and use bluetooth sockets.
# SELinux does not presently define a specific socket class for
# bluetooth sockets, nor does it distinguish among the bluetooth protocols.
# TODO: This should no longer be needed with bluedroid for bluetooth
# but may be getting used for other non-bluetooth sockets that has no
# specific class defined.  Consider taking to specific domains.
allow bluetoothdomain self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# sysfs access.
allow bluetooth sysfs_bluetooth_writable:file { { getattr open read ioctl lock } { open append write } };
allow bluetooth self:capability net_admin;
allow bluetooth self:capability2 wake_alarm;

# Allow clients to use a socket provided by the bluetooth app.
# TODO:  See if this is still required under bluedroid.
allow bluetoothdomain bluetooth:unix_stream_socket { getopt setopt getattr read write ioctl shutdown };

# tethering
allow bluetooth self:tun_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow bluetooth efs_file:dir search;

# Talk to init over the property socket.

#line 42
allow bluetooth property_socket:sock_file write;
#line 42
allow bluetooth init:unix_stream_socket connectto;
#line 42


# proc access.
allow bluetooth proc_bluetooth_writable:file { { getattr open read ioctl lock } { open append write } };

# Allow write access to bluetooth specific properties
allow bluetooth bluetooth_prop:property_service set;
allow bluetooth pan_result_prop:property_service set;
allow bluetooth ctl_dhcp_pan_prop:property_service set;

###
### Neverallow rules
###
### These are things that the bluetooth app should NEVER be able to do
###
##SEC_SEforAndroid
#line 63

#line 1 "vendor/samsung/common/sepolicy/aosp/bootanim.te"
# bootanimation oneshot service
type bootanim, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type bootanim_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init bootanim_exec:file { getattr open read execute };
#line 5
allow init bootanim:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow bootanim bootanim_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow bootanim init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init bootanim:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init bootanim:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init bootanim_exec:process bootanim;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type bootanim_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition bootanim tmpfs:file bootanim_tmpfs;
#line 5
allow bootanim bootanim_tmpfs:file { read write };
#line 5

#line 5



#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow bootanim servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager bootanim:dir search;
#line 7
allow servicemanager bootanim:file { read open };
#line 7
allow servicemanager bootanim:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow bootanim surfaceflinger:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow surfaceflinger bootanim:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow bootanim surfaceflinger:fd use;
#line 8


allow bootanim gpu_device:chr_file { { getattr open read ioctl lock } { open append write } };

# /oem access
allow bootanim oemfs:dir search;
allow bootanim oemfs:file { getattr open read ioctl lock };

allow bootanim audio_device:dir { open getattr read search ioctl };
allow bootanim audio_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/aosp/clatd.te"
# 464xlat daemon
type clatd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type clatd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5
typeattribute clatd netdomain;
#line 5


# Access objects inherited from netd.
allow clatd netd:fd use;
allow clatd netd:fifo_file { read write };
# TODO: Check whether some or all of these sockets should be close-on-exec.
allow clatd netd:netlink_kobject_uevent_socket { read write };
allow clatd netd:netlink_nflog_socket { read write };
allow clatd netd:netlink_route_socket { read write };
allow clatd netd:udp_socket { read write };
allow clatd netd:unix_stream_socket { read write };
allow clatd netd:unix_dgram_socket { read write };

allow clatd self:capability { net_admin net_raw setuid setgid };

allow clatd self:netlink_route_socket nlmsg_write;
allow clatd self:{ packet_socket rawip_socket tun_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow clatd tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/aosp/debuggerd.te"
# debugger interface
type debuggerd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type debuggerd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init debuggerd_exec:file { getattr open read execute };
#line 5
allow init debuggerd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow debuggerd debuggerd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow debuggerd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init debuggerd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init debuggerd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init debuggerd_exec:process debuggerd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type debuggerd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition debuggerd tmpfs:file debuggerd_tmpfs;
#line 5
allow debuggerd debuggerd_tmpfs:file { read write };
#line 5

#line 5

typeattribute debuggerd mlstrustedsubject;
allow debuggerd self:capability { dac_override sys_ptrace chown kill fowner };
allow debuggerd self:capability2 { syslog };
allow debuggerd domain:dir { open getattr read search ioctl };
allow debuggerd domain:file { getattr open read ioctl lock };
allow debuggerd domain:lnk_file read;
allow debuggerd newAttr43:process ptrace;

#line 13
allow debuggerd security_file:dir { open getattr read search ioctl };
allow debuggerd security_spota_file:dir { open getattr read search ioctl };
#line 13
allow debuggerd security_file:file { getattr open read ioctl lock };
allow debuggerd security_spota_file:file { getattr open read ioctl lock };
#line 13

allow debuggerd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow debuggerd system_data_file:dir relabelfrom;
allow debuggerd tombstone_data_file:dir relabelto;
allow debuggerd tombstone_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow debuggerd tombstone_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow debuggerd shared_relro_file:dir { open getattr read search ioctl };
allow debuggerd shared_relro_file:file { getattr open read ioctl lock };
allow debuggerd domain:process { sigstop signal };
allow debuggerd exec_type:file { getattr open read ioctl lock };
# Access app library
allow debuggerd system_data_file:file open;

# Connect to system_server via /data/system/ndebugsocket.

#line 27
allow debuggerd system_ndebug_socket:sock_file write;
#line 27
allow debuggerd system_server:unix_stream_socket connectto;
#line 27



#line 29
 allow debuggerd input_device:dir { open getattr read search ioctl };
#line 29
 allow debuggerd input_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 32


# logd access

#line 35

#line 35
allow debuggerd logdr_socket:sock_file write;
#line 35
allow debuggerd logd:unix_stream_socket connectto;
#line 35

#line 35

#line 1 "vendor/samsung/common/sepolicy/aosp/device.te"
# Device types
type device, dev_type, fs_type, newAttr31, newAttr67, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
type alarm_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type adb_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ashmem_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type audio_device, dev_type, newAttr29, newAttr30, newAttr31, newAttr69;
type binder_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type block_device, dev_type, newAttr28, newAttr29, newAttr31, newAttr69;
type camera_device, dev_type, newAttr29, newAttr30, newAttr31, newAttr69;
type dm_device, dev_type, newAttr29, newAttr30, newAttr31, newAttr69;
type loop_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type radio_device, dev_type, newAttr29, newAttr30, newAttr31, newAttr69;
type ram_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type console_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type cpuctl_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type fscklogs, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type full_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# GPU (used by most UI apps)
type gpu_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type graphics_device, dev_type, newAttr26, newAttr27, newAttr29, newAttr30, newAttr31, newAttr69;
type hw_random_device, dev_type, newAttr31, newAttr69;
type input_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type kmem_device, dev_type, newAttr69;
type log_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type mtd_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type mtp_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type nfc_device, dev_type, newAttr30, newAttr29, newAttr31, newAttr69;
type ptmx_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type kmsg_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type null_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type random_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type sensors_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type serial_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type socket_device, dev_type, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type owntty_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type tty_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type urandom_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type video_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type vcs_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type zero_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type fuse_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type iio_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ion_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type gps_device, dev_type, newAttr29, newAttr30, newAttr31, newAttr69;
type qtaguid_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type watchdog_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type uhid_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type uio_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type tun_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type usbaccessory_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type usb_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type klog_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type properties_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

# All devices have a uart for the hci
# attach service. The uart dev node
# varies per device. This type
# is used in per device policy
type hci_attach_dev, dev_type, newAttr29, newAttr30, newAttr31, newAttr69;

# All devices have a rpmsg device for
# achieving remoteproc and rpmsg modules
type rpmsg_device, dev_type, newAttr29, newAttr30, newAttr31, newAttr69;

# Partition layout block device
type root_block_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

# factory reset protection block device
type frp_block_device, dev_type, newAttr28, newAttr29, newAttr31, newAttr69;
#line 1 "vendor/samsung/common/sepolicy/aosp/dex2oat.te"
# dex2oat
type dex2oat, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type dex2oat_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

allow dex2oat dalvikcache_data_file:file write;
# Read symlinks in /data/dalvik-cache
allow dex2oat dalvikcache_data_file:lnk_file read;
allow dex2oat installd:fd use;

# Read already open asec_apk_file file descriptors passed by installd.
# Also allow reading unlabeled files, to allow for upgrading forward
# locked APKs.
allow dex2oat asec_apk_file:file read;
allow dex2oat unlabeled:file read;
allow dex2oat oemfs:file read;
#line 1 "vendor/samsung/common/sepolicy/aosp/dhcp.te"
type dhcp, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type dhcp_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
type dhcp_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr18, newAttr19, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init dhcp_exec:file { getattr open read execute };
#line 5
allow init dhcp:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow dhcp dhcp_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow dhcp init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init dhcp:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init dhcp:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init dhcp_exec:process dhcp;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type dhcp_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition dhcp tmpfs:file dhcp_tmpfs;
#line 5
allow dhcp dhcp_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute dhcp netdomain;
#line 6


allow dhcp cgroup:dir { create write add_name };
allow dhcp self:capability { setgid setuid net_admin net_raw net_bind_service };
allow dhcp self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow dhcp self:netlink_route_socket nlmsg_write;
allow dhcp shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow dhcp system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
# For /proc/sys/net/ipv4/conf/*/promote_secondaries
allow dhcp proc_net:file write;
allow dhcp dhcp_prop:property_service set;
allow dhcp pan_result_prop:property_service set;

#line 18
allow dhcp property_socket:sock_file write;
#line 18
allow dhcp init:unix_stream_socket connectto;
#line 18


type_transition dhcp system_data_file:{ dir file } dhcp_data_file;
allow dhcp dhcp_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dhcp dhcp_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# PAN connections
allow dhcp netd:fd use;
allow dhcp netd:fifo_file { { getattr open read ioctl lock } { open append write } };
allow dhcp netd:{ { udp_socket unix_dgram_socket } unix_stream_socket } { read write };
allow dhcp netd:{ netlink_kobject_uevent_socket netlink_route_socket netlink_nflog_socket } { read write };
#line 1 "vendor/samsung/common/sepolicy/aosp/dnsmasq.te"
# DNS, DHCP services
type dnsmasq, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type dnsmasq_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5
typeattribute dnsmasq netdomain;
#line 5


# TODO:  Run with dhcp group to avoid need for dac_override.
allow dnsmasq self:capability dac_override;

allow dnsmasq self:capability { net_admin net_raw net_bind_service setgid setuid };

allow dnsmasq dhcp_data_file:dir { open search write add_name remove_name };
allow dnsmasq dhcp_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Inherit and use open files from netd.
allow dnsmasq netd:fd use;
allow dnsmasq netd:fifo_file { read write };
# TODO: Investigate whether these inherited sockets should be closed on exec.
allow dnsmasq netd:netlink_kobject_uevent_socket { read write };
allow dnsmasq netd:netlink_nflog_socket { read write };
allow dnsmasq netd:netlink_route_socket { read write };
allow dnsmasq netd:unix_stream_socket { read write };
allow dnsmasq netd:unix_dgram_socket { read write };
allow dnsmasq netd:udp_socket { read write };
#line 1 "vendor/samsung/common/sepolicy/aosp/domain.te"
# Rules for all domains.

# Allow reaping by init.
allow domain init:process sigchld;

# Read access to properties mapping.
allow domain kernel:fd use;
allow domain tmpfs:file { read getattr };

# Search /storage/emulated tmpfs mount.
allow domain tmpfs:dir { open getattr read search ioctl };

# Intra-domain accesses.
allow domain self:process { fork sigchld sigkill sigstop signull signal getsched setsched getsession getpgid setpgid getcap setcap getattr setrlimit };
#line 31
allow domain self:fd use;
allow domain self:dir { open getattr read search ioctl };
allow domain self:lnk_file { getattr open read ioctl lock };
allow domain self:{ fifo_file file } { { getattr open read ioctl lock } { open append write } };
allow domain self:unix_dgram_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } sendto };
allow domain self:unix_stream_socket { { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } } connectto };

# Inherit or receive open files from others.
allow domain init:fd use;
allow domain system_server:fd use;

# Connect to adbd and use a socket transferred from it.
# This is used for e.g. adb backup/restore.
allow domain adbd:unix_stream_socket connectto;
allow domain adbd:fd use;
allow domain adbd:unix_stream_socket { getattr getopt read write shutdown };


#line 48
  # Same as adbd rules above, except allow su to do the same thing
#line 48
 allow domain su:unix_stream_socket connectto;
#line 48
 allow domain su:fd use;
#line 48
 allow domain su:unix_stream_socket { getattr getopt read write shutdown };
#line 48

#line 48
  
#line 48
# Call the server domain and optionally transfer references to it.
#line 48
allow domain su:binder { call transfer };
#line 48
# Allow the serverdomain to transfer references to the client on the reply.
#line 48
allow su domain:binder transfer;
#line 48
# Receive and use open files from the server.
#line 48
allow domain su:fd use;
#line 48

#line 48

#line 48
  # Running something like "pm dump com.android.bluetooth" requires
#line 48
  # fifo writes
#line 48
 allow domain su:fifo_file { write getattr };
#line 48

#line 48
  # allow "gdbserver --attach" to work for su.
#line 48
 allow domain su:process sigchld;
#line 48

#line 48
  # Allow writing coredumps to /cores/*
#line 48
 allow domain coredump_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 48
 allow domain coredump_file:dir { { open getattr read search ioctl } add_name write };
#line 66


###
### Talk to debuggerd.
###
allow domain debuggerd:process sigchld;
allow domain debuggerd:unix_stream_socket connectto;

# Root fs.
allow domain rootfs:dir { open getattr read search ioctl };
allow domain rootfs:file { getattr open read ioctl lock };
allow domain rootfs:lnk_file { getattr open read ioctl lock };

# Device accesses.
allow domain device:dir search;
allow domain dev_type:lnk_file { getattr open read ioctl lock };
allow domain devpts:dir search;
allow domain device:file read;
allow domain socket_device:dir { open getattr read search ioctl };
allow domain owntty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain null_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain zero_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain ashmem_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain binder_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain ptmx_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain log_device:dir search;
allow domain log_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain alarm_device:chr_file { getattr open read ioctl lock };
allow domain urandom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain random_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain properties_device:file { getattr open read ioctl lock };

# logd access

#line 99

#line 99
 allow domain logd_debug:file { open append write };
#line 99

#line 99

#line 99
allow domain logdw_socket:sock_file write;
#line 99
allow domain logd:unix_dgram_socket sendto;
#line 99

#line 99


# Filesystem accesses.
allow domain fs_type:filesystem getattr;
allow domain fs_type:dir getattr;

# System file accesses.
allow domain system_file:dir { open getattr read search ioctl };
allow domain system_file:file { getattr open read ioctl lock };
allow domain system_file:file execute;
allow domain system_file:lnk_file { getattr open read ioctl lock };

# Read files already opened under /data.
allow domain system_data_file:dir { search getattr };
allow domain system_data_file:file { getattr read };
allow domain system_data_file:lnk_file { getattr open read ioctl lock };

# Read apk files under /data/app.
allow domain apk_data_file:dir { getattr search };
allow domain apk_data_file:file { getattr open read ioctl lock };
allow domain apk_data_file:lnk_file { getattr open read ioctl lock };

# Read /data/dalvik-cache.
allow domain dalvikcache_data_file:dir { search getattr };
allow domain dalvikcache_data_file:file { getattr open read ioctl lock };

# Read already opened /cache files.
allow domain cache_file:dir { open getattr read search ioctl };
allow domain cache_file:file { getattr read };
allow domain cache_file:lnk_file { getattr open read ioctl lock };

# Read timezone related information

#line 131
allow domain zoneinfo_data_file:dir { open getattr read search ioctl };
#line 131
allow domain zoneinfo_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 131


# For /acct/uid/*/tasks.
allow domain cgroup:dir { search write };
allow domain cgroup:file { open append write };

#Allow access to ion memory allocation device
allow domain ion_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Read access to pseudo filesystems.

#line 141
allow domain proc:dir { open getattr read search ioctl };
#line 141
allow domain proc:{ file lnk_file } { getattr open read ioctl lock };
#line 141


#line 142
allow domain sysfs:dir { open getattr read search ioctl };
#line 142
allow domain sysfs:{ file lnk_file } { getattr open read ioctl lock };
#line 142


#line 143
allow domain sysfs_devices_system_cpu:dir { open getattr read search ioctl };
#line 143
allow domain sysfs_devices_system_cpu:{ file lnk_file } { getattr open read ioctl lock };
#line 143


#line 144
allow domain inotify:dir { open getattr read search ioctl };
#line 144
allow domain inotify:{ file lnk_file } { getattr open read ioctl lock };
#line 144


#line 145
allow domain cgroup:dir { open getattr read search ioctl };
#line 145
allow domain cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 145


#line 146
allow domain proc_net:dir { open getattr read search ioctl };
#line 146
allow domain proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 146

allow domain proc_cpuinfo:file { getattr open read ioctl lock };

# debugfs access
allow domain debugfs:dir { open getattr read search ioctl };
allow domain debugfs:file { open append write };

# Get SELinux enforcing status.
allow domain selinuxfs:dir { open getattr read search ioctl };
allow domain selinuxfs:file { getattr open read ioctl lock };

# /data/security files
allow domain security_file:dir { search getattr };
allow domain security_spota_file:dir { search getattr };
#line 159
allow domain security_file:file getattr;
allow domain security_spota_file:file getattr;
#line 160
allow domain security_file:lnk_file { getattr open read ioctl lock };
allow domain security_spota_file:lnk_file { getattr open read ioctl lock };
#line 161

# World readable asec image contents
allow domain asec_public_file:file { getattr open read ioctl lock };
allow domain { asec_public_file asec_apk_file }:dir { open getattr read search ioctl };

allow domain servicemanager:service_manager list;
allow domain service_manager_type:service_manager find;

###
### neverallow rules
###
##SEC_SEforAndroid
#line 318

#line 1 "vendor/samsung/common/sepolicy/aosp/drmserver.te"
# drmserver - DRM service
type drmserver, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type drmserver_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init drmserver_exec:file { getattr open read execute };
#line 5
allow init drmserver:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow drmserver drmserver_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow drmserver init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init drmserver:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init drmserver:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init drmserver_exec:process drmserver;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type drmserver_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition drmserver tmpfs:file drmserver_tmpfs;
#line 5
allow drmserver drmserver_tmpfs:file { read write };
#line 5

#line 5

typeattribute drmserver mlstrustedsubject;


#line 8
typeattribute drmserver netdomain;
#line 8


# Perform Binder IPC to system server.

#line 11
# Call the servicemanager and transfer references to it.
#line 11
allow drmserver servicemanager:binder { call transfer };
#line 11
# servicemanager performs getpidcon on clients.
#line 11
allow servicemanager drmserver:dir search;
#line 11
allow servicemanager drmserver:file { read open };
#line 11
allow servicemanager drmserver:process getattr;
#line 11
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 11
# all domains in domain.te.
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow drmserver system_server:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow system_server drmserver:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow drmserver system_server:fd use;
#line 12


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow drmserver appdomain:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow appdomain drmserver:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow drmserver appdomain:fd use;
#line 13


#line 14
typeattribute drmserver binderservicedomain;
#line 14


# Perform Binder IPC to mediaserver

#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow drmserver mediaserver:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow mediaserver drmserver:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow drmserver mediaserver:fd use;
#line 17


allow drmserver sdcard_type:dir search;
allow drmserver drm_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver drm_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow drmserver app_data_file:file { read write getattr };
allow drmserver gad_untrusted_app_data_file:file { read write getattr };
#line 24
allow drmserver sdcard_type:file { read write getattr };

#line 25
allow drmserver efs_file:dir { open getattr read search ioctl };
#line 25
allow drmserver efs_file:{ file lnk_file } { getattr open read ioctl lock };
#line 25


type drmserver_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

# /data/app/tlcd_sock socket file.
# Clearly, /data/app is the most logical place to create a socket.  Not.
allow drmserver apk_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
type_transition drmserver apk_data_file:sock_file drmserver_socket;
allow drmserver drmserver_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver tee:unix_stream_socket connectto;
# Delete old socket file if present.
allow drmserver apk_data_file:sock_file unlink;

# After taking a video, drmserver looks at the video file.

#line 39
allow drmserver media_rw_data_file:dir { open getattr read search ioctl };
#line 39
allow drmserver media_rw_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 39


# Read resources from open apk files passed over Binder.
allow drmserver apk_data_file:file { read getattr };
allow drmserver asec_apk_file:file { read getattr };

# Read /data/data/com.android.providers.telephony files passed over Binder.
allow drmserver radio_data_file:file { read getattr };

allow drmserver drmserver_service:service_manager add;

# /oem access
allow drmserver oemfs:dir search;
allow drmserver oemfs:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/aosp/dumpstate.te"
# dumpstate
type dumpstate, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type dumpstate_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init dumpstate_exec:file { getattr open read execute };
#line 5
allow init dumpstate:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow dumpstate dumpstate_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow dumpstate init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init dumpstate:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init dumpstate:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init dumpstate_exec:process dumpstate;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type dumpstate_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition dumpstate tmpfs:file dumpstate_tmpfs;
#line 5
allow dumpstate dumpstate_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute dumpstate netdomain;
#line 6


#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow dumpstate servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager dumpstate:dir search;
#line 7
allow servicemanager dumpstate:file { read open };
#line 7
allow servicemanager dumpstate:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


# Drop privileges by switching UID / GID
allow dumpstate self:capability { setuid setgid };

# Allow dumpstate to scan through /proc/pid for all processes

#line 13
allow dumpstate domain:dir { open getattr read search ioctl };
#line 13
allow dumpstate domain:{ file lnk_file } { getattr open read ioctl lock };
#line 13


# Send signals to processes
allow dumpstate self:capability kill;

# Allow executing files on system, such as:
#   /system/bin/toolbox
#   /system/bin/logcat
#   /system/bin/dumpsys
allow dumpstate system_file:file execute_no_trans;

# Create and write into /data/anr/
allow dumpstate self:capability { dac_override chown fowner fsetid };
allow dumpstate anr_data_file:dir { { { open getattr read search ioctl } { open search write add_name remove_name } } relabelto };
allow dumpstate anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate system_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom };

# Allow reading /data/system/uiderrors.txt
# TODO: scope this down.
allow dumpstate system_data_file:file { getattr open read ioctl lock };

# Read dmesg
allow dumpstate self:capability2 syslog;
allow dumpstate kernel:system syslog_read;

# Read /sys/fs/pstore/console-ramoops
allow dumpstate pstorefs:dir { open getattr read search ioctl };
allow dumpstate pstorefs:file { getattr open read ioctl lock };

# Get process attributes
allow dumpstate domain:process getattr;

# Signal java processes to dump their stack
allow dumpstate { appdomain system_server }:process signal;

# Signal native processes to dump their stack.
# This list comes from native_processes_to_dump in dumpstate/utils.c
allow dumpstate { drmserver mediaserver sdcardd surfaceflinger }:process signal;

# Execute and transition to the vdc domain

#line 53
# Allow the necessary permissions.
#line 53

#line 53
# Old domain may exec the file and transition to the new domain.
#line 53
allow dumpstate vdc_exec:file { getattr open read execute };
#line 53
allow dumpstate vdc:process transition;
#line 53
# New domain is entered by executing the file.
#line 53
allow vdc vdc_exec:file { entrypoint open read execute getattr };
#line 53
# New domain can send SIGCHLD to its caller.
#line 53
allow vdc dumpstate:process sigchld;
#line 53
# Enable AT_SECURE, i.e. libc secure mode.
#line 53
dontaudit dumpstate vdc:process noatsecure;
#line 53
# XXX dontaudit candidate but requires further study.
#line 53
allow dumpstate vdc:process { siginh rlimitinh };
#line 53

#line 53
# Make the transition occur by default.
#line 53
type_transition dumpstate vdc_exec:process vdc;
#line 53


# Vibrate the device after we're done collecting the bugreport
# /sys/class/timed_output/vibrator/enable
# TODO: create a new file class, instead of allowing write access to all of /sys
allow dumpstate sysfs:file { open append write };

# Other random bits of data we want to collect
allow dumpstate qtaguid_proc:file { getattr open read ioctl lock };
allow dumpstate debugfs:file { getattr open read ioctl lock };

# Allow dumpstate to make binder calls to any binder service

#line 65
# Call the server domain and optionally transfer references to it.
#line 65
allow dumpstate binderservicedomain:binder { call transfer };
#line 65
# Allow the serverdomain to transfer references to the client on the reply.
#line 65
allow binderservicedomain dumpstate:binder transfer;
#line 65
# Receive and use open files from the server.
#line 65
allow dumpstate binderservicedomain:fd use;
#line 65


#line 66
# Call the server domain and optionally transfer references to it.
#line 66
allow dumpstate appdomain:binder { call transfer };
#line 66
# Allow the serverdomain to transfer references to the client on the reply.
#line 66
allow appdomain dumpstate:binder transfer;
#line 66
# Receive and use open files from the server.
#line 66
allow dumpstate appdomain:fd use;
#line 66


# Reading /proc/PID/maps of other processes
allow dumpstate self:capability sys_ptrace;

# Allow the bugreport service to create a file in
# /data/data/com.android.shell/files/bugreports/bugreport
allow dumpstate shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dumpstate shell_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Run a shell.
allow dumpstate shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# For running am and similar framework commands.
# Run /system/bin/app_process.
allow dumpstate zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
# Dalvik Compiler JIT.
allow dumpstate ashmem_device:chr_file execute;
allow dumpstate dumpstate_tmpfs:file execute;
allow dumpstate self:process execmem;
# For art.
allow dumpstate dalvikcache_data_file:file execute;

# Dumpstate calls screencap, which grabs a screenshot. Needs gpu access
allow dumpstate gpu_device:chr_file { { getattr open read ioctl lock } { open append write } };

# logd access

#line 93

#line 93
allow dumpstate logdr_socket:sock_file write;
#line 93
allow dumpstate logd:unix_stream_socket connectto;
#line 93

#line 93


#line 94
# Group AID_LOG checked by filesystem & logd
#line 94
# to permit control commands
#line 94

#line 94
allow dumpstate logd_socket:sock_file write;
#line 94
allow dumpstate logd:unix_stream_socket connectto;
#line 94

#line 94


# Read network state info files.
allow dumpstate net_data_file:dir search;
allow dumpstate net_data_file:file { getattr open read ioctl lock };

# Access /data/tombstones.
allow dumpstate tombstone_data_file:dir { open getattr read search ioctl };
allow dumpstate tombstone_data_file:file { getattr open read ioctl lock };

# Access /system/bin executables to determine type of executable.
allow dumpstate { drmserver_exec mediaserver_exec sdcardd_exec surfaceflinger_exec }:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/aosp/file.te"
# Filesystem types
type labeledfs, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
type pipefs, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type sockfs, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type rootfs, fs_type, newAttr67, newAttr68, newAttr71, newAttr72, newAttr73, newAttr84;
type proc, fs_type, newAttr67, newAttr68, newAttr71, newAttr72, newAttr73, newAttr81, newAttr77, newAttr69;
# Security-sensitive proc nodes that should not be writable to most.
type proc_security, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr73, newAttr74, newAttr75, newAttr76, newAttr69;
# proc, sysfs, or other nodes that permit configuration of kernel usermodehelpers.
type usermodehelper, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr76, newAttr69;
type qtaguid_proc, fs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type proc_bluetooth_writable, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type proc_cpuinfo, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
type proc_net, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr81, newAttr77, newAttr76, newAttr69;
type proc_sysrq, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type selinuxfs, fs_type, newAttr67, newAttr68, newAttr71, newAttr72, newAttr73, newAttr77, newAttr69;
type cgroup, fs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr69, newAttr83;
type sysfs, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr71, newAttr72, newAttr73, newAttr77, newAttr85, newAttr69;
type sysfs_writable, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr85, newAttr69;
type sysfs_bluetooth_writable, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_nfc_power_writable, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_wake_lock, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr85, newAttr69;
# /sys/devices/system/cpu
type sysfs_devices_system_cpu, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
# /sys/module/lowmemorykiller
type sysfs_lowmemorykiller, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type inotify, fs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr81, newAttr77, newAttr76, newAttr69;
type devpts, fs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type tmpfs, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr84, newAttr76, newAttr69;
type shm, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type mqueue, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr81, newAttr77, newAttr76, newAttr69;
type fuse, sdcard_type, fs_type, mlstrustedobject, newAttr68, newAttr70, newAttr71, newAttr74, newAttr75, newAttr76, newAttr82, newAttr69;
type vfat, sdcard_type, fs_type, mlstrustedobject, newAttr68, newAttr70, newAttr71, newAttr74, newAttr75, newAttr76, newAttr82, newAttr69;
typealias fuse alias sdcard_internal;
typealias vfat alias sdcard_external;
type debugfs, fs_type, mlstrustedobject, newAttr67, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
type pstorefs, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
type functionfs, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
type oemfs, fs_type, contextmount_type, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr76;
type usbfs, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;

# File types
type unlabeled, file_type, newAttr56, newAttr57, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
# Default type for anything under /system.
type system_file, file_type, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# /cores for coredumps on userdebug / eng builds
type coredump_file, file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# Default type for anything under /data.
type system_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr24, newAttr18, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
# /data/.layout_version or other installd-created files that
# are created in a system_data_file directory.
type install_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr24, newAttr17, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# /data/drm - DRM plugin data
type drm_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr18, newAttr19, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# /data/adb - adb debugging files
type adb_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# /data/anr - ANR traces
type anr_data_file, file_type, data_file_type, mlstrustedobject, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# /data/tombstones - core dumps
type tombstone_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69, newAttr90;
# /data/app - user-installed apps
type apk_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr18, newAttr19, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type apk_tmp_file, file_type, data_file_type, mlstrustedobject, newAttr20, newAttr23, newAttr22, newAttr21, newAttr18, newAttr19, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# /data/app-private - forward-locked apps
type apk_private_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr18, newAttr19, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type apk_private_tmp_file, file_type, data_file_type, mlstrustedobject, newAttr20, newAttr23, newAttr22, newAttr21, newAttr18, newAttr19, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# /data/dalvik-cache
type dalvikcache_data_file, file_type, data_file_type, newAttr20, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# /data/dalvik-cache/profiles
type dalvikcache_profiles_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# /data/resource-cache
type resourcecache_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# /data/local - writable by shell
type shell_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr24, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr62, newAttr63, newAttr66, newAttr69;
# /data/gps
type gps_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr18, newAttr19, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# /data/property
type property_data_file, file_type, data_file_type, newAttr20, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr66, newAttr69;

# /data/misc subdirectories
type adb_keys_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type audio_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type bluetooth_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr18, newAttr19, newAttr24, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr62, newAttr65, newAttr66, newAttr69;
type camera_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type keychain_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr24, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89;
type keystore_data_file, file_type, data_file_type, newAttr56, newAttr57, newAttr66, newAttr69;
type media_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type media_rw_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type misc_user_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89;
type net_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type nfc_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr62, newAttr63, newAttr65, newAttr66, newAttr69;
type radio_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type shared_relro_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type systemkeys_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr24, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type vpn_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
type wifi_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr24, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type zoneinfo_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;

# Compatibility with type names used in vanilla Android 4.3 and 4.4.
typealias audio_data_file alias audio_firmware_file;
# /data/data subdirectories - app sandboxes
type app_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr62, newAttr66, newAttr69;
type gad_untrusted_app_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr24, newAttr56, newAttr57, newAttr58, newAttr60, newAttr63, newAttr62, newAttr66, newAttr69;
#line 103
# /data/data subdirectory for system UID apps.
type system_app_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
# Compatibility with type name used in Android 4.3 and 4.4.
##SEC_SEforAndroid
#typealias app_data_file alias platform_app_data_file;
#typealias app_data_file alias download_file;
type platform_app_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

# Default type for anything under /cache
type cache_file, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# Type for /cache/.*\.{data|restore} and default
# type for anything under /cache/backup
type cache_backup_file, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# Default type for anything under /efs
type efs_file, file_type, newAttr18, newAttr19, newAttr51, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
# Type for wallpaper file.
type wallpaper_file, file_type, mlstrustedobject, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
# /mnt/asec
type asec_apk_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# Elements of asec files (/mnt/asec) that are world readable
type asec_public_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# /data/app-asec
type asec_image_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# /data/backup and /data/secure/backup
type backup_data_file, file_type, data_file_type, mlstrustedobject, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# For /data/security
type security_file, file_type, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr66, newAttr69;
type security_spota_file, file_type, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr66, newAttr69;
#line 130
# All devices have bluetooth efs files. But they
# vary per device, so this type is used in per
# device policy
type bluetooth_efs_file, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

# Socket types
type adbd_socket, file_type, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type bluetooth_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type dnsproxyd_socket, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type dumpstate_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type fwmarkd_socket, file_type, mlstrustedobject, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type gps_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type installd_socket, file_type, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type lmkd_socket, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type logd_debug, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type logd_socket, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type logdr_socket, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type logdw_socket, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type mdns_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type mdnsd_socket, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type mtpd_socket, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type netd_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type property_socket, file_type, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type racoon_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type rild_socket, file_type, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type rild_debug_socket, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type system_wpa_socket, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type system_ndebug_socket, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type vold_socket, file_type, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type wpa_socket, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type zygote_socket, file_type, newAttr18, newAttr19, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

# UART (for GPS) control proc file
type gps_control, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

# Allow files to be created in their appropriate filesystems.
allow fs_type self:filesystem associate;
allow sysfs_type sysfs:filesystem associate;
allow file_type labeledfs:filesystem associate;
allow file_type tmpfs:filesystem associate;
allow file_type rootfs:filesystem associate;
allow dev_type tmpfs:filesystem associate;

##SEC_SEforAndroid
#line 183

#line 1 "vendor/samsung/common/sepolicy/aosp/gpsd.te"
# gpsd - GPS daemon
type gpsd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type gpsd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init gpsd_exec:file { getattr open read execute };
#line 5
allow init gpsd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow gpsd gpsd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow gpsd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init gpsd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init gpsd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init gpsd_exec:process gpsd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type gpsd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition gpsd tmpfs:file gpsd_tmpfs;
#line 5
allow gpsd gpsd_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute gpsd netdomain;
#line 6

allow gpsd gps_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow gpsd gps_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
# Socket is created by the daemon, not by init, and under /data/gps,
# not under /dev/socket.
type_transition gpsd gps_data_file:sock_file gps_socket;
allow gpsd gps_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
# XXX Label sysfs files with a specific type?
allow gpsd sysfs:file { { getattr open read ioctl lock } { open append write } };

allow gpsd gps_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Execute the shell or system commands.
allow gpsd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow gpsd system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 1 "vendor/samsung/common/sepolicy/aosp/hci_attach.te"
type hci_attach, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type hci_attach_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init hci_attach_exec:file { getattr open read execute };
#line 4
allow init hci_attach:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow hci_attach hci_attach_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow hci_attach init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init hci_attach:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init hci_attach:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init hci_attach_exec:process hci_attach;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type hci_attach_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition hci_attach tmpfs:file hci_attach_tmpfs;
#line 4
allow hci_attach hci_attach_tmpfs:file { read write };
#line 4

#line 4


allow hci_attach kernel:system module_request;
allow hci_attach hci_attach_dev:chr_file { { getattr open read ioctl lock } { open append write } };
allow hci_attach bluetooth_efs_file:dir { open getattr read search ioctl };
allow hci_attach bluetooth_efs_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/aosp/healthd.te"
# healthd seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type healthd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;


#line 5
type_transition healthd device:chr_file klog_device "__kmsg__";
#line 5
allow healthd klog_device:chr_file { create open write unlink };
#line 5
allow healthd device:dir { write add_name remove_name };
#line 5

# /dev/__null__ created by init prior to policy load,
# open fd inherited by healthd.
allow healthd tmpfs:chr_file { read write };

allow healthd self:capability { net_admin mknod sys_tty_config };

#line 11
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 11
allow healthd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };
#line 11
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 11
allow healthd self:capability2 block_suspend;
#line 11

allow healthd self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow healthd servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager healthd:dir search;
#line 13
allow servicemanager healthd:file { read open };
#line 13
allow servicemanager healthd:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13


#line 14
typeattribute healthd binderservicedomain;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow healthd system_server:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow system_server healthd:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow healthd system_server:fd use;
#line 15


# Write to state file.
# TODO:  Split into a separate type?
allow healthd sysfs:file write;

###
### healthd: charger mode
###

# Read /sys/fs/pstore/console-ramoops
# Don't worry about overly broad permissions for now, as there's
# only one file in /sys/fs/pstore
allow healthd pstorefs:dir { open getattr read search ioctl };
allow healthd pstorefs:file { getattr open read ioctl lock };

allow healthd graphics_device:dir { open getattr read search ioctl };
allow healthd graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow healthd input_device:dir { open getattr read search ioctl };
allow healthd input_device:chr_file { getattr open read ioctl lock };
allow healthd tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow healthd ashmem_device:chr_file execute;
allow healthd self:process execmem;
allow healthd proc_sysrq:file { { getattr open read ioctl lock } { open append write } };
allow healthd self:capability sys_boot;

allow healthd healthd_service:service_manager add;

# Healthd needs to tell init to continue the boot
# process when running in charger mode.

#line 45
allow healthd property_socket:sock_file write;
#line 45
allow healthd init:unix_stream_socket connectto;
#line 45

allow healthd system_prop:property_service set;
#line 1 "vendor/samsung/common/sepolicy/aosp/hostapd.te"
# userspace wifi access points
type hostapd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type hostapd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5
typeattribute hostapd netdomain;
#line 5


allow hostapd self:capability { net_admin net_raw setuid setgid };
allow hostapd self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hostapd self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hostapd self:netlink_route_socket nlmsg_write;

allow hostapd wifi_data_file:file { { getattr open read ioctl lock } { open append write } };
allow hostapd wifi_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
type_transition hostapd wifi_data_file:dir wpa_socket "sockets";
type_transition hostapd wifi_data_file:dir wpa_socket "hostapd";
allow hostapd wpa_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow hostapd wpa_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow hostapd netd:fd use;
allow hostapd netd:udp_socket { read write };
allow hostapd netd:fifo_file { read write };
# TODO: Investigate whether these inherited sockets should be closed on exec.
allow hostapd netd:netlink_kobject_uevent_socket { read write };
allow hostapd netd:netlink_nflog_socket { read write };
allow hostapd netd:netlink_route_socket { read write };
allow hostapd netd:unix_stream_socket { read write };
allow hostapd netd:unix_dgram_socket { read write };
#line 1 "vendor/samsung/common/sepolicy/aosp/init.te"
# init switches to init domain (via init.rc).
type init, domain, newAttr32, newAttr33, newAttr34, newAttr39, newAttr40, newAttr44, newAttr49, newAttr50;
# init is unconfined.

#line 4
typeattribute init mlstrustedsubject;
#line 4
typeattribute init unconfineddomain;
#line 4


#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type init_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition init tmpfs:file init_tmpfs;
#line 5
allow init init_tmpfs:file { read write };
#line 5


allow init self:capability { sys_rawio mknod };

# Run helpers from / or /system without changing domain.
# We do not include exec_type here since generally those
# should always involve a domain transition.
allow init rootfs:file execute_no_trans;
allow init system_file:file execute_no_trans;

# Running e2fsck or mkswap via fs_mgr.
allow init dev_type:blk_file { { getattr open read ioctl lock } { open append write } };

# Mounting filesystems.
# Only allow relabelto for types used in context= mount options,
# which should all be assigned the contextmount_type attribute.
# This can be done in device-specific policy via type or typeattribute
# declarations.
allow init fs_type:filesystem ~relabelto;
allow init unlabeled:filesystem ~relabelto;
allow init contextmount_type:filesystem relabelto;

# Allow read-only access to context= mounted filesystems.
allow init contextmount_type:dir { open getattr read search ioctl };
allow init contextmount_type:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };

# restorecon /adb_keys or any other rootfs files to a more specific type.
allow init rootfs:file relabelfrom;

# restorecon and restorecon_recursive calls from init.rc files.
# system/core/init.rc requires at least cache_file and data_file_type.
# init.<board>.rc files often include device-specific types, so
# we just allow all file types except /system files here.
allow init newAttr66:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } relabelto;
allow init sysfs_type:{ dir file lnk_file } relabelto;

# Unlabeled file access for upgrades from 4.2.
allow init unlabeled:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom };
allow init unlabeled:{ file lnk_file sock_file fifo_file } { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom };

# Create /data/security from init.rc post-fs-data.
allow init security_file:dir { create setattr };
allow init security_spota_file:dir { create setattr };
#line 47

# setprop selinux.reload_policy 1 from init.rc post-fs-data.
allow init security_prop:property_service set;

# Reload policy upon setprop selinux.reload_policy 1.

#line 52
allow init security_file:dir { open getattr read search ioctl };
allow init security_spota_file:dir { open getattr read search ioctl };
#line 52
allow init security_file:{ file lnk_file } { getattr open read ioctl lock };
allow init security_spota_file:{ file lnk_file } { getattr open read ioctl lock };
#line 52

allow init kernel:security load_policy;

# Any operation that can modify the kernel ring buffer, e.g. clear
# or a read that consumes the messages that were read.
allow init kernel:system syslog_mod;

# Set usermodehelpers and /proc security settings.
allow init usermodehelper:file { { getattr open read ioctl lock } { open append write } };
allow init proc_security:file { { getattr open read ioctl lock } { open append write } };

# Transitions to seclabel processes in init.rc

#line 64
# Old domain may exec the file and transition to the new domain.
#line 64
allow init rootfs:file { getattr open read execute };
#line 64
allow init adbd:process transition;
#line 64
# New domain is entered by executing the file.
#line 64
allow adbd rootfs:file { entrypoint open read execute getattr };
#line 64
# New domain can send SIGCHLD to its caller.
#line 64
allow adbd init:process sigchld;
#line 64
# Enable AT_SECURE, i.e. libc secure mode.
#line 64
dontaudit init adbd:process noatsecure;
#line 64
# XXX dontaudit candidate but requires further study.
#line 64
allow init adbd:process { siginh rlimitinh };
#line 64


#line 65
# Old domain may exec the file and transition to the new domain.
#line 65
allow init rootfs:file { getattr open read execute };
#line 65
allow init healthd:process transition;
#line 65
# New domain is entered by executing the file.
#line 65
allow healthd rootfs:file { entrypoint open read execute getattr };
#line 65
# New domain can send SIGCHLD to its caller.
#line 65
allow healthd init:process sigchld;
#line 65
# Enable AT_SECURE, i.e. libc secure mode.
#line 65
dontaudit init healthd:process noatsecure;
#line 65
# XXX dontaudit candidate but requires further study.
#line 65
allow init healthd:process { siginh rlimitinh };
#line 65

#line 68


#line 69
# Old domain may exec the file and transition to the new domain.
#line 69
allow init shell_exec:file { getattr open read execute };
#line 69
allow init shell:process transition;
#line 69
# New domain is entered by executing the file.
#line 69
allow shell shell_exec:file { entrypoint open read execute getattr };
#line 69
# New domain can send SIGCHLD to its caller.
#line 69
allow shell init:process sigchld;
#line 69
# Enable AT_SECURE, i.e. libc secure mode.
#line 69
dontaudit init shell:process noatsecure;
#line 69
# XXX dontaudit candidate but requires further study.
#line 69
allow init shell:process { siginh rlimitinh };
#line 69


#line 70
# Old domain may exec the file and transition to the new domain.
#line 70
allow init rootfs:file { getattr open read execute };
#line 70
allow init ueventd:process transition;
#line 70
# New domain is entered by executing the file.
#line 70
allow ueventd rootfs:file { entrypoint open read execute getattr };
#line 70
# New domain can send SIGCHLD to its caller.
#line 70
allow ueventd init:process sigchld;
#line 70
# Enable AT_SECURE, i.e. libc secure mode.
#line 70
dontaudit init ueventd:process noatsecure;
#line 70
# XXX dontaudit candidate but requires further study.
#line 70
allow init ueventd:process { siginh rlimitinh };
#line 70


#line 71
# Old domain may exec the file and transition to the new domain.
#line 71
allow init rootfs:file { getattr open read execute };
#line 71
allow init watchdogd:process transition;
#line 71
# New domain is entered by executing the file.
#line 71
allow watchdogd rootfs:file { entrypoint open read execute getattr };
#line 71
# New domain can send SIGCHLD to its caller.
#line 71
allow watchdogd init:process sigchld;
#line 71
# Enable AT_SECURE, i.e. libc secure mode.
#line 71
dontaudit init watchdogd:process noatsecure;
#line 71
# XXX dontaudit candidate but requires further study.
#line 71
allow init watchdogd:process { siginh rlimitinh };
#line 71


# Certain domains need LD_PRELOAD passed from init.
# https://android-review.googlesource.com/94851
# For now, allow it to most domains.
# TODO: scope this down.
allow init newAttr44:process noatsecure;

# Support "adb shell stop"
allow init domain:process sigkill;

# Init creates keystore's directory on boot, and walks through
# the directory as part of a recursive restorecon.
allow init keystore_data_file:dir { open create read getattr setattr search };
allow init keystore_data_file:file { getattr };

# Init creates /data/local/tmp at boot
allow init shell_data_file:dir { open create read getattr setattr search };
allow init shell_data_file:file { getattr };

# Use setexeccon(), setfscreatecon(), and setsockcreatecon().
# setexec is for services with seclabel options.
# setfscreate is for labeling directories and socket files.
# setsockcreate is for labeling local/unix domain sockets.
allow init self:process { setexec setfscreate setsockcreate };

# Create /data/property and files within it.
allow init property_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init property_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Set any property.
## SEC_SEforAndroid
allow init newAttr80:property_service set;

# Run "ifup lo" to bring up the localhost interface
allow init self:udp_socket { create ioctl };

# This line seems suspect, as it should not really need to
# set scheduling parameters for a kernel domain task.
allow init kernel:process setsched;

###
### neverallow rules
###
## SEC_SEforAndroid
#line 122

#line 1 "vendor/samsung/common/sepolicy/aosp/inputflinger.te"
# inputflinger
type inputflinger, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type inputflinger_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init inputflinger_exec:file { getattr open read execute };
#line 5
allow init inputflinger:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow inputflinger inputflinger_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow inputflinger init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init inputflinger:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init inputflinger:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init inputflinger_exec:process inputflinger;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type inputflinger_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition inputflinger tmpfs:file inputflinger_tmpfs;
#line 5
allow inputflinger inputflinger_tmpfs:file { read write };
#line 5

#line 5


#line 6
# Call the servicemanager and transfer references to it.
#line 6
allow inputflinger servicemanager:binder { call transfer };
#line 6
# servicemanager performs getpidcon on clients.
#line 6
allow servicemanager inputflinger:dir search;
#line 6
allow servicemanager inputflinger:file { read open };
#line 6
allow servicemanager inputflinger:process getattr;
#line 6
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 6
# all domains in domain.te.
#line 6


#line 7
typeattribute inputflinger binderservicedomain;
#line 7



#line 9
# Call the server domain and optionally transfer references to it.
#line 9
allow inputflinger system_server:binder { call transfer };
#line 9
# Allow the serverdomain to transfer references to the client on the reply.
#line 9
allow system_server inputflinger:binder transfer;
#line 9
# Receive and use open files from the server.
#line 9
allow inputflinger system_server:fd use;
#line 9


allow inputflinger inputflinger_service:service_manager add;
#line 1 "vendor/samsung/common/sepolicy/aosp/installd.te"
# installer daemon
type installd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type installd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init installd_exec:file { getattr open read execute };
#line 5
allow init installd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow installd installd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow installd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init installd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init installd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init installd_exec:process installd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type installd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition installd tmpfs:file installd_tmpfs;
#line 5
allow installd installd_tmpfs:file { read write };
#line 5

#line 5

typeattribute installd mlstrustedsubject;
allow installd self:capability { chown dac_override fowner fsetid setgid setuid };
allow installd apk_data_file:file rename;
allow installd apk_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd apk_data_file:lnk_file { create read unlink };
allow installd asec_apk_file:file { getattr open read ioctl lock };
allow installd apk_tmp_file:file { getattr open read ioctl lock };
allow installd oemfs:dir { open getattr read search ioctl };
allow installd oemfs:file { getattr open read ioctl lock };
allow installd system_file:file { getattr execute execute_no_trans };
allow installd cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
# Check validity of SELinux context before use.

#line 18
allow installd selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 18
allow installd kernel:security check_context;
#line 18

# Read /seapp_contexts and /data/security/seapp_contexts

#line 20
allow installd security_file:dir { open getattr read search ioctl };
allow installd security_spota_file:dir { open getattr read search ioctl };
#line 20
allow installd security_file:file { getattr open read ioctl lock };
allow installd security_spota_file:file { getattr open read ioctl lock };
#line 20


# Search /data/app-asec and stat files in it.
allow installd asec_image_file:dir search;
allow installd asec_image_file:file getattr;

# Create /data/user and /data/user/0 if necessary.
# Also required to initially create /data/data subdirectories
# and lib symlinks before the setfilecon call.  May want to
# move symlink creation after setfilecon in installd.
allow installd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd system_data_file:lnk_file { create setattr unlink };

# Upgrade /data/media for multi-user if necessary.
allow installd media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd media_rw_data_file:file { getattr unlink };
# restorecon new /data/media directory.
allow installd system_data_file:dir relabelfrom;
allow installd media_rw_data_file:dir relabelto;

# Upgrade /data/misc/keychain for multi-user if necessary.
allow installd misc_user_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd misc_user_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd keychain_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd keychain_data_file:file { { getattr open read ioctl lock } unlink };

# Create /data/.layout_version.* file
type_transition installd system_data_file:file install_data_file;
allow installd install_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Create files under /data/dalvik-cache.
allow installd dalvikcache_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd dalvikcache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Create /data/dalvik-cache/profiles.
allow installd dalvikcache_profiles_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow installd dalvikcache_profiles_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Create files under /data/resource-cache.
allow installd resourcecache_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow installd resourcecache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Run dex2oat in its own sandbox.

#line 63
# Allow the necessary permissions.
#line 63

#line 63
# Old domain may exec the file and transition to the new domain.
#line 63
allow installd dex2oat_exec:file { getattr open read execute };
#line 63
allow installd dex2oat:process transition;
#line 63
# New domain is entered by executing the file.
#line 63
allow dex2oat dex2oat_exec:file { entrypoint open read execute getattr };
#line 63
# New domain can send SIGCHLD to its caller.
#line 63
allow dex2oat installd:process sigchld;
#line 63
# Enable AT_SECURE, i.e. libc secure mode.
#line 63
dontaudit installd dex2oat:process noatsecure;
#line 63
# XXX dontaudit candidate but requires further study.
#line 63
allow installd dex2oat:process { siginh rlimitinh };
#line 63

#line 63
# Make the transition occur by default.
#line 63
type_transition installd dex2oat_exec:process dex2oat;
#line 63

# dex2oat needs LD_PRELOAD, passed down from init
# https://android-review.googlesource.com/94851
allow installd dex2oat:process noatsecure;

# Upgrade from unlabeled userdata.
# Just need enough to remove and/or relabel it.
allow installd unlabeled:dir { getattr search relabelfrom { { open getattr read search ioctl } { open search write add_name remove_name } } rmdir };
allow installd unlabeled:{ file lnk_file sock_file fifo_file } { getattr relabelfrom rename unlink setattr };
# Read pkg.apk file for input during dexopt.
allow installd unlabeled:file { getattr open read ioctl lock };

# Upgrade from before system_app_data_file was used for system UID apps.
# Just need enough to relabel it and to unlink removed package files.
# Directory access covered by earlier rule above.
allow installd system_data_file:{ file lnk_file sock_file fifo_file } { getattr relabelfrom unlink };

# Manage /data/data subdirectories, including initially labeling them
# upon creation via setfilecon or running restorecon_recursive,
# setting owner/mode, creating symlinks within them, and deleting them
# upon package uninstall.
# Types extracted from seapp_contexts type= fields.
allow installd { system_app_data_file bluetooth_data_file nfc_data_file radio_data_file shell_data_file app_data_file gad_untrusted_app_data_file }:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom relabelto };
allow installd { system_app_data_file bluetooth_data_file nfc_data_file radio_data_file shell_data_file app_data_file gad_untrusted_app_data_file }:lnk_file { create setattr getattr unlink rename relabelfrom relabelto };
allow installd { system_app_data_file bluetooth_data_file nfc_data_file radio_data_file shell_data_file app_data_file gad_untrusted_app_data_file }:{ file sock_file fifo_file } { getattr unlink rename relabelfrom relabelto setattr };
#line 1 "vendor/samsung/common/sepolicy/aosp/install_recovery.te"
# service flash_recovery in init.rc
type install_recovery, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type install_recovery_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init install_recovery_exec:file { getattr open read execute };
#line 5
allow init install_recovery:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow install_recovery install_recovery_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow install_recovery init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init install_recovery:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init install_recovery:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init install_recovery_exec:process install_recovery;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type install_recovery_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition install_recovery tmpfs:file install_recovery_tmpfs;
#line 5
allow install_recovery install_recovery_tmpfs:file { read write };
#line 5

#line 5


allow install_recovery self:capability dac_override;

# /system/bin/install-recovery.sh is a shell script.
# Needs to execute /system/bin/sh
allow install_recovery shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Execute /system/bin/applypatch
allow install_recovery system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Update the recovery block device
# TODO: Limit this to only recovery block device when we
# create an appropriate label for it.
allow install_recovery block_device:dir search;
allow install_recovery block_device:blk_file { { getattr open read ioctl lock } { open append write } };

# Create and delete /cache/saved.file
allow install_recovery cache_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow install_recovery cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Write to /proc/sys/vm/drop_caches
# TODO: create a specific label for this file instead of allowing
# write for all /proc files.
allow install_recovery proc:file { open append write };
#line 1 "vendor/samsung/common/sepolicy/aosp/isolated_app.te"
###
### Services with isolatedProcess=true in their manifest.
###
### This file defines the rules for isolated apps. An "isolated
### app" is an APP with UID between AID_ISOLATED_START (99000)
### and AID_ISOLATED_END (99999).
###
### isolated_app includes all the appdomain rules, plus the
### additional following rules:
###

type isolated_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 13
typeattribute isolated_app appdomain;
#line 13
# Label ashmem objects with our own unique type.
#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type isolated_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition isolated_app tmpfs:file isolated_app_tmpfs;
#line 13
allow isolated_app isolated_app_tmpfs:file { read write };
#line 13

#line 13
# Map with PROT_EXEC.
#line 13
allow isolated_app isolated_app_tmpfs:file execute;
#line 13


#line 14
typeattribute isolated_app netdomain;
#line 14


# read and write access to app_data_file is already
# granted via app.te. Allow execute.
# Needed to allow dlopen() from Chrome renderer processes.
# See b/15902433 for details.
allow isolated_app app_data_file:file execute;
allow isolated_app gad_untrusted_app_data_file:file execute;
#line 1 "vendor/samsung/common/sepolicy/aosp/kernel.te"
# Life begins with the kernel.
type kernel, domain, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr43, newAttr44, newAttr49, newAttr50;

# Run /init before we have switched domains.
allow kernel rootfs:file execute_no_trans;

# setcon to init domain.
allow kernel self:process setcurrent;
allow kernel init:process dyntransition;

# The kernel is unconfined.

#line 12
typeattribute kernel mlstrustedsubject;
#line 12
typeattribute kernel unconfineddomain;
#line 12


# cgroup filesystem initialization prior to setting the cgroup root directory label.
allow kernel unlabeled:dir search;

# Mount usbfs.
allow kernel usbfs:filesystem mount;

# init direct restorecon calls prior to switching to init domain
# /dev and /dev/socket
allow kernel { device socket_device }:dir relabelto;
# /dev/__properties__
allow kernel properties_device:file relabelto;
# /sys
allow kernel sysfs:{ dir file lnk_file } relabelfrom;
allow kernel sysfs_type:{ dir file lnk_file } relabelto;

# Initial setenforce by init prior to switching to init domain.
# We use dontaudit instead of allow to prevent a kernel spawned userspace
# process from turning off SELinux once enabled.
dontaudit kernel self:security setenforce;

# Set checkreqprot by init.rc prior to switching to init domain.
allow kernel self:security setcheckreqprot;

# MTP sync (b/15835289)
# kernel thread "loop0", used by the loop block device, for ASECs (b/17158723)
allow kernel sdcard_type:file { read write };

# Allow the kernel to read OBB files from app directories. (b/17428116)
# Kernel thread "loop0" reads a vold supplied file descriptor.
# Fixes CTS tests:
#  * android.os.storage.cts.StorageManagerTest#testMountAndUnmountObbNormal
#  * android.os.storage.cts.StorageManagerTest#testMountAndUnmountTwoObbs
allow kernel app_data_file:file read;
allow kernel gad_untrusted_app_data_file:file read;
#line 47

###
### neverallow rules
###
## SEC_SEforAndroid
#line 69

#line 1 "vendor/samsung/common/sepolicy/aosp/keystore.te"
type keystore, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type keystore_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# keystore daemon

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init keystore_exec:file { getattr open read execute };
#line 5
allow init keystore:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow keystore keystore_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow keystore init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init keystore:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init keystore:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init keystore_exec:process keystore;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type keystore_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition keystore tmpfs:file keystore_tmpfs;
#line 5
allow keystore keystore_tmpfs:file { read write };
#line 5

#line 5

typeattribute keystore mlstrustedsubject;

#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow keystore servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager keystore:dir search;
#line 7
allow servicemanager keystore:file { read open };
#line 7
allow servicemanager keystore:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
typeattribute keystore binderservicedomain;
#line 8

allow keystore keystore_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow keystore keystore_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow keystore keystore_exec:file { getattr };
allow keystore tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow keystore tee:unix_stream_socket connectto;

###
### Neverallow rules
###
### Protect ourself from others
###
## SEC_SEforAndroid
#line 29

allow keystore keystore_service:service_manager add;

# Check SELinux permissions.

#line 33
allow keystore selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 33
allow keystore kernel:security compute_av;
#line 33
allow keystore self:netlink_selinux_socket *;
#line 33

#line 1 "vendor/samsung/common/sepolicy/aosp/lmkd.te"
# lmkd low memory killer daemon
type lmkd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr43, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type lmkd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init lmkd_exec:file { getattr open read execute };
#line 5
allow init lmkd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow lmkd lmkd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow lmkd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init lmkd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init lmkd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init lmkd_exec:process lmkd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type lmkd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition lmkd tmpfs:file lmkd_tmpfs;
#line 5
allow lmkd lmkd_tmpfs:file { read write };
#line 5

#line 5


allow lmkd self:capability { dac_override sys_resource kill };

# lmkd locks itself in memory, to prevent it from being
# swapped out and unable to kill other memory hogs.
# system/core commit b28ff9131363f7b4a698990da5748b2a88c3ed35
# b/16236289
allow lmkd self:capability ipc_lock;

## Open and write to /proc/PID/oom_score_adj
## TODO: maybe scope this down?

#line 17
allow lmkd appdomain:dir { open getattr read search ioctl };
#line 17
allow lmkd appdomain:{ file lnk_file } { getattr open read ioctl lock };
#line 17

allow lmkd appdomain:file write;

#line 19
allow lmkd system_server:dir { open getattr read search ioctl };
#line 19
allow lmkd system_server:{ file lnk_file } { getattr open read ioctl lock };
#line 19

allow lmkd system_server:file write;

## Writes to /sys/module/lowmemorykiller/parameters/minfree
allow lmkd sysfs_lowmemorykiller:file { open append write };

# Send kill signals
allow lmkd appdomain:process sigkill;

# Clean up old cgroups
allow lmkd cgroup:dir { remove_name rmdir };

# Set self to SCHED_FIFO
allow lmkd self:capability sys_nice;

### neverallow rules
## SEC_SEforAndroid
#line 39

#line 1 "vendor/samsung/common/sepolicy/aosp/logd.te"
# android user-space log manager
type logd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type logd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init logd_exec:file { getattr open read execute };
#line 5
allow init logd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow logd logd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow logd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init logd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init logd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init logd_exec:process logd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type logd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition logd tmpfs:file logd_tmpfs;
#line 5
allow logd logd_tmpfs:file { read write };
#line 5

#line 5


allow logd self:capability { setuid setgid sys_nice audit_control };
allow logd self:capability2 syslog;
allow logd self:netlink_audit_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_write };
allow logd kernel:system syslog_read;
allow logd kmsg_device:chr_file { open append write };


#line 13
allow logd domain:dir { open getattr read search ioctl };
#line 13
allow logd domain:{ file lnk_file } { getattr open read ioctl lock };
#line 13



#line 15
  # Debug output
#line 15
  type_transition logd device:file logd_debug;
#line 15
 allow logd device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 15
 allow logd logd_debug:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 20


###
### Neverallow rules
###
### logd should NEVER do any of this
## SEC_SEforAndroid
#line 39

#line 1 "vendor/samsung/common/sepolicy/aosp/mdnsd.te"
# mdns daemon
type mdnsd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type mdnsd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init mdnsd_exec:file { getattr open read execute };
#line 5
allow init mdnsd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow mdnsd mdnsd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow mdnsd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init mdnsd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init mdnsd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init mdnsd_exec:process mdnsd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type mdnsd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition mdnsd tmpfs:file mdnsd_tmpfs;
#line 5
allow mdnsd mdnsd_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute mdnsd netdomain;
#line 6

#line 1 "vendor/samsung/common/sepolicy/aosp/mediaserver.te"
# mediaserver - multimedia daemon
type mediaserver, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mediaserver_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

typeattribute mediaserver mlstrustedsubject;


#line 7
typeattribute mediaserver netdomain;
#line 7


#line 8

#line 8
# Allow the necessary permissions.
#line 8

#line 8
# Old domain may exec the file and transition to the new domain.
#line 8
allow init mediaserver_exec:file { getattr open read execute };
#line 8
allow init mediaserver:process transition;
#line 8
# New domain is entered by executing the file.
#line 8
allow mediaserver mediaserver_exec:file { entrypoint open read execute getattr };
#line 8
# New domain can send SIGCHLD to its caller.
#line 8
allow mediaserver init:process sigchld;
#line 8
# Enable AT_SECURE, i.e. libc secure mode.
#line 8
dontaudit init mediaserver:process noatsecure;
#line 8
# XXX dontaudit candidate but requires further study.
#line 8
allow init mediaserver:process { siginh rlimitinh };
#line 8

#line 8
# Make the transition occur by default.
#line 8
type_transition init mediaserver_exec:process mediaserver;
#line 8

#line 8

#line 8
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 8
type mediaserver_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 8
type_transition mediaserver tmpfs:file mediaserver_tmpfs;
#line 8
allow mediaserver mediaserver_tmpfs:file { read write };
#line 8

#line 8


#line 9
allow mediaserver property_socket:sock_file write;
#line 9
allow mediaserver init:unix_stream_socket connectto;
#line 9



#line 11
allow mediaserver sdcard_type:dir { open getattr read search ioctl };
#line 11
allow mediaserver sdcard_type:{ file lnk_file } { getattr open read ioctl lock };
#line 11



#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow mediaserver servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager mediaserver:dir search;
#line 13
allow servicemanager mediaserver:file { read open };
#line 13
allow servicemanager mediaserver:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow mediaserver binderservicedomain:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow binderservicedomain mediaserver:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow mediaserver binderservicedomain:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow mediaserver appdomain:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow appdomain mediaserver:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow mediaserver appdomain:fd use;
#line 15


#line 16
typeattribute mediaserver binderservicedomain;
#line 16


allow mediaserver self:process execmem;
allow mediaserver kernel:system module_request;
allow mediaserver media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver media_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver app_data_file:dir search;
allow mediaserver gad_untrusted_app_data_file:dir search;
#line 23
allow mediaserver app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow mediaserver gad_untrusted_app_data_file:file { { getattr open read ioctl lock } { open append write } };
#line 24
allow mediaserver sdcard_type:file write;
allow mediaserver gpu_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver video_device:dir { open getattr read search ioctl };
allow mediaserver video_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver audio_device:dir { open getattr read search ioctl };
allow mediaserver tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver audio_prop:property_service set;

# Access audio devices at all.
allow mediaserver audio_device:chr_file { { getattr open read ioctl lock } { open append write } };

# XXX Label with a specific type?
allow mediaserver sysfs:file { { getattr open read ioctl lock } { open append write } };

# Read resources from open apk files passed over Binder.
allow mediaserver apk_data_file:file { read getattr };
allow mediaserver asec_apk_file:file { read getattr };

# Read /data/data/com.android.providers.telephony files passed over Binder.
allow mediaserver radio_data_file:file { read getattr };

# Use pipes passed over Binder from app domains.
allow mediaserver appdomain:fifo_file { getattr read write };

# Access camera device.
allow mediaserver camera_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver rpmsg_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Inter System processes communicate over named pipe (FIFO)
allow mediaserver system_server:fifo_file { getattr open read ioctl lock };

# Camera data

#line 56
allow mediaserver camera_data_file:dir { open getattr read search ioctl };
#line 56
allow mediaserver camera_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 56


#line 57
allow mediaserver media_rw_data_file:dir { open getattr read search ioctl };
#line 57
allow mediaserver media_rw_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 57


# Grant access to audio files to mediaserver
allow mediaserver audio_data_file:dir { { open getattr read search ioctl } add_name write };
allow mediaserver audio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Read/[write] to /proc/net/xt_qtaguid/ctrl and /dev/xt_qtaguid
allow mediaserver qtaguid_proc:file { { getattr open read ioctl lock } { open append write } };
allow mediaserver qtaguid_device:chr_file { getattr open read ioctl lock };

# Allow abstract socket connection
allow mediaserver rild:unix_stream_socket { connectto read write setopt };

# Needed on some devices for playing DRM protected content,
# but seems expected and appropriate for all devices.

#line 72
allow mediaserver drmserver_socket:sock_file write;
#line 72
allow mediaserver drmserver:unix_stream_socket connectto;
#line 72


# Needed on some devices for playing audio on paired BT device,
# but seems appropriate for all devices.

#line 76
allow mediaserver bluetooth_socket:sock_file write;
#line 76
allow mediaserver bluetooth:unix_stream_socket connectto;
#line 76


# Connect to tee service.
allow mediaserver tee:unix_stream_socket connectto;

allow mediaserver mediaserver_service:service_manager add;

# /oem access
allow mediaserver oemfs:dir search;
allow mediaserver oemfs:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/aosp/mtp.te"
# vpn tunneling protocol manager
type mtp, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type mtp_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init mtp_exec:file { getattr open read execute };
#line 5
allow init mtp:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow mtp mtp_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow mtp init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init mtp:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init mtp:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init mtp_exec:process mtp;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type mtp_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition mtp tmpfs:file mtp_tmpfs;
#line 5
allow mtp mtp_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute mtp netdomain;
#line 6


# pptp policy
allow mtp self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow mtp self:capability net_raw;
allow mtp ppp:process signal;
allow mtp vpn_data_file:dir search;
#line 1 "vendor/samsung/common/sepolicy/aosp/netd.te"
# network manager
type netd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type netd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init netd_exec:file { getattr open read execute };
#line 5
allow init netd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow netd netd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow netd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init netd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init netd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init netd_exec:process netd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type netd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition netd tmpfs:file netd_tmpfs;
#line 5
allow netd netd_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute netd netdomain;
#line 6


allow netd self:capability { net_admin net_raw kill };
# Note: fsetid is deliberately not included above. fsetid checks are
# triggered by chmod on a directory or file owned by a group other
# than one of the groups assigned to the current process to see if
# the setgid bit should be cleared, regardless of whether the setgid
# bit was even set.  We do not appear to truly need this capability
# for netd to operate.  Uncomment the dontaudit rule below after
# sufficient testing of the fsetid removal.
# dontaudit netd self:capability fsetid;

allow netd self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_route_socket nlmsg_write;
allow netd self:netlink_nflog_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow netd system_file:file { getattr execute execute_no_trans };
allow netd devpts:chr_file { { getattr open read ioctl lock } { open append write } };

# For /proc/sys/net/ipv[46]/route/flush.
allow netd proc_net:file write;

# For /sys/modules/bcmdhd/parameters/firmware_path
# XXX Split into its own type.
allow netd sysfs:file write;

# Set dhcp lease for PAN connection

#line 33
allow netd property_socket:sock_file write;
#line 33
allow netd init:unix_stream_socket connectto;
#line 33

allow netd dhcp_prop:property_service set;
allow netd system_prop:property_service set;
## SEC_SEforAndroid
#auditallow netd system_prop:property_service set;

# Connect to PAN

#line 40
# Allow the necessary permissions.
#line 40

#line 40
# Old domain may exec the file and transition to the new domain.
#line 40
allow netd dhcp_exec:file { getattr open read execute };
#line 40
allow netd dhcp:process transition;
#line 40
# New domain is entered by executing the file.
#line 40
allow dhcp dhcp_exec:file { entrypoint open read execute getattr };
#line 40
# New domain can send SIGCHLD to its caller.
#line 40
allow dhcp netd:process sigchld;
#line 40
# Enable AT_SECURE, i.e. libc secure mode.
#line 40
dontaudit netd dhcp:process noatsecure;
#line 40
# XXX dontaudit candidate but requires further study.
#line 40
allow netd dhcp:process { siginh rlimitinh };
#line 40

#line 40
# Make the transition occur by default.
#line 40
type_transition netd dhcp_exec:process dhcp;
#line 40

allow netd dhcp:process signal;

# Needed to update /data/misc/wifi/hostapd.conf
# TODO: See what we can do to reduce the need for
# these capabilities
allow netd self:capability { dac_override chown fowner };
allow netd wifi_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netd wifi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

# Needed to update /data/misc/net/rt_tables
allow netd net_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netd net_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

# Allow netd to spawn hostapd in it's own domain

#line 55
# Allow the necessary permissions.
#line 55

#line 55
# Old domain may exec the file and transition to the new domain.
#line 55
allow netd hostapd_exec:file { getattr open read execute };
#line 55
allow netd hostapd:process transition;
#line 55
# New domain is entered by executing the file.
#line 55
allow hostapd hostapd_exec:file { entrypoint open read execute getattr };
#line 55
# New domain can send SIGCHLD to its caller.
#line 55
allow hostapd netd:process sigchld;
#line 55
# Enable AT_SECURE, i.e. libc secure mode.
#line 55
dontaudit netd hostapd:process noatsecure;
#line 55
# XXX dontaudit candidate but requires further study.
#line 55
allow netd hostapd:process { siginh rlimitinh };
#line 55

#line 55
# Make the transition occur by default.
#line 55
type_transition netd hostapd_exec:process hostapd;
#line 55

allow netd hostapd:process signal;

# Allow netd to spawn dnsmasq in it's own domain

#line 59
# Allow the necessary permissions.
#line 59

#line 59
# Old domain may exec the file and transition to the new domain.
#line 59
allow netd dnsmasq_exec:file { getattr open read execute };
#line 59
allow netd dnsmasq:process transition;
#line 59
# New domain is entered by executing the file.
#line 59
allow dnsmasq dnsmasq_exec:file { entrypoint open read execute getattr };
#line 59
# New domain can send SIGCHLD to its caller.
#line 59
allow dnsmasq netd:process sigchld;
#line 59
# Enable AT_SECURE, i.e. libc secure mode.
#line 59
dontaudit netd dnsmasq:process noatsecure;
#line 59
# XXX dontaudit candidate but requires further study.
#line 59
allow netd dnsmasq:process { siginh rlimitinh };
#line 59

#line 59
# Make the transition occur by default.
#line 59
type_transition netd dnsmasq_exec:process dnsmasq;
#line 59

allow netd dnsmasq:process signal;

# Allow netd to start clatd in its own domain

#line 63
# Allow the necessary permissions.
#line 63

#line 63
# Old domain may exec the file and transition to the new domain.
#line 63
allow netd clatd_exec:file { getattr open read execute };
#line 63
allow netd clatd:process transition;
#line 63
# New domain is entered by executing the file.
#line 63
allow clatd clatd_exec:file { entrypoint open read execute getattr };
#line 63
# New domain can send SIGCHLD to its caller.
#line 63
allow clatd netd:process sigchld;
#line 63
# Enable AT_SECURE, i.e. libc secure mode.
#line 63
dontaudit netd clatd:process noatsecure;
#line 63
# XXX dontaudit candidate but requires further study.
#line 63
allow netd clatd:process { siginh rlimitinh };
#line 63

#line 63
# Make the transition occur by default.
#line 63
type_transition netd clatd_exec:process clatd;
#line 63

allow netd clatd:process signal;

allow netd ctl_mdnsd_prop:property_service set;

# Allow netd to operate on sockets that are passed to it.
allow netd netdomain:{ tcp_socket udp_socket rawip_socket dccp_socket tun_socket } { read write getattr setattr getopt setopt };
allow netd netdomain:fd use;

###
### Neverallow rules
###
### netd should NEVER do any of this
## SEC_SEforAndroid
#line 89

#line 1 "vendor/samsung/common/sepolicy/aosp/net.te"
# Network types
type node, node_type;
type netif, netif_type;
type port, port_type;

# Use network sockets.
allow netdomain self:tcp_socket { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } };
allow netdomain self:{ udp_socket rawip_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
# Connect to ports.
allow netdomain port_type:tcp_socket name_connect;
# Bind to ports.
allow netdomain node_type:{ tcp_socket udp_socket } node_bind;
allow netdomain port_type:udp_socket name_bind;
allow netdomain port_type:tcp_socket name_bind;
# See changes to the routing table.
allow netdomain self:netlink_route_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_read };

# Talks to netd via dnsproxyd socket.

#line 19
allow netdomain dnsproxyd_socket:sock_file write;
#line 19
allow netdomain netd:unix_stream_socket connectto;
#line 19


# Talks to netd via fwmarkd socket.

#line 22
allow netdomain fwmarkd_socket:sock_file write;
#line 22
allow netdomain netd:unix_stream_socket connectto;
#line 22


# Connect to mdnsd via mdnsd socket.

#line 25
allow netdomain mdnsd_socket:sock_file write;
#line 25
allow netdomain mdnsd:unix_stream_socket connectto;
#line 25

#line 1 "vendor/samsung/common/sepolicy/aosp/nfc.te"
# nfc subsystem
type nfc, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;

#line 3
typeattribute nfc appdomain;
#line 3
# Label ashmem objects with our own unique type.
#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type nfc_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition nfc tmpfs:file nfc_tmpfs;
#line 3
allow nfc nfc_tmpfs:file { read write };
#line 3

#line 3
# Map with PROT_EXEC.
#line 3
allow nfc nfc_tmpfs:file execute;
#line 3


#line 4
typeattribute nfc netdomain;
#line 4


#line 5
typeattribute nfc binderservicedomain;
#line 5


# Set NFC properties

#line 8
allow nfc property_socket:sock_file write;
#line 8
allow nfc init:unix_stream_socket connectto;
#line 8

allow nfc nfc_prop:property_service set;

# NFC device access.
allow nfc nfc_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Data file accesses.
allow nfc nfc_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow nfc nfc_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow nfc sysfs_nfc_power_writable:file { { getattr open read ioctl lock } { open append write } };
allow nfc sysfs:file write;

allow nfc nfc_service:service_manager add;
#line 1 "vendor/samsung/common/sepolicy/aosp/platform_app.te"
###
### Apps signed with the platform key.
###

type platform_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;
type s_platform_app, domain, newAttr1, newAttr4, newAttr8, newAttr5, newAttr7, newAttr6, newAttr3, newAttr2, newAttr9, newAttr12, newAttr13, newAttr14, newAttr10, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;

#line 6
typeattribute platform_app appdomain;
typeattribute s_platform_app appdomain;
#line 6
# Label ashmem objects with our own unique type.
#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type platform_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition platform_app tmpfs:file platform_app_tmpfs;
type_transition s_platform_app tmpfs:file platform_app_tmpfs;
#line 6
allow platform_app platform_app_tmpfs:file { read write };
allow s_platform_app platform_app_tmpfs:file { read write };
#line 6

#line 6
# Map with PROT_EXEC.
#line 6
allow platform_app platform_app_tmpfs:file execute;
allow s_platform_app platform_app_tmpfs:file execute;
#line 6

# Access the network.

#line 8
typeattribute platform_app netdomain;
typeattribute s_platform_app netdomain;
#line 8

# Access bluetooth.

#line 10
typeattribute platform_app bluetoothdomain;
typeattribute s_platform_app bluetoothdomain;
#line 10

# Read from /data/local/tmp or /data/data/com.android.shell.
allow platform_app shell_data_file:dir search;
allow s_platform_app shell_data_file:dir search;
#line 13
allow platform_app shell_data_file:file { open getattr read };
allow s_platform_app shell_data_file:file { open getattr read };
#line 14
# Populate /data/app/vmdl*.tmp, /data/app-private/vmdl*.tmp files
# created by system server.
allow platform_app { apk_tmp_file apk_private_tmp_file }:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_platform_app { apk_tmp_file apk_private_tmp_file }:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 17
allow platform_app { apk_tmp_file apk_private_tmp_file }:file { { getattr open read ioctl lock } { open append write } };
allow s_platform_app { apk_tmp_file apk_private_tmp_file }:file { { getattr open read ioctl lock } { open append write } };
#line 18
allow platform_app apk_private_data_file:dir search;
allow s_platform_app apk_private_data_file:dir search;
#line 19
# ASEC
allow platform_app asec_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_platform_app asec_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 21
allow platform_app asec_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_platform_app asec_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 22

# Access to /data/media.
allow platform_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_platform_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 25
allow platform_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_platform_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 26

# Write to /cache.
allow platform_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_platform_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 29
allow platform_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_platform_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 1 "vendor/samsung/common/sepolicy/aosp/ppp.te"
# Point to Point Protocol daemon
type ppp, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type ppp_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ppp_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow mtp ppp_exec:file { getattr open read execute };
#line 5
allow mtp ppp:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow ppp ppp_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow ppp mtp:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit mtp ppp:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow mtp ppp:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition mtp ppp_exec:process ppp;
#line 5



#line 7
typeattribute ppp netdomain;
#line 7


allow ppp mtp:socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow ppp mtp:unix_dgram_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow ppp ppp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ppp self:capability net_admin;
allow ppp system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ppp vpn_data_file:dir { open search write add_name remove_name };
allow ppp vpn_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ppp mtp:fd use;
#line 1 "vendor/samsung/common/sepolicy/aosp/property.te"
type default_prop, property_type, newAttr80;
type shell_prop, property_type, newAttr79, newAttr80;
type debug_prop, property_type, newAttr79, newAttr80;
type debuggerd_prop, property_type, newAttr79, newAttr80;
type dhcp_prop, property_type, newAttr79, newAttr80;
type fingerprint_prop, property_type, newAttr79, newAttr80;
type radio_prop, property_type, newAttr79, newAttr80;
type net_radio_prop, property_type, newAttr79, newAttr80;
type system_radio_prop, property_type, newAttr79, newAttr80;
type system_prop, property_type, newAttr79, newAttr80;
type vold_prop, property_type, newAttr79, newAttr80;
type ctl_bootanim_prop, property_type, newAttr79, newAttr80;
type ctl_default_prop, property_type, newAttr79, newAttr80;
type ctl_dhcp_pan_prop, property_type, newAttr79, newAttr80;
type ctl_dumpstate_prop, property_type, newAttr79, newAttr80;
type ctl_fuse_prop, property_type, newAttr79, newAttr80;
type ctl_mdnsd_prop, property_type, newAttr79, newAttr80;
type ctl_rildaemon_prop, property_type, newAttr79, newAttr80;
type ctl_bugreport_prop, property_type, newAttr79, newAttr80;
type audio_prop, property_type, newAttr79, newAttr80;
type logd_prop, property_type, newAttr79, newAttr80;
type security_prop, property_type, newAttr80;
type bluetooth_prop, property_type, newAttr79, newAttr80;
type pan_result_prop, property_type, newAttr79, newAttr80;
type powerctl_prop, property_type, newAttr79, newAttr80;
type nfc_prop, property_type, newAttr79, newAttr80;
## SEC_SEforAndroid
typealias radio_prop alias rild_prop;
#line 1 "vendor/samsung/common/sepolicy/aosp/racoon.te"
# IKE key management daemon
type racoon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type racoon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init racoon_exec:file { getattr open read execute };
#line 5
allow init racoon:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow racoon racoon_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow racoon init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init racoon:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init racoon:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init racoon_exec:process racoon;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type racoon_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition racoon tmpfs:file racoon_tmpfs;
#line 5
allow racoon racoon_tmpfs:file { read write };
#line 5

#line 5

typeattribute racoon mlstrustedsubject;


#line 8
typeattribute racoon netdomain;
#line 8



#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow racoon servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager racoon:dir search;
#line 10
allow servicemanager racoon:file { read open };
#line 10
allow servicemanager racoon:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


allow racoon tun_device:chr_file { getattr open read ioctl lock };
allow racoon cgroup:dir { add_name create };
allow racoon kernel:system module_request;

allow racoon self:key_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow racoon self:tun_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow racoon self:capability { net_admin net_bind_service net_raw setuid };

# XXX: should we give ip-up-vpn its own label (currently racoon domain)
allow racoon system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow racoon vpn_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow racoon vpn_data_file:dir { open search write add_name remove_name };


#line 25
 allow keystore racoon:dir search;
#line 25
 allow keystore racoon:file { read open };
#line 25
 allow keystore racoon:process getattr;
#line 25
  
#line 25
# Call the server domain and optionally transfer references to it.
#line 25
allow racoon keystore:binder { call transfer };
#line 25
# Allow the serverdomain to transfer references to the client on the reply.
#line 25
allow keystore racoon:binder transfer;
#line 25
# Receive and use open files from the server.
#line 25
allow racoon keystore:fd use;
#line 25

#line 25


# Racoon (VPN) has a restricted set of permissions from the default.
allow racoon keystore:keystore_key { get sign verify };
#line 1 "vendor/samsung/common/sepolicy/aosp/radio.te"
# phone subsystem
type radio, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;

#line 3
typeattribute radio appdomain;
#line 3
# Label ashmem objects with our own unique type.
#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type radio_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition radio tmpfs:file radio_tmpfs;
#line 3
allow radio radio_tmpfs:file { read write };
#line 3

#line 3
# Map with PROT_EXEC.
#line 3
allow radio radio_tmpfs:file execute;
#line 3


#line 4
typeattribute radio netdomain;
#line 4


#line 5
typeattribute radio bluetoothdomain;
#line 5


#line 6
typeattribute radio binderservicedomain;
#line 6


# Talks to init via the property socket.

#line 9
allow radio property_socket:sock_file write;
#line 9
allow radio init:unix_stream_socket connectto;
#line 9


# Talks to rild via the rild socket.

#line 12
allow radio rild_socket:sock_file write;
#line 12
allow radio rild:unix_stream_socket connectto;
#line 12


# Data file accesses.
allow radio radio_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow radio radio_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow radio alarm_device:chr_file { { getattr open read ioctl lock } { open append write } };

allow radio net_data_file:dir search;
allow radio net_data_file:file { getattr open read ioctl lock };

# Property service
allow radio radio_prop:property_service set;
allow radio net_radio_prop:property_service set;
allow radio system_radio_prop:property_service set;
## SEC_SEforAndroid
#auditallow radio net_radio_prop:property_service set;
#auditallow radio system_radio_prop:property_service set;

# ctl interface
allow radio ctl_rildaemon_prop:property_service set;

allow radio radio_service:service_manager add;
#line 1 "vendor/samsung/common/sepolicy/aosp/recovery.te"
# recovery console (used in recovery init.rc for /sbin/recovery)

# Declare the domain unconditionally so we can always reference it
# in neverallow rules.
type recovery, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

# But the allow rules are only included in the recovery policy.
# Otherwise recovery is only allowed the domain rules.
#line 103

#line 1 "vendor/samsung/common/sepolicy/aosp/rild.te"
# rild - radio interface layer daemon
type rild, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type rild_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init rild_exec:file { getattr open read execute };
#line 5
allow init rild:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow rild rild_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow rild init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init rild:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init rild:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init rild_exec:process rild;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type rild_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition rild tmpfs:file rild_tmpfs;
#line 5
allow rild rild_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute rild netdomain;
#line 6

allow rild self:netlink_route_socket nlmsg_write;
allow rild kernel:system module_request;

#line 9
allow rild property_socket:sock_file write;
#line 9
allow rild init:unix_stream_socket connectto;
#line 9

allow rild self:capability { setuid net_admin net_raw };
allow rild alarm_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild radio_device:blk_file { getattr open read ioctl lock };
allow rild mtd_device:dir search;
allow rild efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow rild bluetooth_efs_file:file { getattr open read ioctl lock };
allow rild bluetooth_efs_file:dir { open getattr read search ioctl };
allow rild radio_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rild radio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild sdcard_type:dir { open getattr read search ioctl };
allow rild system_data_file:dir { open getattr read search ioctl };
allow rild system_data_file:file { getattr open read ioctl lock };
allow rild system_file:file { getattr execute execute_no_trans };

# property service
allow rild radio_prop:property_service set;
allow rild net_radio_prop:property_service set;
allow rild system_radio_prop:property_service set;
## SEC_SEforAndroid
#auditallow rild net_radio_prop:property_service set;
#auditallow rild system_radio_prop:property_service set;

# Read/Write to uart driver (for GPS)
allow rild gps_device:chr_file { { getattr open read ioctl lock } { open append write } };

allow rild tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Allow rild to create and use netlink sockets.
allow rild self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow rild self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Access to wake locks

#line 46
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 46
allow rild sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };
#line 46
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 46
allow rild self:capability2 block_suspend;
#line 46


allow rild self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#line 1 "vendor/samsung/common/sepolicy/aosp/runas.te"
type runas, domain, mlstrustedsubject, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type runas_exec, exec_type, file_type, newAttr56, newAttr57, newAttr63, newAttr64;

# ndk-gdb invokes adb shell run-as.

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow shell runas_exec:file { getattr open read execute };
#line 5
allow shell runas:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow runas runas_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow runas shell:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit shell runas:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow shell runas:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition shell runas_exec:process runas;
#line 5

allow runas adbd:process sigchld;
allow runas shell:fd use;
allow runas shell:fifo_file { read write };
allow runas devpts:chr_file { read write ioctl };
allow runas shell_data_file:file { read write };

# run-as reads package information.
allow runas system_data_file:file { getattr open read ioctl lock };

# run-as checks and changes to the app data dir.
dontaudit runas self:capability dac_override;
allow runas app_data_file:dir { getattr search };
allow runas gad_untrusted_app_data_file:dir { getattr search };
#line 18

# run-as switches to the app UID/GID.
allow runas self:capability { setuid setgid };

# run-as switches to the app security context.
# read /seapp_contexts and /data/security/seapp_contexts

#line 24
allow runas security_file:dir { open getattr read search ioctl };
allow runas security_spota_file:dir { open getattr read search ioctl };
#line 24
allow runas security_file:file { getattr open read ioctl lock };
allow runas security_spota_file:file { getattr open read ioctl lock };
#line 24


#line 25
allow runas selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 25
allow runas kernel:security check_context;
#line 25
 # validate context
allow runas self:process setcurrent;
allow runas newAttr9:process dyntransition; # setcon
#line 1 "vendor/samsung/common/sepolicy/aosp/sdcardd.te"
type sdcardd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type sdcardd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init sdcardd_exec:file { getattr open read execute };
#line 4
allow init sdcardd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow sdcardd sdcardd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow sdcardd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init sdcardd:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init sdcardd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init sdcardd_exec:process sdcardd;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type sdcardd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition sdcardd tmpfs:file sdcardd_tmpfs;
#line 4
allow sdcardd sdcardd_tmpfs:file { read write };
#line 4

#line 4


allow sdcardd cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sdcardd fuse_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sdcardd rootfs:dir mounton;
allow sdcardd sdcard_type:filesystem { mount unmount };
allow sdcardd self:capability { setuid setgid dac_override sys_admin sys_resource };

allow sdcardd sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sdcardd sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

type_transition sdcardd system_data_file:{ dir file } media_rw_data_file;
allow sdcardd media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sdcardd media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Read /data/system/packages.list.
allow sdcardd system_data_file:file { getattr open read ioctl lock };

# Read /data/.layout_version
allow sdcardd install_data_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/aosp/servicemanager.te"
# servicemanager - the Binder context manager
type servicemanager, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type servicemanager_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init servicemanager_exec:file { getattr open read execute };
#line 5
allow init servicemanager:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow servicemanager servicemanager_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow servicemanager init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init servicemanager:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init servicemanager:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init servicemanager_exec:process servicemanager;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type servicemanager_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition servicemanager tmpfs:file servicemanager_tmpfs;
#line 5
allow servicemanager servicemanager_tmpfs:file { read write };
#line 5

#line 5


# Note that we do not use the binder_* macros here.
# servicemanager is unique in that it only provides
# name service (aka context manager) for Binder.
# As such, it only ever receives and transfers other references
# created by other domains.  It never passes its own references
# or initiates a Binder IPC.
allow servicemanager self:binder set_context_mgr;
allow servicemanager domain:binder transfer;

# Check SELinux permissions.

#line 17
allow servicemanager selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 17
allow servicemanager kernel:security compute_av;
#line 17
allow servicemanager self:netlink_selinux_socket *;
#line 17

#line 1 "vendor/samsung/common/sepolicy/aosp/service.te"
type bluetooth_service, service_manager_type;
type default_android_service, service_manager_type;
type drmserver_service, service_manager_type;
type healthd_service, service_manager_type;
## SEC_SEforAndroid 10/25 SEC temporarily changed: ims service from radio_service to ims_service
type ims_service, service_manager_type;
type inputflinger_service, service_manager_type;
type keystore_service, service_manager_type;
type mediaserver_service, service_manager_type;
type nfc_service, service_manager_type;
type radio_service, service_manager_type;
type surfaceflinger_service, service_manager_type;
## SEC_SEforAndroid : compatibility for 5.0 OS
type telecom_service, service_manager_type;
type system_app_service, service_manager_type;
type system_server_service, service_manager_type;
#line 1 "vendor/samsung/common/sepolicy/aosp/shared_relro.te"
# Process which creates/updates shared RELRO files to be used by other apps.
type shared_relro, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr6, newAttr3, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

# The shared relro process is a Java program forked from the zygote, so it
# inherits from app to get basic permissions it needs to run.

#line 6
typeattribute shared_relro appdomain;
#line 6
# Label ashmem objects with our own unique type.
#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type shared_relro_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition shared_relro tmpfs:file shared_relro_tmpfs;
#line 6
allow shared_relro shared_relro_tmpfs:file { read write };
#line 6

#line 6
# Map with PROT_EXEC.
#line 6
allow shared_relro shared_relro_tmpfs:file execute;
#line 6


# Grant write access to the shared relro files/directory.
allow shared_relro shared_relro_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow shared_relro shared_relro_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 1 "vendor/samsung/common/sepolicy/aosp/shell.te"
# Domain for shell processes spawned by ADB or console service.
## SEC_SEforAndroid : remove mlstrustedsubject
#type shell, domain, mlstrustedsubject;
type shell, domain, newAttr1, newAttr4, newAttr5, newAttr7, newAttr6, newAttr3, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr49;
type shell_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Create and use network sockets.

#line 8
typeattribute shell netdomain;
#line 8


# Run app_process.
# XXX Transition into its own domain?

#line 12
typeattribute shell appdomain;
#line 12
# Label ashmem objects with our own unique type.
#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type shell_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition shell tmpfs:file shell_tmpfs;
#line 12
allow shell shell_tmpfs:file { read write };
#line 12

#line 12
# Map with PROT_EXEC.
#line 12
allow shell shell_tmpfs:file execute;
#line 12


# logd access

#line 15

#line 15
allow shell logdr_socket:sock_file write;
#line 15
allow shell logd:unix_stream_socket connectto;
#line 15

#line 15


#line 16
# Group AID_LOG checked by filesystem & logd
#line 16
# to permit control commands
#line 16

#line 16
allow shell logd_socket:sock_file write;
#line 16
allow shell logd:unix_stream_socket connectto;
#line 16

#line 16


# read files in /data/anr
allow shell anr_data_file:dir { open getattr read search ioctl };
allow shell anr_data_file:file { getattr open read ioctl lock };

# Access /data/local/tmp.
allow shell shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow shell shell_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow shell shell_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell shell_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# adb bugreport

#line 29
allow shell dumpstate_socket:sock_file write;
#line 29
allow shell dumpstate:unix_stream_socket connectto;
#line 29


allow shell devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow shell tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow shell console_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow shell input_device:dir { open getattr read search ioctl };
allow shell input_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow shell system_file:file { getattr execute execute_no_trans };
allow shell shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };


#line 40
allow shell apk_data_file:dir { open getattr read search ioctl };
#line 40
allow shell apk_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 40


# Set properties.

#line 43
allow shell property_socket:sock_file write;
#line 43
allow shell init:unix_stream_socket connectto;
#line 43

allow shell shell_prop:property_service set;
allow shell ctl_dumpstate_prop:property_service set;
allow shell debug_prop:property_service set;
allow shell powerctl_prop:property_service set;

# systrace support - allow atrace to run
# debugfs doesn't support labeling individual files, so we have
# to grant read access to all of /sys/kernel/debug.
# Directory read access and file write access is already granted
# in domain.te.
allow shell debugfs:file { getattr open read ioctl lock };

# allow shell to run dmesg
allow shell kernel:system syslog_read;
#line 1 "vendor/samsung/common/sepolicy/aosp/surfaceflinger.te"
# surfaceflinger - display compositor service
type surfaceflinger, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93;
type surfaceflinger_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init surfaceflinger_exec:file { getattr open read execute };
#line 5
allow init surfaceflinger:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow surfaceflinger surfaceflinger_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow surfaceflinger init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init surfaceflinger:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init surfaceflinger:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init surfaceflinger_exec:process surfaceflinger;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type surfaceflinger_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition surfaceflinger tmpfs:file surfaceflinger_tmpfs;
#line 5
allow surfaceflinger surfaceflinger_tmpfs:file { read write };
#line 5

#line 5

typeattribute surfaceflinger mlstrustedsubject;

# Talk to init over the property socket.

#line 9
allow surfaceflinger property_socket:sock_file write;
#line 9
allow surfaceflinger init:unix_stream_socket connectto;
#line 9


# Perform Binder IPC.

#line 12
# Call the servicemanager and transfer references to it.
#line 12
allow surfaceflinger servicemanager:binder { call transfer };
#line 12
# servicemanager performs getpidcon on clients.
#line 12
allow servicemanager surfaceflinger:dir search;
#line 12
allow servicemanager surfaceflinger:file { read open };
#line 12
allow servicemanager surfaceflinger:process getattr;
#line 12
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 12
# all domains in domain.te.
#line 12


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow surfaceflinger binderservicedomain:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow binderservicedomain surfaceflinger:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow surfaceflinger binderservicedomain:fd use;
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow surfaceflinger appdomain:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow appdomain surfaceflinger:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow surfaceflinger appdomain:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow surfaceflinger bootanim:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow bootanim surfaceflinger:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow surfaceflinger bootanim:fd use;
#line 15


#line 16
typeattribute surfaceflinger binderservicedomain;
#line 16


# Binder IPC to bu, presently runs in adbd domain.

#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow surfaceflinger adbd:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow adbd surfaceflinger:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow surfaceflinger adbd:fd use;
#line 19


# Read /proc/pid files for Binder clients.

#line 22
allow surfaceflinger binderservicedomain:dir { open getattr read search ioctl };
#line 22
allow surfaceflinger binderservicedomain:{ file lnk_file } { getattr open read ioctl lock };
#line 22


#line 23
allow surfaceflinger appdomain:dir { open getattr read search ioctl };
#line 23
allow surfaceflinger appdomain:{ file lnk_file } { getattr open read ioctl lock };
#line 23


# Access the GPU.
allow surfaceflinger gpu_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Access /dev/graphics/fb0.
allow surfaceflinger graphics_device:dir search;
allow surfaceflinger graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Access /dev/video1.
allow surfaceflinger video_device:dir { open getattr read search ioctl };
allow surfaceflinger video_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Create and use netlink kobject uevent sockets.
allow surfaceflinger self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Set properties.
allow surfaceflinger system_prop:property_service set;
allow surfaceflinger ctl_bootanim_prop:property_service set;

# Use open files supplied by an app.
allow surfaceflinger appdomain:fd use;
allow surfaceflinger app_data_file:file { read write };
allow surfaceflinger gad_untrusted_app_data_file:file { read write };
#line 46

# Use open file provided by bootanim.
allow surfaceflinger bootanim:fd use;

# Allow a dumpstate triggered screenshot

#line 51
# Call the server domain and optionally transfer references to it.
#line 51
allow surfaceflinger dumpstate:binder { call transfer };
#line 51
# Allow the serverdomain to transfer references to the client on the reply.
#line 51
allow dumpstate surfaceflinger:binder transfer;
#line 51
# Receive and use open files from the server.
#line 51
allow surfaceflinger dumpstate:fd use;
#line 51


#line 52
# Call the server domain and optionally transfer references to it.
#line 52
allow surfaceflinger shell:binder { call transfer };
#line 52
# Allow the serverdomain to transfer references to the client on the reply.
#line 52
allow shell surfaceflinger:binder transfer;
#line 52
# Receive and use open files from the server.
#line 52
allow surfaceflinger shell:fd use;
#line 52


#line 53
allow surfaceflinger dumpstate:dir { open getattr read search ioctl };
#line 53
allow surfaceflinger dumpstate:{ file lnk_file } { getattr open read ioctl lock };
#line 53


# Needed on some devices for playing DRM protected content,
# but seems expected and appropriate for all devices.
allow surfaceflinger tee:unix_stream_socket connectto;
allow surfaceflinger tee_device:chr_file { { getattr open read ioctl lock } { open append write } };

allow surfaceflinger surfaceflinger_service:service_manager add;

###
### Neverallow rules
###
### surfaceflinger should NEVER do any of this
## SEC_SEforAndroid
#line 71

#line 1 "vendor/samsung/common/sepolicy/aosp/su.te"
# File types must be defined for file_contexts.
type su_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 4
  # Domain used for su processes, as well as for adbd and adb shell
#line 4
  # after performing an adb root command.  The domain definition is
#line 4
  # wrapped to ensure that it does not exist at all on -user builds.
#line 4
 type su, domain, newAttr1, newAttr5, newAttr8, newAttr4, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr13, newAttr12, newAttr14, newAttr10, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
#line 4
  
#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow shell su_exec:file { getattr open read execute };
#line 4
allow shell su:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow su su_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow su shell:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit shell su:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow shell su:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition shell su_exec:process su;
#line 4

#line 4

#line 4
  # Allow dumpstate to call su on userdebug / eng builds to collect
#line 4
  # additional information.
#line 4
  
#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow dumpstate su_exec:file { getattr open read execute };
#line 4
allow dumpstate su:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow su su_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow su dumpstate:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit dumpstate su:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow dumpstate su:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition dumpstate su_exec:process su;
#line 4

#line 4

#line 4
  # su is also permissive to permit setenforce.
#line 4
  permissive su;
#line 4

#line 4
  # Add su to various domains
#line 4
  
#line 4
typeattribute su netdomain;
#line 4

#line 4
  
#line 4
typeattribute su appdomain;
#line 4
# Label ashmem objects with our own unique type.
#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type su_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition su tmpfs:file su_tmpfs;
#line 4
allow su su_tmpfs:file { read write };
#line 4

#line 4
# Map with PROT_EXEC.
#line 4
allow su su_tmpfs:file execute;
#line 4

#line 4

#line 4
  dontaudit su self:{ capability capability2 } *;
#line 4
  dontaudit su kernel:security *;
#line 4
  dontaudit su kernel:system *;
#line 4
  dontaudit su self:memprotect *;
#line 4
  dontaudit su domain:process *;
#line 4
  dontaudit su domain:fd *;
#line 4
  dontaudit su domain:dir *;
#line 4
  dontaudit su domain:lnk_file *;
#line 4
  dontaudit su domain:{ fifo_file file } *;
#line 4
  dontaudit su domain:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
#line 4
  dontaudit su domain:{ sem msgq shm ipc } *;
#line 4
  dontaudit su domain:key *;
#line 4
  dontaudit su fs_type:filesystem *;
#line 4
  dontaudit su {fs_type dev_type file_type}:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } *;
#line 4
  dontaudit su node_type:node *;
#line 4
  dontaudit su node_type:{ tcp_socket udp_socket rawip_socket } *;
#line 4
  dontaudit su netif_type:netif *;
#line 4
  dontaudit su port_type:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
#line 4
  dontaudit su port_type:{ tcp_socket dccp_socket } *;
#line 4
  dontaudit su domain:peer *;
#line 4
  dontaudit su domain:binder *;
#line 4
  dontaudit su property_type:property_service *;
#line 44

#line 1 "vendor/samsung/common/sepolicy/aosp/system_app.te"
#
# Apps that run with the system UID, e.g. com.android.system.ui,
# com.android.settings.  These are not as privileged as the system
# server.
#
type system_app, domain, newAttr1, newAttr4, newAttr8, newAttr5, newAttr7, newAttr3, newAttr6, newAttr2, newAttr13, newAttr12, newAttr14, newAttr10, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;
type s_system_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr6, newAttr3, newAttr2, newAttr12, newAttr13, newAttr14, newAttr10, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;

#line 7
typeattribute system_app appdomain;
typeattribute s_system_app appdomain;
#line 7
# Label ashmem objects with our own unique type.
#line 7

#line 7
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 7
type system_app_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 7
type_transition system_app tmpfs:file system_app_tmpfs;
type_transition s_system_app tmpfs:file system_app_tmpfs;
#line 7
allow system_app system_app_tmpfs:file { read write };
allow s_system_app system_app_tmpfs:file { read write };
#line 7

#line 7
# Map with PROT_EXEC.
#line 7
allow system_app system_app_tmpfs:file execute;
allow s_system_app system_app_tmpfs:file execute;
#line 7


#line 8
typeattribute system_app netdomain;
typeattribute s_system_app netdomain;
#line 8


#line 9
typeattribute system_app binderservicedomain;
typeattribute s_system_app binderservicedomain;
#line 9


# Read and write /data/data subdirectory.
allow system_app system_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app system_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 13
allow system_app system_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app system_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 14

# Read /data/misc/keychain subdirectory.
allow system_app keychain_data_file:dir { open getattr read search ioctl };
allow s_system_app keychain_data_file:dir { open getattr read search ioctl };
#line 17
allow system_app keychain_data_file:file { getattr open read ioctl lock };
allow s_system_app keychain_data_file:file { getattr open read ioctl lock };
#line 18

# Read and write to other system-owned /data directories, such as
# /data/system/cache and /data/misc/user.
allow system_app system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 22
allow system_app system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 23
allow system_app misc_user_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app misc_user_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 24
allow system_app misc_user_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app misc_user_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 25
# Audit writes to these directories and files so we can identify
# and possibly move these directories into their own type in the future.
## SEC_SEforAndroid
#auditallow system_app system_data_file:dir { create setattr add_name remove_name rmdir rename };
#auditallow system_app system_data_file:file { create setattr append write link unlink rename };

# Read wallpaper file.
allow system_app wallpaper_file:file { getattr open read ioctl lock };
allow s_system_app wallpaper_file:file { getattr open read ioctl lock };
#line 33

# Write to properties

#line 35
allow system_app property_socket:sock_file write;
allow s_system_app property_socket:sock_file write;
#line 35
allow system_app init:unix_stream_socket connectto;
allow s_system_app init:unix_stream_socket connectto;
#line 35

allow system_app debug_prop:property_service set;
allow s_system_app debug_prop:property_service set;
#line 37
allow system_app net_radio_prop:property_service set;
allow s_system_app net_radio_prop:property_service set;
#line 38
allow system_app system_radio_prop:property_service set;
allow s_system_app system_radio_prop:property_service set;
#line 39
## SEC_SEforAndroid
#auditallow system_app net_radio_prop:property_service set;
#auditallow system_app system_radio_prop:property_service set;
allow system_app system_prop:property_service set;
allow s_system_app system_prop:property_service set;
#line 43
allow system_app ctl_bugreport_prop:property_service set;
allow s_system_app ctl_bugreport_prop:property_service set;
#line 44
allow system_app logd_prop:property_service set;
allow s_system_app logd_prop:property_service set;
#line 45

# Create /data/anr/traces.txt.
allow system_app anr_data_file:dir { { open getattr read search ioctl } add_name write };
allow s_system_app anr_data_file:dir { { open getattr read search ioctl } add_name write };
#line 48
allow system_app anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 49

# Settings need to access app name and icon from asec
allow system_app asec_apk_file:file { getattr open read ioctl lock };
allow s_system_app asec_apk_file:file { getattr open read ioctl lock };
#line 52

allow system_app system_app_service:service_manager add;
allow s_system_app system_app_service:service_manager add;
#line 54

allow system_app keystore:keystore_key { test get insert delete exist saw reset password lock unlock zero sign verify grant duplicate clear_uid };
allow s_system_app keystore:keystore_key { test get insert delete exist saw reset password lock unlock zero sign verify grant duplicate clear_uid };


#line 57
# Group AID_LOG checked by filesystem & logd
#line 57
# to permit control commands
#line 57

#line 57
allow system_app logd_socket:sock_file write;
allow s_system_app logd_socket:sock_file write;
#line 57
allow system_app logd:unix_stream_socket connectto;
allow s_system_app logd:unix_stream_socket connectto;
#line 57

#line 57

#line 1 "vendor/samsung/common/sepolicy/aosp/system_server.te"
#
# System Server aka system_server spawned by zygote.
# Most of the framework services run in this process.
#
type system_server, domain, mlstrustedsubject, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93;

# Define a type for tmpfs-backed ashmem regions.

#line 8
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 8
type system_server_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 8
type_transition system_server tmpfs:file system_server_tmpfs;
#line 8
allow system_server system_server_tmpfs:file { read write };
#line 8


# Dalvik Compiler JIT Mapping.
allow system_server self:process execmem;
allow system_server ashmem_device:chr_file execute;
allow system_server system_server_tmpfs:file execute;

# For art.
allow system_server dalvikcache_data_file:file execute;

# /data/resource-cache
allow system_server resourcecache_data_file:file { getattr open read ioctl lock };
allow system_server resourcecache_data_file:dir { open getattr read search ioctl };

# ptrace to processes in the same domain for debugging crashes.
allow system_server self:process ptrace;

# Child of the zygote.
allow system_server zygote:fd use;
allow system_server zygote:process sigchld;
allow system_server zygote_tmpfs:file read;

# May kill zygote on crashes.
allow system_server zygote:process sigkill;

# Read /system/bin/app_process.
allow system_server zygote_exec:file { getattr open read ioctl lock };

# Needed to close the zygote socket, which involves getopt / getattr
allow system_server zygote:unix_stream_socket { getopt getattr };

# system server gets network and bluetooth permissions.

#line 40
typeattribute system_server netdomain;
#line 40


#line 41
typeattribute system_server bluetoothdomain;
#line 41


# These are the capabilities assigned by the zygote to the
# system server.
allow system_server self:capability { kill net_admin net_bind_service net_broadcast net_raw sys_boot sys_module sys_nice sys_resource sys_time sys_tty_config };


#line 59
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 59
allow system_server sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };
#line 59
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 59
allow system_server self:capability2 block_suspend;
#line 59


# Triggered by /proc/pid accesses, not allowed.
dontaudit system_server self:capability sys_ptrace;

# Trigger module auto-load.
allow system_server kernel:system module_request;

# Use netlink uevent sockets.
allow system_server self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Use generic netlink sockets.
allow system_server self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Set and get routes directly via netlink.
allow system_server self:netlink_route_socket nlmsg_write;

# Kill apps.
allow system_server appdomain:process { sigkill signal };

# This line seems suspect, as it should not really need to
# set scheduling parameters for a kernel domain task.
allow system_server kernel:process setsched;

# Set scheduling info for apps.
allow system_server appdomain:process { getsched setsched };
allow system_server mediaserver:process { getsched setsched };

# Read /proc/pid data for all domains. This is used by ProcessCpuTracker
# within system_server to keep track of memory and CPU usage for
# all processes on the device.

#line 90
allow system_server domain:dir { open getattr read search ioctl };
#line 90
allow system_server domain:{ file lnk_file } { getattr open read ioctl lock };
#line 90


# Write to /proc/pid/oom_adj_score for apps.
allow system_server appdomain:file write;

# Read/Write to /proc/net/xt_qtaguid/ctrl and and /dev/xt_qtaguid.
allow system_server qtaguid_proc:file { { getattr open read ioctl lock } { open append write } };
allow system_server qtaguid_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Write to /proc/sysrq-trigger.
allow system_server proc_sysrq:file { { getattr open read ioctl lock } { open append write } };

# Read /sys/kernel/debug/wakeup_sources.
allow system_server debugfs:file { getattr open read ioctl lock };

# WifiWatchdog uses a packet_socket
allow system_server self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# 3rd party VPN clients require a tun_socket to be created
allow system_server self:tun_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Notify init of death.
allow system_server init:process sigchld;

# Talk to init and various daemons via sockets.

#line 115
allow system_server property_socket:sock_file write;
#line 115
allow system_server init:unix_stream_socket connectto;
#line 115


#line 116
allow system_server installd_socket:sock_file write;
#line 116
allow system_server installd:unix_stream_socket connectto;
#line 116


#line 117
allow system_server lmkd_socket:sock_file write;
#line 117
allow system_server lmkd:unix_stream_socket connectto;
#line 117


#line 118
allow system_server mtpd_socket:sock_file write;
#line 118
allow system_server mtp:unix_stream_socket connectto;
#line 118


#line 119
allow system_server netd_socket:sock_file write;
#line 119
allow system_server netd:unix_stream_socket connectto;
#line 119


#line 120
allow system_server vold_socket:sock_file write;
#line 120
allow system_server vold:unix_stream_socket connectto;
#line 120


#line 121
allow system_server zygote_socket:sock_file write;
#line 121
allow system_server zygote:unix_stream_socket connectto;
#line 121


#line 122
allow system_server gps_socket:sock_file write;
#line 122
allow system_server gpsd:unix_stream_socket connectto;
#line 122


#line 123
allow system_server racoon_socket:sock_file write;
#line 123
allow system_server racoon:unix_stream_socket connectto;
#line 123


#line 124
allow system_server wpa_socket:sock_file write;
#line 124
allow system_server wpa:unix_dgram_socket sendto;
#line 124


# Communicate over a socket created by surfaceflinger.
allow system_server surfaceflinger:unix_stream_socket { read write setopt };

# Perform Binder IPC.

#line 130
# Call the servicemanager and transfer references to it.
#line 130
allow system_server servicemanager:binder { call transfer };
#line 130
# servicemanager performs getpidcon on clients.
#line 130
allow servicemanager system_server:dir search;
#line 130
allow servicemanager system_server:file { read open };
#line 130
allow servicemanager system_server:process getattr;
#line 130
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 130
# all domains in domain.te.
#line 130


#line 131
# Call the server domain and optionally transfer references to it.
#line 131
allow system_server binderservicedomain:binder { call transfer };
#line 131
# Allow the serverdomain to transfer references to the client on the reply.
#line 131
allow binderservicedomain system_server:binder transfer;
#line 131
# Receive and use open files from the server.
#line 131
allow system_server binderservicedomain:fd use;
#line 131


#line 132
# Call the server domain and optionally transfer references to it.
#line 132
allow system_server appdomain:binder { call transfer };
#line 132
# Allow the serverdomain to transfer references to the client on the reply.
#line 132
allow appdomain system_server:binder transfer;
#line 132
# Receive and use open files from the server.
#line 132
allow system_server appdomain:fd use;
#line 132


#line 133
# Call the server domain and optionally transfer references to it.
#line 133
allow system_server dumpstate:binder { call transfer };
#line 133
# Allow the serverdomain to transfer references to the client on the reply.
#line 133
allow dumpstate system_server:binder transfer;
#line 133
# Receive and use open files from the server.
#line 133
allow system_server dumpstate:fd use;
#line 133


#line 134
typeattribute system_server binderservicedomain;
#line 134


# Read /proc/pid files for dumping stack traces of native processes.

#line 137
allow system_server mediaserver:dir { open getattr read search ioctl };
#line 137
allow system_server mediaserver:{ file lnk_file } { getattr open read ioctl lock };
#line 137


#line 138
allow system_server sdcardd:dir { open getattr read search ioctl };
#line 138
allow system_server sdcardd:{ file lnk_file } { getattr open read ioctl lock };
#line 138


#line 139
allow system_server surfaceflinger:dir { open getattr read search ioctl };
#line 139
allow system_server surfaceflinger:{ file lnk_file } { getattr open read ioctl lock };
#line 139


#line 140
allow system_server inputflinger:dir { open getattr read search ioctl };
#line 140
allow system_server inputflinger:{ file lnk_file } { getattr open read ioctl lock };
#line 140


# Use sockets received over binder from various services.
allow system_server mediaserver:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow system_server mediaserver:udp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };

# Check SELinux permissions.

#line 147
allow system_server selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 147
allow system_server kernel:security compute_av;
#line 147
allow system_server self:netlink_selinux_socket *;
#line 147


# XXX Label sysfs files with a specific type?
allow system_server sysfs:file { { getattr open read ioctl lock } { open append write } };
allow system_server sysfs_nfc_power_writable:file { { getattr open read ioctl lock } { open append write } };
allow system_server sysfs_devices_system_cpu:file { open append write };

# Access devices.
allow system_server device:dir { open getattr read search ioctl };
allow system_server mdns_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server alarm_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server gpu_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server iio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server input_device:dir { open getattr read search ioctl };
allow system_server input_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server radio_device:chr_file { getattr open read ioctl lock };
allow system_server tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server usbaccessory_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server video_device:dir { open getattr read search ioctl };
allow system_server video_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server adbd_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server audio_device:dir { open getattr read search ioctl };
allow system_server audio_device:chr_file { getattr open read ioctl lock };

# tun device used for 3rd party vpn apps
allow system_server tun_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Manage system data files.
allow system_server system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server system_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server keychain_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server keychain_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/app.
allow system_server apk_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server apk_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server apk_tmp_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server apk_tmp_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/app-private.
allow system_server apk_private_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server apk_private_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server apk_private_tmp_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server apk_private_tmp_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage files within asec containers.
allow system_server asec_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server asec_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server asec_public_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/anr.
allow system_server anr_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/backup.
allow system_server backup_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server backup_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Read from /data/dalvik-cache/profiles
allow system_server dalvikcache_profiles_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server dalvikcache_profiles_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/misc/adb.
allow system_server adb_keys_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server adb_keys_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/misc/sms.
# TODO:  Split into a separate type?
allow system_server radio_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server radio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/misc/systemkeys.
allow system_server systemkeys_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server systemkeys_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Access /data/tombstones.
allow system_server tombstone_data_file:dir { open getattr read search ioctl };
allow system_server tombstone_data_file:file { getattr open read ioctl lock };

# Manage /data/misc/vpn.
allow system_server vpn_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server vpn_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/misc/wifi.
allow system_server wifi_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server wifi_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Manage /data/misc/zoneinfo.
allow system_server zoneinfo_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server zoneinfo_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Walk /data/data subdirectories.
# Types extracted from seapp_contexts type= fields.
allow system_server { system_app_data_file bluetooth_data_file nfc_data_file radio_data_file shell_data_file app_data_file gad_untrusted_app_data_file }:dir { getattr read search };
# Also permit for unlabeled /data/data subdirectories and
# for unlabeled asec containers on upgrades from 4.2.
allow system_server unlabeled:dir { open getattr read search ioctl };
# Read pkg.apk file before it has been relabeled by vold.
allow system_server unlabeled:file { getattr open read ioctl lock };

# Populate com.android.providers.settings/databases/settings.db.
allow system_server system_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server system_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Receive and use open app data files passed over binder IPC.
# Types extracted from seapp_contexts type= fields.
allow system_server { system_app_data_file bluetooth_data_file nfc_data_file radio_data_file shell_data_file app_data_file gad_untrusted_app_data_file }:file { getattr read write };

# Receive and use open /data/media files passed over binder IPC.
allow system_server media_rw_data_file:file { getattr read write };

# Read /file_contexts and /data/security/file_contexts

#line 259
allow system_server security_file:dir { open getattr read search ioctl };
allow system_server security_spota_file:dir { open getattr read search ioctl };
#line 259
allow system_server security_file:file { getattr open read ioctl lock };
allow system_server security_spota_file:file { getattr open read ioctl lock };
#line 259


# Relabel apk files.
allow system_server { apk_tmp_file apk_private_tmp_file }:{ dir file } { relabelfrom relabelto };
allow system_server { apk_data_file apk_private_data_file }:{ dir file } { relabelfrom relabelto };

# Relabel wallpaper.
allow system_server system_data_file:file relabelfrom;
allow system_server wallpaper_file:file relabelto;
allow system_server wallpaper_file:file { { { getattr open read ioctl lock } { open append write } } unlink };

# Relabel /data/anr.
allow system_server system_data_file:dir relabelfrom;
allow system_server anr_data_file:dir relabelto;

# Property Service write
allow system_server system_prop:property_service set;
allow system_server dhcp_prop:property_service set;
allow system_server net_radio_prop:property_service set;
allow system_server system_radio_prop:property_service set;
allow system_server debug_prop:property_service set;
allow system_server powerctl_prop:property_service set;
allow system_server fingerprint_prop:property_service set;

# ctl interface
allow system_server ctl_default_prop:property_service set;
allow system_server ctl_dhcp_pan_prop:property_service set;
allow system_server ctl_bugreport_prop:property_service set;

# Create a socket for receiving info from wpa.
type_transition system_server wifi_data_file:sock_file system_wpa_socket;
type_transition system_server wpa_socket:sock_file system_wpa_socket;
allow system_server wpa_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server system_wpa_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Remove sockets created by wpa_supplicant
allow system_server wpa_socket:sock_file unlink;

# Create a socket for connections from debuggerd.
type_transition system_server system_data_file:sock_file system_ndebug_socket "ndebugsocket";
allow system_server system_ndebug_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Specify any arguments to zygote.
allow system_server self:zygote { specifyids specifyrlimits specifyseinfo };

# Manage cache files.
allow system_server cache_file:dir { relabelfrom { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } };
allow system_server cache_file:file { relabelfrom { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } };

# Run system programs, e.g. dexopt.
allow system_server system_file:file { getattr execute execute_no_trans };

# LocationManager(e.g, GPS) needs to read and write
# to uart driver and ctrl proc entry
allow system_server gps_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server gps_control:file { { getattr open read ioctl lock } { open append write } };

# Allow system_server to use app-created sockets and pipes.
allow system_server appdomain:{ tcp_socket udp_socket } { getattr getopt setopt read write shutdown };
allow system_server appdomain:fifo_file { getattr read write };

# Allow abstract socket connection
allow system_server rild:unix_stream_socket connectto;

# BackupManagerService lets PMS create a data backup file
allow system_server cache_backup_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
# Relabel /data/backup
allow system_server backup_data_file:dir { relabelto relabelfrom };
# Relabel /cache/.*\.{data|restore}
allow system_server cache_backup_file:file { relabelto relabelfrom };
# LocalTransport creates and relabels /cache/backup
allow system_server cache_backup_file:dir { relabelto relabelfrom { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } };

# Allow system to talk to usb device
allow system_server usb_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server usb_device:dir { open getattr read search ioctl };

# Allow system to talk to sensors
allow system_server sensors_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Read from HW RNG (needed by EntropyMixer).
allow system_server hw_random_device:chr_file { getattr open read ioctl lock };

# Read and delete files under /dev/fscklogs.

#line 343
allow system_server fscklogs:dir { open getattr read search ioctl };
#line 343
allow system_server fscklogs:{ file lnk_file } { getattr open read ioctl lock };
#line 343

allow system_server fscklogs:dir { write remove_name };
allow system_server fscklogs:file unlink;

# For SELinuxPolicyInstallReceiver

#line 348

#line 348
allow system_server security_file:dir { open getattr read search ioctl };
allow system_server security_spota_file:dir { open getattr read search ioctl };
#line 348
allow system_server security_file:file { getattr open read ioctl lock };
allow system_server security_spota_file:file { getattr open read ioctl lock };
#line 348

#line 348

#line 348
allow system_server property_socket:sock_file write;
#line 348
allow system_server init:unix_stream_socket connectto;
#line 348

#line 348
allow system_server security_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server security_spota_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 348
allow system_server security_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server security_spota_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 348
allow system_server security_file:lnk_file { create rename unlink };
allow system_server security_spota_file:lnk_file { create rename unlink };
#line 348
allow system_server security_prop:property_service set;
#line 348


# logd access, system_server inherit logd write socket
# (urge is to deprecate this long term)
allow system_server zygote:unix_dgram_socket write;

# Read from log daemon.

#line 355

#line 355
allow system_server logdr_socket:sock_file write;
#line 355
allow system_server logd:unix_stream_socket connectto;
#line 355

#line 355


# Be consistent with DAC permissions. Allow system_server to write to
# /sys/module/lowmemorykiller/parameters/adj
# /sys/module/lowmemorykiller/parameters/minfree
allow system_server sysfs_lowmemorykiller:file { getattr { open append write } };

# Read /sys/fs/pstore/console-ramoops
# Don't worry about overly broad permissions for now, as there's
# only one file in /sys/fs/pstore
allow system_server pstorefs:dir { open getattr read search ioctl };
allow system_server pstorefs:file { getattr open read ioctl lock };

allow system_server system_server_service:service_manager add;

allow system_server keystore:keystore_key { test get insert delete exist saw reset password lock unlock zero sign verify grant duplicate clear_uid reset_uid sync_uid password_uid };
#line 391

# Allow system server to search and write to the persistent factory reset
# protection partition. This block device does not get wiped in a factory reset.
allow system_server block_device:dir search;
allow system_server frp_block_device:blk_file { { getattr open read ioctl lock } { open append write } };

# Clean up old cgroups
allow system_server cgroup:dir { remove_name rmdir };

# /oem access

#line 401
allow system_server oemfs:dir { open getattr read search ioctl };
#line 401
allow system_server oemfs:{ file lnk_file } { getattr open read ioctl lock };
#line 401


###
### Neverallow rules
###
### system_server should NEVER do any of this
## SEC_SEforAndroid
#line 412

#line 1 "vendor/samsung/common/sepolicy/aosp/tee.te"
##
# trusted execution environment (tee) daemon
#
type tee, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type tee_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
type tee_device, dev_type, newAttr29, newAttr30, newAttr31, newAttr69;
type tee_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69, newAttr90;


#line 9

#line 9
# Allow the necessary permissions.
#line 9

#line 9
# Old domain may exec the file and transition to the new domain.
#line 9
allow init tee_exec:file { getattr open read execute };
#line 9
allow init tee:process transition;
#line 9
# New domain is entered by executing the file.
#line 9
allow tee tee_exec:file { entrypoint open read execute getattr };
#line 9
# New domain can send SIGCHLD to its caller.
#line 9
allow tee init:process sigchld;
#line 9
# Enable AT_SECURE, i.e. libc secure mode.
#line 9
dontaudit init tee:process noatsecure;
#line 9
# XXX dontaudit candidate but requires further study.
#line 9
allow init tee:process { siginh rlimitinh };
#line 9

#line 9
# Make the transition occur by default.
#line 9
type_transition init tee_exec:process tee;
#line 9

#line 9

#line 9
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 9
type tee_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 9
type_transition tee tmpfs:file tee_tmpfs;
#line 9
allow tee tee_tmpfs:file { read write };
#line 9

#line 9

allow tee self:capability { dac_override };
allow tee tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow tee tee_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow tee tee_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow tee self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#line 1 "vendor/samsung/common/sepolicy/aosp/ueventd.te"
# ueventd seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type ueventd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type ueventd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69, newAttr90;
#line 4
type_transition ueventd tmpfs:file ueventd_tmpfs;
#line 4
allow ueventd ueventd_tmpfs:file { read write };
#line 4


#line 5
type_transition ueventd device:chr_file klog_device "__kmsg__";
#line 5
allow ueventd klog_device:chr_file { create open write unlink };
#line 5
allow ueventd device:dir { write add_name remove_name };
#line 5


#line 6
allow ueventd security_file:dir { open getattr read search ioctl };
allow ueventd security_spota_file:dir { open getattr read search ioctl };
#line 6
allow ueventd security_file:file { getattr open read ioctl lock };
allow ueventd security_spota_file:file { getattr open read ioctl lock };
#line 6

allow ueventd init:process sigchld;
allow ueventd self:capability { chown mknod net_admin setgid fsetid sys_rawio dac_override fowner };
allow ueventd device:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ueventd device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ueventd sysfs:file { { getattr open read ioctl lock } { open append write } };
allow ueventd sysfs_type:{ file lnk_file } { relabelfrom relabelto setattr getattr };
allow ueventd sysfs_type:dir { relabelfrom relabelto setattr { open getattr read search ioctl } };
allow ueventd sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write } };
allow ueventd tmpfs:chr_file { { getattr open read ioctl lock } { open append write } };
allow ueventd dev_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ueventd dev_type:lnk_file { create unlink };
allow ueventd dev_type:chr_file { create setattr unlink };
allow ueventd dev_type:blk_file { create setattr unlink };
allow ueventd self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow ueventd efs_file:dir search;
allow ueventd efs_file:file { getattr open read ioctl lock };

# Use setfscreatecon() to label /dev directories and files.
allow ueventd self:process setfscreate;
#line 1 "vendor/samsung/common/sepolicy/aosp/unconfined.te"
#######################################################
#
# This is the unconfined template. This template is the base policy
# which is used by daemons and other privileged components of
# Android.
#
# Historically, this template was called "unconfined" because it
# allowed the domain to do anything it wanted. Over time,
# this has changed, and will continue to change in the future.
# The rules in this file will be removed when no remaining
# unconfined domains require it, or when the rules contradict
# Android security best practices. Domains which need rules not
# provided by the unconfined template should add them directly to
# the relevant policy.
#
# The use of this template is discouraged.
######################################################

allow unconfineddomain self:capability ~{ sys_ptrace sys_rawio mknod sys_module audit_write audit_control linux_immutable };
allow unconfineddomain self:capability2 ~{ mac_override mac_admin };
allow unconfineddomain kernel:security ~{ load_policy setenforce setcheckreqprot setbool setsecparam };
allow unconfineddomain kernel:system ~{ syslog_read syslog_mod syslog_console };
allow unconfineddomain domain:fd *;
allow unconfineddomain domain:dir { open getattr read search ioctl };
allow unconfineddomain domain:lnk_file { getattr open read ioctl lock };
allow unconfineddomain domain:{ fifo_file file } { { getattr open read ioctl lock } { open append write } };
allow unconfineddomain domain:{ socket netlink_socket key_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
#line 45
allow unconfineddomain domain:{ sem msgq shm ipc } *;
allow unconfineddomain domain:key *;
allow unconfineddomain newAttr67:{ dir lnk_file sock_file fifo_file } ~relabelto;
allow unconfineddomain dev_type:{ dir lnk_file sock_file fifo_file } ~relabelto;
allow unconfineddomain newAttr65:{ dir lnk_file sock_file fifo_file } ~relabelto;
#line 59
allow unconfineddomain exec_type:dir { open getattr read search ioctl };
allow unconfineddomain exec_type:file { { getattr open read ioctl lock } execute };
allow unconfineddomain exec_type:lnk_file { getattr open read ioctl lock };
allow unconfineddomain system_file:dir { open getattr read search ioctl };
allow unconfineddomain system_file:file { { getattr open read ioctl lock } execute };
allow unconfineddomain system_file:lnk_file { getattr open read ioctl lock };
allow unconfineddomain newAttr77:{ chr_file file } ~{ entrypoint execute_no_trans execmod execute relabelto };
#line 73
allow unconfineddomain newAttr31:{ chr_file file } ~{ entrypoint execute_no_trans execmod execute relabelto };
allow unconfineddomain newAttr65:{ chr_file file } ~{ entrypoint execute_no_trans execmod execute relabelto };
#line 84
allow unconfineddomain rootfs:file execute;
allow unconfineddomain contextmount_type:dir { open getattr read search ioctl };
allow unconfineddomain contextmount_type:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };
allow unconfineddomain node_type:node *;
allow unconfineddomain netif_type:netif *;
allow unconfineddomain domain:peer recv;
allow unconfineddomain newAttr41:binder { call transfer set_context_mgr };
#line 1 "vendor/samsung/common/sepolicy/aosp/uncrypt.te"
# uncrypt
type uncrypt, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type uncrypt_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init uncrypt_exec:file { getattr open read execute };
#line 5
allow init uncrypt:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow uncrypt uncrypt_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow uncrypt init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init uncrypt:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init uncrypt:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init uncrypt_exec:process uncrypt;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type uncrypt_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 5
type_transition uncrypt tmpfs:file uncrypt_tmpfs;
#line 5
allow uncrypt uncrypt_tmpfs:file { read write };
#line 5

#line 5


allow uncrypt self:capability dac_override;

# Read OTA zip file from /data/data/com.google.android.gsf/app_download

#line 10
allow uncrypt app_data_file:dir { open getattr read search ioctl };
allow uncrypt gad_untrusted_app_data_file:dir { open getattr read search ioctl };
#line 10
allow uncrypt app_data_file:{ file lnk_file } { getattr open read ioctl lock };
allow uncrypt gad_untrusted_app_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 10



#line 12
  # For debugging, allow /data/local/tmp access
#line 12
  
#line 12
allow uncrypt shell_data_file:dir { open getattr read search ioctl };
#line 12
allow uncrypt shell_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 12

#line 15


# Create tmp file /cache/recovery/command.tmp
# Read /cache/recovery/command
# Rename /cache/recovery/command.tmp to /cache/recovery/command
allow uncrypt cache_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow uncrypt cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Set a property to reboot the device.

#line 24
allow uncrypt property_socket:sock_file write;
#line 24
allow uncrypt init:unix_stream_socket connectto;
#line 24

allow uncrypt powerctl_prop:property_service set;

# Raw writes to block device
allow uncrypt self:capability sys_rawio;
allow uncrypt block_device:blk_file { open append write };
allow uncrypt block_device:dir { open getattr read search ioctl };
#line 1 "vendor/samsung/common/sepolicy/aosp/untrusted_app.te"
###
### Untrusted apps.
###
### This file defines the rules for untrusted apps.
### Apps are labeled based on mac_permissions.xml (maps signer and
### optionally package name to seinfo value) and seapp_contexts (maps UID
### and optionally seinfo value to domain for process and type for data
### directory).  The untrusted_app domain is the default assignment in
### seapp_contexts for any app with UID between APP_AID (10000)
### and AID_ISOLATED_START (99000) if the app has no specific seinfo
### value as determined from mac_permissions.xml.  In current AOSP, this
### domain is assigned to all non-system apps as well as to any system apps
### that are not signed by the platform key.  To move
### a system app into a specific domain, add a signer entry for it to
### mac_permissions.xml and assign it one of the pre-existing seinfo values
### or define and use a new seinfo value in both mac_permissions.xml and
### seapp_contexts.
###
### untrusted_app includes all the appdomain rules, plus the
### additional following rules:
###

type untrusted_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr9, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;
type umcagent_app, domain, newAttr1, newAttr4, newAttr8, newAttr5, newAttr7, newAttr3, newAttr6, newAttr9, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;
type vpn_untrusted_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr9, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;
type trustonicpartner_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr6, newAttr3, newAttr9, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;
type llk_untrusted_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr9, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;
type filtered_untrusted_app, domain, newAttr1, newAttr4, newAttr5, newAttr7, newAttr8, newAttr3, newAttr6, newAttr9, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;
type filtered_google_app, domain, newAttr1, newAttr7, newAttr5, newAttr4, newAttr8, newAttr3, newAttr6, newAttr9, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;
type knox_untrusted_app, domain, newAttr1, newAttr4, newAttr8, newAttr3, newAttr9, newAttr25, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95;
type irm_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr9, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;
type gad_untrusted_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr9, newAttr25, newAttr32, newAttr33, newAttr35, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45;
type carrier_app, domain, newAttr1, newAttr4, newAttr7, newAttr5, newAttr3, newAttr8, newAttr6, newAttr9, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr97;

#line 24
typeattribute untrusted_app appdomain;
typeattribute umcagent_app appdomain;
typeattribute vpn_untrusted_app appdomain;
typeattribute trustonicpartner_app appdomain;
typeattribute llk_untrusted_app appdomain;
typeattribute filtered_untrusted_app appdomain;
typeattribute filtered_google_app appdomain;
typeattribute knox_untrusted_app appdomain;
typeattribute irm_app appdomain;
typeattribute gad_untrusted_app appdomain;
typeattribute carrier_app appdomain;
#line 24
# Label ashmem objects with our own unique type.
#line 24

#line 24
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 24
type untrusted_app_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 24
type_transition untrusted_app tmpfs:file untrusted_app_tmpfs;
type_transition umcagent_app tmpfs:file untrusted_app_tmpfs;
type_transition vpn_untrusted_app tmpfs:file untrusted_app_tmpfs;
type_transition trustonicpartner_app tmpfs:file untrusted_app_tmpfs;
type_transition llk_untrusted_app tmpfs:file untrusted_app_tmpfs;
type_transition filtered_untrusted_app tmpfs:file untrusted_app_tmpfs;
type_transition filtered_google_app tmpfs:file untrusted_app_tmpfs;
type_transition knox_untrusted_app tmpfs:file untrusted_app_tmpfs;
type_transition irm_app tmpfs:file untrusted_app_tmpfs;
type_transition gad_untrusted_app tmpfs:file untrusted_app_tmpfs;
type_transition carrier_app tmpfs:file untrusted_app_tmpfs;
#line 24
allow untrusted_app untrusted_app_tmpfs:file { read write };
allow umcagent_app untrusted_app_tmpfs:file { read write };
allow vpn_untrusted_app untrusted_app_tmpfs:file { read write };
allow trustonicpartner_app untrusted_app_tmpfs:file { read write };
allow llk_untrusted_app untrusted_app_tmpfs:file { read write };
allow filtered_untrusted_app untrusted_app_tmpfs:file { read write };
allow filtered_google_app untrusted_app_tmpfs:file { read write };
allow knox_untrusted_app untrusted_app_tmpfs:file { read write };
allow irm_app untrusted_app_tmpfs:file { read write };
allow gad_untrusted_app untrusted_app_tmpfs:file { read write };
allow carrier_app untrusted_app_tmpfs:file { read write };
#line 24

#line 24
# Map with PROT_EXEC.
#line 24
allow untrusted_app untrusted_app_tmpfs:file execute;
allow umcagent_app untrusted_app_tmpfs:file execute;
allow vpn_untrusted_app untrusted_app_tmpfs:file execute;
allow trustonicpartner_app untrusted_app_tmpfs:file execute;
allow llk_untrusted_app untrusted_app_tmpfs:file execute;
allow filtered_untrusted_app untrusted_app_tmpfs:file execute;
allow filtered_google_app untrusted_app_tmpfs:file execute;
allow knox_untrusted_app untrusted_app_tmpfs:file execute;
allow irm_app untrusted_app_tmpfs:file execute;
allow gad_untrusted_app untrusted_app_tmpfs:file execute;
allow carrier_app untrusted_app_tmpfs:file execute;
#line 24


#line 25
typeattribute untrusted_app netdomain;
typeattribute umcagent_app netdomain;
typeattribute vpn_untrusted_app netdomain;
typeattribute trustonicpartner_app netdomain;
typeattribute llk_untrusted_app netdomain;
typeattribute filtered_untrusted_app netdomain;
typeattribute filtered_google_app netdomain;
typeattribute knox_untrusted_app netdomain;
typeattribute irm_app netdomain;
typeattribute gad_untrusted_app netdomain;
typeattribute carrier_app netdomain;
#line 25


#line 26
typeattribute untrusted_app bluetoothdomain;
typeattribute umcagent_app bluetoothdomain;
typeattribute vpn_untrusted_app bluetoothdomain;
typeattribute trustonicpartner_app bluetoothdomain;
typeattribute llk_untrusted_app bluetoothdomain;
typeattribute filtered_untrusted_app bluetoothdomain;
typeattribute filtered_google_app bluetoothdomain;
typeattribute knox_untrusted_app bluetoothdomain;
typeattribute irm_app bluetoothdomain;
typeattribute gad_untrusted_app bluetoothdomain;
typeattribute carrier_app bluetoothdomain;
#line 26


# Some apps ship with shared libraries and binaries that they write out
# to their sandbox directory and then execute.
allow untrusted_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow umcagent_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow vpn_untrusted_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow trustonicpartner_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow llk_untrusted_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow filtered_untrusted_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow filtered_google_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow knox_untrusted_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow irm_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow untrusted_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow umcagent_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow vpn_untrusted_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow trustonicpartner_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow llk_untrusted_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow filtered_untrusted_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow filtered_google_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow knox_untrusted_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow irm_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow gad_untrusted_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow gad_untrusted_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow carrier_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
allow carrier_app gad_untrusted_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };
#line 31

allow untrusted_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow umcagent_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vpn_untrusted_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow trustonicpartner_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow llk_untrusted_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow filtered_untrusted_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow filtered_google_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow knox_untrusted_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow irm_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow gad_untrusted_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow carrier_app tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 33

# ASEC
allow untrusted_app asec_apk_file:file { getattr open read ioctl lock };
allow umcagent_app asec_apk_file:file { getattr open read ioctl lock };
allow vpn_untrusted_app asec_apk_file:file { getattr open read ioctl lock };
allow trustonicpartner_app asec_apk_file:file { getattr open read ioctl lock };
allow llk_untrusted_app asec_apk_file:file { getattr open read ioctl lock };
allow filtered_untrusted_app asec_apk_file:file { getattr open read ioctl lock };
allow filtered_google_app asec_apk_file:file { getattr open read ioctl lock };
allow knox_untrusted_app asec_apk_file:file { getattr open read ioctl lock };
allow irm_app asec_apk_file:file { getattr open read ioctl lock };
allow gad_untrusted_app asec_apk_file:file { getattr open read ioctl lock };
allow carrier_app asec_apk_file:file { getattr open read ioctl lock };
#line 36
# Execute libs in asec containers.
allow untrusted_app asec_public_file:file { execute execmod };
allow umcagent_app asec_public_file:file { execute execmod };
allow vpn_untrusted_app asec_public_file:file { execute execmod };
allow trustonicpartner_app asec_public_file:file { execute execmod };
allow llk_untrusted_app asec_public_file:file { execute execmod };
allow filtered_untrusted_app asec_public_file:file { execute execmod };
allow filtered_google_app asec_public_file:file { execute execmod };
allow knox_untrusted_app asec_public_file:file { execute execmod };
allow irm_app asec_public_file:file { execute execmod };
allow gad_untrusted_app asec_public_file:file { execute execmod };
allow carrier_app asec_public_file:file { execute execmod };
#line 38

# Allow the allocation and use of ptys
# Used by: https://play.google.com/store/apps/details?id=jackpal.androidterm

#line 41
# Each domain gets a unique devpts type.
#line 41
type untrusted_app_devpts, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
#line 41
# Label the pty with the unique type when created.
#line 41
type_transition untrusted_app devpts:chr_file untrusted_app_devpts;
type_transition umcagent_app devpts:chr_file untrusted_app_devpts;
type_transition vpn_untrusted_app devpts:chr_file untrusted_app_devpts;
type_transition trustonicpartner_app devpts:chr_file untrusted_app_devpts;
type_transition llk_untrusted_app devpts:chr_file untrusted_app_devpts;
type_transition filtered_untrusted_app devpts:chr_file untrusted_app_devpts;
type_transition filtered_google_app devpts:chr_file untrusted_app_devpts;
type_transition knox_untrusted_app devpts:chr_file untrusted_app_devpts;
type_transition irm_app devpts:chr_file untrusted_app_devpts;
type_transition gad_untrusted_app devpts:chr_file untrusted_app_devpts;
type_transition carrier_app devpts:chr_file untrusted_app_devpts;
#line 41
# Allow use of the pty after creation.
#line 41
allow untrusted_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow umcagent_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow vpn_untrusted_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow trustonicpartner_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow llk_untrusted_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow filtered_untrusted_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow filtered_google_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow knox_untrusted_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow irm_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow gad_untrusted_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
allow carrier_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
#line 41
# Note: devpts:dir search and ptmx_device:chr_file rw_file_perms
#line 41
# allowed to everyone via domain.te.
#line 41


# Used by Finsky / Android "Verify Apps" functionality when
# running "adb install foo.apk".
# TODO: Long term, we don't want apps probing into shell data files.
# Figure out a way to remove these rules.
allow untrusted_app shell_data_file:file { getattr open read ioctl lock };
allow umcagent_app shell_data_file:file { getattr open read ioctl lock };
allow vpn_untrusted_app shell_data_file:file { getattr open read ioctl lock };
allow trustonicpartner_app shell_data_file:file { getattr open read ioctl lock };
allow llk_untrusted_app shell_data_file:file { getattr open read ioctl lock };
allow filtered_untrusted_app shell_data_file:file { getattr open read ioctl lock };
allow filtered_google_app shell_data_file:file { getattr open read ioctl lock };
allow knox_untrusted_app shell_data_file:file { getattr open read ioctl lock };
allow irm_app shell_data_file:file { getattr open read ioctl lock };
allow gad_untrusted_app shell_data_file:file { getattr open read ioctl lock };
allow carrier_app shell_data_file:file { getattr open read ioctl lock };
#line 48
allow untrusted_app shell_data_file:dir { open getattr read search ioctl };
allow umcagent_app shell_data_file:dir { open getattr read search ioctl };
allow vpn_untrusted_app shell_data_file:dir { open getattr read search ioctl };
allow trustonicpartner_app shell_data_file:dir { open getattr read search ioctl };
allow llk_untrusted_app shell_data_file:dir { open getattr read search ioctl };
allow filtered_untrusted_app shell_data_file:dir { open getattr read search ioctl };
allow filtered_google_app shell_data_file:dir { open getattr read search ioctl };
allow knox_untrusted_app shell_data_file:dir { open getattr read search ioctl };
allow irm_app shell_data_file:dir { open getattr read search ioctl };
allow gad_untrusted_app shell_data_file:dir { open getattr read search ioctl };
allow carrier_app shell_data_file:dir { open getattr read search ioctl };
#line 49

# b/18504118: Allow reads from /data/anr/traces.txt
# TODO: We shouldn't be allowing all untrusted_apps to read
# this file. This is only needed for the GMS feedback agent.
# See also b/18340553. GMS runs as untrusted_app, and
# it's too late to change the domain it runs in.
# This line needs to be deleted.
allow untrusted_app anr_data_file:file { getattr open read ioctl lock };
allow umcagent_app anr_data_file:file { getattr open read ioctl lock };
allow vpn_untrusted_app anr_data_file:file { getattr open read ioctl lock };
allow trustonicpartner_app anr_data_file:file { getattr open read ioctl lock };
allow llk_untrusted_app anr_data_file:file { getattr open read ioctl lock };
allow filtered_untrusted_app anr_data_file:file { getattr open read ioctl lock };
allow filtered_google_app anr_data_file:file { getattr open read ioctl lock };
allow knox_untrusted_app anr_data_file:file { getattr open read ioctl lock };
allow irm_app anr_data_file:file { getattr open read ioctl lock };
allow gad_untrusted_app anr_data_file:file { getattr open read ioctl lock };
allow carrier_app anr_data_file:file { getattr open read ioctl lock };
#line 57

#
# Rules migrated from old app domains coalesced into untrusted_app.
# This includes what used to be media_app, shared_app, and release_app.
#

# Access /dev/mtp_usb.
allow untrusted_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow umcagent_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vpn_untrusted_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow trustonicpartner_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow llk_untrusted_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow filtered_untrusted_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow filtered_google_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow knox_untrusted_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow irm_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow gad_untrusted_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow carrier_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 65

# Access to /data/media.
allow untrusted_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow umcagent_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vpn_untrusted_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow trustonicpartner_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow llk_untrusted_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow filtered_untrusted_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow filtered_google_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_untrusted_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow irm_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow gad_untrusted_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow carrier_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 68
allow untrusted_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow umcagent_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vpn_untrusted_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow trustonicpartner_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow llk_untrusted_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow filtered_untrusted_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow filtered_google_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_untrusted_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow irm_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gad_untrusted_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow carrier_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 69

# Write to /cache.
allow untrusted_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow umcagent_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vpn_untrusted_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow trustonicpartner_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow llk_untrusted_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow filtered_untrusted_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow filtered_google_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_untrusted_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow irm_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow gad_untrusted_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow carrier_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 72
allow untrusted_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow umcagent_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vpn_untrusted_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow trustonicpartner_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow llk_untrusted_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow filtered_untrusted_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow filtered_google_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_untrusted_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow irm_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gad_untrusted_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow carrier_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 73

###
### neverallow rules
###
## SEC_SEforAndroid
#line 99


# Allow verifier to access staged apks.
allow untrusted_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow umcagent_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow vpn_untrusted_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow trustonicpartner_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow llk_untrusted_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow filtered_untrusted_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow filtered_google_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow knox_untrusted_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow irm_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow gad_untrusted_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
allow carrier_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl };
#line 103
allow untrusted_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow umcagent_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow vpn_untrusted_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow trustonicpartner_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow llk_untrusted_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow filtered_untrusted_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow filtered_google_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow knox_untrusted_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow irm_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
allow gad_untrusted_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
#line 104
allow carrier_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/aosp/vdc.te"
# vdc spawned from init for the following services:
#  defaultcrypto
#  encrypt
#
# We also transition into this domain from dumpstate, when
# collecting bug reports.

type vdc, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type vdc_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 11

#line 11
# Allow the necessary permissions.
#line 11

#line 11
# Old domain may exec the file and transition to the new domain.
#line 11
allow init vdc_exec:file { getattr open read execute };
#line 11
allow init vdc:process transition;
#line 11
# New domain is entered by executing the file.
#line 11
allow vdc vdc_exec:file { entrypoint open read execute getattr };
#line 11
# New domain can send SIGCHLD to its caller.
#line 11
allow vdc init:process sigchld;
#line 11
# Enable AT_SECURE, i.e. libc secure mode.
#line 11
dontaudit init vdc:process noatsecure;
#line 11
# XXX dontaudit candidate but requires further study.
#line 11
allow init vdc:process { siginh rlimitinh };
#line 11

#line 11
# Make the transition occur by default.
#line 11
type_transition init vdc_exec:process vdc;
#line 11

#line 11

#line 11
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 11
type vdc_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 11
type_transition vdc tmpfs:file vdc_tmpfs;
#line 11
allow vdc vdc_tmpfs:file { read write };
#line 11

#line 11



#line 13
allow vdc vold_socket:sock_file write;
#line 13
allow vdc vold:unix_stream_socket connectto;
#line 13


# vdc sends information back to dumpstate when "adb bugreport" is used
allow vdc dumpstate:fd use;
allow vdc dumpstate:unix_stream_socket { read write getattr };

# vdc information is written to shell owned bugreport files
allow vdc shell_data_file:file { write getattr };

# Why?
allow vdc dumpstate:unix_dgram_socket { read write };
#line 1 "vendor/samsung/common/sepolicy/aosp/vold.te"
# volume manager
type vold, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type vold_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init vold_exec:file { getattr open read execute };
#line 5
allow init vold:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow vold vold_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow vold init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init vold:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init vold:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init vold_exec:process vold;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type vold_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 5
type_transition vold tmpfs:file vold_tmpfs;
#line 5
allow vold vold_tmpfs:file { read write };
#line 5

#line 5


typeattribute vold mlstrustedsubject;
allow vold system_file:file { getattr execute execute_no_trans };
allow vold block_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold block_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold device:dir write;
allow vold devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow vold rootfs:dir mounton;
allow vold sdcard_type:dir mounton;
allow vold sdcard_type:filesystem { mount remount unmount };
allow vold sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold tmpfs:filesystem { mount unmount };
allow vold tmpfs:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold tmpfs:dir mounton;
allow vold self:capability { net_admin dac_override mknod sys_admin chown fowner fsetid };
allow vold self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow vold app_data_file:dir search;
allow vold gad_untrusted_app_data_file:dir search;
#line 24
allow vold app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow vold gad_untrusted_app_data_file:file { { getattr open read ioctl lock } { open append write } };
#line 25
allow vold loop_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow vold dm_device:chr_file { { getattr open read ioctl lock } { open append write } };
# For vold Process::killProcessesWithOpenFiles function.
allow vold domain:dir { open getattr read search ioctl };
allow vold domain:{ file lnk_file } { getattr open read ioctl lock };
allow vold domain:process { signal sigkill };
allow vold self:capability { sys_ptrace kill };

# For blkid
allow vold shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# XXX Label sysfs files with a specific type?
allow vold sysfs:file { { getattr open read ioctl lock } { open append write } };


#line 39
type_transition vold device:chr_file klog_device "__kmsg__";
#line 39
allow vold klog_device:chr_file { create open write unlink };
#line 39
allow vold device:dir { write add_name remove_name };
#line 39


# Log fsck results
allow vold fscklogs:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow vold fscklogs:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#
# Rules to support encrypted fs support.
#

# Set property.

#line 50
allow vold property_socket:sock_file write;
#line 50
allow vold init:unix_stream_socket connectto;
#line 50


# Unmount and mount the fs.
allow vold labeledfs:filesystem { mount unmount remount };

# Access /efs/userdata_footer.
# XXX Split into a separate type?
allow vold efs_file:file { { getattr open read ioctl lock } { open append write } };

# Create and mount on /data/tmp_mnt.
allow vold system_data_file:dir { create { { open getattr read search ioctl } { open search write add_name remove_name } } mounton };

# Set scheduling policy of kernel processes
allow vold kernel:process setsched;

# Property Service
allow vold vold_prop:property_service set;
allow vold powerctl_prop:property_service set;
allow vold ctl_fuse_prop:property_service set;

# ASEC
allow vold asec_image_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold asec_image_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

#line 73
allow vold security_file:dir { open getattr read search ioctl };
allow vold security_spota_file:dir { open getattr read search ioctl };
#line 73
allow vold security_file:file { getattr open read ioctl lock };
allow vold security_spota_file:file { getattr open read ioctl lock };
#line 73

allow vold asec_apk_file:dir { { { open getattr read search ioctl } { open search write add_name remove_name } } setattr relabelfrom relabelto };
allow vold asec_public_file:dir { relabelto setattr };
allow vold asec_apk_file:file { { getattr open read ioctl lock } setattr relabelfrom relabelto };
allow vold asec_public_file:file { relabelto setattr };
# restorecon files in asec containers created on 4.2 or earlier.
allow vold unlabeled:dir { { open getattr read search ioctl } setattr relabelfrom };
allow vold unlabeled:file { { getattr open read ioctl lock } setattr relabelfrom };

# Handle wake locks (used for device encryption)

#line 83
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 83
allow vold sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };
#line 83
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 83
allow vold self:capability2 block_suspend;
#line 83


# talk to batteryservice

#line 86
# Call the servicemanager and transfer references to it.
#line 86
allow vold servicemanager:binder { call transfer };
#line 86
# servicemanager performs getpidcon on clients.
#line 86
allow servicemanager vold:dir search;
#line 86
allow servicemanager vold:file { read open };
#line 86
allow servicemanager vold:process getattr;
#line 86
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 86
# all domains in domain.te.
#line 86


#line 87
# Call the server domain and optionally transfer references to it.
#line 87
allow vold healthd:binder { call transfer };
#line 87
# Allow the serverdomain to transfer references to the client on the reply.
#line 87
allow healthd vold:binder transfer;
#line 87
# Receive and use open files from the server.
#line 87
allow vold healthd:fd use;
#line 87


# talk to keymaster
allow vold tee_device:chr_file { { getattr open read ioctl lock } { open append write } };

#line 1 "vendor/samsung/common/sepolicy/aosp/watchdogd.te"
# watchdogd seclabel is specified in init.<board>.rc
type watchdogd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
allow watchdogd self:capability mknod;
allow watchdogd device:dir { add_name write remove_name };
allow watchdogd watchdog_device:chr_file { { getattr open read ioctl lock } { open append write } };
# because of /dev/__kmsg__ and /dev/__null__

#line 7
type_transition watchdogd device:chr_file klog_device "__kmsg__";
#line 7
allow watchdogd klog_device:chr_file { create open write unlink };
#line 7
allow watchdogd device:dir { write add_name remove_name };
#line 7

type_transition watchdogd device:chr_file null_device "__null__";
allow watchdogd null_device:chr_file { create unlink };
#line 1 "vendor/samsung/common/sepolicy/aosp/wpa.te"
# wpa - wpa supplicant or equivalent
type wpa, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type wpa_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init wpa_exec:file { getattr open read execute };
#line 5
allow init wpa:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow wpa wpa_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow wpa init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init wpa:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init wpa:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init wpa_exec:process wpa;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type wpa_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 5
type_transition wpa tmpfs:file wpa_tmpfs;
#line 5
allow wpa wpa_tmpfs:file { read write };
#line 5

#line 5



#line 7
typeattribute wpa netdomain;
#line 7


allow wpa kernel:system module_request;
allow wpa self:capability { setuid net_admin setgid net_raw };
allow wpa cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow wpa self:netlink_route_socket nlmsg_write;
allow wpa self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow wpa self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow wpa wifi_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow wpa wifi_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#line 17
allow wpa system_wpa_socket:sock_file write;
#line 17
allow wpa system_server:unix_dgram_socket sendto;
#line 17



#line 19
# Call the servicemanager and transfer references to it.
#line 19
allow wpa servicemanager:binder { call transfer };
#line 19
# servicemanager performs getpidcon on clients.
#line 19
allow servicemanager wpa:dir search;
#line 19
allow servicemanager wpa:file { read open };
#line 19
allow servicemanager wpa:process getattr;
#line 19
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 19
# all domains in domain.te.
#line 19


# Create a socket for receiving info from wpa
type_transition wpa wifi_data_file:dir wpa_socket "sockets";
allow wpa wpa_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow wpa wpa_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


#line 26
 allow keystore wpa:dir search;
#line 26
 allow keystore wpa:file { read open };
#line 26
 allow keystore wpa:process getattr;
#line 26
  
#line 26
# Call the server domain and optionally transfer references to it.
#line 26
allow wpa keystore:binder { call transfer };
#line 26
# Allow the serverdomain to transfer references to the client on the reply.
#line 26
allow keystore wpa:binder transfer;
#line 26
# Receive and use open files from the server.
#line 26
allow wpa keystore:fd use;
#line 26

#line 26


# WPA (wifi) has a restricted set of permissions from the default.
allow wpa keystore:keystore_key { get sign verify };

# Allow wpa_cli to work. wpa_cli creates a socket in
# /data/misc/wifi/sockets which wpa supplicant communicates with.

#line 33
  
#line 33
allow wpa wpa_socket:sock_file write;
#line 33
allow wpa su:unix_dgram_socket sendto;
#line 33

#line 35

#line 1 "vendor/samsung/common/sepolicy/aosp/zygote.te"
# zygote
type zygote, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type zygote_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init zygote_exec:file { getattr open read execute };
#line 5
allow init zygote:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow zygote zygote_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow zygote init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init zygote:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init zygote:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init zygote_exec:process zygote;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type zygote_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 5
type_transition zygote tmpfs:file zygote_tmpfs;
#line 5
allow zygote zygote_tmpfs:file { read write };
#line 5

#line 5

typeattribute zygote mlstrustedsubject;
# Override DAC on files and switch uid/gid.
allow zygote self:capability { dac_override setgid setuid fowner chown };
# Drop capabilities from bounding set.
allow zygote self:capability setpcap;
# Switch SELinux context to app domains.
allow zygote self:process setcurrent;
allow zygote system_server:process dyntransition;
allow zygote appdomain:process dyntransition;
# Allow zygote to read app /proc/pid dirs (b/10455872)
allow zygote appdomain:dir { getattr search };
allow zygote appdomain:file { { getattr open read ioctl lock } };
# Move children into the peer process group.
allow zygote system_server:process { getpgid setpgid };
allow zygote appdomain:process { getpgid setpgid };
# Read system data.
allow zygote system_data_file:dir { open getattr read search ioctl };
allow zygote system_data_file:file { getattr open read ioctl lock };
## SEC_SEforAndroid : keep these permissions because master branch still includes.
# Read system security data.
allow zygote keychain_data_file:dir { open getattr read search ioctl };
allow zygote keychain_data_file:file { getattr open read ioctl lock };
# Write to /data/dalvik-cache.
allow zygote dalvikcache_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow zygote dalvikcache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
# Create symlinks in /data/dalvik-cache
allow zygote dalvikcache_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
# Write to /data/resource-cache
allow zygote resourcecache_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow zygote resourcecache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
# For art.
allow zygote dalvikcache_data_file:file execute;
# Execute dexopt.
allow zygote system_file:file { getattr execute execute_no_trans };
allow zygote dex2oat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
# Control cgroups.
allow zygote cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow zygote self:capability sys_admin;
# Check validity of SELinux context before use.

#line 45
allow zygote selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 45
allow zygote kernel:security check_context;
#line 45

# Check SELinux permissions.

#line 47
allow zygote selinuxfs:file { { getattr open read ioctl lock } { open append write } };
#line 47
allow zygote kernel:security compute_av;
#line 47
allow zygote self:netlink_selinux_socket *;
#line 47

# Read /seapp_contexts and /data/security/seapp_contexts

#line 49
allow zygote security_file:dir { open getattr read search ioctl };
allow zygote security_spota_file:dir { open getattr read search ioctl };
#line 49
allow zygote security_file:file { getattr open read ioctl lock };
allow zygote security_spota_file:file { getattr open read ioctl lock };
#line 49


# Native bridge functionality requires that zygote replaces
# /proc/cpuinfo with /system/lib/<ISA>/cpuinfo using a bind mount
allow zygote proc_cpuinfo:file mounton;

# Setting up /storage/emulated.
allow zygote rootfs:dir mounton;
allow zygote sdcard_type:dir { write search setattr create add_name mounton };
dontaudit zygote self:capability fsetid;
allow zygote tmpfs:dir { write create add_name setattr mounton search };
allow zygote tmpfs:filesystem mount;
allow zygote labeledfs:filesystem remount;

# Handle --invoke-with command when launching Zygote with a wrapper command.
allow zygote zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 1 "vendor/samsung/common/sepolicy/sec_common/actlmand.te"
#
# actlmand
#

############ aosp and sec_common #############
########## type and macro.
type actlmand, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type actlmand_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute actlmand trusteddomain;
typeattribute actlmand system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init actlmand_exec:file { getattr open read execute };
#line 13
allow init actlmand:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow actlmand actlmand_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow actlmand init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init actlmand:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init actlmand:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init actlmand_exec:process actlmand;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type actlmand_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition actlmand tmpfs:file actlmand_tmpfs;
#line 13
allow actlmand actlmand_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
#neverallow Google CTS-android-5.0.2_r1 : remove sys_rawio, allow actlmand self:capability { setuid sys_rawio setgid dac_override };
allow actlmand self:capability { setuid setgid dac_override };

########## fs_type
########## dev_type
#neverallow Google CTS-android-5.0.2_r1 : allow actlmand block_device:blk_file rw_file_perms;
allow actlmand block_device:dir { open getattr read search ioctl };
allow actlmand dw_mmc_device:dir { open getattr read search ioctl };
allow actlmand efsblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow actlmand emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow actlmand system_data_file:dir { open search write add_name remove_name };
allow actlmand system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow actlmand system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.

############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/androidshmservice.te"
#
# androidshmservice
#

############ aosp and sec_common #############
########## type and macro.
type androidshmservice, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type androidshmservice_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# for B2C users
typeattribute androidshmservice trusteddomain;
typeattribute androidshmservice system_domain;


#line 14

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow init androidshmservice_exec:file { getattr open read execute };
#line 14
allow init androidshmservice:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow androidshmservice androidshmservice_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow androidshmservice init:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit init androidshmservice:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow init androidshmservice:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition init androidshmservice_exec:process androidshmservice;
#line 14

#line 14

#line 14
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 14
type androidshmservice_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 14
type_transition androidshmservice tmpfs:file androidshmservice_tmpfs;
#line 14
allow androidshmservice androidshmservice_tmpfs:file { read write };
#line 14

#line 14


#line 15
# Call the servicemanager and transfer references to it.
#line 15
allow androidshmservice servicemanager:binder { call transfer };
#line 15
# servicemanager performs getpidcon on clients.
#line 15
allow servicemanager androidshmservice:dir search;
#line 15
allow servicemanager androidshmservice:file { read open };
#line 15
allow servicemanager androidshmservice:process getattr;
#line 15
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 15
# all domains in domain.te.
#line 15


#line 16
allow androidshmservice init:unix_stream_socket connectto;
#line 16
allow androidshmservice init:unix_stream_socket { read write };
#line 16


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/sec_common/apaservice.te"
#
# apaservice
#

############ aosp and sec_common #############
########## type and macro.
type apaservice, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type apaservice_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute apaservice mlstrustedsubject;
# for B2C users
typeattribute apaservice trusteddomain;
typeattribute apaservice system_domain;


#line 14
# Call the servicemanager and transfer references to it.
#line 14
allow apaservice servicemanager:binder { call transfer };
#line 14
# servicemanager performs getpidcon on clients.
#line 14
allow servicemanager apaservice:dir search;
#line 14
allow servicemanager apaservice:file { read open };
#line 14
allow servicemanager apaservice:process getattr;
#line 14
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 14
# all domains in domain.te.
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow apaservice container_app:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow container_app apaservice:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow apaservice container_app:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow apaservice jackservice:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow jackservice apaservice:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow apaservice jackservice:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow apaservice platform_app:binder { call transfer };
allow apaservice s_platform_app:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow platform_app apaservice:binder transfer;
allow s_platform_app apaservice:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow apaservice platform_app:fd use;
allow apaservice s_platform_app:fd use;
#line 17


#line 18

#line 18
# Allow the necessary permissions.
#line 18

#line 18
# Old domain may exec the file and transition to the new domain.
#line 18
allow init apaservice_exec:file { getattr open read execute };
#line 18
allow init apaservice:process transition;
#line 18
# New domain is entered by executing the file.
#line 18
allow apaservice apaservice_exec:file { entrypoint open read execute getattr };
#line 18
# New domain can send SIGCHLD to its caller.
#line 18
allow apaservice init:process sigchld;
#line 18
# Enable AT_SECURE, i.e. libc secure mode.
#line 18
dontaudit init apaservice:process noatsecure;
#line 18
# XXX dontaudit candidate but requires further study.
#line 18
allow init apaservice:process { siginh rlimitinh };
#line 18

#line 18
# Make the transition occur by default.
#line 18
type_transition init apaservice_exec:process apaservice;
#line 18

#line 18

#line 18
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 18
type apaservice_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 18
type_transition apaservice tmpfs:file apaservice_tmpfs;
#line 18
allow apaservice apaservice_tmpfs:file { read write };
#line 18

#line 18


#line 19
allow apaservice init:unix_stream_socket connectto;
#line 19
allow apaservice init:unix_stream_socket { read write };
#line 19


########## self and domain_type
allow apaservice jackservice:unix_stream_socket connectto;
allow apaservice radio:fd use;
allow apaservice system_app:fd use;
allow apaservice s_system_app:fd use;
#line 25
allow apaservice untrusteddomain:fd use;
allow apaservice untrusteddomain:unix_stream_socket connectto;

########## fs_type
allow apaservice sdcard_internal:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow apaservice sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
########## file_type
allow apaservice app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow apaservice gad_untrusted_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 35
allow apaservice app_data_file:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow apaservice gad_untrusted_app_data_file:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
#line 36
allow apaservice app_library_file:dir { open getattr read search ioctl };
allow apaservice jack_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow apaservice jack_data_file:{ file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow apaservice jack_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow apaservice jack_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow apaservice app_library_file:file execute;
allow apaservice media_rw_data_file:dir { open search write add_name remove_name };
allow apaservice media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow apaservice platform_app_data_file:dir { open getattr read search ioctl };
allow apaservice system_data_file:dir { open search write add_name remove_name };
allow apaservice system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow apaservice system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow apaservice system_file:file { getattr execute execute_no_trans };

########## etc_type
allow apaservice apaservice_service:service_manager add;

########## known issue.
# Request from Professional Audio SDK team. Dae Beom Park<dbs.park@samsung.com>
# related to simpleclient apk
#neverallow Google CTS-android-5.0.2_r1 : allow apaservice apk_data_file:file execute;


############ knox_common #############
########## type and macro.
########## self and domain_type
allow apaservice container_app:binder transfer;

########## fs_type
########## dev_type
########## file_type
allow apaservice container_app_data_backend:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow apaservice bbccontainer_app_data_backend:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 68
allow apaservice container_app_data_backend:file { { getattr open read ioctl lock } { open append write } };
allow apaservice bbccontainer_app_data_backend:file { { getattr open read ioctl lock } { open append write } };
#line 69
allow apaservice container_app_sdcard_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow apaservice container_app_sdcard_file:file { { getattr open read ioctl lock } { open append write } };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { add } for service=com.samsung.android.jam.IAPAService scontext=u:r:apaservice:s0 tcontext=u:object_r:default_android_service:s0 tclass=service_manager
# avc:  denied  { execute } for  pid=2947 comm="Binder_1" path="/data/app/com.samsung.android.sdk.professionalaudio.sample.simpleclient-1/lib/arm/libwave.so" dev="mmcblk0p26" ino=131374 scontext=u:r:apaservice:s0 tcontext=u:object_r:apk_data_file:s0 tclass=file
# avc:  denied  { create } for  pid=294 comm="apaservice" name="apa_settings.cfg" scontext=u:r:apaservice:s0 tcontext=u:object_r:system_data_file:s0 tclass=file SEPF_SM-G900F_5.0_0001
# avc:  denied  { write } for  pid=3053 comm="apaservice" name="jack" dev="sda17" ino=520215 scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_data_file:s0 tclass=dir permissive=1
# avc:  denied  { add_name } for  pid=3053 comm="apaservice" name="apa_settings.cfg" scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_data_file:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=3053 comm="apaservice" name="apa_settings.cfg" scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_data_file:s0 tclass=file permissive=1
# avc:  denied  { write } for  pid=3053 comm="apaservice" path="/data/misc/jack/apa_settings.cfg" dev="sda17" ino=520223 scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_data_file:s0 tclass=file permissive=1
# avc:  denied  { write } for  pid=3053 comm="apaservice" name="jack_default_1038_0" dev="tmpfs" ino=42500 scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_socket:s0 tclass=sock_file permissive=1
# avc:  denied  { create } for  pid=3053 comm="apaservice" name="jack_apa_control_1038_0" scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_socket:s0 tclass=sock_file permissive=1
# avc:  denied  { setattr } for  pid=3053 comm="apaservice" name="jack_apa_control_1038_0" dev="tmpfs" ino=42518 scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_socket:s0 tclass=sock_file permissive=1
# avc:  denied  { unlink } for  pid=10736 comm="apaservice" name="jack_apa_control_1038_0" dev="tmpfs" ino=42518 scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_socket:s0 tclass=sock_file permissive=1
# avc:  denied  { write } for  pid=3051 comm="apaservice" name="jack" dev="tmpfs" ino=5399 scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_socket:s0 tclass=dir permissive=1
# avc:  denied  { add_name } for  pid=3051 comm="apaservice" name="jack_wait_1038_0" scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_socket:s0 tclass=dir permissive=1
# avc:  denied  { remove_name } for  pid=10552 comm="apaservice" name="jack_wait_1038_0" dev="tmpfs" ino=47650 scontext=u:r:apaservice:s0 tcontext=u:object_r:jack_socket:s0 tclass=dir permissive=1
# avc:  denied  { sendto } for  pid=8414 comm="mmusic.morphwiz" path="/dev/socket/jack/set.priority" scontext=u:r:untrusted_app:s0 tcontext=u:r:apaservice:s0 tclass=unix_dgram_socket permissive=1
# avc:  denied  { sendto } for  pid=7916 comm=4173796E635461736B202331 path="/dev/socket/jack/set.priority" scontext=u:r:untrusted_app:s0 tcontext=u:r:apaservice:s0 tclass=unix_dgram_socket permissive=1
# avc:  denied  { connectto } for  pid=2973 comm="Binder_1" path=0070726F66657373696F6E616C617564696F2E617061736572766963652E617061636F6E74726F6C scontext=u:r:apaservice:s0 tcontext=u:r:untrusted_app:s0 tclass=unix_stream_socket


#line 1 "vendor/samsung/common/sepolicy/sec_common/at_distributor.te"
#
# at_distributor
#

############ aosp and sec_common #############
########## type and macro.
type at_distributor, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type at_distributor_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute at_distributor trusteddomain;
typeattribute at_distributor system_domain;


#line 13
allow at_distributor kernel:system syslog_read;
#line 13


#line 14
# Call the servicemanager and transfer references to it.
#line 14
allow at_distributor servicemanager:binder { call transfer };
#line 14
# servicemanager performs getpidcon on clients.
#line 14
allow servicemanager at_distributor:dir search;
#line 14
allow servicemanager at_distributor:file { read open };
#line 14
allow servicemanager at_distributor:process getattr;
#line 14
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 14
# all domains in domain.te.
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow at_distributor binderservicedomain:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow binderservicedomain at_distributor:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow at_distributor binderservicedomain:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow at_distributor bintvoutservice:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow bintvoutservice at_distributor:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow at_distributor bintvoutservice:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow at_distributor nfc:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow nfc at_distributor:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow at_distributor nfc:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow at_distributor radio:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow radio at_distributor:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow at_distributor radio:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow at_distributor sensorhubservice:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow sensorhubservice at_distributor:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow at_distributor sensorhubservice:fd use;
#line 19


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow at_distributor servicemanager:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow servicemanager at_distributor:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow at_distributor servicemanager:fd use;
#line 20


#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow at_distributor syscope_app:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow syscope_app at_distributor:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow at_distributor syscope_app:fd use;
#line 21


#line 22
allow at_distributor dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 22
allow at_distributor dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 22
allow at_distributor dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 22
allow at_distributor bugreport_exec:file { execute execute_no_trans };
#line 22
allow at_distributor dumpstate_exec:file { execute execute_no_trans };
#line 22
allow at_distributor dumpsys_exec:file { execute execute_no_trans };
#line 22


#line 23

#line 23
# Allow the necessary permissions.
#line 23

#line 23
# Old domain may exec the file and transition to the new domain.
#line 23
allow init at_distributor_exec:file { getattr open read execute };
#line 23
allow init at_distributor:process transition;
#line 23
# New domain is entered by executing the file.
#line 23
allow at_distributor at_distributor_exec:file { entrypoint open read execute getattr };
#line 23
# New domain can send SIGCHLD to its caller.
#line 23
allow at_distributor init:process sigchld;
#line 23
# Enable AT_SECURE, i.e. libc secure mode.
#line 23
dontaudit init at_distributor:process noatsecure;
#line 23
# XXX dontaudit candidate but requires further study.
#line 23
allow init at_distributor:process { siginh rlimitinh };
#line 23

#line 23
# Make the transition occur by default.
#line 23
type_transition init at_distributor_exec:process at_distributor;
#line 23

#line 23

#line 23
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 23
type at_distributor_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 23
type_transition at_distributor tmpfs:file at_distributor_tmpfs;
#line 23
allow at_distributor at_distributor_tmpfs:file { read write };
#line 23

#line 23


#line 24
allow at_distributor property_socket:sock_file write;
#line 24
allow at_distributor init:unix_stream_socket connectto;
#line 24


#line 25
allow at_distributor mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 25
allow at_distributor mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 25
# TODO: Figure out proper sockets
#line 25
allow at_distributor mobicoredaemon:unix_stream_socket connectto;
#line 25


########## self and domain_type
allow at_distributor rild:unix_stream_socket connectto;
allow at_distributor sec-ril:unix_stream_socket connectto;
#neverallow Google CTS-android-5.0.2_r1 : remove sys_ptrace, allow at_distributor self:capability { sys_ptrace dac_override setuid fowner chown fsetid };
allow at_distributor self:capability { dac_override setuid fowner chown fsetid };

allow at_distributor self:netlink_route_socket { write getattr setopt read bind create nlmsg_read };
allow at_distributor servicemanager:binder call;

########## fs_type
allow at_distributor cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow at_distributor cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow at_distributor firmware:dir { open getattr read search ioctl };
allow at_distributor firmware:file { getattr open read ioctl lock };
allow at_distributor sysfs:file { open append write };
allow at_distributor sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow at_distributor sysfs_sec:file { { { getattr open read ioctl lock } { open append write } } setattr };

########## dev_type
allow at_distributor alarm_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow at_distributor ashmem_device:chr_file { getattr execute execute_no_trans };

########## file_type
allow at_distributor app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow at_distributor app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow at_distributor at_distributor_tmpfs:file execute;
allow at_distributor carrier_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow at_distributor carrier_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow at_distributor efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow at_distributor efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow at_distributor imei_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow at_distributor imei_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow at_distributor radio_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow at_distributor radio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow at_distributor sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow at_distributor sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow at_distributor shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow at_distributor su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow at_distributor system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow at_distributor system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow at_distributor system_file:file { getattr execute execute_no_trans };
allow at_distributor zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow at_distributor rild_prop:property_service set;

########## known issue.
#r_dir_file(at_distributor, file_type)
# replacing r_dir_file macro and removing container related access
allow at_distributor newAttr59:dir { open getattr read search ioctl };
allow at_distributor newAttr59:{ file lnk_file } { getattr open read ioctl lock };

# Allow /sys/power/wake_lock from nsa 4.4 policy update
allow at_distributor sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

# ui barcode display 
allow at_distributor block_device:dir { open getattr read search ioctl };


############ qcom_common #############
########## type and macro.

#line 88
# Call the server domain and optionally transfer references to it.
#line 88
allow at_distributor system_app:binder { call transfer };
allow at_distributor s_system_app:binder { call transfer };
#line 88
# Allow the serverdomain to transfer references to the client on the reply.
#line 88
allow system_app at_distributor:binder transfer;
allow s_system_app at_distributor:binder transfer;
#line 88
# Receive and use open files from the server.
#line 88
allow at_distributor system_app:fd use;
allow at_distributor s_system_app:fd use;
#line 88


########## self and domain_type
########## fs_type
########## dev_type
allow at_distributor radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow at_distributor qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow at_distributor adbd:dir { open getattr read search ioctl };

########## fs_type
########## dev_type
allow at_distributor uart_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
#  denied  { execute } for  pid=23186 comm="Compiler" dev="tmpfs" ino=255335 scontext=u:r:at_distributor:s0 tcontext=u:object_r:at_d
# avc:  denied  { execute } for  pid=7330 comm="app_process" path="/data/dalvik-cache/arm/system@framework@boot.oat" dev="mmcblk0p26" ino=917510 scontext=u:r:at_distributor:s0 tcontext=u:object_r:dalvikcache_data_file:s0 tclass=file SEPF_SM-G900S_5.0_A001
# avc:  denied  { setattr } for  pid=2997 comm="at_distributor" name="uart_sel" dev="sysfs" ino=11856 scontext=u:r:at_distributor:s0 tcontext=u:object_r:sysfs_sec:s0 tclass=file permissive=1
# avc:  denied  { search } for  pid=3149 comm="at_distributor" name="block" dev="tmpfs" ino=5583 scontext=u:r:at_distributor:s0 tcontext=u:object_r:block_device:s0 tclass=dir permissive=0 SEPF_SM-G925V_5.0.2_0003


#line 1 "vendor/samsung/common/sepolicy/sec_common/bauthserver.te"
#
# bauthserver
#

############ aosp and sec_common #############
########## type and macro.
type bauthserver, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type bauthserver_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
#typeattribute bauthserver trusteddomain;

# temporary permissive to gather the log.
#permissive bauthserver;


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow bauthserver system_app:binder { call transfer };
allow bauthserver s_system_app:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow system_app bauthserver:binder transfer;
allow s_system_app bauthserver:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow bauthserver system_app:fd use;
allow bauthserver s_system_app:fd use;
#line 14


#line 15
# Call the servicemanager and transfer references to it.
#line 15
allow bauthserver servicemanager:binder { call transfer };
#line 15
# servicemanager performs getpidcon on clients.
#line 15
allow servicemanager bauthserver:dir search;
#line 15
allow servicemanager bauthserver:file { read open };
#line 15
allow servicemanager bauthserver:process getattr;
#line 15
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 15
# all domains in domain.te.
#line 15


#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow init bauthserver_exec:file { getattr open read execute };
#line 16
allow init bauthserver:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow bauthserver bauthserver_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow bauthserver init:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit init bauthserver:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow init bauthserver:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition init bauthserver_exec:process bauthserver;
#line 16

#line 16

#line 16
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 16
type bauthserver_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 16
type_transition bauthserver tmpfs:file bauthserver_tmpfs;
#line 16
allow bauthserver bauthserver_tmpfs:file { read write };
#line 16

#line 16


########## self and domain_type
allow bauthserver mobicoredaemon:unix_stream_socket connectto;
allow bauthserver appdomain:fd use;

########## fs_type
allow bauthserver sysfs:file { { getattr open read ioctl lock } { open append write } };
########## dev_type
allow bauthserver mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bauthserver s5p_smem_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bauthserver vfsspi_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bauthserver qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow bauthserver system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bauthserver system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow bauthserver sbfs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bauthserver sbfs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow bauthserver media_rw_data_file:file append;


########## etc_type
allow bauthserver bauthserver_service:service_manager add;

########## known issue.

############ avc_log #############
# avc:  denied  { call } for  pid=3962 comm="bauthserver" scontext=u:r:bauthserver:s0 tcontext=u:r:servicemanager:s0 tclass=binder permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { transfer } for  pid=3962 comm="bauthserver" scontext=u:r:bauthserver:s0 tcontext=u:r:servicemanager:s0 tclass=binder permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { read write } for  pid=3962 comm="bauthserver" name="vfsspi" dev="tmpfs" ino=8891 scontext=u:r:bauthserver:s0 tcontext=u:object_r:vfsspi_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { open } for  pid=3962 comm="bauthserver" path="/dev/vfsspi" dev="tmpfs" ino=8891 scontext=u:r:bauthserver:s0 tcontext=u:object_r:vfsspi_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { ioctl } for  pid=3962 comm="bauthserver" path="/dev/vfsspi" dev="tmpfs" ino=8891 scontext=u:r:bauthserver:s0 tcontext=u:object_r:vfsspi_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { connectto } for  pid=3962 comm="bauthserver" path=006D636461656D6F6E scontext=u:r:bauthserver:s0 tcontext=u:r:mobicoredaemon:s0 tclass=unix_stream_socket permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { read write } for  pid=3962 comm="bauthserver" name="mobicore-user" dev="tmpfs" ino=9115 scontext=u:r:bauthserver:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { open } for  pid=3962 comm="bauthserver" path="/dev/mobicore-user" dev="tmpfs" ino=9115 scontext=u:r:bauthserver:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { ioctl } for  pid=3962 comm="bauthserver" path="/dev/mobicore-user" dev="tmpfs" ino=9115 scontext=u:r:bauthserver:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_
# avc:  denied  { read write } for  pid=3962 comm="bauthserver" name="s5p-smem" dev="tmpfs" ino=9058 scontext=u:r:bauthserver:s0 tcontext=u:object_r:s5p_smem_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { open } for  pid=3962 comm="bauthserver" path="/dev/s5p-smem" dev="tmpfs" ino=9058 scontext=u:r:bauthserver:s0 tcontext=u:object_r:s5p_smem_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { ioctl } for  pid=3962 comm="bauthserver" path="/dev/s5p-smem" dev="tmpfs" ino=9058 scontext=u:r:bauthserver:s0 tcontext=u:object_r:s5p_smem_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { write } for  pid=4172 comm="bauthserver" name="/" dev="dm-0" ino=2 scontext=u:r:bauthserver:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { add_name } for  pid=4172 comm="bauthserver" name="biometrics" scontext=u:r:bauthserver:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=4172 comm="bauthserver" name="biometrics" scontext=u:r:bauthserver:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=4172 comm="bauthserver" name="calib.dat" scontext=u:r:bauthserver:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1
# avc:  denied  { write open } for  pid=4172 comm="bauthserver" path="/data/biometrics/meta/calib.dat" dev="dm-0" ino=521277 scontext=u:r:bauthserver:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1
# avc:  denied  { call } for  pid=6210 comm="bauthserver" scontext=u:r:bauthserver:s0 tcontext=u:r:system_app:s0 tclass=binder permissive=1
# avc:  denied  { read } for  pid=10560 comm="Binder_2" name="calib.dat" dev="sda13" ino=13 scontext=u:r:bauthserver:s0 tcontext=u:object_r:sbfs_file:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { open } for  pid=10560 comm="Binder_2" path="/sbfs/meta/calib.dat" dev="sda13" ino=13 scontext=u:r:bauthserver:s0 tcontext=u:object_r:sbfs_file:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { use } for  pid=13450 comm="dumpsys" path="/storage/emulated/legacy/ACT_LOGS/2015-01-27-22-24-03/act_bugreport_.txt" dev="sdcardfs" ino=524780 scontext=u:r:bauthserver:s0 tcontext=u:r:radio:s0 tclass=fd permissive=1
# avc:  denied  { append } for  pid=13450 comm="dumpsys" path="/storage/emulated/legacy/ACT_LOGS/2015-01-27-22-24-03/act_bugreport_.txt" dev="sdcardfs" ino=524780 scontext=u:r:bauthserver:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file permissive=1
# avc:  denied  { use } for  pid=3122 comm="bauthserver" path=2F6465762F6173686D656D2F4469736361726461626C654D656D6F72794173686D656D416C6C6F6361746F72202864656C6574656429 dev="tmpfs" ino=381307 scontext=u:r:bauthserver:s0 tcontext=u:r:isolated_app:s0 tclass=fd usefd permissive=0
# avc:  denied  { ioctl } for  pid=2273 comm="Binder_1" path="/dev/qseecom" dev="tmpfs" ino=8706 scontext=u:r:bauthserver:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file permissive=1
# avc:  denied  { read write } for  pid=304 comm="bauthserver" name="qseecom" dev="tmpfs" ino=8553 scontext=u:r:bauthserver:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file permissive=1
# avc:  denied  { write } for  pid=428 comm="bauthserver" path="/sys/power/cpufreq_max_limit" name="cpufreq_max_limit" dev="sysfs" ino=80 scontext=u:r:bauthserver:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=1 SEPF_SM-A8000_5.1.1_0017
#line 1 "vendor/samsung/common/sepolicy/sec_common/bintvoutservice.te"
#
# bintvoutservice
#

############ aosp and sec_common #############
########## type and macro.
type bintvoutservice, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type bintvoutservice_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute bintvoutservice trusteddomain;
typeattribute bintvoutservice system_domain;


#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow bintvoutservice servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager bintvoutservice:dir search;
#line 13
allow servicemanager bintvoutservice:file { read open };
#line 13
allow servicemanager bintvoutservice:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow bintvoutservice surfaceflinger:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow surfaceflinger bintvoutservice:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow bintvoutservice surfaceflinger:fd use;
#line 14


#line 15
allow bintvoutservice dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 15
allow bintvoutservice dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow bintvoutservice dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow bintvoutservice bugreport_exec:file { execute execute_no_trans };
#line 15
allow bintvoutservice dumpstate_exec:file { execute execute_no_trans };
#line 15
allow bintvoutservice dumpsys_exec:file { execute execute_no_trans };
#line 15


#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow init bintvoutservice_exec:file { getattr open read execute };
#line 16
allow init bintvoutservice:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow bintvoutservice bintvoutservice_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow bintvoutservice init:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit init bintvoutservice:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow init bintvoutservice:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition init bintvoutservice_exec:process bintvoutservice;
#line 16

#line 16

#line 16
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 16
type bintvoutservice_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 16
type_transition bintvoutservice tmpfs:file bintvoutservice_tmpfs;
#line 16
allow bintvoutservice bintvoutservice_tmpfs:file { read write };
#line 16

#line 16


########## self and domain_type
allow bintvoutservice at_distributor:fd use;
allow bintvoutservice init:unix_stream_socket { connectto read write };
allow bintvoutservice radio:fd use;
allow bintvoutservice surfaceflinger:fd use;
allow bintvoutservice system_app:fd use;
allow bintvoutservice s_system_app:fd use;
#line 24
allow bintvoutservice system_app:fifo_file { open append write };
allow bintvoutservice s_system_app:fifo_file { open append write };
#line 25

########## fs_type
allow bintvoutservice sdcard_type:file { open append write };
allow bintvoutservice sysfs:file { open append write };
allow bintvoutservice sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow bintvoutservice graphics_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bintvoutservice graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow bintvoutservice platform_app_data_file:file { open append write };

########## etc_type
allow bintvoutservice bintvoutservice_service:service_manager add;

########## known issue.
# for CTS
allow bintvoutservice app_data_file:file write;
allow bintvoutservice gad_untrusted_app_data_file:file write;
#line 44
allow bintvoutservice untrusteddomain:fd use;


############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow bintvoutservice hpd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bintvoutservice ump_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { add } for service=TvoutService_C scontext=u:r:bintvoutservice:s0 tcontext=u:object_r:default_android_service:s0 tclass=service_manager


#line 1 "vendor/samsung/common/sepolicy/sec_common/bootchecker.te"
#
# bootchecker
#

############ aosp and sec_common #############
########## type and macro.
type bootchecker, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type bootchecker_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C Mode
typeattribute bootchecker trusteddomain;
typeattribute bootchecker system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init bootchecker_exec:file { getattr open read execute };
#line 13
allow init bootchecker:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow bootchecker bootchecker_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow bootchecker init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init bootchecker:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init bootchecker:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init bootchecker_exec:process bootchecker;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type bootchecker_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition bootchecker tmpfs:file bootchecker_tmpfs;
#line 13
allow bootchecker bootchecker_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
allow bootchecker init:unix_stream_socket connectto;
allow bootchecker kernel:system syslog_read;

########## fs_type
########## dev_type
allow bootchecker device:sock_file write;

########## file_type
allow bootchecker bugreport_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow bootchecker dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bootchecker dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow bootchecker dumpstate_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow bootchecker property_socket:sock_file write;
allow bootchecker shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow bootchecker ctl_dumpstate_prop:property_service set;

########## known issue.


############ avc_log #############
# avc:  denied  { syslog_read } for  pid=439 comm="bootchecker" scontext=u:r:bootchecker:s0 tcontext=u:r:kernel:s0 tclass=system SEPF_SHV-E330S_5.0.1_0002

#line 1 "vendor/samsung/common/sepolicy/sec_common/carrier.te"
#
# carrier_app
#

############ aosp and sec_common #############
########## type and macro.
typeattribute carrier_app mlstrustedsubject;
typealias untrusted_app_devpts alias carrier_app_devpts;
typealias untrusted_app_tmpfs alias carrier_app_tmpfs;

## start of JPN
type dmdocomo_app, untrusteddomain, domain, newAttr1, newAttr4, newAttr7, newAttr5, newAttr8, newAttr3, newAttr6, newAttr2, newAttr9, newAttr10, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr96, newAttr97, newAttr98;

#line 14
typeattribute dmdocomo_app appdomain;
#line 14
# Label ashmem objects with our own unique type.
#line 14

#line 14
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 14
type dmdocomo_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 14
type_transition dmdocomo_app tmpfs:file dmdocomo_app_tmpfs;
#line 14
allow dmdocomo_app dmdocomo_app_tmpfs:file { read write };
#line 14

#line 14
# Map with PROT_EXEC.
#line 14
allow dmdocomo_app dmdocomo_app_tmpfs:file execute;
#line 14


#line 15
# Each domain gets a unique devpts type.
#line 15
type dmdocomo_app_devpts, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
#line 15
# Label the pty with the unique type when created.
#line 15
type_transition dmdocomo_app devpts:chr_file dmdocomo_app_devpts;
#line 15
# Allow use of the pty after creation.
#line 15
allow dmdocomo_app dmdocomo_app_devpts:chr_file { open getattr read write ioctl };
#line 15
# Note: devpts:dir search and ptmx_device:chr_file rw_file_perms
#line 15
# allowed to everyone via domain.te.
#line 15


#line 16
typeattribute dmdocomo_app netdomain;
#line 16


#line 17
typeattribute dmdocomo_app bluetoothdomain;
#line 17


type felica, domain, newAttr1, newAttr4, newAttr7, newAttr5, newAttr8, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 20
typeattribute felica appdomain;
#line 20
# Label ashmem objects with our own unique type.
#line 20

#line 20
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 20
type felica_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 20
type_transition felica tmpfs:file felica_tmpfs;
#line 20
allow felica felica_tmpfs:file { read write };
#line 20

#line 20
# Map with PROT_EXEC.
#line 20
allow felica felica_tmpfs:file execute;
#line 20


#line 21
typeattribute felica netdomain;
#line 21


#line 22
typeattribute felica bluetoothdomain;
#line 22


type felicalock, domain, newAttr1, newAttr7, newAttr5, newAttr4, newAttr8, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 25
typeattribute felicalock appdomain;
#line 25
# Label ashmem objects with our own unique type.
#line 25

#line 25
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 25
type felicalock_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 25
type_transition felicalock tmpfs:file felicalock_tmpfs;
#line 25
allow felicalock felicalock_tmpfs:file { read write };
#line 25

#line 25
# Map with PROT_EXEC.
#line 25
allow felicalock felicalock_tmpfs:file execute;
#line 25


#line 26
typeattribute felicalock netdomain;
#line 26


#line 27
typeattribute felicalock bluetoothdomain;
#line 27


type mfc, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 30
typeattribute mfc appdomain;
#line 30
# Label ashmem objects with our own unique type.
#line 30

#line 30
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 30
type mfc_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 30
type_transition mfc tmpfs:file mfc_tmpfs;
#line 30
allow mfc mfc_tmpfs:file { read write };
#line 30

#line 30
# Map with PROT_EXEC.
#line 30
allow mfc mfc_tmpfs:file execute;
#line 30


#line 31
typeattribute mfc netdomain;
#line 31


#line 32
typeattribute mfc bluetoothdomain;
#line 32


type mfm, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 35
typeattribute mfm appdomain;
#line 35
# Label ashmem objects with our own unique type.
#line 35

#line 35
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 35
type mfm_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 35
type_transition mfm tmpfs:file mfm_tmpfs;
#line 35
allow mfm mfm_tmpfs:file { read write };
#line 35

#line 35
# Map with PROT_EXEC.
#line 35
allow mfm mfm_tmpfs:file execute;
#line 35


#line 36
typeattribute mfm netdomain;
#line 36


#line 37
typeattribute mfm bluetoothdomain;
#line 37


type mfs, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 40
typeattribute mfs appdomain;
#line 40
# Label ashmem objects with our own unique type.
#line 40

#line 40
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 40
type mfs_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 40
type_transition mfs tmpfs:file mfs_tmpfs;
#line 40
allow mfs mfs_tmpfs:file { read write };
#line 40

#line 40
# Map with PROT_EXEC.
#line 40
allow mfs mfs_tmpfs:file execute;
#line 40


#line 41
typeattribute mfs netdomain;
#line 41


#line 42
typeattribute mfs bluetoothdomain;
#line 42


type mfw, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 45
typeattribute mfw appdomain;
#line 45
# Label ashmem objects with our own unique type.
#line 45

#line 45
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 45
type mfw_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 45
type_transition mfw tmpfs:file mfw_tmpfs;
#line 45
allow mfw mfw_tmpfs:file { read write };
#line 45

#line 45
# Map with PROT_EXEC.
#line 45
allow mfw mfw_tmpfs:file execute;
#line 45


#line 46
typeattribute mfw netdomain;
#line 46


#line 47
typeattribute mfw bluetoothdomain;
#line 47


type mmb_apk, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 50
typeattribute mmb_apk appdomain;
#line 50
# Label ashmem objects with our own unique type.
#line 50

#line 50
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 50
type mmb_apk_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 50
type_transition mmb_apk tmpfs:file mmb_apk_tmpfs;
#line 50
allow mmb_apk mmb_apk_tmpfs:file { read write };
#line 50

#line 50
# Map with PROT_EXEC.
#line 50
allow mmb_apk mmb_apk_tmpfs:file execute;
#line 50


#line 51
typeattribute mmb_apk netdomain;
#line 51


#line 52
typeattribute mmb_apk bluetoothdomain;
#line 52


type mmb_mw, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

type oneseg_apk, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 57
typeattribute oneseg_apk appdomain;
#line 57
# Label ashmem objects with our own unique type.
#line 57

#line 57
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 57
type oneseg_apk_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 57
type_transition oneseg_apk tmpfs:file oneseg_apk_tmpfs;
#line 57
allow oneseg_apk oneseg_apk_tmpfs:file { read write };
#line 57

#line 57
# Map with PROT_EXEC.
#line 57
allow oneseg_apk oneseg_apk_tmpfs:file execute;
#line 57


#line 58
typeattribute oneseg_apk netdomain;
#line 58


#line 59
typeattribute oneseg_apk bluetoothdomain;
#line 59

## end of JPN

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
#neverallow Google CTS-android-5.0.2_r1 : allow carrier_app apk_data_file:dir { write remove_name create add_name setattr };
#neverallow Google CTS-android-5.0.2_r1 : allow carrier_app apk_data_file:file { write rename create unlink setattr };
allow carrier_app asec_public_file:file execute;

########## etc_type
########## known issue.

############ avc_log #############
# avc:  denied  { execute } for  pid=18770 comm="com.aspire.mmui" path="/mnt/asec/com.aspire.mm-2/lib/arm/libxmltransform.so" dev="dm-0" ino=27 scontext=u:r:carrier_app:s0 tcontext=u:object_r:asec_public_file:s0 tclass=file

#line 1 "vendor/samsung/common/sepolicy/sec_common/cellgeofenced.te"
#
# cellgeofenced
#

############ aosp and sec_common #############
########## type and macro.
type cellgeofenced, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type cellgeofenced_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute cellgeofenced trusteddomain;
typeattribute cellgeofenced system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init cellgeofenced_exec:file { getattr open read execute };
#line 13
allow init cellgeofenced:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow cellgeofenced cellgeofenced_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow cellgeofenced init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init cellgeofenced:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init cellgeofenced:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init cellgeofenced_exec:process cellgeofenced;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type cellgeofenced_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition cellgeofenced tmpfs:file cellgeofenced_tmpfs;
#line 13
allow cellgeofenced cellgeofenced_tmpfs:file { read write };
#line 13

#line 13


#line 14
allow cellgeofenced rild:unix_stream_socket connectto;
#line 14
allow cellgeofenced rild:unix_stream_socket { read write };
#line 14


########## self and domain_type
########## fs_type
allow cellgeofenced sysfs:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow cellgeofenced sysfs:file { { getattr open read ioctl lock } { open append write } };
allow cellgeofenced sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow cellgeofenced sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/sec_common/charon.te"
#
# charon
#

############ aosp and sec_common #############
########## type and macro.
type charon, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type charon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute charon trusteddomain;
typeattribute charon system_domain;


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow charon servicemanager:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow servicemanager charon:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow charon servicemanager:fd use;
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow charon keystore:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow keystore charon:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow charon keystore:fd use;
#line 14


#line 15

#line 15
# Allow the necessary permissions.
#line 15

#line 15
# Old domain may exec the file and transition to the new domain.
#line 15
allow init charon_exec:file { getattr open read execute };
#line 15
allow init charon:process transition;
#line 15
# New domain is entered by executing the file.
#line 15
allow charon charon_exec:file { entrypoint open read execute getattr };
#line 15
# New domain can send SIGCHLD to its caller.
#line 15
allow charon init:process sigchld;
#line 15
# Enable AT_SECURE, i.e. libc secure mode.
#line 15
dontaudit init charon:process noatsecure;
#line 15
# XXX dontaudit candidate but requires further study.
#line 15
allow init charon:process { siginh rlimitinh };
#line 15

#line 15
# Make the transition occur by default.
#line 15
type_transition init charon_exec:process charon;
#line 15

#line 15

#line 15
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 15
type charon_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 15
type_transition charon tmpfs:file charon_tmpfs;
#line 15
allow charon charon_tmpfs:file { read write };
#line 15

#line 15


#line 16
allow charon init:unix_stream_socket connectto;
#line 16
allow charon init:unix_stream_socket { read write };
#line 16


#line 17
allow charon netd:unix_stream_socket connectto;
#line 17
allow charon netd:unix_stream_socket { read write };
#line 17


########## self and domain_type
allow charon self:capability { net_admin setuid net_bind_service };
allow charon kernel:system module_request;

########## fs_type
allow charon cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow charon cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow charon proc:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow charon proc:file { { getattr open read ioctl lock } { open append write } };
allow charon proc_net:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow charon proc_net:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow charon tun_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow charon dnsproxyd_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow charon ppp_system_file:dir { open getattr read search ioctl };
allow charon ppp_system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow charon property_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow charon vpn_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow charon vpn_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow charon keystore:keystore_key { get sign verify };
allow charon node:{ tcp_socket udp_socket } node_bind;
allow charon port:{ tcp_socket udp_socket } name_bind;
allow charon vpn_prop:property_service set;

########## known issue.


############ avc_log #############
# avc:  denied  { get } for  scontext=u:r:charon:s0 tcontext=u:r:keystore:s0 tclass=keystore_key
# avc:  denied  { sign } for  scontext=u:r:charon:s0 tcontext=u:r:keystore:s0 tclass=keystore_key
# avc:  denied  { write } for  pid=23155 comm="charon" name="xfrm_acq_expires" dev="proc" ino=907479 scontext=u:r:charon:s0 tcontext=u:object_r:proc_net:s0 tclass=file permissive=0 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { module_request } for  pid=8374 comm="charon" kmod="authenc(hmac(sha1),cbc(aes))" scontext=u:r:charon:s0 tcontext=u:r:kernel:s0 tclass=system permissive=0
# avc:  denied  { set } for property=vpn.status scontext=u:r:charon:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service

#line 1 "vendor/samsung/common/sepolicy/sec_common/connfwexe.te"
#
# connfwexe
#

############ aosp and sec_common #############
########## type and macro.
type connfwexe, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type connfwexe_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute connfwexe trusteddomain;
typeattribute connfwexe system_domain;


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow connfwexe servicemanager:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow servicemanager connfwexe:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow connfwexe servicemanager:fd use;
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow connfwexe system:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow system connfwexe:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow connfwexe system:fd use;
#line 14


#line 15
allow connfwexe dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 15
allow connfwexe dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow connfwexe dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow connfwexe bugreport_exec:file { execute execute_no_trans };
#line 15
allow connfwexe dumpstate_exec:file { execute execute_no_trans };
#line 15
allow connfwexe dumpsys_exec:file { execute execute_no_trans };
#line 15


#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow init connfwexe_exec:file { getattr open read execute };
#line 16
allow init connfwexe:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow connfwexe connfwexe_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow connfwexe init:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit init connfwexe:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow init connfwexe:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition init connfwexe_exec:process connfwexe;
#line 16

#line 16

#line 16
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 16
type connfwexe_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 16
type_transition connfwexe tmpfs:file connfwexe_tmpfs;
#line 16
allow connfwexe connfwexe_tmpfs:file { read write };
#line 16

#line 16


########## self and domain_type
allow connfwexe daemon_app_process:process sigkill;
allow connfwexe ddexe:unix_stream_socket connectto;
allow connfwexe init:unix_stream_socket connectto;
allow connfwexe self:capability { dac_override net_raw setuid sys_boot };

########## fs_type
allow connfwexe sysfs:file { { getattr open read ioctl lock } { open append write } };
allow connfwexe sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow connfwexe sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow connfwexe ashmem_device:chr_file { getattr execute execute_no_trans };

########## file_type
#neverallow Google CTS-android-5.0.2_r1 : allow connfwexe dalvikcache_data_file:file { create_file_perms execute };
allow connfwexe dalvikcache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow connfwexe property_socket:sock_file { open append write };
allow connfwexe radio_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow connfwexe radio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow connfwexe shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow connfwexe system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow connfwexe system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow connfwexe system_file:file { getattr execute execute_no_trans };
allow connfwexe zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow connfwexe system_prop:property_service set;

########## known issue.
# for the access pram device, FUS command, AT+SUDDLMOD=0,5 error at T550/T555 L OS.
# param_sec_operation fails 
allow connfwexe block_device:dir { open getattr read search ioctl };
allow connfwexe block_device:lnk_file { getattr open read ioctl lock };
allow connfwexe paramblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow connfwexe emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };


############ avc_log #############
# denied  { search } for  pid=308 comm="connfwexe" name="block" dev="tmpfs" ino=7697 scontext=u:r:connfwexe:s0 tcontext=u:object_r:block_device:s0 tclass=dir permissive=0
# avc:  denied  { sigkill } for  pid=295 comm="connfwexe" scontext=u:r:connfwexe:s0 tcontext=u:r:daemon_app_process:s0 tclass=process permissive=0

#line 1 "vendor/samsung/common/sepolicy/sec_common/corehelper.te"
############ aosp and sec_common #############
########## type and macro.
type corehelper, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type corehelper_sh_file, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#to collect denials
#permissive corehelper;

########## self and domain_type
allow corehelper kernel:fifo_file { getattr open read ioctl lock };

########## file_type
allow corehelper dumplog_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow corehelper dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow corehelper shell_exec:file read;
allow corehelper system_file:file execute_no_trans;

############ avc_log #############
# avc:  denied  { execute_no_trans } for  pid=17130 comm="corehelper.sh" path="/system/bin/gzip" dev="mmcblk0p18" ino=878 scontext=u:r:corehelper:s0 tcontext=u:object_r:system_file:s0 tclass=file SEPF_SM-T805_5.0.2_0009
# avc:  denied  { read } for  pid=14388 comm="corehelper.sh" path="pipe:[67516]" dev="pipefs" ino=67516 scontext=u:r:corehelper:s0 tcontext=u:r:kernel:s0 tclass=fifo_file SEPF_SM-T805_5.0.2_0009
# avc:  denied  { ioctl } for  pid=14388 comm="corehelper.sh" path="pipe:[67516]" dev="pipefs" ino=67516 scontext=u:r:corehelper:s0 tcontext=u:r:kernel:s0 tclass=fifo_file SEPF_SM-T805_5.0.2_0009
# avc:  denied  { getattr } for  pid=14388 comm="corehelper.sh" path="pipe:[67516]" dev="pipefs" ino=67516 scontext=u:r:corehelper:s0 tcontext=u:r:kernel:s0 tclass=fifo_file SEPF_SM-T805_5.0.2_0009
# avc:  denied  { read } for  pid=14388 comm="corehelper.sh" path="/system/bin/sh" dev="mmcblk0p18" ino=988 scontext=u:r:corehelper:s0 tcontext=u:object_r:shell_exec:s0 tclass=file SEPF_SM-T805_5.0.2_0009
# avc:  denied  { write } for  pid=14388 comm="corehelper.sh" name="core" dev="mmcblk0p21" ino=130064 scontext=u:r:corehelper:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir SEPF_SM-T805_5.0.2_0009
# avc:  denied  { add_name } for  pid=14388 comm="corehelper.sh" name="core-AsyncTask.gz" scontext=u:r:corehelper:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir SEPF_SM-T805_5.0.2_0009
# avc:  denied  { create } for  pid=14388 comm="corehelper.sh" name="core-AsyncTask.gz" scontext=u:r:corehelper:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file SEPF_SM-T805_5.0.2_0009
# avc:  denied  { write open } for  pid=14388 comm="corehelper.sh" name="core-AsyncTask.gz" dev="mmcblk0p21" ino=131650 scontext=u:r:corehelper:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file SEPF_SM-T805_5.0.2_0009
#line 1 "vendor/samsung/common/sepolicy/sec_common/cs.te"
#
# cs
#

############ aosp and sec_common #############
########## type and macro.
type cs, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type cs_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute cs trusteddomain;
typeattribute cs system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init cs_exec:file { getattr open read execute };
#line 13
allow init cs:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow cs cs_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow cs init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init cs:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init cs:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init cs_exec:process cs;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type cs_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition cs tmpfs:file cs_tmpfs;
#line 13
allow cs cs_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow cs cs_socket:dir { open search write add_name remove_name };
allow cs cs_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cs efs_file:dir { open getattr read search ioctl };
allow cs efs_file:file { getattr open read ioctl lock };
allow cs system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow cs system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.


############ qcom_common #############
########## type and macro.

#line 32
allow cs firmware:dir { open getattr read search ioctl };
#line 32
allow cs firmware:{ file lnk_file } { getattr open read ioctl lock };
#line 32


########## self and domain_type
########## fs_type
########## dev_type
allow cs qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/daemon_app_process.te"
#
# daemon_app_process
#

############ aosp and sec_common #############
########## type and macro.
type daemon_app_process, domain, newAttr1, newAttr4, newAttr7, newAttr5, newAttr8, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 8
typeattribute daemon_app_process appdomain;
#line 8
# Label ashmem objects with our own unique type.
#line 8

#line 8
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 8
type daemon_app_process_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 8
type_transition daemon_app_process tmpfs:file daemon_app_process_tmpfs;
#line 8
allow daemon_app_process daemon_app_process_tmpfs:file { read write };
#line 8

#line 8
# Map with PROT_EXEC.
#line 8
allow daemon_app_process daemon_app_process_tmpfs:file execute;
#line 8


#line 9
typeattribute daemon_app_process netdomain;
#line 9


# AT+PRECONFG=0,0 : hardware/ril/atd/commandimplementation/PRECONFG.c
# am broadcast -a com.samsung.intent.action.CSC_MODEM_SETTING --es MODE COMPARE_VERIFY_MODEM
# am broadcast -a com.samsung.intent.action.CSC_COMPARE 

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow at_distributor zygote_exec:file { getattr open read execute };
#line 14
allow at_distributor daemon_app_process:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow daemon_app_process zygote_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow daemon_app_process at_distributor:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit at_distributor daemon_app_process:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow at_distributor daemon_app_process:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition at_distributor zygote_exec:process daemon_app_process;
#line 14


# am startservice -a com.sec.intent.action.START_BCSERVICE

#line 17
# Allow the necessary permissions.
#line 17

#line 17
# Old domain may exec the file and transition to the new domain.
#line 17
allow connfwexe zygote_exec:file { getattr open read execute };
#line 17
allow connfwexe daemon_app_process:process transition;
#line 17
# New domain is entered by executing the file.
#line 17
allow daemon_app_process zygote_exec:file { entrypoint open read execute getattr };
#line 17
# New domain can send SIGCHLD to its caller.
#line 17
allow daemon_app_process connfwexe:process sigchld;
#line 17
# Enable AT_SECURE, i.e. libc secure mode.
#line 17
dontaudit connfwexe daemon_app_process:process noatsecure;
#line 17
# XXX dontaudit candidate but requires further study.
#line 17
allow connfwexe daemon_app_process:process { siginh rlimitinh };
#line 17

#line 17
# Make the transition occur by default.
#line 17
type_transition connfwexe zygote_exec:process daemon_app_process;
#line 17


# void TuiServer::tlcProcessCmd(uint32_t commandId) : am startservice com.trustonic.tuiservice/.TuiService

#line 20
# Allow the necessary permissions.
#line 20

#line 20
# Old domain may exec the file and transition to the new domain.
#line 20
allow mobicoredaemon zygote_exec:file { getattr open read execute };
#line 20
allow mobicoredaemon daemon_app_process:process transition;
#line 20
# New domain is entered by executing the file.
#line 20
allow daemon_app_process zygote_exec:file { entrypoint open read execute getattr };
#line 20
# New domain can send SIGCHLD to its caller.
#line 20
allow daemon_app_process mobicoredaemon:process sigchld;
#line 20
# Enable AT_SECURE, i.e. libc secure mode.
#line 20
dontaudit mobicoredaemon daemon_app_process:process noatsecure;
#line 20
# XXX dontaudit candidate but requires further study.
#line 20
allow mobicoredaemon daemon_app_process:process { siginh rlimitinh };
#line 20

#line 20
# Make the transition occur by default.
#line 20
type_transition mobicoredaemon zygote_exec:process daemon_app_process;
#line 20



#line 22
# Allow the necessary permissions.
#line 22

#line 22
# Old domain may exec the file and transition to the new domain.
#line 22
allow sec-ril zygote_exec:file { getattr open read execute };
#line 22
allow sec-ril daemon_app_process:process transition;
#line 22
# New domain is entered by executing the file.
#line 22
allow daemon_app_process zygote_exec:file { entrypoint open read execute getattr };
#line 22
# New domain can send SIGCHLD to its caller.
#line 22
allow daemon_app_process sec-ril:process sigchld;
#line 22
# Enable AT_SECURE, i.e. libc secure mode.
#line 22
dontaudit sec-ril daemon_app_process:process noatsecure;
#line 22
# XXX dontaudit candidate but requires further study.
#line 22
allow sec-ril daemon_app_process:process { siginh rlimitinh };
#line 22

#line 22
# Make the transition occur by default.
#line 22
type_transition sec-ril zygote_exec:process daemon_app_process;
#line 22


## denial from am dumpheap pid# /data/log/vold_xx.hprof in DiskUtil::getHeapDump

#line 25
# Allow the necessary permissions.
#line 25

#line 25
# Old domain may exec the file and transition to the new domain.
#line 25
allow vold zygote_exec:file { getattr open read execute };
#line 25
allow vold daemon_app_process:process transition;
#line 25
# New domain is entered by executing the file.
#line 25
allow daemon_app_process zygote_exec:file { entrypoint open read execute getattr };
#line 25
# New domain can send SIGCHLD to its caller.
#line 25
allow daemon_app_process vold:process sigchld;
#line 25
# Enable AT_SECURE, i.e. libc secure mode.
#line 25
dontaudit vold daemon_app_process:process noatsecure;
#line 25
# XXX dontaudit candidate but requires further study.
#line 25
allow vold daemon_app_process:process { siginh rlimitinh };
#line 25

#line 25
# Make the transition occur by default.
#line 25
type_transition vold zygote_exec:process daemon_app_process;
#line 25


### DMM-daemon

#line 28
# Allow the necessary permissions.
#line 28

#line 28
# Old domain may exec the file and transition to the new domain.
#line 28
allow DMM-daemon zygote_exec:file { getattr open read execute };
#line 28
allow DMM-daemon daemon_app_process:process transition;
#line 28
# New domain is entered by executing the file.
#line 28
allow daemon_app_process zygote_exec:file { entrypoint open read execute getattr };
#line 28
# New domain can send SIGCHLD to its caller.
#line 28
allow daemon_app_process DMM-daemon:process sigchld;
#line 28
# Enable AT_SECURE, i.e. libc secure mode.
#line 28
dontaudit DMM-daemon daemon_app_process:process noatsecure;
#line 28
# XXX dontaudit candidate but requires further study.
#line 28
allow DMM-daemon daemon_app_process:process { siginh rlimitinh };
#line 28

#line 28
# Make the transition occur by default.
#line 28
type_transition DMM-daemon zygote_exec:process daemon_app_process;
#line 28


#unix_socket_connect(daemon_app_process, property, init)

#rild AT+LVOFLOCK=1,0

#line 33
# Allow the necessary permissions.
#line 33

#line 33
# Old domain may exec the file and transition to the new domain.
#line 33
allow rild zygote_exec:file { getattr open read execute };
#line 33
allow rild daemon_app_process:process transition;
#line 33
# New domain is entered by executing the file.
#line 33
allow daemon_app_process zygote_exec:file { entrypoint open read execute getattr };
#line 33
# New domain can send SIGCHLD to its caller.
#line 33
allow daemon_app_process rild:process sigchld;
#line 33
# Enable AT_SECURE, i.e. libc secure mode.
#line 33
dontaudit rild daemon_app_process:process noatsecure;
#line 33
# XXX dontaudit candidate but requires further study.
#line 33
allow rild daemon_app_process:process { siginh rlimitinh };
#line 33

#line 33
# Make the transition occur by default.
#line 33
type_transition rild zygote_exec:process daemon_app_process;
#line 33


########## self and domain_type
allow daemon_app_process { at_distributor connfwexe mobicoredaemon sec-ril vold DMM-daemon rild }:fd use;
allow daemon_app_process init:unix_stream_socket connectto;

########## fs_type
########## dev_type
allow daemon_app_process mobicore-user_device:chr_file write;

########## file_type
allow daemon_app_process dalvikcache_data_file:file write;

########## etc_type
########## known issue.
### it's due to readGmsProperty code.
dontaudit daemon_app_process property_socket:sock_file write;
dontaudit daemon_app_process setupwizard_prop:property_service set;
dontaudit daemon_app_process system_prop:property_service set;
dontaudit daemon_app_process csc_prop:property_service set;

### AT+PRECONFG=0,0
allow daemon_app_process { at_distributor connfwexe mobicoredaemon sec-ril vold DMM-daemon rild }:unix_stream_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow daemon_app_process sysfs_wake_lock:file write;
dontaudit daemon_app_process system_prop:property_service set;
allow daemon_app_process uart_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow daemon_app_process { at_distributor connfwexe mobicoredaemon sec-ril vold DMM-daemon rild }:fifo_file { { getattr open read ioctl lock } { open append write } };

### TUI
allow daemon_app_process mobicoredaemon:netlink_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow daemon_app_process mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow daemon_app_process tui_device:chr_file { getattr open read ioctl lock };

### vold : am dumpheap 12521 /data/log/vold.log
allow daemon_app_process dumplog_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow daemon_app_process dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ avc_log #############
#avc:  denied  { write } for  pid=10940 comm="app_process" path="/dev/mobicore-user" dev="tmpfs" ino=4663 scontext=u:r:daemon_app_process:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file permissive=0
# arch=c00000b7 syscall=221 success=yes exit=0 a0=7f9e91c328 a1=7f9e945108 a2=7f9e9540c8 a3=8 items=0 ppid=3121 ppcomm=at_distributor pid=10941 auid=4294967295 uid=1001 gid=1001 euid=1001 suid=1001 fsuid=1001 egid=1001 sgid=1001 fsgid=1001 ses=4294967295 tty=(none) comm="app_process" exe="/system/bin/app_process64" subj=u:r:daemon_app_process:s0 key=(null)
# avc:  denied  { read write } for  pid=9555 comm="app_process" path="/dev/mobicore" dev="tmpfs" ino=17055 scontext=u:r:daemon_app_process:s0 tcontext=u:object_r:mobicore_device:s0 tclass=chr_file permissive=1
# avc:  denied  { read write } for  pid=9555 comm="app_process" path="socket:[4229]" dev="sockfs" ino=4229 scontext=u:r:daemon_app_process:s0 tcontext=u:r:mobicoredaemon:s0 tclass=netlink_socket permissive=1
# avc:  denied  { read } for  pid=9555 comm="app_process" path="/dev/t-base-tui" dev="tmpfs" ino=17058 scontext=u:r:daemon_app_process:s0 tcontext=u:object_r:tui_device:s0 tclass=chr_file permissive=1
# avc:  denied  { execute } for  pid=13466 comm="am" name="app_process64" dev="sda18" ino=683 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:zygote_exec:s0 tclass=file permissive=1
#line 1 "vendor/samsung/common/sepolicy/sec_common/ddexe.te"
#
# ddexe
#

############ aosp and sec_common #############
########## type and macro.
type ddexe, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type ddexe_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute ddexe trusteddomain;
typeattribute ddexe system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init ddexe_exec:file { getattr open read execute };
#line 13
allow init ddexe:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow ddexe ddexe_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow ddexe init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init ddexe:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init ddexe:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init ddexe_exec:process ddexe;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type ddexe_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition ddexe tmpfs:file ddexe_tmpfs;
#line 13
allow ddexe ddexe_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
allow ddexe self:capability { setuid dac_override };

########## fs_type
########## dev_type
allow ddexe device:file { getattr open read ioctl lock };
allow ddexe usb_serial_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow ddexe system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ddexe system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.

############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/sec_common/debug.te"
#
# debug
#

########## type and macro.
type bugreport, domain, mlstrustedsubject, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type bugreport_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

type dumpsys, domain, mlstrustedsubject, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type dumpsys_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

typeattribute dumpstate mlstrustedsubject;

type selinux_net, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type selinux_net_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# for B2C users
typeattribute bugreport trusteddomain;
typeattribute bugreport system_domain;
typeattribute dumpsys trusteddomain;
typeattribute dumpsys system_domain;
typeattribute dumpstate trusteddomain;
typeattribute dumpstate system_domain;


#line 25
allow system bugreport_exec:file { execute execute_no_trans };
#line 25
allow system dumpstate_exec:file { execute execute_no_trans };
#line 25
allow system dumpsys_exec:file { execute execute_no_trans };
#line 25


#line 26
allow debuggerd bugreport_exec:file { execute execute_no_trans };
#line 26
allow debuggerd dumpstate_exec:file { execute execute_no_trans };
#line 26
allow debuggerd dumpsys_exec:file { execute execute_no_trans };
#line 26


#line 27
allow appdomain bugreport_exec:file { execute execute_no_trans };
#line 27
allow appdomain dumpstate_exec:file { execute execute_no_trans };
#line 27
allow appdomain dumpsys_exec:file { execute execute_no_trans };
#line 27


############ bugreport, aosp and sec_common #############
########## type and macro.
########## self and domain_type
allow bugreport adbd:process sigchld;
allow bugreport init:unix_stream_socket { read write connectto };
allow bugreport self:capability dac_override;
allow bugreport shell:fd use;

########## fs_type
allow bugreport devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow bugreport sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
allow bugreport device:sock_file write;
allow bugreport tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## bugreport file_type
allow bugreport dumpstate_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow bugreport media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow bugreport property_socket:sock_file write;

########## etc_type
allow bugreport ctl_dumpstate_prop:property_service set;

########## known issue.

############ dumpsys, aosp and sec_common  #############
########## type and macro.

#line 57
# Call the server domain and optionally transfer references to it.
#line 57
allow dumpsys apaservice:binder { call transfer };
#line 57
# Allow the serverdomain to transfer references to the client on the reply.
#line 57
allow apaservice dumpsys:binder transfer;
#line 57
# Receive and use open files from the server.
#line 57
allow dumpsys apaservice:fd use;
#line 57


#line 58
# Call the server domain and optionally transfer references to it.
#line 58
allow dumpsys bintvoutservice:binder { call transfer };
#line 58
# Allow the serverdomain to transfer references to the client on the reply.
#line 58
allow bintvoutservice dumpsys:binder transfer;
#line 58
# Receive and use open files from the server.
#line 58
allow dumpsys bintvoutservice:fd use;
#line 58


#line 59
# Call the server domain and optionally transfer references to it.
#line 59
allow dumpsys drmserver:binder { call transfer };
#line 59
# Allow the serverdomain to transfer references to the client on the reply.
#line 59
allow drmserver dumpsys:binder transfer;
#line 59
# Receive and use open files from the server.
#line 59
allow dumpsys drmserver:fd use;
#line 59


#line 60
# Call the server domain and optionally transfer references to it.
#line 60
allow dumpsys healthd:binder { call transfer };
#line 60
# Allow the serverdomain to transfer references to the client on the reply.
#line 60
allow healthd dumpsys:binder transfer;
#line 60
# Receive and use open files from the server.
#line 60
allow dumpsys healthd:fd use;
#line 60


#line 61
# Call the server domain and optionally transfer references to it.
#line 61
allow dumpsys jackservice:binder { call transfer };
#line 61
# Allow the serverdomain to transfer references to the client on the reply.
#line 61
allow jackservice dumpsys:binder transfer;
#line 61
# Receive and use open files from the server.
#line 61
allow dumpsys jackservice:fd use;
#line 61


#line 62
# Call the server domain and optionally transfer references to it.
#line 62
allow dumpsys keystore:binder { call transfer };
#line 62
# Allow the serverdomain to transfer references to the client on the reply.
#line 62
allow keystore dumpsys:binder transfer;
#line 62
# Receive and use open files from the server.
#line 62
allow dumpsys keystore:fd use;
#line 62


#line 63
# Call the server domain and optionally transfer references to it.
#line 63
allow dumpsys mediaserver:binder { call transfer };
#line 63
# Allow the serverdomain to transfer references to the client on the reply.
#line 63
allow mediaserver dumpsys:binder transfer;
#line 63
# Receive and use open files from the server.
#line 63
allow dumpsys mediaserver:fd use;
#line 63


#line 64
# Call the server domain and optionally transfer references to it.
#line 64
allow dumpsys nfc:binder { call transfer };
#line 64
# Allow the serverdomain to transfer references to the client on the reply.
#line 64
allow nfc dumpsys:binder transfer;
#line 64
# Receive and use open files from the server.
#line 64
allow dumpsys nfc:fd use;
#line 64


#line 65
# Call the server domain and optionally transfer references to it.
#line 65
allow dumpsys radio:binder { call transfer };
#line 65
# Allow the serverdomain to transfer references to the client on the reply.
#line 65
allow radio dumpsys:binder transfer;
#line 65
# Receive and use open files from the server.
#line 65
allow dumpsys radio:fd use;
#line 65


#line 66
# Call the server domain and optionally transfer references to it.
#line 66
allow dumpsys servicemanager:binder { call transfer };
#line 66
# Allow the serverdomain to transfer references to the client on the reply.
#line 66
allow servicemanager dumpsys:binder transfer;
#line 66
# Receive and use open files from the server.
#line 66
allow dumpsys servicemanager:fd use;
#line 66


#line 67
# Call the server domain and optionally transfer references to it.
#line 67
allow dumpsys sensorhubservice:binder { call transfer };
#line 67
# Allow the serverdomain to transfer references to the client on the reply.
#line 67
allow sensorhubservice dumpsys:binder transfer;
#line 67
# Receive and use open files from the server.
#line 67
allow dumpsys sensorhubservice:fd use;
#line 67


#line 68
# Call the server domain and optionally transfer references to it.
#line 68
allow dumpsys surfaceflinger:binder { call transfer };
#line 68
# Allow the serverdomain to transfer references to the client on the reply.
#line 68
allow surfaceflinger dumpsys:binder transfer;
#line 68
# Receive and use open files from the server.
#line 68
allow dumpsys surfaceflinger:fd use;
#line 68


#line 69
# Call the server domain and optionally transfer references to it.
#line 69
allow dumpsys system:binder { call transfer };
#line 69
# Allow the serverdomain to transfer references to the client on the reply.
#line 69
allow system dumpsys:binder transfer;
#line 69
# Receive and use open files from the server.
#line 69
allow dumpsys system:fd use;
#line 69


#line 70
# Call the server domain and optionally transfer references to it.
#line 70
allow dumpsys system_app:binder { call transfer };
allow dumpsys s_system_app:binder { call transfer };
#line 70
# Allow the serverdomain to transfer references to the client on the reply.
#line 70
allow system_app dumpsys:binder transfer;
allow s_system_app dumpsys:binder transfer;
#line 70
# Receive and use open files from the server.
#line 70
allow dumpsys system_app:fd use;
allow dumpsys s_system_app:fd use;
#line 70


#line 71
# Allow the necessary permissions.
#line 71

#line 71
# Old domain may exec the file and transition to the new domain.
#line 71
allow dumpstate dumpsys_exec:file { getattr open read execute };
#line 71
allow dumpstate dumpsys:process transition;
#line 71
# New domain is entered by executing the file.
#line 71
allow dumpsys dumpsys_exec:file { entrypoint open read execute getattr };
#line 71
# New domain can send SIGCHLD to its caller.
#line 71
allow dumpsys dumpstate:process sigchld;
#line 71
# Enable AT_SECURE, i.e. libc secure mode.
#line 71
dontaudit dumpstate dumpsys:process noatsecure;
#line 71
# XXX dontaudit candidate but requires further study.
#line 71
allow dumpstate dumpsys:process { siginh rlimitinh };
#line 71

#line 71
# Make the transition occur by default.
#line 71
type_transition dumpstate dumpsys_exec:process dumpsys;
#line 71


########## self and domain_type
allow dumpsys adbd:fifo_file { { getattr open read ioctl lock } { open append write } };
allow dumpsys adbd:process sigchld;
allow dumpsys dumpstate:fifo_file write;
allow dumpsys init:unix_stream_socket { read write };
allow dumpsys shell:fd use;
allow dumpsys shell:unix_stream_socket { read write };
allow dumpsys vold:fd use;
allow dumpsys vold:unix_stream_socket { read write };
allow dumpsys vold:fifo_file { { getattr open read ioctl lock } { open append write } };
allow dumpsys vold:netlink_kobject_uevent_socket { read write };

########## fs_type
allow dumpsys devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow dumpsys sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
allow dumpsys tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow dumpsys cache_file:file { { getattr open read ioctl lock } { open append write } };
allow dumpsys media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.

############ dumpstate, aosp and sec_common  #############
########## type and macro.

#line 101
# Call the server domain and optionally transfer references to it.
#line 101
allow dumpstate bintvoutservice:binder { call transfer };
#line 101
# Allow the serverdomain to transfer references to the client on the reply.
#line 101
allow bintvoutservice dumpstate:binder transfer;
#line 101
# Receive and use open files from the server.
#line 101
allow dumpstate bintvoutservice:fd use;
#line 101


#line 102
# Call the server domain and optionally transfer references to it.
#line 102
allow dumpstate drmserver:binder { call transfer };
#line 102
# Allow the serverdomain to transfer references to the client on the reply.
#line 102
allow drmserver dumpstate:binder transfer;
#line 102
# Receive and use open files from the server.
#line 102
allow dumpstate drmserver:fd use;
#line 102


#line 103
# Call the server domain and optionally transfer references to it.
#line 103
allow dumpstate mediaserver:binder { call transfer };
#line 103
# Allow the serverdomain to transfer references to the client on the reply.
#line 103
allow mediaserver dumpstate:binder transfer;
#line 103
# Receive and use open files from the server.
#line 103
allow dumpstate mediaserver:fd use;
#line 103


#line 104
# Call the server domain and optionally transfer references to it.
#line 104
allow dumpstate nfc:binder { call transfer };
#line 104
# Allow the serverdomain to transfer references to the client on the reply.
#line 104
allow nfc dumpstate:binder transfer;
#line 104
# Receive and use open files from the server.
#line 104
allow dumpstate nfc:fd use;
#line 104


#line 105
# Call the server domain and optionally transfer references to it.
#line 105
allow dumpstate radio:binder { call transfer };
#line 105
# Allow the serverdomain to transfer references to the client on the reply.
#line 105
allow radio dumpstate:binder transfer;
#line 105
# Receive and use open files from the server.
#line 105
allow dumpstate radio:fd use;
#line 105


#line 106
# Call the server domain and optionally transfer references to it.
#line 106
allow dumpstate sensorhubservice:binder { call transfer };
#line 106
# Allow the serverdomain to transfer references to the client on the reply.
#line 106
allow sensorhubservice dumpstate:binder transfer;
#line 106
# Receive and use open files from the server.
#line 106
allow dumpstate sensorhubservice:fd use;
#line 106


#line 107
# Call the server domain and optionally transfer references to it.
#line 107
allow dumpstate servicemanager:binder { call transfer };
#line 107
# Allow the serverdomain to transfer references to the client on the reply.
#line 107
allow servicemanager dumpstate:binder transfer;
#line 107
# Receive and use open files from the server.
#line 107
allow dumpstate servicemanager:fd use;
#line 107


#line 108
# Call the server domain and optionally transfer references to it.
#line 108
allow dumpstate surfaceflinger:binder { call transfer };
#line 108
# Allow the serverdomain to transfer references to the client on the reply.
#line 108
allow surfaceflinger dumpstate:binder transfer;
#line 108
# Receive and use open files from the server.
#line 108
allow dumpstate surfaceflinger:fd use;
#line 108


#line 109
# Call the server domain and optionally transfer references to it.
#line 109
allow dumpstate system:binder { call transfer };
#line 109
# Allow the serverdomain to transfer references to the client on the reply.
#line 109
allow system dumpstate:binder transfer;
#line 109
# Receive and use open files from the server.
#line 109
allow dumpstate system:fd use;
#line 109


#line 110
# Call the server domain and optionally transfer references to it.
#line 110
allow dumpstate system_app:binder { call transfer };
allow dumpstate s_system_app:binder { call transfer };
#line 110
# Allow the serverdomain to transfer references to the client on the reply.
#line 110
allow system_app dumpstate:binder transfer;
allow s_system_app dumpstate:binder transfer;
#line 110
# Receive and use open files from the server.
#line 110
allow dumpstate system_app:fd use;
allow dumpstate s_system_app:fd use;
#line 110


#line 111
allow dumpstate domain:dir { open getattr read search ioctl };
#line 111
allow dumpstate domain:{ file lnk_file } { getattr open read ioctl lock };
#line 111


########## self and domain_type
allow dumpstate adbd:process sigchld;
allow dumpstate domain:lnk_file { getattr open read ioctl lock };
allow dumpstate domain:process { signal getattr };
allow dumpstate init:unix_stream_socket { read write };
allow dumpstate init:unix_stream_socket connectto;
allow dumpstate kernel:system { syslog_read module_request };
allow dumpstate knox_system_app:fd use;

#allow dumpstate self:capability *;
# violate never allow rule. change to:
allow dumpstate self:capability ~{ mknod sys_rawio } ;

#allow dumpstate self:capability2 *;
# violate never allow rule. change to:
allow dumpstate self:capability2 ~{ mac_admin mac_override };

allow dumpstate self:netlink_route_socket { write getattr setopt read bind create nlmsg_read };
allow dumpstate self:rawip_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow dumpstate self:udp_socket { ioctl getattr create connect };
allow dumpstate shell:fd use;
allow dumpstate shell:unix_stream_socket { read write };
allow dumpstate vold:fd use;
allow dumpstate vold:fifo_file { { getattr open read ioctl lock } { open append write } };
allow dumpstate vold:netlink_kobject_uevent_socket { read write };
allow dumpstate vold:unix_stream_socket { read write connectto };
allow dumpstate wpa:unix_dgram_socket sendto;
########## fs_type
allow dumpstate cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dumpstate debugfs:file { { getattr open read ioctl lock } { open append write } };
allow dumpstate devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow dumpstate firmware:dir { open getattr read search ioctl };
allow dumpstate firmware:file { getattr open read ioctl lock };
allow dumpstate functionfs:filesystem getattr;
allow dumpstate qtaguid_proc:file { getattr open read ioctl lock };
allow dumpstate sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dumpstate sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate selinuxfs:dir { open getattr read search ioctl };
allow dumpstate sysfs:file { open append write };
allow dumpstate sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow dumpstate ashmem_device:chr_file execute;
allow dumpstate device:sock_file write;
allow dumpstate tty_device:chr_file { read write };

########## file_type
allow dumpstate anr_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dumpstate anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate bugreport_exec:file { read execute open execute_no_trans };
allow dumpstate cache_file:file { { getattr open read ioctl lock } { open append write } };
allow dumpstate dalvikcache_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow dumpstate dalvikcache_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } execute };
allow dumpstate dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dumpstate dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate dumpstate_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow dumpstate dumpsys_exec:file { getattr open read ioctl lock };
allow dumpstate dumpsys_exec:file { getattr execute execute_no_trans };
allow dumpstate isolated_app_tmpfs:file write;
allow dumpstate media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dumpstate platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate platform_app_tmpfs:file write;
allow dumpstate property_socket:sock_file write;
allow dumpstate shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dumpstate shell_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate shell_exec:file { getattr execute execute_no_trans };
allow dumpstate system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow dumpstate system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate system_file:file { getattr execute execute_no_trans };
allow dumpstate untrusted_app_tmpfs:file { { getattr open read ioctl lock } { open append write } };
allow dumpstate vold_socket:sock_file { open append write };
allow dumpstate wifi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow dumpstate wifi_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate wpa_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dumpstate zygote_exec:file { getattr execute execute_no_trans };

########## etc_type
allow dumpstate csc_prop:property_service set;
allow dumpstate ctl_dumpstate_prop:property_service set;
#neverallow Google CTS-android-5.0.2_r1 : allow dumpstate default_prop:property_service set;
allow dumpstate node:rawip_socket node_bind;
allow dumpstate setupwizard_prop:property_service set;

########## known issue.
# For dumpstate tima_dump_log
allow dumpstate tima_dump_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# MobileCare Log

#line 202
# Call the server domain and optionally transfer references to it.
#line 202
allow dumpstate apaservice:binder { call transfer };
#line 202
# Allow the serverdomain to transfer references to the client on the reply.
#line 202
allow apaservice dumpstate:binder transfer;
#line 202
# Receive and use open files from the server.
#line 202
allow dumpstate apaservice:fd use;
#line 202


#line 203
# Call the server domain and optionally transfer references to it.
#line 203
allow dumpstate jackservice:binder { call transfer };
#line 203
# Allow the serverdomain to transfer references to the client on the reply.
#line 203
allow jackservice dumpstate:binder transfer;
#line 203
# Receive and use open files from the server.
#line 203
allow dumpstate jackservice:fd use;
#line 203


#line 204
# Call the server domain and optionally transfer references to it.
#line 204
allow dumpstate keystore:binder { call transfer };
#line 204
# Allow the serverdomain to transfer references to the client on the reply.
#line 204
allow keystore dumpstate:binder transfer;
#line 204
# Receive and use open files from the server.
#line 204
allow dumpstate keystore:fd use;
#line 204


############ (bugreport,dumpsys,dumpstate) knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow dumpstate container_app_data_backend:dir search;
allow dumpstate bbccontainer_app_data_backend:dir search;
#line 213

########## etc_type
########## known issue.

############ (bugreport,dumpsys,dumpstate) qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.
# For dumpstate tima_dump_log
allow dumpstate qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow dumpsys qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };


############ selinux-network.sh #############
########## type and macro.

#line 232

#line 232
# Allow the necessary permissions.
#line 232

#line 232
# Old domain may exec the file and transition to the new domain.
#line 232
allow init selinux_net_exec:file { getattr open read execute };
#line 232
allow init selinux_net:process transition;
#line 232
# New domain is entered by executing the file.
#line 232
allow selinux_net selinux_net_exec:file { entrypoint open read execute getattr };
#line 232
# New domain can send SIGCHLD to its caller.
#line 232
allow selinux_net init:process sigchld;
#line 232
# Enable AT_SECURE, i.e. libc secure mode.
#line 232
dontaudit init selinux_net:process noatsecure;
#line 232
# XXX dontaudit candidate but requires further study.
#line 232
allow init selinux_net:process { siginh rlimitinh };
#line 232

#line 232
# Make the transition occur by default.
#line 232
type_transition init selinux_net_exec:process selinux_net;
#line 232

#line 232

#line 232
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 232
type selinux_net_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 232
type_transition selinux_net tmpfs:file selinux_net_tmpfs;
#line 232
allow selinux_net selinux_net_tmpfs:file { read write };
#line 232

#line 232


########## self and domain_type
allow selinux_net shell:fd use;

########## fs_type
allow selinux_net devpts:chr_file getattr;

########## dev_type
########## file_type
allow selinux_net selinux_net_exec:file open;
allow selinux_net shell_exec:file read;
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { write } for  pid=26702 comm="dumpstate" dev="tmpfs" ino=496279 scontext=u:r:dumpstate:s0 tcontext=u:object_r:platform_app_tmpfs:s0 tclass=file
# avc:  denied  { write } for  pid=25070 comm="dumpstate" path=2F6465762F6173.. dev="tmpfs" ino=100112 scontext=u:r:dumpstate:s0 tcontext=u:object_r:isolated_app_tmpfs:s0 tclass=file SEPF_SAMSUNG-SM-N910A_4.4.4_0018
#line 1 "vendor/samsung/common/sepolicy/sec_common/DMM-daemon.te"
#
# DMM-daemon
#
# Diag device interface daemon
# Daemon to be interfaced with XCAL-Mobile in order to collect Diagnostic information, Android Log cat and PCAP(TCP/IP) in VoWiFi and VoLTE Testing for Verizon
# related app: com.innowireless.xcal.mobile4g
# Contact: sangbae.shin@samsung.com CP system , jaehong.kim@innowireless.co.kr
#

############ aosp and sec_common #############jaehong.kim@innowireless.co.kr
########## type and macro.
type DMM-daemon, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type DMM-daemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 15

#line 15
# Allow the necessary permissions.
#line 15

#line 15
# Old domain may exec the file and transition to the new domain.
#line 15
allow init DMM-daemon_exec:file { getattr open read execute };
#line 15
allow init DMM-daemon:process transition;
#line 15
# New domain is entered by executing the file.
#line 15
allow DMM-daemon DMM-daemon_exec:file { entrypoint open read execute getattr };
#line 15
# New domain can send SIGCHLD to its caller.
#line 15
allow DMM-daemon init:process sigchld;
#line 15
# Enable AT_SECURE, i.e. libc secure mode.
#line 15
dontaudit init DMM-daemon:process noatsecure;
#line 15
# XXX dontaudit candidate but requires further study.
#line 15
allow init DMM-daemon:process { siginh rlimitinh };
#line 15

#line 15
# Make the transition occur by default.
#line 15
type_transition init DMM-daemon_exec:process DMM-daemon;
#line 15

#line 15

#line 15
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 15
type DMM-daemon_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 15
type_transition DMM-daemon tmpfs:file DMM-daemon_tmpfs;
#line 15
allow DMM-daemon DMM-daemon_tmpfs:file { read write };
#line 15

#line 15


#to collect denials
#permissive DMM-daemon;

########## self and domain_type
allow DMM-daemon self:capability { setuid setgid net_raw dac_override };
allow DMM-daemon self:capability2 { syslog };

########## fs_type
########## dev_type
allow DMM-daemon diag_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow DMM-daemon app_data_file:{ file lnk_file } { getattr open read ioctl lock };
allow DMM-daemon gad_untrusted_app_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 30
allow DMM-daemon shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow DMM-daemon system_file:file execute_no_trans;
allow DMM-daemon media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow DMM-daemon media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow DMM-daemon zygote_exec:{ file lnk_file } { getattr open read ioctl lock };

############ qcom_common #############
########## type and macro.

#line 38
allow DMM-daemon qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 38

#line 38
allow DMM-daemon qmuxd_socket:sock_file write;
#line 38
allow DMM-daemon qmuxd:unix_stream_socket connectto;
#line 38

#line 38
allow DMM-daemon qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 38


########## etc_type
########## known issue.
############ avc_log #############
#avc:  denied  { execute } for  pid=3128 comm="dmm_v2" name="sh" dev="sda18" ino=873 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { read open } for  pid=3128 comm="dmm_v2" path="/system/bin/sh" dev="sda18" ino=873 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { execute_no_trans } for  pid=3128 comm="dmm_v2" path="/system/bin/sh" dev="sda18" ino=873 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { execute_no_trans } for  pid=3128 comm="sh" path="/system/bin/toolbox" dev="sda18" ino=894 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:system_file:s0 tclass=file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { read } for  pid=3163 comm="dmm_v2" name="lib" dev="sda21" ino=262516 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:app_data_file:s0 tclass=lnk_file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { execute } for  pid=3163 comm="dmm_v2" path="/data/app/com.innowireless.xcal.mobile4g-1/lib/arm/libDM-Dci.so" dev="sda21" ino=327714 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:apk_data_file:s0 tclass=file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { dac_override } for  pid=3163 comm="dmm_v2" capability=1  scontext=u:r:DMM-daemon:s0 tcontext=u:r:DMM-daemon:s0 tclass=capability permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { read write } for  pid=3163 comm="dmm_v2" name="diag" dev="tmpfs" ino=8685 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:diag_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { open } for  pid=3163 comm="dmm_v2" path="/dev/diag" dev="tmpfs" ino=8685 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:diag_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { ioctl } for  pid=3163 comm="dmm_v2" path="/dev/diag" dev="tmpfs" ino=8685 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:diag_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { getattr } for  pid=3163 comm="dmm_v2" path="/dev/diag" dev="tmpfs" ino=8685 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:diag_device:s0 tclass=chr_file permissive=1 SEPF_SM-G925V_5.0.2_0007
#avc:  denied  { write } for  pid=3186 comm="dmm_v2" name="qmux_radio" dev="tmpfs" ino=9003 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:qmuxd_socket:s0 tclass=dir permissive=1 SEPF_SM-G920V_5.0.2_0011
#avc:  denied  { add_name } for  pid=3186 comm="dmm_v2" name=716D75785F636C69656E745F736F636B657420202033313438 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:qmuxd_socket:s0 tclass=dir permissive=1 SEPF_SM-G920V_5.0.2_0011
#avc:  denied  { create } for  pid=3186 comm="dmm_v2" name=716D75785F636C69656E745F736F636B657420202033313438 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:qmuxd_socket:s0 tclass=sock_file permissive=1 SEPF_SM-G920V_5.0.2_0011
#avc:  denied  { setattr } for  pid=3186 comm="dmm_v2" name=716D75785F636C69656E745F736F636B657420202033313438 dev="tmpfs" ino=51937 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:qmuxd_socket:s0 tclass=sock_file permissive=1 SEPF_SM-G920V_5.0.2_0011
#avc:  denied  { write } for  pid=3186 comm="dmm_v2" name="qmux_connect_socket" dev="tmpfs" ino=19565 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:qmuxd_socket:s0 tclass=sock_file permissive=1 SEPF_SM-G920V_5.0.2_0011
#avc:  denied  { connectto } for  pid=3186 comm="dmm_v2" path="/dev/socket/qmux_radio/qmux_connect_socket" scontext=u:r:DMM-daemon:s0 tcontext=u:r:qmuxd:s0 tclass=unix_stream_socket permissive=1 SEPF_SM-G920V_5.0.2_0011
# avc:  denied  { read } for  pid=13466 comm="am" name="app_process" dev="sda18" ino=681 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:zygote_exec:s0 tclass=lnk_file permissive=1
# avc:  denied  { getattr } for  pid=13466 comm="am" path="/system/bin/app_process64" dev="sda18" ino=683 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:zygote_exec:s0 tclass=file permissive=1
# avc:  denied  { read open } for  pid=13466 comm="am" path="/system/bin/app_process64" dev="sda18" ino=683 scontext=u:r:DMM-daemon:s0 tcontext=u:object_r:zygote_exec:s0 tclass=file permissive=1
#line 1 "vendor/samsung/common/sepolicy/sec_common/dttexe.te"
#
# dttexe
#

############ aosp and sec_common #############
########## type and macro.
type dttexe, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type dttexe_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute dttexe trusteddomain;
typeattribute dttexe system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init dttexe_exec:file { getattr open read execute };
#line 13
allow init dttexe:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow dttexe dttexe_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow dttexe init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init dttexe:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init dttexe:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init dttexe_exec:process dttexe;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type dttexe_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition dttexe tmpfs:file dttexe_tmpfs;
#line 13
allow dttexe dttexe_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
allow dttexe ddexe:unix_stream_socket connectto;
allow dttexe self:capability { setuid dac_override sys_boot };

########## fs_type
########## dev_type
########## file_type
allow dttexe radio_data_file:file { { getattr open read ioctl lock } { open append write } };
allow dttexe radio_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow dttexe system_data_file:sock_file { { getattr open read ioctl lock } { open append write } };
allow dttexe system_file:file execute_no_trans;

########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/empty_service.te"
#
# empty_service
#


############ aosp and sec_common #############
########## type and macro.
type empty_service, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type empty_service_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 11

#line 11
# Allow the necessary permissions.
#line 11

#line 11
# Old domain may exec the file and transition to the new domain.
#line 11
allow init empty_service_exec:file { getattr open read execute };
#line 11
allow init empty_service:process transition;
#line 11
# New domain is entered by executing the file.
#line 11
allow empty_service empty_service_exec:file { entrypoint open read execute getattr };
#line 11
# New domain can send SIGCHLD to its caller.
#line 11
allow empty_service init:process sigchld;
#line 11
# Enable AT_SECURE, i.e. libc secure mode.
#line 11
dontaudit init empty_service:process noatsecure;
#line 11
# XXX dontaudit candidate but requires further study.
#line 11
allow init empty_service:process { siginh rlimitinh };
#line 11

#line 11
# Make the transition occur by default.
#line 11
type_transition init empty_service_exec:process empty_service;
#line 11

#line 11

#line 11
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 11
type empty_service_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 11
type_transition empty_service tmpfs:file empty_service_tmpfs;
#line 11
allow empty_service empty_service_tmpfs:file { read write };
#line 11

#line 11



#line 13
permissive empty_service;
#line 15


########## self and domain_type

########## fs_type
########## dev_type
########## file_type
########## etc_type

########## known issue.

############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/sec_common/ftm_ptt.te"
#
# FTM_ptt for WLAN test
#
# To measure WIFI performance in FTM mode, FTM_ptt service is used.
#
# In this case, phone has some features as below :.
#  - the device gose to FTM mode.
#  - the test case is performed as command such as Tx/Rx test etc.
#
# Contact: janghyun.sung, sinwoo.park
#
############ aosp and sec_common #############
########## type and macro.
type ftm_ptt, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type ftm_ptt_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 17

#line 17
# Allow the necessary permissions.
#line 17

#line 17
# Old domain may exec the file and transition to the new domain.
#line 17
allow init ftm_ptt_exec:file { getattr open read execute };
#line 17
allow init ftm_ptt:process transition;
#line 17
# New domain is entered by executing the file.
#line 17
allow ftm_ptt ftm_ptt_exec:file { entrypoint open read execute getattr };
#line 17
# New domain can send SIGCHLD to its caller.
#line 17
allow ftm_ptt init:process sigchld;
#line 17
# Enable AT_SECURE, i.e. libc secure mode.
#line 17
dontaudit init ftm_ptt:process noatsecure;
#line 17
# XXX dontaudit candidate but requires further study.
#line 17
allow init ftm_ptt:process { siginh rlimitinh };
#line 17

#line 17
# Make the transition occur by default.
#line 17
type_transition init ftm_ptt_exec:process ftm_ptt;
#line 17

#line 17

#line 17
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 17
type ftm_ptt_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 17
type_transition ftm_ptt tmpfs:file ftm_ptt_tmpfs;
#line 17
allow ftm_ptt ftm_ptt_tmpfs:file { read write };
#line 17

#line 17


#permissive ftm_ptt;
typeattribute ftm_ptt trusteddomain;


#line 22
typeattribute ftm_ptt netdomain;
#line 22


########## self and domain_type
allow ftm_ptt netd:unix_stream_socket connectto;
allow ftm_ptt self:capability net_raw;
allow ftm_ptt self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

########## fs_type
########## dev_type
########## file_type
allow ftm_ptt dnsproxyd_socket:sock_file write;
allow ftm_ptt fwmarkd_socket:sock_file write;

########## etc_type
allow ftm_ptt node:{ tcp_socket udp_socket } node_bind;
allow ftm_ptt port:{ tcp_socket udp_socket } name_bind;
allow ftm_ptt port:tcp_socket name_connect;

########## known issue.

############ avc_log #############
# avc:  denied  { net_raw } for  pid=16240 comm="ftm_ptt" capability=13  scontext=u:r:ftm_ptt:s0 tcontext=u:r:ftm_ptt:s0 tclass=capability permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { name_bind } for  pid=16240 comm="ftm_ptt" src=1528 scontext=u:r:ftm_ptt:s0 tcontext=u:object_r:port:s0 tclass=tcp_socket permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { node_bind } for  pid=16240 comm="ftm_ptt" src=1528 scontext=u:r:ftm_ptt:s0 tcontext=u:object_r:node:s0 tclass=tcp_socket permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { create } for  pid=16240 comm="ftm_ptt" scontext=u:r:ftm_ptt:s0 tcontext=u:r:ftm_ptt:s0 tclass=netlink_socket permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { setopt } for  pid=16240 comm="ftm_ptt" scontext=u:r:ftm_ptt:s0 tcontext=u:r:ftm_ptt:s0 tclass=netlink_socket permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { bind } for  pid=16240 comm="ftm_ptt" scontext=u:r:ftm_ptt:s0 tcontext=u:r:ftm_ptt:s0 tclass=netlink_socket permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { write } for  pid=16240 comm="ftm_ptt" name="dnsproxyd" dev="tmpfs" ino=47183 scontext=u:r:ftm_ptt:s0 tcontext=u:object_r:dnsproxyd_socket:s0 tclass=sock_file permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { connectto } for  pid=16240 comm="ftm_ptt" path="/dev/socket/dnsproxyd" scontext=u:r:ftm_ptt:s0 tcontext=u:r:netd:s0 tclass=unix_stream_socket permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { write } for  pid=16240 comm="ftm_ptt" scontext=u:r:ftm_ptt:s0 tcontext=u:r:ftm_ptt:s0 tclass=netlink_socket permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { read } for  pid=16240 comm="ftm_ptt" scontext=u:r:ftm_ptt:s0 tcontext=u:r:ftm_ptt:s0 tclass=netlink_socket permissive=1 SEPF_SM-A8000_5.1_0011
# avc:  denied  { write } for  pid=16240 comm="ftm_ptt" name="fwmarkd" dev="tmpfs" ino=47179 scontext=u:r:ftm_ptt:s0 tcontext=u:object_r:fwmarkd_socket:s0 tclass=sock_file permissive=1 SEPF_SM-A8000_5.1_0011
#line 1 "vendor/samsung/common/sepolicy/sec_common/icd.te"
#
# icd
#

############ aosp and sec_common #############
########## type and macro.
type icd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type icd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute icd trusteddomain;
typeattribute icd system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init icd_exec:file { getattr open read execute };
#line 13
allow init icd:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow icd icd_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow icd init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init icd:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init icd:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init icd_exec:process icd;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type icd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition icd tmpfs:file icd_tmpfs;
#line 13
allow icd icd_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
########## fs_type
########## dev_type
allow icd device:file { open append write };
allow icd tzic_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow icd block_device:dir { open getattr read search ioctl };

########## file_type
allow icd charon_exec:file { getattr open read ioctl lock };
allow icd cs_exec:file { getattr open read ioctl lock };
allow icd drmserver_exec:file { getattr open read ioctl lock };
allow icd keystore_exec:file { getattr open read ioctl lock };
allow icd mediaserver_exec:file { getattr open read ioctl lock };

########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow icd playready_exec:file { getattr open read ioctl lock };
allow icd qseecomd_exec:file { getattr open read ioctl lock };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { search } for  pid=3043 comm="icd" name="block" dev="tmpfs" ino=2597 scontext=u:r:icd:s0 tcontext=u:object_r:block_device:s0 tclass=dir permissive=0


#line 1 "vendor/samsung/common/sepolicy/sec_common/immvibed.te"
#
# immvibed
#

############ aosp and sec_common #############
########## type and macro.
type immvibed, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type immvibed_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute immvibed trusteddomain;
typeattribute immvibed system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init immvibed_exec:file { getattr open read execute };
#line 13
allow init immvibed:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow immvibed immvibed_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow immvibed init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init immvibed:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init immvibed:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init immvibed_exec:process immvibed;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type immvibed_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition immvibed tmpfs:file immvibed_tmpfs;
#line 13
allow immvibed immvibed_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
########## fs_type
########## dev_type
allow immvibed device:file { getattr open read ioctl lock };

########## file_type
allow immvibed system_fifo:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow immvibed system_fifo:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow immvibed vibrator_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow immvibed vibrator_device:{ chr_file fifo_file } { { getattr open read ioctl lock } { open append write } };
allow immvibed vibrator_device:dir { open search write add_name remove_name };
allow immvibed vibrator_device:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/imsd.te"
#
# IMSD (IMS Deamon)
#
# IMSD is a deamon which provides IMS service to application based on SIP (Session Initiation Protocol).
# It supports SIP packet processing and RTP stream for VoIP.
#
# Contact: yoonsung.nam
#
#

############ aosp and sec_common #############
########## type and macro.
type imsd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type imsd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow init imsd_exec:file { getattr open read execute };
#line 16
allow init imsd:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow imsd imsd_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow imsd init:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit init imsd:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow init imsd:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition init imsd_exec:process imsd;
#line 16

#line 16

#line 16
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 16
type imsd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 16
type_transition imsd tmpfs:file imsd_tmpfs;
#line 16
allow imsd imsd_tmpfs:file { read write };
#line 16

#line 16


typeattribute imsd trusteddomain;


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow imsd mediaserver:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow mediaserver imsd:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow imsd mediaserver:fd use;
#line 20



########## self and domain_type
allow imsd kernel:system module_request;
allow imsd netd:unix_stream_socket connectto;
allow imsd node:{ tcp_socket udp_socket } node_bind;
allow imsd port:tcp_socket name_connect;
allow imsd port:{ tcp_socket udp_socket } name_bind;
allow imsd rild:unix_stream_socket connectto;
allow imsd self:capability { setuid net_raw net_admin };
allow imsd servicemanager:binder call;
allow imsd system_app:binder call;
allow imsd s_system_app:binder call;
#line 33

########## fs_type
allow imsd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

########## dev_type

########## file_type
allow imsd dnsproxyd_socket:sock_file write;
allow imsd dumplog_data_file:dir { { open getattr read search ioctl } add_name write };
allow imsd dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow imsd fwmarkd_socket:sock_file write;
allow imsd shell_data_file:dir search;

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { setuid } for  pid=3103 comm="imsd" capability=7  scontext=u:r:empty_service:s0 tcontext=u:r:empty_service:s0 tclass=capability permissive=1
# avc:  denied  { write } for  pid=3103 comm="imsd" name="dnsproxyd" dev="tmpfs" ino=5418 scontext=u:r:empty_service:s0 tcontext=u:object_r:dnsproxyd_socket:s0 tclass=sock_file permissive=1
# avc:  denied  { name_bind } for  pid=3103 comm="imsd" src=5060 scontext=u:r:empty_service:s0 tcontext=u:object_r:port:s0 tclass=udp_socket permissive=1
# avc:  denied  { node_bind } for  pid=3103 comm="imsd" src=5060 scontext=u:r:empty_service:s0 tcontext=u:object_r:node:s0 tclass=udp_socket permissive=1
# avc:  denied  { remove_name } for  pid=3103 comm="imsd" name="imsd" dev="sda17" ino=458761 scontext=u:r:empty_service:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir permissive=1
# avc:  denied  { unlink } for  pid=3103 comm="imsd" name="imsd" dev="sda17" ino=458761 scontext=u:r:empty_service:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { create } for  pid=3103 comm="imsd" name="imsd" scontext=u:r:empty_service:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { connectto } for  pid=3226 comm="imsd" path="/dev/socket/fwmarkd" scontext=u:r:empty_service:s0 tcontext=u:r:netd:s0 tclass=unix_stream_socket permissive=1
# avc:  denied  { net_admin } for  pid=3221 comm="imsd" capability=12  scontext=u:r:empty_service:s0 tcontext=u:r:empty_service:s0 tclass=capability permissive=1
# avc:  denied  { module_request } for  pid=3221 comm="imsd" kmod="authenc(hmac(sha1),cbc(aes))" scontext=u:r:empty_service:s0 tcontext=u:r:kernel:s0 tclass=system permissive=1
# avc:  denied  { net_raw } for  pid=3226 comm="imsd" capability=13  scontext=u:r:empty_service:s0 tcontext=u:r:empty_service:s0 tclass=capability permissive=1

#line 1 "vendor/samsung/common/sepolicy/sec_common/init_shell.te"
#
# init_shell
#

############ aosp and sec_common #############
########## type and macro.
#init_shell should not allow to access container's data files
#type init_shell, domain, mlstrustedsubject;
type init_shell, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;

# for B2C users
typeattribute init_shell trusteddomain;
typeattribute init_shell system_domain;


#line 15
# Call the servicemanager and transfer references to it.
#line 15
allow init_shell servicemanager:binder { call transfer };
#line 15
# servicemanager performs getpidcon on clients.
#line 15
allow servicemanager init_shell:dir search;
#line 15
allow servicemanager init_shell:file { read open };
#line 15
allow servicemanager init_shell:process getattr;
#line 15
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 15
# all domains in domain.te.
#line 15


#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow init shell_exec:file { getattr open read execute };
#line 16
allow init init_shell:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow init_shell shell_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow init_shell init:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit init init_shell:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow init init_shell:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition init shell_exec:process init_shell;
#line 16


#line 17
allow init_shell dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 17
allow init_shell dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 17
allow init_shell dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 17
allow init_shell bugreport_exec:file { execute execute_no_trans };
#line 17
allow init_shell dumpstate_exec:file { execute execute_no_trans };
#line 17
allow init_shell dumpsys_exec:file { execute execute_no_trans };
#line 17


#line 18

#line 18
allow init_shell mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 18
allow init_shell mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 18
# TODO: Figure out proper sockets
#line 18
allow init_shell mobicoredaemon:unix_stream_socket connectto;
#line 18

#line 18
allow init_shell mobicore-user_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18
allow init_shell mobicore_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18


#line 19
allow init_shell property_socket:sock_file write;
#line 19
allow init_shell init:unix_stream_socket connectto;
#line 19


########## self and domain_type
allow init_shell adbd:dir { getattr open read search };
allow init_shell at_distributor:dir getattr;
allow init_shell at_distributor:file { getattr open read };
allow init_shell auditd:dir { getattr search };
allow init_shell auditd:file { getattr open read };
allow init_shell bintvoutservice:dir { getattr open read search };
allow init_shell bintvoutservice:file { getattr open read };
allow init_shell bluetooth:dir getattr;
allow init_shell bluetooth:file { getattr open read };
allow init_shell connfwexe:dir getattr;
allow init_shell ddexe:dir { open read search };
allow init_shell ddexe:file getattr;
allow init_shell dhcp:dir getattr;
allow init_shell diag_uart_log:dir { getattr open read };
allow init_shell diag_uart_log:file { getattr open read };
allow init_shell drmserver:dir { getattr open read search };
allow init_shell drmserver:file { getattr open read };
allow init_shell dttexe:dir getattr;
allow init_shell immvibed:file { getattr open read };
allow init_shell init:dir { open read };
allow init_shell init:file getattr;
allow init_shell init:netlink_socket { read write };
allow init_shell init:unix_stream_socket { connectto read write };
allow init_shell installd:dir { getattr open read search };
allow init_shell installd:file { getattr open read };
allow init_shell kernel:dir { open read search };
allow init_shell kernel:file { getattr open read };
allow init_shell kernel:key { view read search };
allow init_shell kernel:process setsched;
allow init_shell kernel:system { module_request syslog_read };
allow init_shell keystore:dir { getattr read search };
allow init_shell keystore:file { getattr open read };
allow init_shell mediaserver:dir { getattr open read search };
allow init_shell mediaserver:file { getattr open read };
allow init_shell mobexdaemon:dir { getattr open read search };
allow init_shell mobexdaemon:file { getattr open read };
allow init_shell mobicoredaemon:dir { getattr open read search };
allow init_shell mobicoredaemon:file { getattr open read };
allow init_shell netd:dir { open read };
allow init_shell netd:file { getattr open read };
allow init_shell netmgrd:dir { open read search };
allow init_shell nfc:file { getattr open read };
allow init_shell p2p_supplicant:dir getattr;
allow init_shell platform_app:dir getattr;
allow init_shell s_platform_app:dir getattr;
#line 66
allow init_shell radio:dir getattr;
allow init_shell radio:file { getattr open read };
allow init_shell rild:dir { open read };
allow init_shell rild:file { open read };
allow init_shell samsung_app:dir getattr;
allow init_shell sdcardd:dir { getattr search };
allow init_shell sdcardd:file { open read };
allow init_shell sec-ril:dir getattr;
#allow init_shell self:capability { net_admin net_raw net_bind_service fowner chown fsetid sys_admin setgid setuid sys_boot sys_ptrace sys_resource };
#violate neverallow rule. change to:
allow init_shell self:capability { net_admin net_raw net_bind_service fowner chown fsetid sys_admin setgid setuid sys_boot sys_resource };

allow init_shell self:capability2 syslog;
allow init_shell self:netlink_route_socket *;
allow init_shell self:{ netlink_route_socket rawip_socket udp_socket } *;
allow init_shell sensorhubservice:dir { getattr open read search };
allow init_shell sensorhubservice:file { getattr open read };
allow init_shell servicemanager:dir { open read search };
allow init_shell servicemanager:file { getattr open read };
allow init_shell surfaceflinger:dir { getattr open read search };
allow init_shell surfaceflinger:file { getattr open read };
allow init_shell system:dir { getattr search };
allow init_shell system:file { open read };
allow init_shell ueventd:dir { open read search };
allow init_shell ueventd:file getattr;
allow init_shell vold:dir { open read search };
allow init_shell vold:file { getattr open read };
allow init_shell vold:unix_stream_socket connectto;
allow init_shell wpa:dir { getattr search };
allow init_shell wpa:file { getattr open read };
allow init_shell zygote:dir { getattr open read search };
allow init_shell zygote:file { getattr open read };

########## fs_type
allow init_shell cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#allow init_shell cgroup:filesystem mount;
#violate neverallow rule.

#allow init_shell labeledfs:filesystem remount;
#violate neverallow rule.

allow init_shell proc:file { open append write };
allow init_shell proc_net:file { open append write };
allow init_shell qtaguid_proc:dir { open getattr read search ioctl };
allow init_shell qtaguid_proc:file { getattr open read ioctl lock };
allow init_shell rootfs:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow init_shell sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } }; 
allow init_shell sdcard_external:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell sdcard_external:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell selinuxfs:dir { open getattr read search ioctl };
allow init_shell selinuxfs:file { { getattr open read ioctl lock } { open append write } };
allow init_shell sysfs:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell sysfs:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell sysrq_proc:file write;
allow init_shell tmpfs:chr_file { { getattr open read ioctl lock } { open append write } };

#allow init_shell tmpfs:file x_file_perms;
#violate neverallow rule.
allow init_shell tmpfs:file { getattr execute_no_trans };


########## dev_type
allow init_shell block_device:lnk_file { getattr open read ioctl lock };
allow init_shell console_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow init_shell device:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom mounton };
allow init_shell device:file create;
allow init_shell dw_mmc_device:dir { write search getattr };
allow init_shell dw_mmc_device:lnk_file read;
allow init_shell emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow init_shell graphics_device:dir { open search write add_name remove_name };
allow init_shell graphics_device:lnk_file create;
allow init_shell input_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow init_shell kmsg_device:chr_file { open append write };
allow init_shell m9kefsblk_device:blk_file { open append write };
allow init_shell radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow init_shell secure_storage_device:dir { { open getattr read search ioctl } relabelto relabelto };
allow init_shell systemblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow init_shell tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow init_shell apk_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell apk_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell app_data_file:dir { search setattr };
allow init_shell gad_untrusted_app_data_file:dir { search setattr };
#line 151
allow init_shell bluetooth_efs_file:dir { open getattr read search ioctl };
allow init_shell bluetooth_efs_file:file { getattr open read ioctl lock };
allow init_shell dalvikcache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell dalvikcache_data_file:dir { open search write add_name remove_name };

#allow init_shell debuggerd_exec:file { append read setattr unlink write };
#violate neverallow rule. change to:
allow init_shell debuggerd_exec:file { getattr open read ioctl lock };

allow init_shell dumpstate_exec:file getattr;
allow init_shell efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } }; 
allow init_shell netd_socket:sock_file { open append write };
allow init_shell persist_data_file:dir { open getattr read search ioctl };
allow init_shell persist_data_file:file { getattr open read ioctl lock };
allow init_shell property_socket:sock_file { open append write };

#allow init_shell sdcardd_exec:file { read setattr unlink write };
#violate neverallow rule

allow init_shell security_file:file { getattr open read ioctl lock };
allow init_shell security_spota_file:file { getattr open read ioctl lock };
#line 174
allow init_shell security_file:dir { open getattr read search ioctl };
allow init_shell security_spota_file:dir { open getattr read search ioctl };
#line 175
allow init_shell shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow init_shell shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow init_shell smartcard_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell smartcard_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell smartcard_data_file:sock_file { getattr link unlink rename }; 
allow init_shell system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell system_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#allow init_shell system_file:dir w_dir_perms;
#violate neverallow rule. change to:
allow init_shell system_file:dir { open search add_name remove_name };

#allow init_shell system_file:file {create_file_perms x_file_perms };
#violate neverallow rule. change to:
allow init_shell system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#allow init_shell system_file:lnk_file { create_file_perms relabelto };
#violate neverallow rule. change to:
allow init_shell system_file:lnk_file { getattr open read ioctl lock };

#neverallow Google CTS-android-5.0.2_r1 : allow init_shell system_library_file:dir w_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow init_shell system_library_file:lnk_file create_file_perms;  
allow init_shell vold_socket:sock_file write;
allow init_shell wifi_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell wifi_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow init_shell ctl_default_prop:property_service set;
#neverallow Google CTS-android-5.0.2_r1 : allow init_shell default_prop:property_service set;

#allow init_shell { property_type -drs_date_prop -knox_kap_prop }:property_service set;
#violate neverallow rule. change to:
#neverallow Google CTS-android-5.0.2_r1 : allow init_shell { property_type -drs_date_prop -knox_kap_prop -security_prop }:property_service set;
allow init_shell newAttr79:property_service set;

allow init_shell shell_prop:property_service set;

########## known issue.
# Ability to relabel the secure storage mount
allow init_shell secure_storage_device:dir relabelto;

#CAC support
allow init_shell smartcard_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell smartcard_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell smartcard_data_file:sock_file { getattr link unlink rename }; 

# add more permissions to access generic type.
allow init_shell newAttr85:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell newAttr85:{ { file lnk_file sock_file fifo_file } chr_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# CP Crash with encrypted device(jm0302.sung)
allow init_shell tmpfs:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell tmpfs:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow init_shell container_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell bbccontainer_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 238
allow init_shell container_app_data_backend:file { { getattr open read ioctl lock } { getattr link unlink rename } };
allow init_shell bbccontainer_app_data_backend:file { { getattr open read ioctl lock } { getattr link unlink rename } };
#line 239
allow init_shell container_app_data_backend:lnk_file { getattr link unlink rename };
allow init_shell bbccontainer_app_data_backend:lnk_file { getattr link unlink rename };
#line 240

########## etc_type
# Knox back-up and restore issue - Need to check 
allow init_shell container_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell container_app_data_file:file { relabelfrom { getattr open read ioctl lock } { getattr link unlink rename } };
allow init_shell container_app_data_file:lnk_file { relabelfrom { getattr link unlink rename } };

########## known issue.


############ qcom_common #############
########## type and macro.

#line 252
# Call the server domain and optionally transfer references to it.
#line 252
allow init_shell system:binder { call transfer };
#line 252
# Allow the serverdomain to transfer references to the client on the reply.
#line 252
allow system init_shell:binder transfer;
#line 252
# Receive and use open files from the server.
#line 252
allow init_shell system:fd use;
#line 252


########## self and domain_type
allow init_shell ATFWD-daemon:dir { getattr open read search };
allow init_shell ATFWD-daemon:file { getattr open read };
allow init_shell cnd:dir { getattr open read search };
allow init_shell efsks:dir getattr;
allow init_shell init:udp_socket { read write };
allow init_shell init:unix_stream_socket { read write getattr };
allow init_shell init:packet_socket { read write };
allow init_shell init:netlink_route_socket { read write };
allow init_shell init:netlink_nflog_socket { read write };
allow init_shell init:netlink_kobject_uevent_socket { read write };
allow init_shell init:fifo_file { { getattr open read ioctl lock } { open append write } };
allow init_shell ks:dir getattr;
allow init_shell mm-pp-daemon:dir { getattr open read search };
allow init_shell mm-pp-daemon:file { getattr open read };
allow init_shell mm-qcamera-daemon:dir { getattr open read search };
allow init_shell mm-qcamera-daemon:file { getattr open read };
allow init_shell qcks:dir { getattr open read search };
allow init_shell qmuxd:dir getattr;
allow init_shell qmuxd:file { getattr open read };
allow init_shell qseecomd:dir { getattr open read search };
allow init_shell rmt_storage:file { getattr open read };
allow init_shell self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow init_shell self:netlink_route_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_write nlmsg_read };
allow init_shell self:capability { sys_module dac_override };
allow init_shell self:capability2 block_suspend;
allow init_shell time_daemon:dir getattr;

########## fs_type
#neverallow Google CTS-android-5.0.2_r1 : allow init_shell firmware:file rx_file_perms;
allow init_shell firmware:file { getattr open read ioctl lock };
allow init_shell firmware:dir { open getattr read search ioctl };
allow init_shell sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell sysfs_thermal:dir { open getattr read search ioctl };
allow init_shell sysfs_thermal:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow init_shell adsprpc_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell block_device:lnk_file { relabelfrom getattr };
allow init_shell block_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow init_shell bluetooth_serial_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow init_shell coresight_device:chr_file { getattr open read ioctl lock };
allow init_shell device:chr_file getattr;
allow init_shell emmcblk_device:blk_file { getattr open read ioctl lock };
allow init_shell emmcblk_device:lnk_file relabelto;
allow init_shell fm_radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow init_shell fsg_device:lnk_file relabelto;
allow init_shell graphics_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell graphics_device:lnk_file create;
allow init_shell hsic_device:chr_file { read write };
allow init_shell qmuxd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow init_shell qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow init_shell m9kefsblk_device:blk_file { getattr open read ioctl lock };
allow init_shell modem_device:lnk_file relabelto;
allow init_shell radio_device:chr_file { getattr open read ioctl lock };
allow init_shell smd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow init_shell ssdblk_device:lnk_file relabelto;
allow init_shell usf_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell wifi_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow init_shell apk_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell apk_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow init_shell efs_file:dir { open getattr read search ioctl };
allow init_shell exec_type:dir { open getattr read search ioctl }; 
allow init_shell exec_type:file { getattr open read ioctl lock }; 
allow init_shell exec_type:lnk_file read;
allow init_shell imei_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell imei_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow init_shell persist_data_file:file { create_file_perms x_file_perms };
allow init_shell persist_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow init_shell persist_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell system_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#allow init_shell system_file:dir create_dir_perms;
#violate neverallow rule. change to:
allow init_shell system_file:dir { { open getattr read search ioctl } add_name remove_name };

#allow init_shell system_file:file link_file_perms;
#violate neverallow rule


########## etc_type
allow init_shell bluetooth_prop:property_service set;

########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow init_shell init:fifo_file { { getattr open read ioctl lock } { open append write } };
allow init_shell self:capability { dac_override sys_module };

########## fs_type
allow init_shell rootfs:chr_file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow init_shell sdcard_type:chr_file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow init_shell sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell sdcard_type:dir { open getattr read search ioctl };

########## dev_type
allow init_shell console_device:chr_file { getattr open read ioctl lock };
allow init_shell device:dir relabelfrom;
allow init_shell secure_storage_device:dir { open getattr read search ioctl };
allow init_shell tty_device:chr_file { getattr open read ioctl lock };

########## file_type
allow init_shell dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init_shell dumplog_data_file:file { getattr link unlink rename };
allow init_shell media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

########## etc_type
########## known issue.


############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1398853018.180:22): avc:  denied  { write } for  pid=323 comm="sh" name="accept_ra_defrtr" dev="proc" ino=10481 scontext=u:r:init_shell:s0 #tcontext=u:object_r:proc_net:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016 
# avc:  denied  { write } for  pid=2302 comm="sh" name="enabled" dev="sysfs" ino=30101 scontext=u:r:init_shell:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=file
# item=0 name="/sys/module/msm_thermal/core_control/enabled" inode=30101 dev=00:0c mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs_thermal:s0
#avc:  denied  { setattr } for  pid=4335 comm="chown" name="scaling_max_freq" dev="sysfs" ino=10887 scontext=u:r:init_shell:s0 tcontext=u:object_r:sysfs_devices_system_cpu:s0 tclass=file SEPF_SM-G900F_5.0_0001
# item=0 name="/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq" inode=10887 dev=00:0c mode=0100660 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:sysfs_devices_system_cpu:s0
#  avc:  denied  { getattr } for  pid=7270 comm="sh" path="/dev/coresight-stm" dev="tmpfs" ino=6770 scontext=u:r:init_shell:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# SPR GPRIME /system/etc/init.qcom.fm.sh: mod_verify_sig of insmod,  avc:  denied  { search } for  pid=9970 comm="insmod" scontext=u:r:init_shell:s0 tcontext=u:r:kernel:s0 tclass=key permissive=0


#line 1 "vendor/samsung/common/sepolicy/sec_common/insthk.te"
#
# insthk
#

############ aosp and sec_common #############
########## type and macro.
type insthk, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type insthk_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute insthk trusteddomain;
typeattribute insthk system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init insthk_exec:file { getattr open read execute };
#line 13
allow init insthk:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow insthk insthk_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow insthk init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init insthk:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init insthk:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init insthk_exec:process insthk;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type insthk_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition insthk tmpfs:file insthk_tmpfs;
#line 13
allow insthk insthk_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
allow insthk self:capability { dac_override chown ipc_lock };

########## fs_type
allow insthk firmware:file { getattr open read ioctl lock };

########## dev_type
########## file_type
allow insthk drm_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow insthk drm_efs_file:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow insthk qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { ipc_lock } for  pid=4989 comm="insthk" capability=14  scontext=u:r:insthk:s0 tcontext=u:r:insthk:s0 tclass=capability permissive=0 SEPF_SM-J700F_5.0.2_0011



#line 1 "vendor/samsung/common/sepolicy/sec_common/ipruleset.te"
#
# ipruleset
#

############ aosp and sec_common #############
########## type and macro.
type ipruleset, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type ipruleset_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute ipruleset trusteddomain;
typeattribute ipruleset system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init ipruleset_exec:file { getattr open read execute };
#line 13
allow init ipruleset:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow ipruleset ipruleset_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow ipruleset init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init ipruleset:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init ipruleset:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init ipruleset_exec:process ipruleset;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type ipruleset_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition ipruleset tmpfs:file ipruleset_tmpfs;
#line 13
allow ipruleset ipruleset_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/sec_common/IPSecService.te"
#
# IPSecService
#

############ aosp and sec_common #############
########## type and macro.
# mdnsd
type IPSecService, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type IPSecService_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute IPSecService trusteddomain;
typeattribute IPSecService system_domain;


#line 14

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow init IPSecService_exec:file { getattr open read execute };
#line 14
allow init IPSecService:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow IPSecService IPSecService_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow IPSecService init:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit init IPSecService:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow init IPSecService:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition init IPSecService_exec:process IPSecService;
#line 14

#line 14

#line 14
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 14
type IPSecService_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 14
type_transition IPSecService tmpfs:file IPSecService_tmpfs;
#line 14
allow IPSecService IPSecService_tmpfs:file { read write };
#line 14

#line 14


########## self and domain_type
allow IPSecService self:capability { net_admin dac_override };
allow IPSecService kernel:system module_request;

########## fs_type
########## dev_type
allow IPSecService socket_device:dir { open search write add_name remove_name };
allow IPSecService ipsec_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow IPSecService socket_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { dac_override } for  pid=537 comm="IPSecService" capability=1  scontext=u:r:IPSecService:s0 tcontext=u:r:IPSecService:s0 tclass=capability item=1 name="/data/log/IPSecKeys_20140703_163126.txt" inode=392479 dev=b3:1b mode=0100600 ouid=0 ogid=1000 rdev=00:00 obj=u:object_r:dumplog_data_file:s0
# avc:  denied  { module_request } for  pid=4186 comm="IPSecService" kmod="authenc(hmac(sha1),ecb(cipher_null))" scontext=u:r:IPSecService:s0 tcontext=u:r:kernel:s0 tclass=system permissive=0

#line 1 "vendor/samsung/common/sepolicy/sec_common/jackservice.te"
#
# jackservice
#

############ aosp and sec_common #############
########## type and macro.
# jackservice
type jackservice, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type jackservice_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute jackservice trusteddomain;
typeattribute jackservice system_domain;
typeattribute jackservice mlstrustedsubject;


#line 15
# Call the servicemanager and transfer references to it.
#line 15
allow jackservice servicemanager:binder { call transfer };
#line 15
# servicemanager performs getpidcon on clients.
#line 15
allow servicemanager jackservice:dir search;
#line 15
allow servicemanager jackservice:file { read open };
#line 15
allow servicemanager jackservice:process getattr;
#line 15
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 15
# all domains in domain.te.
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow jackservice mediaserver:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow mediaserver jackservice:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow jackservice mediaserver:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow jackservice { untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app platform_app s_platform_app }:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow { untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app platform_app s_platform_app } jackservice:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow jackservice { untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app platform_app s_platform_app }:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow { untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app platform_app s_platform_app } jackservice:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow jackservice { untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app platform_app s_platform_app }:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow { untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app platform_app s_platform_app } jackservice:fd use;
#line 18


#line 19

#line 19
# Allow the necessary permissions.
#line 19

#line 19
# Old domain may exec the file and transition to the new domain.
#line 19
allow init jackservice_exec:file { getattr open read execute };
#line 19
allow init jackservice:process transition;
#line 19
# New domain is entered by executing the file.
#line 19
allow jackservice jackservice_exec:file { entrypoint open read execute getattr };
#line 19
# New domain can send SIGCHLD to its caller.
#line 19
allow jackservice init:process sigchld;
#line 19
# Enable AT_SECURE, i.e. libc secure mode.
#line 19
dontaudit init jackservice:process noatsecure;
#line 19
# XXX dontaudit candidate but requires further study.
#line 19
allow init jackservice:process { siginh rlimitinh };
#line 19

#line 19
# Make the transition occur by default.
#line 19
type_transition init jackservice_exec:process jackservice;
#line 19

#line 19

#line 19
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 19
type jackservice_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 19
type_transition jackservice tmpfs:file jackservice_tmpfs;
#line 19
allow jackservice jackservice_tmpfs:file { read write };
#line 19

#line 19


#line 20
allow jackservice init:unix_stream_socket connectto;
#line 20
allow jackservice init:unix_stream_socket { read write };
#line 20


########## self and domain_type
allow jackservice apaservice:unix_stream_socket connectto;
allow jackservice radio:fd use;
allow jackservice self:binder { transfer call };
allow jackservice self:capability { setuid setgid kill };
allow jackservice system_app:fd use;
allow jackservice s_system_app:fd use;
#line 28
allow jackservice untrusteddomain:fd use;
allow jackservice untrusteddomain:unix_stream_socket connectto;

########## fs_type
allow jackservice cgroup:dir { create add_name };
allow jackservice sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow jackservice sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow jackservice sysfs:file write;
allow jackservice sysfs_ss_writable:file write;

########## dev_type
allow jackservice audio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow jackservice audio_device:dir search;

########## file_type
allow jackservice androidshmservice_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow jackservice apaservice_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow jackservice app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow jackservice gad_untrusted_app_data_file:file { { getattr open read ioctl lock } { open append write } };
#line 46
allow jackservice app_library_file:dir search;
allow jackservice jack_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow jackservice jack_data_file:{ file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow jackservice jack_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow jackservice jack_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow jackservice media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow jackservice media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow jackservice system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow jackservice system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow jackservice system_file:file execute_no_trans;

########## etc_type
allow jackservice jackservice_service:service_manager add;

########## known issue.


############ avc_log #############
# avc:  denied  { add } for service=com.samsung.android.jam.IJackService scontext=u:r:jackservice:s0 tcontext=u:object_r:default_android_service:s0 tclass=service_manager
# avc:  denied  { connectto } for  pid=8919 comm="jackd" path="/dev/socket/jack/jack_com.sec.musicstudioSolClient_1038_0" scontext=u:r:jackservice:s0 tcontext=u:r:untrusted_app:s0 tclass=unix_stream_socket

#line 1 "vendor/samsung/common/sepolicy/sec_common/kiesexe.te"
#
# kiesexe
#

############ aosp and sec_common #############
########## type and macro.
type kiesexe, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type kiesexe_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute kiesexe trusteddomain;
typeattribute kiesexe system_domain;


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow kiesexe system:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow system kiesexe:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow kiesexe system:fd use;
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow kiesexe servicemanager:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow servicemanager kiesexe:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow kiesexe servicemanager:fd use;
#line 14


#line 15
# Call the servicemanager and transfer references to it.
#line 15
allow kiesexe servicemanager:binder { call transfer };
#line 15
# servicemanager performs getpidcon on clients.
#line 15
allow servicemanager kiesexe:dir search;
#line 15
allow servicemanager kiesexe:file { read open };
#line 15
allow servicemanager kiesexe:process getattr;
#line 15
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 15
# all domains in domain.te.
#line 15


#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow init kiesexe_exec:file { getattr open read execute };
#line 16
allow init kiesexe:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow kiesexe kiesexe_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow kiesexe init:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit init kiesexe:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow init kiesexe:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition init kiesexe_exec:process kiesexe;
#line 16

#line 16

#line 16
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 16
type kiesexe_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 16
type_transition kiesexe tmpfs:file kiesexe_tmpfs;
#line 16
allow kiesexe kiesexe_tmpfs:file { read write };
#line 16

#line 16


########## self and domain_type
allow kiesexe init:unix_stream_socket connectto;
allow kiesexe ddexe:unix_stream_socket connectto;
allow kiesexe mobexdaemon:process signal;
allow kiesexe self:capability { dac_override setuid sys_boot };

########## fs_type
allow kiesexe sdcard_internal:dir { open getattr read search ioctl };
allow kiesexe sdcard_internal:file { getattr open read ioctl lock };
allow kiesexe sysfs:file { open append write };
allow kiesexe sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow kiesexe device:file { getattr open read ioctl lock };
allow kiesexe tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow kiesexe anr_data_file:file { open append write };
allow kiesexe dalvikcache_data_file:dir { open search write add_name remove_name };
allow kiesexe dalvikcache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow kiesexe { shell_exec zygote_exec }:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow kiesexe system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow kiesexe system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow kiesexe system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow kiesexe system_file:file execute_no_trans;
allow kiesexe system_file:file { getattr execute execute_no_trans };


########## etc_type
allow kiesexe property_socket:sock_file write;
allow kiesexe system_prop:property_service set;
allow kiesexe kies_prop:property_service set;

########## known issue.
#r_dir_file(kiesexe, file_type)
# replacing r_dir_file macro and removing container related access
allow kiesexe newAttr59:dir { open getattr read search ioctl };
allow kiesexe newAttr59:{ file lnk_file } { getattr open read ioctl lock };

#r_dir_file(kiesexe, domain)
# replacing r_dir_file macro and removing container related access
allow kiesexe newAttr33:dir { open getattr read search ioctl };
allow kiesexe newAttr33:{ file lnk_file } { getattr open read ioctl lock };


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/launcher.te"
# launcher
##SEC removed: type launcher, domain;
type launcher, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type launcher_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init launcher_exec:file { getattr open read execute };
#line 5
allow init launcher:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow launcher launcher_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow launcher init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init launcher:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init launcher:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init launcher_exec:process launcher;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type launcher_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition launcher tmpfs:file launcher_tmpfs;
#line 5
allow launcher launcher_tmpfs:file { read write };
#line 5

#line 5



#line 7
allow launcher property_socket:sock_file write;
#line 7
allow launcher init:unix_stream_socket connectto;
#line 7

allow launcher qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow launcher self:capability dac_override;
allow launcher system_prop:property_service set;

# Allow Mobicore to use qseecom services for loading the app
allow launcher tee_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Allow Mobicore to access the firmware files
allow launcher firmware_file:dir { open getattr read search ioctl };
allow launcher firmware_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/sec_common/logwrapper.te"
#
# logwrapper
#

############ aosp and sec_common #############
########## type and macro.
type logwrapper, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type logwrapper_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute logwrapper trusteddomain;
typeattribute logwrapper system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init logwrapper_exec:file { getattr open read execute };
#line 13
allow init logwrapper:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow logwrapper logwrapper_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow logwrapper init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init logwrapper:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init logwrapper:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init logwrapper_exec:process logwrapper;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type logwrapper_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition logwrapper tmpfs:file logwrapper_tmpfs;
#line 13
allow logwrapper logwrapper_tmpfs:file { read write };
#line 13

#line 13

########## self and domain_type
allow logwrapper self:capability { setuid net_bind_service setgid net_raw net_admin sys_admin };
allow logwrapper self:{ socket udp_socket packet_socket netlink_socket netlink_route_socket } *;

########## fs_type
allow logwrapper cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow logwrapper devpts:chr_file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow logwrapper log_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow logwrapper log_device:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## file_type
########## etc_type
########## known issue.
#r_dir_file(logwrapper, file_type)
# replacing r_dir_file macro and removing container related access
allow logwrapper newAttr59:dir { open getattr read search ioctl };
allow logwrapper newAttr59:{ file lnk_file } { getattr open read ioctl lock };


############ qcom_common #############
########## type and macro.
########## self and domain_type
allow logwrapper debuggerd:unix_dgram_socket sendto;
allow logwrapper system_app:unix_dgram_socket sendto;
allow logwrapper s_system_app:unix_dgram_socket sendto;
#line 40
allow logwrapper system_server:unix_dgram_socket sendto;

########## fs_type
########## dev_type
########## file_type
allow logwrapper system_file:file { getattr execute execute_no_trans };
allow logwrapper system_wpa_socket:sock_file write;
allow logwrapper wifi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow logwrapper wifi_data_file:file { { getattr open read ioctl lock } { open append write } };
allow logwrapper wifi_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow logwrapper wpa_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
########## known issue.

############ slsi_common/bcom_common #############
########## type and macro.
########## self and domain_type
allow logwrapper self:capability sys_module;
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/lpm.te"
#
# LPM (Low Power Mode)
#
# While power-off, phone device can be charged by external chargers. (TA, USB, etc...) . This power-off charging mode is LPM.
# In this case, phone has some features as below :.
# - Keep the low power mode and get charged.
# - React just by some specific actions: charger connecting/disconnecting, power/home key press, power-off alarm (only in specific Chinese models)
# - When charger/key event occur, the LCD turns on and shows current battery level using animation.
# - The LCD turns off by timeout
# - When long power key pressed, phone goes power-on. (normal booting)
# Contact: minho4.kim, bohwa.chung, sk322.lee
#

############ aosp and sec_common #############
########## type and macro.
type lpm, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type lpm_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 19

#line 19
# Allow the necessary permissions.
#line 19

#line 19
# Old domain may exec the file and transition to the new domain.
#line 19
allow init lpm_exec:file { getattr open read execute };
#line 19
allow init lpm:process transition;
#line 19
# New domain is entered by executing the file.
#line 19
allow lpm lpm_exec:file { entrypoint open read execute getattr };
#line 19
# New domain can send SIGCHLD to its caller.
#line 19
allow lpm init:process sigchld;
#line 19
# Enable AT_SECURE, i.e. libc secure mode.
#line 19
dontaudit init lpm:process noatsecure;
#line 19
# XXX dontaudit candidate but requires further study.
#line 19
allow init lpm:process { siginh rlimitinh };
#line 19

#line 19
# Make the transition occur by default.
#line 19
type_transition init lpm_exec:process lpm;
#line 19

#line 19

#line 19
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 19
type lpm_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 19
type_transition lpm tmpfs:file lpm_tmpfs;
#line 19
allow lpm lpm_tmpfs:file { read write };
#line 19

#line 19


typeattribute lpm trusteddomain;
typeattribute lpm system_domain;

########## self and domain_type
allow lpm self:netlink_kobject_uevent_socket { create setopt bind read };
allow lpm self:capability { net_admin sys_tty_config sys_boot dac_override };

########## fs_type
allow lpm proc_sysrq:file { { getattr open read ioctl lock } { open append write } };
allow lpm sysfs:file { { getattr open read ioctl lock } { open append write } };
allow lpm sysfs_graphics:file { { getattr open read ioctl lock } { open append write } };
allow lpm sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow lpm sysfs_sec:file { { getattr open read ioctl lock } { open append write } };


########## dev_type
allow lpm ashmem_device:chr_file execute;
allow lpm graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow lpm graphics_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow lpm input_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow lpm input_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow lpm input_device:file { { getattr open read ioctl lock } { open append write } };

########## file_type
# for /efs/Battery
allow lpm efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow lpm efs_type:dir { open getattr read search ioctl };
allow lpm efs_type:file { getattr open read ioctl lock };
allow lpm platform_app_data_file:dir { open getattr read search ioctl };
allow lpm platform_app_data_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.

#for param block
allow lpm block_device:dir { open getattr read search ioctl };
allow lpm emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow lpm paramblk_device:blk_file { { getattr open read ioctl lock } { open append write } };

############ avc_log #############
# avc:  denied  { search } for  pid=213 comm="lpm" name="/" dev="mmcblk0p13" ino=2 scontext=u:r:lpm:s0 tcontext=u:object_r:efs_file:s0 tclass=dir permissive=0
# avc:  denied  { dac_override } for  pid=213 comm="lpm" capability=1  scontext=u:r:lpm:s0 tcontext=u:r:lpm:s0 tclass=capability permissive=0
# avc:  denied  { write } for  pid=244 comm="lpm" name="sysrq-trifger" dev="proc" ino=4026534222 scontexp=u:r:lpm:s0 4context=u:object_b:proc[sysrq:s0 tclass=file permissive=1
# avc:  denied  { read } fnr  pid=244 comm="lpm" name="mm#blk0p12" dev="tmpfs" ino=7250 scoftext=u:r:,pm:s0 tcontext=u:objeCt_r:emmcblk_device:s0 tclass=blk_file permissive=1
# avc:  denied  { write } fo2  pid=244 comm9"lpm" name "mmcblk0p12" dev="tmpfs" ino=7250 scontext=u:r:lpm:s0 tcontext=u:object_r:emmCblk_device:s0 tcLass=blk_file permissive=1
# /efs/Battery/batt_capacity_max avc:  denied  { read write } for  pid=213 comm="lpm" name="batt_capacity_max" dev="mmcblk0p13" ino=73 scontext=u:r:lpm:s0 tcontext=u:object_r:efs_file:s0 tclass=file permissive=1
# avc:  denied  { search } for  pid=282 comm="lpm" name="com.android.systemui" dev="mmcblk0p27" ino=393411 scontext=u:r:lpm:s0 tcontext=u:object_r:platform_app_data_file:s0 tclass=dir permissive=1
# item=0 name="/data/data/com.android.systemui/shared_prefs/com.android.systemui.power_overheat_shutdown.xml" nametype=UNKNOWN

#line 1 "vendor/samsung/common/sepolicy/sec_common/lptcpgc.te"
#
# lptcpgc  LPTCP (Low Power TCP)
# Reduces additional radio connection setups of UE and results in network signaling reduction and improved mobile device battery life time.
# Provides following client-initiated graceful TCP connection close to prevent a delayed server-initiate TCP connection close :
#   - Proactive TCP connection close
#   - Batching delayed TCP connection closes.
# Client only solution.
# No modification on client applications or server functions
# Working on a Whitelist (preconfigured target Apps list)
#   i.e. Facebook, Twitter, Email, Flipboard, AccuWeather, Yahoo Weather, Wongi Weather, Naver Mail, Daum Mail
# yk929.hong,Communications Solution Lab
#

############ aosp and sec_common #############
########## type and macro.
type lptcpgc, domain, mlstrustedsubject, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type lptcpgc_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
type lptcp_socket, socket_file_type, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;


#line 20

#line 20
# Allow the necessary permissions.
#line 20

#line 20
# Old domain may exec the file and transition to the new domain.
#line 20
allow init lptcpgc_exec:file { getattr open read execute };
#line 20
allow init lptcpgc:process transition;
#line 20
# New domain is entered by executing the file.
#line 20
allow lptcpgc lptcpgc_exec:file { entrypoint open read execute getattr };
#line 20
# New domain can send SIGCHLD to its caller.
#line 20
allow lptcpgc init:process sigchld;
#line 20
# Enable AT_SECURE, i.e. libc secure mode.
#line 20
dontaudit init lptcpgc:process noatsecure;
#line 20
# XXX dontaudit candidate but requires further study.
#line 20
allow init lptcpgc:process { siginh rlimitinh };
#line 20

#line 20
# Make the transition occur by default.
#line 20
type_transition init lptcpgc_exec:process lptcpgc;
#line 20

#line 20

#line 20
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 20
type lptcpgc_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 20
type_transition lptcpgc tmpfs:file lptcpgc_tmpfs;
#line 20
allow lptcpgc lptcpgc_tmpfs:file { read write };
#line 20

#line 20

#permissive lptcpgc;

#line 22
allow appdomain lptcp_socket:sock_file write;
#line 22
allow appdomain lptcpgc:unix_stream_socket connectto;
#line 22


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow lptcpgc system_data_file:dir { write remove_name add_name };
allow lptcpgc system_data_file:sock_file { create unlink };

########## etc_type
########## known issue.
# type transition to lptcp_socket
type_transition lptcpgc socket_device:sock_file lptcp_socket;
type_transition lptcpgc system_data_file:sock_file lptcp_socket;

# Allow the domain to add entries to the directory.
allow lptcpgc socket_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow lptcpgc system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

# Allow the domain to create the file.
allow lptcpgc lptcp_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# lptcpController CONFIG_FILE, /data/misc/lpnet/lpnetConfig
allow lptcpgc system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow lptcpgc system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


############ avc_log #############
# avc:  denied  { write } for  pid=3064 comm="lptcpController" name="/" dev="dm-0" ino=2 scontext=u:r:lptcpgc:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { remove_name } for  pid=3064 comm="lptcpController" name="lptcpSocket" dev="dm-0" ino=36 scontext=u:r:lptcpgc:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { unlink } for  pid=3064 comm="lptcpController" name="lptcpSocket" dev="dm-0" ino=36 scontext=u:r:lptcpgc:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { add_name } for  pid=3064 comm="lptcpController" name="lptcpSocket" scontext=u:r:lptcpgc:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=3064 comm="lptcpController" name="lptcpSocket" scontext=u:r:lptcpgc:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { write } for  pid=4217 comm="JDWP" name="lptcpSocket" dev="dm-0" ino=36 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { write } for  pid=4602 comm="JDWP" name="lptcpSocket" dev="dm-0" ino=36 scontext=u:r:knox_untrusted_app:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { write } for  pid=4918 comm="JDWP" name="lptcpSocket" dev="dm-0" ino=36 scontext=u:r:filtered_google_app:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { write } for  pid=5101 comm="JDWP" name="lptcpSocket" dev="dm-0" ino=36 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { open } for  pid=3090 comm="lptcpController" path="/data/misc/lpnet/lpnetConfig" dev="sda18" ino=131129 scontext=u:r:lptcpgc:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=0
#line 1 "vendor/samsung/common/sepolicy/sec_common/mobex.te"
#
# mobex
#

############ aosp and sec_common #############
########## type and macro.
type mobexdaemon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mobexdaemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute mobexdaemon trusteddomain;
typeattribute mobexdaemon system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init mobexdaemon_exec:file { getattr open read execute };
#line 13
allow init mobexdaemon:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow mobexdaemon mobexdaemon_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow mobexdaemon init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init mobexdaemon:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init mobexdaemon:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init mobexdaemon_exec:process mobexdaemon;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type mobexdaemon_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition mobexdaemon tmpfs:file mobexdaemon_tmpfs;
#line 13
allow mobexdaemon mobexdaemon_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
allow mobexdaemon init:unix_stream_socket connectto;
allow mobexdaemon kiesexe:unix_stream_socket connectto;
allow mobexdaemon self:tcp_socket { write read create connect };
allow mobexdaemon system_app:unix_stream_socket connectto;
allow mobexdaemon s_system_app:unix_stream_socket connectto;
#line 20

########## fs_type
allow mobexdaemon sdcard_internal:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mobexdaemon sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mobexdaemon sdcard_external:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mobexdaemon sdcard_external:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mobexdaemon sdcard_type:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
########## file_type
allow mobexdaemon app_data_file:dir { open getattr read search ioctl };
allow mobexdaemon gad_untrusted_app_data_file:dir { open getattr read search ioctl };
#line 31
allow mobexdaemon media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mobexdaemon media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mobexdaemon obb_apk_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mobexdaemon property_socket:sock_file { open append write };
allow mobexdaemon radio_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mobexdaemon radio_data_file:file { { getattr open read ioctl lock } { open append write } };
allow mobexdaemon shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow mobexdaemon system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mobexdaemon system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mobexdaemon system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mobexdaemon system_file:file { getattr execute execute_no_trans };

########## etc_type
allow mobexdaemon kies_prop:property_service set;
allow mobexdaemon port:tcp_socket name_connect;

########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/mobicoredaemon.te"
#
# mobicoredaemon
#

############ aosp and sec_common #############
########## type and macro.
type mobicoredaemon, domain, mlstrustedsubject, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mobicoredaemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute mobicoredaemon trusteddomain;
typeattribute mobicoredaemon system_domain;


#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init_shell mobicoredaemon_exec:file { getattr open read execute };
#line 13
allow init_shell mobicoredaemon:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow mobicoredaemon mobicoredaemon_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow mobicoredaemon init_shell:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init_shell mobicoredaemon:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init_shell mobicoredaemon:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init_shell mobicoredaemon_exec:process mobicoredaemon;
#line 13


#line 14

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow init mobicoredaemon_exec:file { getattr open read execute };
#line 14
allow init mobicoredaemon:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow mobicoredaemon mobicoredaemon_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow mobicoredaemon init:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit init mobicoredaemon:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow init mobicoredaemon:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition init mobicoredaemon_exec:process mobicoredaemon;
#line 14

#line 14

#line 14
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 14
type mobicoredaemon_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 14
type_transition mobicoredaemon tmpfs:file mobicoredaemon_tmpfs;
#line 14
allow mobicoredaemon mobicoredaemon_tmpfs:file { read write };
#line 14

#line 14


#line 15
allow mobicoredaemon property_socket:sock_file write;
#line 15
allow mobicoredaemon init:unix_stream_socket connectto;
#line 15


########## self and domain_type
allow mobicoredaemon appdomain:fd use;
allow mobicoredaemon self:netlink_socket { read bind create write };

########## fs_type
########## dev_type
allow mobicoredaemon mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow mobicoredaemon apk_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mobicoredaemon efs_file:file { getattr open read ioctl lock };

########## etc_type
allow mobicoredaemon mobicore_prop:property_service set;

########## known issue.

# DMVerity
allow mobicoredaemon rootfs:file entrypoint;

############ qcom_common #############
########## type and macro.
########## self and domain_type
allow mobicoredaemon init_shell:fd use;
allow mobicoredaemon self:capability dac_override;

########## fs_type
allow mobicoredaemon firmware:dir { open getattr read search ioctl };
allow mobicoredaemon firmware:file { getattr open read ioctl lock };

########## dev_type
allow mobicoredaemon qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow mobicoredaemon apk_data_file:lnk_file { getattr open read ioctl lock };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { write } for  pid=513 comm="McDaemon.FSD" name="mcRegistry" dev="mmcblk0p26" ino=523281 scontext=u:r:mobicoredaemon:s0 tcontext=u:object_r:apk_data_file:s0 tclass=dir SEPF_SM-G900F_5.0_0001
# avc:  denied  { entrypoint } for  pid=2981 comm="init" path="/sbin/mcDriverDaemon_static" dev="rootfs" ino=8456 scontext=u:r:mobicoredaemon:s0 tcontext=u:object_r:rootfs:s0 tclass=file permissive=1
# arch=c00000b7 syscall=221 success=yes exit=0 a0=7f9627ed7d a1=7f96293518 a2=51d270 a3=64616f6c00737361 items=0 ppid=1 ppcomm=init pid=2981 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="mcDriverDaemon_" exe="/sbin/mcDriverDaemon_static" subj=u:r:mobicoredaemon:s0 key=(null)
# avc:  denied  { use } for  pid=3132 comm="McDaemon.Server" path=2F6465762F6173686D656D202864656C6574656429 dev="tmpfs" ino=959381 scontext=u:r:mobicoredaemon:s0 tcontext=u:r:untrusted_app:s0 tclass=fd permissive=0

#line 1 "vendor/samsung/common/sepolicy/sec_common/nqs.te"
#
# nqs
#

############ aosp and sec_common #############
########## type and macro.
type nqs, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type nqs_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute nqs trusteddomain;
typeattribute nqs system_domain;
# temporary permissive to gather the log.
# permissive nqs;


#line 15

#line 15
# Allow the necessary permissions.
#line 15

#line 15
# Old domain may exec the file and transition to the new domain.
#line 15
allow init nqs_exec:file { getattr open read execute };
#line 15
allow init nqs:process transition;
#line 15
# New domain is entered by executing the file.
#line 15
allow nqs nqs_exec:file { entrypoint open read execute getattr };
#line 15
# New domain can send SIGCHLD to its caller.
#line 15
allow nqs init:process sigchld;
#line 15
# Enable AT_SECURE, i.e. libc secure mode.
#line 15
dontaudit init nqs:process noatsecure;
#line 15
# XXX dontaudit candidate but requires further study.
#line 15
allow init nqs:process { siginh rlimitinh };
#line 15

#line 15
# Make the transition occur by default.
#line 15
type_transition init nqs_exec:process nqs;
#line 15

#line 15

#line 15
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 15
type nqs_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 15
type_transition nqs tmpfs:file nqs_tmpfs;
#line 15
allow nqs nqs_tmpfs:file { read write };
#line 15

#line 15

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/olsrd.te"
#
# OLSRD SERVICE requested by SUNGHEE LEE(sh2011.lee@samsung.com, Convergence R&D Group)
# this service support multi-hop network by IPv4 forwarding at Oxygen network
#

############ aosp and sec_common #############
type olsrd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type olsrd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#permissive olsrd;


#line 12

#line 12
# Allow the necessary permissions.
#line 12

#line 12
# Old domain may exec the file and transition to the new domain.
#line 12
allow init olsrd_exec:file { getattr open read execute };
#line 12
allow init olsrd:process transition;
#line 12
# New domain is entered by executing the file.
#line 12
allow olsrd olsrd_exec:file { entrypoint open read execute getattr };
#line 12
# New domain can send SIGCHLD to its caller.
#line 12
allow olsrd init:process sigchld;
#line 12
# Enable AT_SECURE, i.e. libc secure mode.
#line 12
dontaudit init olsrd:process noatsecure;
#line 12
# XXX dontaudit candidate but requires further study.
#line 12
allow init olsrd:process { siginh rlimitinh };
#line 12

#line 12
# Make the transition occur by default.
#line 12
type_transition init olsrd_exec:process olsrd;
#line 12

#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type olsrd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition olsrd tmpfs:file olsrd_tmpfs;
#line 12
allow olsrd olsrd_tmpfs:file { read write };
#line 12

#line 12


########## type and macro.
########## self and domain_type
allow olsrd self:capability { net_admin net_raw net_bind_service };
allow olsrd self:netlink_socket { create bind read };

########## fs_type
allow olsrd proc_net:file write;

########## dev_type
########## file_type
allow olsrd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow olsrd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow olsrd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow olsrd system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow olsrd node:tcp_socket node_bind;
allow olsrd node:udp_socket node_bind;
allow olsrd port:tcp_socket name_bind;
allow olsrd port:udp_socket name_bind;

########## known issue.

############ avc_log #############
# avc:  denied  { node_bind } for  pid=16532 comm="olsrd" src=60699 scontext=u:r:olsrd:s0 tcontext=u:object_r:node:s0 tclass=udp_socket permissive=1
# avc:  denied  { name_bind } for  pid=16532 comm="olsrd" src=1978 scontext=u:r:olsrd:s0 tcontext=u:object_r:port:s0 tclass=tcp_socket permissive=1
# avc:  denied  { node_bind } for  pid=16532 comm="olsrd" src=1978 scontext=u:r:olsrd:s0 tcontext=u:object_r:node:s0 tclass=tcp_socket permissive=1
# avc:  denied  { write } for  pid=16532 comm="olsrd" name="local" dev="sda16" ino=520194 scontext=u:r:olsrd:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { add_name } for  pid=16532 comm="olsrd" name="olsrd.lock" scontext=u:r:olsrd:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=16532 comm="olsrd" name="olsrd.lock" scontext=u:r:olsrd:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1
# avc:  denied  { write open } for  pid=16532 comm="olsrd" path="/data/local/olsrd.lock" dev="sda16" ino=520235 scontext=u:r:olsrd:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1
# avc:  denied  { lock } for  pid=16532 comm="olsrd" path="/data/local/olsrd.lock" dev="sda16" ino=520235 scontext=u:r:olsrd:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1
# avc:  denied  { create } for  pid=14331 comm="olsrd" scontext=u:r:olsrd:s0 tcontext=u:r:olsrd:s0 tclass=netlink_socket permissive=0
# avc:  denied  { execute_no_trans } for  pid=16533 comm="sh" path="/system/bin/iptables" dev="sda13" ino=641 scontext=u:r:olsrd:s0 tcontext=u:object_r:system_file:s0 tclass=file permissive=1
# avc:  denied  { net_raw } for  pid=16532 comm="olsrd" capability=13  scontext=u:r:olsrd:s0 tcontext=u:r:olsrd:s0 tclass=capability permissive=1
# avc:  denied  { net_admin } for  pid=16532 comm="olsrd" capability=12  scontext=u:r:olsrd:s0 tcontext=u:r:olsrd:s0 tclass=capability permissive=1
# avc:  denied  { write } for  pid=16532 comm="olsrd" name="ip_forward" dev="proc" ino=116167 scontext=u:r:olsrd:s0 tcontext=u:object_r:proc_net:s0 tclass=file permissive=1
# avc:  denied  { name_bind } for  pid=11322 comm="olsrd" src=698 scontext=u:r:olsrd:s0 tcontext=u:object_r:port:s0 tclass=udp_socket permissive=1
# avc:  denied  { net_bind_service } for  pid=11322 comm="olsrd" capability=10  scontext=u:r:olsrd:s0 tcontext=u:r:olsrd:s0 tclass=capability permissive=1
# avc:  denied  { bind } for  pid=14761 comm="olsrd" scontext=u:r:olsrd:s0 tcontext=u:r:olsrd:s0 tclass=netlink_socket permissive=1
# avc:  denied  { read } for  pid=14761 comm="olsrd" scontext=u:r:olsrd:s0 tcontext=u:r:olsrd:s0 tclass=netlink_socket permissive=1


#line 1 "vendor/samsung/common/sepolicy/sec_common/oneseg.te"
# Oneseg apk/native type declaration

############ aosp and sec_common #############
########## type and macro.
type oneseg_mw, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type oneseg_mw_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#permissive oneseg_mw;


#line 10

#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow init oneseg_mw_exec:file { getattr open read execute };
#line 10
allow init oneseg_mw:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow oneseg_mw oneseg_mw_exec:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow oneseg_mw init:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
dontaudit init oneseg_mw:process noatsecure;
#line 10
# XXX dontaudit candidate but requires further study.
#line 10
allow init oneseg_mw:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition init oneseg_mw_exec:process oneseg_mw;
#line 10

#line 10

#line 10
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 10
type oneseg_mw_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 10
type_transition oneseg_mw tmpfs:file oneseg_mw_tmpfs;
#line 10
allow oneseg_mw oneseg_mw_tmpfs:file { read write };
#line 10

#line 10


typeattribute oneseg_mw trusteddomain;
typeattribute oneseg_mw device_domain;

#binder add

#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow oneseg_mw mediaserver:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow mediaserver oneseg_mw:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow oneseg_mw mediaserver:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow oneseg_mw oneseg_apk:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow oneseg_apk oneseg_mw:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow oneseg_mw oneseg_apk:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow oneseg_mw oneseg_mw:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow oneseg_mw oneseg_mw:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow oneseg_mw oneseg_mw:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow oneseg_mw surfaceflinger:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow surfaceflinger oneseg_mw:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow oneseg_mw surfaceflinger:fd use;
#line 19


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow oneseg_mw system_app:binder { call transfer };
allow oneseg_mw s_system_app:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow system_app oneseg_mw:binder transfer;
allow s_system_app oneseg_mw:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow oneseg_mw system_app:fd use;
allow oneseg_mw s_system_app:fd use;
#line 20


#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow oneseg_mw system_server:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow system_server oneseg_mw:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow oneseg_mw system_server:fd use;
#line 21


#line 22
typeattribute oneseg_mw binderservicedomain;
#line 22


#line 23
# Call the servicemanager and transfer references to it.
#line 23
allow oneseg_mw servicemanager:binder { call transfer };
#line 23
# servicemanager performs getpidcon on clients.
#line 23
allow servicemanager oneseg_mw:dir search;
#line 23
allow servicemanager oneseg_mw:file { read open };
#line 23
allow servicemanager oneseg_mw:process getattr;
#line 23
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 23
# all domains in domain.te.
#line 23


########## self and domain_type
allow oneseg_mw init:unix_stream_socket { read write };
allow oneseg_mw mpdecision:unix_stream_socket connectto;
allow oneseg_mw oneseg_apk:dir { getattr open read ioctl lock };
allow oneseg_mw platform_app:binder call;
allow oneseg_mw s_platform_app:binder call;
#line 30
allow oneseg_mw rild:unix_stream_socket connectto;
allow oneseg_mw self:capability { dac_override net_raw net_admin };
allow oneseg_mw system_app:fd use;
allow oneseg_mw s_system_app:fd use;
#line 33

########## fs_type
allow oneseg_mw sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow oneseg_mw sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow oneseg_mw sysfs:file { open append write };

########## dev_type
allow oneseg_mw audio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow oneseg_mw audio_device:lnk_file { getattr open read ioctl lock };
allow oneseg_mw audio_device:dir { open getattr read search ioctl };
allow oneseg_mw block_device:dir search;
allow oneseg_mw device:sock_file write;
allow oneseg_mw dvb_device:chr_file { getattr open read ioctl lock };
allow oneseg_mw emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow oneseg_mw emmcblk_device:dir search;
allow oneseg_mw kgsl_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow oneseg_mw mmb_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow oneseg_mw random_device:chr_file { getattr open read ioctl lock };
allow oneseg_mw socket_device:sock_file { open append write };
allow oneseg_mw video_device:dir { open getattr read search ioctl };
allow oneseg_mw video_device:lnk_file { getattr open read ioctl lock };
allow oneseg_mw video_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow oneseg_mw dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow oneseg_mw dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow oneseg_mw efs_file:dir search;
allow oneseg_mw imei_efs_file:dir { open getattr read search ioctl };
allow oneseg_mw imei_efs_file:file { getattr open read ioctl lock };
allow oneseg_mw media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow oneseg_mw media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow oneseg_mw media_rw_data_file:file { getattr link unlink rename };
allow oneseg_mw oneseg_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow oneseg_mw oneseg_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow oneseg_mw oneseg_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow oneseg_mw oneseg_mw_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow oneseg_mw radio_data_file:file { getattr open read ioctl lock };
allow oneseg_mw radio_data_file:dir search;
allow oneseg_mw shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow oneseg_mw system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow oneseg_mw system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow oneseg_mw system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow oneseg_mw system_file:file { getattr execute execute_no_trans };

########## etc_type
allow oneseg_mw self:udp_socket { create setopt bind write read shutdown name_bind node_bind };
allow oneseg_mw port:udp_socket { name_bind };
allow oneseg_mw node:udp_socket { node_bind };
allow oneseg_mw port:tcp_socket name_connect;
allow oneseg_mw self:tcp_socket { write read create setopt connect };
allow oneseg_mw oneseg_mw_service:service_manager add;

########## known issue.
# FOR CTS TESTING
allow oneseg_mw app_data_file:file { open append write };
allow oneseg_mw gad_untrusted_app_data_file:file { open append write };
#line 88
allow oneseg_mw platform_app_data_file:file { open append write };

allow oneseg_mw untrusteddomain:fd use;

# avc:  denied  { add } for service=broadcast.ATSCMHProcessObserver scontext=u:r:oneseg_mw:s0 tcontext=u:object_r:system_app_service:s0 tclass=service_manager
#line 1 "vendor/samsung/common/sepolicy/sec_common/otp_server.te"
#
#  otp_server
#

############ sec_common #############
########## type and macro.
type otp_server, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type otp_server_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute otp_server trusteddomain;
typeattribute otp_server system_domain;
typeattribute otp_server mlstrustedsubject;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init otp_server_exec:file { getattr open read execute };
#line 13
allow init otp_server:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow otp_server otp_server_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow otp_server init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init otp_server:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init otp_server:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init otp_server_exec:process otp_server;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type otp_server_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition otp_server tmpfs:file otp_server_tmpfs;
#line 13
allow otp_server otp_server_tmpfs:file { read write };
#line 13

#line 13


#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow system_server otp_server_exec:file { getattr open read execute };
#line 14
allow system_server otp_server:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow otp_server otp_server_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow otp_server system_server:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit system_server otp_server:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow system_server otp_server:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition system_server otp_server_exec:process otp_server;
#line 14


#line 15
# Call the servicemanager and transfer references to it.
#line 15
allow otp_server servicemanager:binder { call transfer };
#line 15
# servicemanager performs getpidcon on clients.
#line 15
allow servicemanager otp_server:dir search;
#line 15
allow servicemanager otp_server:file { read open };
#line 15
allow servicemanager otp_server:process getattr;
#line 15
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 15
# all domains in domain.te.
#line 15


#line 16
allow otp_server mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 16
allow otp_server mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 16
# TODO: Figure out proper sockets
#line 16
allow otp_server mobicoredaemon:unix_stream_socket connectto;
#line 16


########## self and domain_type
allow otp_server system_server:fifo_file { read write getattr ioctl };

allow otp_server otp_server_service:service_manager add;
########## fs_type
#neverallow Google CTS-android-5.0.2_r1 : allow tlc_server firmware_file:file { rx_file_perms open };
allow otp_server firmware_file:file { getattr open read ioctl lock };
allow otp_server firmware_file:dir { open getattr read search ioctl };

########## dev_type
allow otp_server qseecom_device:chr_file { read write ioctl open };

########## file_type
allow otp_server app_efs_file:file { read open };
allow otp_server efs_file:dir search;
allow otp_server efs_type:dir { open getattr read search ioctl };
allow otp_server efs_type:{ file lnk_file } { getattr open read ioctl lock };
allow otp_server platform_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow otp_server platform_app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow otp_server radio_data_file:dir search;
allow otp_server radio_data_file:file { read open };
allow otp_server shell_exec:file { read execute open execute_no_trans };
allow otp_server system_file:file execute_no_trans;
allow otp_server wifi_efs_file:file { read open };

########## etc_type
allow otp_server otp_server_service:service_manager add;

########## self
#allow otp_server self:capability dac_override;

########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/p2p_supplicant.te"
#
# p2p_supplicant
#

############ aosp and sec_common #############
########## type and macro.
type p2p_supplicant, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type p2p_supplicant_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute p2p_supplicant trusteddomain;
typeattribute p2p_supplicant system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init p2p_supplicant_exec:file { getattr open read execute };
#line 13
allow init p2p_supplicant:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow p2p_supplicant p2p_supplicant_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow p2p_supplicant init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init p2p_supplicant:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init p2p_supplicant:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init p2p_supplicant_exec:process p2p_supplicant;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type p2p_supplicant_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition p2p_supplicant tmpfs:file p2p_supplicant_tmpfs;
#line 13
allow p2p_supplicant p2p_supplicant_tmpfs:file { read write };
#line 13

#line 13

########## self and domain_type
allow p2p_supplicant self:packet_socket *;

########## fs_type
########## dev_type
allow p2p_supplicant device:file { getattr open read ioctl lock };

########## file_type
allow p2p_supplicant system_data_file:dir { add_name remove_name };
allow p2p_supplicant wifi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
########## etc_type
########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
allow p2p_supplicant kernel:system module_request;
allow p2p_supplicant self:capability { setuid net_admin setgid net_raw };
allow p2p_supplicant self:netlink_route_socket *;
allow p2p_supplicant self:netlink_socket *;
allow p2p_supplicant self:packet_socket *;
allow p2p_supplicant self:udp_socket *;
allow p2p_supplicant system:unix_dgram_socket sendto;
########## fs_type
########## dev_type
########## file_type
allow p2p_supplicant system_wpa_socket:sock_file write;
allow p2p_supplicant wifi_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow p2p_supplicant wifi_data_file:file { { getattr open read ioctl lock } { open append write } };
allow p2p_supplicant wifi_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

########## etc_type
########## known issue.


############ slsi_common #############
########## type and macro.
########## self and domain_type
allow p2p_supplicant kernel:system module_request;
allow p2p_supplicant self:capability { setuid net_admin setgid net_raw };
allow p2p_supplicant self:netlink_route_socket { write bind create read nlmsg_write };
allow p2p_supplicant self:netlink_socket { write getattr setopt read bind create };
allow p2p_supplicant self:packet_socket { bind create ioctl read write };
allow p2p_supplicant self:udp_socket { create ioctl };
allow p2p_supplicant system:unix_dgram_socket sendto;
########## fs_type
########## dev_type
allow p2p_supplicant random_device:chr_file { read open };

########## file_type
allow p2p_supplicant system_wpa_socket:sock_file write;
allow p2p_supplicant wifi_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow p2p_supplicant wifi_data_file:dir { open getattr read search ioctl };
allow p2p_supplicant wifi_data_file:dir { write remove_name add_name };
allow p2p_supplicant wifi_data_file:file { read write getattr open };
allow p2p_supplicant wifi_data_file:sock_file { write create unlink setattr };

########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/pppoewrapper.te"
#
# pppoewrapper
#

############ aosp and sec_common #############
########## type and macro.
type pppoewrapper, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type pppoewrapper_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# for B2C users
typeattribute pppoewrapper trusteddomain;
#typeattribute pppoewrapper system_domain;
# temporary permissive to gather the log.
#permissive pppoewrapper;


#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow init pppoewrapper_exec:file { getattr open read execute };
#line 16
allow init pppoewrapper:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow pppoewrapper pppoewrapper_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow pppoewrapper init:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit init pppoewrapper:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow init pppoewrapper:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition init pppoewrapper_exec:process pppoewrapper;
#line 16

#line 16

#line 16
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 16
type pppoewrapper_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 16
type_transition pppoewrapper tmpfs:file pppoewrapper_tmpfs;
#line 16
allow pppoewrapper pppoewrapper_tmpfs:file { read write };
#line 16

#line 16


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.
# ppp_system_file
allow pppoewrapper ppp_system_file:dir { open getattr read search ioctl };
allow pppoewrapper ppp_system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# # set_property
allow pppoewrapper init:unix_stream_socket connectto;
allow pppoewrapper property_socket:sock_file write;

# VPN
allow pppoewrapper dnsproxyd_socket:sock_file write;
allow pppoewrapper netd:unix_stream_socket connectto;

#from NSA
allow pppoewrapper self:udp_socket { create ioctl };

# PPPoE connection for CHINA CTC
allow pppoewrapper ashmem_device:chr_file execute;
allow pppoewrapper csc_prop:property_service set;
allow pppoewrapper dalvikcache_data_file:file setattr;
allow pppoewrapper devpts:chr_file { ioctl open setattr };
allow pppoewrapper net_radio_prop:property_service set;
allow pppoewrapper self:capability { setuid net_raw fsetid kill setgid fowner dac_override };
allow pppoewrapper setupwizard_prop:property_service set;
allow pppoewrapper system_prop:property_service set;

# from aosp/pppd

#line 50
typeattribute pppoewrapper netdomain;
#line 50


allow pppoewrapper mtp:socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow pppoewrapper mtp:unix_dgram_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow pppoewrapper ppp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow pppoewrapper self:capability net_admin;
allow pppoewrapper system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow pppoewrapper vpn_data_file:dir { open search write add_name remove_name };
allow pppoewrapper vpn_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow pppoewrapper mtp:fd use;

# For running am and similar framework commands.
# Run /system/bin/app_process.
allow pppoewrapper zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
# Dalvik Compiler JIT.
allow pppoewrapper ashmem_device:chr_file execute;
#neverallow Google CTS-android-5.0.2_r1 : allow pppoewrapper pppoewrapper_tmpfs:file execute;
allow pppoewrapper self:process execmem;
# For art.
#neverallow Google CTS-android-5.0.2_r1 : allow pppoewrapper dalvikcache_data_file:file execute;

############ avc_log #############
## from pppd and CHN pppd log
#avc:  denied  { write } for  pid=12482 comm="pppd" name="property_service" dev="tmpfs" ino=9551 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file
#avc:  denied  { connectto } for  pid=12482 comm="pppd" path="/dev/socket/property_service" scontext=u:r:pppoewrapper:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket
#avc:  denied  { getattr } for  pid=12482 comm="pppd" path="/system/etc/ppp/ip-up-vpn" dev="mmcblk0p24" ino=943 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=file
#avc:  denied  { execute } for  pid=12570 comm="pppd" name="ip-up-vpn" dev="mmcblk0p24" ino=943 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=file
#avc:  denied  { read open } for  pid=12570 comm="pppd" path="/system/etc/ppp/ip-up-vpn" dev="mmcblk0p24" ino=943 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=file
#avc:  denied  { execute_no_trans } for  pid=12570 comm="pppd" path="/system/etc/ppp/ip-up-vpn" dev="mmcblk0p24" ino=943 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=file
#avc:  denied  { dac_override } for  pid=11109 comm="pppd" capability=1  scontext=u:r:pppoewrapper:s0 tcontext=u:r:pppoewrapper:s0 tclass=capability
#avc:  denied  { net_raw } for  pid=11109 comm="pppd" capability=13  scontext=u:r:pppoewrapper:s0 tcontext=u:r:pppoewrapper:s0 tclass=capability
#avc:  denied  { setattr } for  pid=11109 comm="pppd" name="0" dev="devpts" ino=3 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file
#avc:  denied  { open } for  pid=11109 comm="pppd" path="/dev/pts/0" dev="devpts" ino=3 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file
#avc:  denied  { ioctl } for  pid=11109 comm="pppd" path="/dev/pts/0" dev="devpts" ino=3 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file
#avc:  denied  { setgid } for  pid=11114 comm="pppd" capability=6  scontext=u:r:pppoewrapper:s0 tcontext=u:r:pppoewrapper:s0 tclass=capability
#avc:  denied  { setuid } for  pid=11114 comm="pppd" capability=7  scontext=u:r:pppoewrapper:s0 tcontext=u:r:pppoewrapper:s0 tclass=capability
#avc:  denied  { set } for property=net.ppp3.dns1 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:net_radio_prop:s0 tclass=property_service
#avc:  denied  { fowner } for  pid=11182 comm="app_process" capability=3  scontext=u:r:pppoewrapper:s0 tcontext=u:r:pppoewrapper:s0 tclass=capability
#avc:  denied  { fsetid } for  pid=11182 comm="app_process" capability=4  scontext=u:r:pppoewrapper:s0 tcontext=u:r:pppoewrapper:s0 tclass=capability
#avc:  denied  { execute } for  pid=11261 comm="Compiler" path="/dev/ashmem" dev="tmpfs" ino=9491 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:ashmem_device:s0 tclass=chr_file
#avc:  denied  { kill } for  pid=11109 comm="pppd" capability=5  scontext=u:r:pppoewrapper:s0 tcontext=u:r:pppoewrapper:s0 tclass=capability
#avc:  denied  { setattr } for  pid=15197 comm="app_process" name="system@framework@am.jar@classes.dex" dev="mmcblk0p27" ino=131140 scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:dalvikcache_data_file:s0 tclass=file
#avc:  denied  { set } for property=csc.country_code scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service
#avc:  denied  { set } for property=setupwizard.mode scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:setupwizard_prop:s0 tclass=property_service
#avc:  denied  { set } for property=net.cw.ppp.interface scontext=u:r:pppoewrapper:s0 tcontext=u:object_r:system_prop:s0 tclass=property_service


#line 1 "vendor/samsung/common/sepolicy/sec_common/prepare_param.te"
#
# prepare_param
#

############ aosp and sec_common #############
########## type and macro.
type prepare_param, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type prepare_param_sh_file, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 9
# Allow the necessary permissions.
#line 9

#line 9
# Old domain may exec the file and transition to the new domain.
#line 9
allow init prepare_param_sh_file:file { getattr open read execute };
#line 9
allow init prepare_param:process transition;
#line 9
# New domain is entered by executing the file.
#line 9
allow prepare_param prepare_param_sh_file:file { entrypoint open read execute getattr };
#line 9
# New domain can send SIGCHLD to its caller.
#line 9
allow prepare_param init:process sigchld;
#line 9
# Enable AT_SECURE, i.e. libc secure mode.
#line 9
dontaudit init prepare_param:process noatsecure;
#line 9
# XXX dontaudit candidate but requires further study.
#line 9
allow init prepare_param:process { siginh rlimitinh };
#line 9

#line 9
# Make the transition occur by default.
#line 9
type_transition init prepare_param_sh_file:process prepare_param;
#line 9


########## self and domain_type
allow prepare_param self:capability { fowner chown fsetid dac_override };

########## fs_type
########## dev_type
allow prepare_param block_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow prepare_param block_device:{ file lnk_file blk_file } create_file_perms;
allow prepare_param block_device:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow prepare_param dw_mmc_device:dir { { open getattr read search ioctl } add_name write }; 
allow prepare_param dw_mmc_device:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };
allow prepare_param emmcblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow prepare_param emmcblk_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow prepare_param paramblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow prepare_param paramblk_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

########## file_type
allow prepare_param prepare_param_sh_file:file { entrypoint { getattr open read ioctl lock } };
allow prepare_param shell_exec:file { getattr open read ioctl lock };
allow prepare_param system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow prepare_param emmcblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow prepare_param padblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/sec_common/rtcc.te"
#
# RTCC (Runtime Compcache)
#
# RTCC can frees up more memory when CPU is idle, 
# by compressing anonymous pages and flushing away page cache.
# rtccd is daemon for initializing swap, zram disk and rtcc params.
#
# Contact: taejin5.park, huazai.liu
#

############ aosp and sec_common #############
########## type and macro.
type rtcc, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type rtcc_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow init rtcc_exec:file { getattr open read execute };
#line 16
allow init rtcc:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow rtcc rtcc_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow rtcc init:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit init rtcc:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow init rtcc:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition init rtcc_exec:process rtcc;
#line 16

#line 16

#line 16
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 16
type rtcc_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 16
type_transition rtcc tmpfs:file rtcc_tmpfs;
#line 16
allow rtcc rtcc_tmpfs:file { read write };
#line 16

#line 16

#permissive rtcc;

########## self and domain_type
allow rtcc self:capability { chown sys_admin dac_override };

#google neverallow : allow rtcc self:capability mknod;

########## fs_type
allow rtcc sysfs:dir setattr;
allow rtcc sysfs:file { setattr write };
allow rtcc proc:file write;

########## dev_type
allow rtcc block_device:dir { open getattr read search ioctl };
allow rtcc device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rtcc ram_device:blk_file { { getattr open read ioctl lock } { open append write } };

#allow rtcc device:chr_file { create open unlink };
#google neverallow : allow rtcc block_device:blk_file r_file_perms;

########## file_type
allow rtcc shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow rtcc system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
########## known issue.

############ avc_log #############
# avc:  denied  { write } for  pid=237 comm="rtccd3" name="/" dev="tmpfs" ino=8193 scontext=u:r:rtcc:s0 tcontext=u:object_r:device:s0 tclass=dir permissive=1
# avc:  denied  { mknod } for  pid=237 comm="rtccd3" capability=27  scontext=u:r:rtcc:s0 tcontext=u:r:rtcc:s0 tclass=capability permissive=1
# avc:  denied  { add_name } for  pid=237 comm="rtccd3" name="__kmsg__" scontext=u:r:rtcc:s0 tcontext=u:object_r:device:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=237 comm="rtccd3" name="__kmsg__" scontext=u:r:rtcc:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# avc:  denied  { open } for  pid=237 comm="rtccd3" path="/dev/__kmsg__" dev="tmpfs" ino=6748 scontext=u:r:rtcc:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# avc:  denied  { unlink } for  pid=237 comm="rtccd3" name="__kmsg__" dev="tmpfs" ino=6748 scontext=u:r:rtcc:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# avc:  denied  { read open } for  pid=242 comm="rtccd3" path="/system/bin/sh" dev="mmcblk0p25" ino=611 scontext=u:r:rtcc:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1
# avc:  denied  { execute_no_trans } for  pid=242 comm="rtccd3" path="/system/bin/sh" dev="mmcblk0p25" ino=611 scontext=u:r:rtcc:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1
# avc:  denied  { open } for  pid=237 comm="rtccd3" path="/dev/block/zram0" dev="tmpfs" ino=10076 scontext=u:r:rtcc:s0 tcontext=u:object_r:block_device:s0 tclass=blk_file permissive=1
# avc:  denied  { chown } for  pid=310 comm="chown" capability=0  scontext=u:r:rtcc:s0 tcontext=u:r:rtcc:s0 tclass=capability permissive=1
# avc:  denied  { execute_no_trans } for  pid=241 comm="sh" path="/system/bin/toolbox" dev="mmcblk0p25" ino=649 scontext=u:r:rtcc:s0 tcontext=u:object_r:system_file:s0 tclass=file permissive=1 SEPF_SM-G360T_5.1_0011
# avc:  denied  { setattr } for  pid=241 comm="chmod" name="disksize" dev="sysfs" ino=25705 scontext=u:r:rtcc:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=1 SEPF_SM-G360T_5.1_0011
# avc:  denied  { setattr } for  pid=262 comm="chmod" name="zram0" dev="sysfs" ino=25650 scontext=u:r:rtcc:s0 tcontext=u:object_r:sysfs:s0 tclass=dir permissive=1 SEPF_SM-G360T_5.1_0011
# avc:  denied  { write } for  pid=299 comm="sh" name="disksize" dev="sysfs" ino=25705 scontext=u:r:rtcc:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=1 SEPF_SM-G360T_5.1_0011
# avc:  denied  { write } for  pid=238 comm="rtccd3" name="zram0" dev="tmpfs" ino=8312 scontext=u:r:rtcc:s0 tcontext=u:object_r:ram_device:s0 tclass=blk_file permissive=1 SEPF_SM-G360T_5.1_0011
# avc:  denied  { write } for  pid=318 comm="sh" name="page-cluster" dev="proc" ino=8434 scontext=u:r:rtcc:s0 tcontext=u:object_r:proc:s0 tclass=file permissive=1 SEPF_SM-G360T_5.1_0011
# avc:  denied  { execute_no_trans } for  pid=340 comm="sh" path="/system/bin/toolbox" dev="mmcblk0p25" ino=649 scontext=u:r:rtcc:s0 tcontext=u:object_r:system_file:s0 tclass=file permissive=1 SEPF_SM-G360T_5.1_0011
#line 1 "vendor/samsung/common/sepolicy/sec_common/rtc_log.te"
#
# rtc_log
#
# logging daemon to analyze "spec out" problem when the system time is more faster or slower
# - existing dump log cannot be used to analyze "system time spec out" problem
# - rtc_log service periodically record kernel time, system time, PMIC RTC time in rtc_log file
# ms925.kim / System S/W R&D Group 1
#

############ aosp and sec_common #############
########## type and macro.
type rtc_log, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type rtc_log_sh_file, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow init rtc_log_sh_file:file { getattr open read execute };
#line 14
allow init rtc_log:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow rtc_log rtc_log_sh_file:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow rtc_log init:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit init rtc_log:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow init rtc_log:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition init rtc_log_sh_file:process rtc_log;
#line 14


# temporary permissive to gather the log.
#permissive rtc_log;
 
########## self and domain_type
allow rtc_log appdomain:fd use;

########## fs_type
########## dev_type
########## file_type

allow rtc_log shell_exec:file { read entrypoint };
allow rtc_log dumplog_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rtc_log dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rtc_log system_file:file execute_no_trans;

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { entrypoint } for  pid=3056 comm="init" path="/system/bin/sh" dev="sda13" ino=763 scontext=u:r:rtc_log:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { read } for  pid=3056 comm="sh" path="/system/bin/sh" dev="sda13" ino=763 scontext=u:r:rtc_log:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { write } for  pid=3056 comm="sh" name="log" dev="dm-0" ino=130054 scontext=u:r:rtc_log:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { add_name } for  pid=3056 comm="sh" name="rtc.log" scontext=u:r:rtc_log:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { create } for  pid=3056 comm="sh" name="rtc.log" scontext=u:r:rtc_log:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { append open } for  pid=3056 comm="sh" path="/data/log/rtc.log" dev="dm-0" ino=130466 scontext=u:r:rtc_log:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { setattr } for  pid=3072 comm="chmod" name="rtc.log" dev="dm-0" ino=130466 scontext=u:r:rtc_log:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { execute_no_trans } for  pid=3072 comm="sh" path="/system/bin/toolbox" dev="sda13" ino=782 scontext=u:r:rtc_log:s0 tcontext=u:object_r:system_file:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { use } for  pid=3017 comm="rtc_log.sh" path=2F6465762F6173686D656D2F4469736361726461626C654D656D6F72794173686D656D416C6C6F6361746F72202864656C6574656429 dev="tmpfs" ino=1913817 scontext=u:r:rtc_log:s0 tcontext=u:r:untrusted_app:s0 tclass=fd permissive=0

#line 1 "vendor/samsung/common/sepolicy/sec_common/samsung_app.te"
# 
# Samsung presigned apps including third party apps
#

############ aosp and sec_common #############
########## type and macro.
type samsung_app, domain, mlstrustedsubject, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;
# for B2C users
typeattribute samsung_app trusteddomain;
typeattribute samsung_app trusted_app_domain;


#line 12
typeattribute samsung_app appdomain;
#line 12
# Label ashmem objects with our own unique type.
#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type samsung_app_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition samsung_app tmpfs:file samsung_app_tmpfs;
#line 12
allow samsung_app samsung_app_tmpfs:file { read write };
#line 12

#line 12
# Map with PROT_EXEC.
#line 12
allow samsung_app samsung_app_tmpfs:file execute;
#line 12


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow samsung_app zygote:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow zygote samsung_app:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow samsung_app zygote:fd use;
#line 13

# Access bluetooth.

#line 15
typeattribute samsung_app bluetoothdomain;
#line 15


#line 16
allow samsung_app dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 16
allow samsung_app dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 16
allow samsung_app dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 16
allow samsung_app bugreport_exec:file { execute execute_no_trans };
#line 16
allow samsung_app dumpstate_exec:file { execute execute_no_trans };
#line 16
allow samsung_app dumpsys_exec:file { execute execute_no_trans };
#line 16

# Access the network.

#line 18
typeattribute samsung_app netdomain;
#line 18


#line 19
allow samsung_app bluetooth:unix_stream_socket connectto;
#line 19
allow samsung_app bluetooth:unix_stream_socket { read write };
#line 19


########## self and domain_type
allow samsung_app appdomain:fifo_file { getattr open read ioctl lock };
allow samsung_app bluetooth:unix_stream_socket shutdown;
#neverallow Google CTS :allow samsung_app init:binder { transfer call };
allow samsung_app init:unix_stream_socket { connectto setopt };
allow samsung_app netd:unix_stream_socket connectto;
allow samsung_app rild:unix_stream_socket connectto;
allow samsung_app sec-ril:unix_stream_socket connectto;
allow samsung_app self:{ tcp_socket udp_socket } *;
#neverallow Google CTS-android-5.0.2_r1 : remove write, allow samsung_app self:netlink_kobject_uevent_socket { read write bind setopt };
allow samsung_app self:netlink_kobject_uevent_socket { read bind setopt create };

allow samsung_app self:netlink_route_socket { read bind create };
allow samsung_app system:tcp_socket { read write };

########## fs_type
allow samsung_app devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow samsung_app sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow samsung_app sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
allow samsung_app qtaguid_device:chr_file { getattr open read ioctl lock };
allow samsung_app usb_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow samsung_app app_data_file:file { getattr execute execute_no_trans };
allow samsung_app gad_untrusted_app_data_file:file { getattr execute execute_no_trans };
#line 47
allow samsung_app app_library_file:dir { open getattr read search ioctl };
allow samsung_app audit_log:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow samsung_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow samsung_app dnsproxyd_socket:sock_file { open append write };
allow samsung_app drm_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow samsung_app drm_efs_file:file { { getattr open read ioctl lock } { open append write } };
allow samsung_app hidden_file:file { { getattr open read ioctl lock } { open append write } };
allow samsung_app init_tmpfs:file read;
allow samsung_app platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow samsung_app platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow samsung_app platform_media_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow samsung_app platform_media_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow samsung_app property_socket:sock_file w_file_perms;
allow samsung_app radio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow samsung_app samsung_app_tmpfs:file { open append write };
allow samsung_app system_data_file:file execute;
#neverallow Google CTS-android-5.0.2_r1 :allow samsung_app system_data_file:lnk_file unlink;
allow samsung_app system_file:file execute_no_trans;
allow samsung_app wifi_efs_file:dir { open getattr read search ioctl };
allow samsung_app wifi_efs_file:file { getattr open read ioctl lock };

########## etc_type
allow samsung_app node:{ tcp_socket udp_socket } node_bind;
allow samsung_app port:{ tcp_socket udp_socket } name_bind;
allow samsung_app port:tcp_socket name_connect;
allow samsung_app port:tcp_socket name_connect;

########## known issue.


############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow samsung_app app_efs_file:file { { getattr open read ioctl lock } { open append write } };
########## etc_type
########## known issue.


############ avc_log #############
# audit(1421071847.339:223): avc:  denied  { create } for  pid=20568 comm="UEventObserver" scontext=u:r:samsung_app:s0 tcontext=u:r:samsung_app:s0 tclass=netlink_kobject_uevent_socket permissive=1

#line 1 "vendor/samsung/common/sepolicy/sec_common/samsungpowersoundplay.te"
#
# samsungpowersoundplay
#

############ aosp and sec_common #############
########## type and macro.
type samsungpowersoundplay, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type samsungpowersoundplay_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute samsungpowersoundplay trusteddomain;
typeattribute samsungpowersoundplay system_domain;


#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow samsungpowersoundplay servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager samsungpowersoundplay:dir search;
#line 13
allow servicemanager samsungpowersoundplay:file { read open };
#line 13
allow servicemanager samsungpowersoundplay:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow samsungpowersoundplay mediaserver:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow mediaserver samsungpowersoundplay:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow samsungpowersoundplay mediaserver:fd use;
#line 14


#line 15

#line 15
# Allow the necessary permissions.
#line 15

#line 15
# Old domain may exec the file and transition to the new domain.
#line 15
allow init samsungpowersoundplay_exec:file { getattr open read execute };
#line 15
allow init samsungpowersoundplay:process transition;
#line 15
# New domain is entered by executing the file.
#line 15
allow samsungpowersoundplay samsungpowersoundplay_exec:file { entrypoint open read execute getattr };
#line 15
# New domain can send SIGCHLD to its caller.
#line 15
allow samsungpowersoundplay init:process sigchld;
#line 15
# Enable AT_SECURE, i.e. libc secure mode.
#line 15
dontaudit init samsungpowersoundplay:process noatsecure;
#line 15
# XXX dontaudit candidate but requires further study.
#line 15
allow init samsungpowersoundplay:process { siginh rlimitinh };
#line 15

#line 15
# Make the transition occur by default.
#line 15
type_transition init samsungpowersoundplay_exec:process samsungpowersoundplay;
#line 15

#line 15

#line 15
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 15
type samsungpowersoundplay_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 15
type_transition samsungpowersoundplay tmpfs:file samsungpowersoundplay_tmpfs;
#line 15
allow samsungpowersoundplay samsungpowersoundplay_tmpfs:file { read write };
#line 15

#line 15


#line 16
allow samsungpowersoundplay property_socket:sock_file write;
#line 16
allow samsungpowersoundplay init:unix_stream_socket connectto;
#line 16


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
allow samsungpowersoundplay audio_prop:property_service set;

########## known issue.
# from carrier_spr
allow samsungpowersoundplay carrier_file:dir { open getattr read search ioctl };
allow samsungpowersoundplay carrier_file:file { getattr open read ioctl lock };


############ slsi_common #############
########## type and macro.

#line 33
# Call the server domain and optionally transfer references to it.
#line 33
allow samsungpowersoundplay servicemanager:binder { call transfer };
#line 33
# Allow the serverdomain to transfer references to the client on the reply.
#line 33
allow servicemanager samsungpowersoundplay:binder transfer;
#line 33
# Receive and use open files from the server.
#line 33
allow samsungpowersoundplay servicemanager:fd use;
#line 33


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { set } for property=audioflinger.bootsnd scontext=u:r:samsungpowersoundplay:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service

#line 1 "vendor/samsung/common/sepolicy/sec_common/scs.te"
#
# scs
#

############ aosp and sec_common #############
########## type and macro.
type scs, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type scs_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# for B2C users
#typeattribute scs trusteddomain;
# temporary permissive to gather the log.
#permissive scs;


#line 15

#line 15
# Allow the necessary permissions.
#line 15

#line 15
# Old domain may exec the file and transition to the new domain.
#line 15
allow init scs_exec:file { getattr open read execute };
#line 15
allow init scs:process transition;
#line 15
# New domain is entered by executing the file.
#line 15
allow scs scs_exec:file { entrypoint open read execute getattr };
#line 15
# New domain can send SIGCHLD to its caller.
#line 15
allow scs init:process sigchld;
#line 15
# Enable AT_SECURE, i.e. libc secure mode.
#line 15
dontaudit init scs:process noatsecure;
#line 15
# XXX dontaudit candidate but requires further study.
#line 15
allow init scs:process { siginh rlimitinh };
#line 15

#line 15
# Make the transition occur by default.
#line 15
type_transition init scs_exec:process scs;
#line 15

#line 15

#line 15
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 15
type scs_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 15
type_transition scs tmpfs:file scs_tmpfs;
#line 15
allow scs scs_tmpfs:file { read write };
#line 15

#line 15


########## self and domain_type
allow scs init:unix_stream_socket connectto;

########## fs_type
allow scs dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow scs dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
########## file_type
allow scs property_socket:sock_file write;

########## etc_type
allow scs csc_prop:property_service set;
allow scs radio_prop:property_service set;
allow scs system_prop:property_service set;
#neverallow Google CTS-android-5.0.2_r1 : allow scs default_prop:property_service set;

########## known issue.

############ avc_log #############
# avc:  denied  { set } for property=csc.country_code scontext=u:r:scs:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service
# avc:  denied  { set } for property=persist.sys.localevar scontext=u:r:scs:s0 tcontext=u:object_r:system_prop:s0 tclass=property_service
# avc:  denied  { set } for property=csc.nosimlanguage scontext=u:r:scs:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=400 comm="scs" name="property_service" dev="tmpfs" ino=7515 scontext=u:r:scs:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file SEPF_SM-G900P_5.0_0002
# avc:  denied  { connectto } for  pid=400 comm="scs" path="/dev/socket/property_service" scontext=u:r:scs:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket SEPF_SM-G900P_5.0_0002
# avc:  denied  { search } for  pid=301 comm="scs" name="log" dev="mmcblk0p26" ino=523269 scontext=u:r:scs:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir SEPF_SM-G900F_5.0_0002
# arch=40000028 syscall=322 per=800000 success=no exit=-13 a0=ffffff9c a1=b6fc66d4 a2=20441 a3=1b6 items=1 ppid=1 ppcomm=init pid=301 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4294967295 comm="scs" exe="/system/bin/scs" subj=u:r:scs:s0 key=(null)
# cwd="/"
# item=0 name="/data/log/scs.txt"
# audit_enabled=1 old=1 auid=4294967295 ses=4294967295 subj=u:r:auditd:s0 res=1

############ csc_prop #############
# ro.csc.country_code
# ro.csc.countryiso_code
# ro.csc.sales_code

############ system_prop #############
# persist.sys.localevar
# persist.sys.language
# persist.sys.country

############ csc_prop #############
# persist.csc.nosimlanguage
# persist.csc.nosimcountry

############ carrier_spr #############
############ default_prop #############
# ro.com.google.clientidbase.am
# ro.com.google.clientidbase.ms
# ro.com.google.clientidbase.yt 
#line 1 "vendor/samsung/common/sepolicy/sec_common/sec-ril.te"
#
# sec-ril.te
#

############ aosp and sec_common #############
########## type and macro.
type sec-ril, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type sec-ril_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute sec-ril trusteddomain;
typeattribute sec-ril system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init sec-ril_exec:file { getattr open read execute };
#line 13
allow init sec-ril:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow sec-ril sec-ril_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow sec-ril init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init sec-ril:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init sec-ril:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init sec-ril_exec:process sec-ril;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type sec-ril_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition sec-ril tmpfs:file sec-ril_tmpfs;
#line 13
allow sec-ril sec-ril_tmpfs:file { read write };
#line 13

#line 13


#line 14
allow sec-ril kernel:system syslog_read;
#line 14


#line 15
allow sec-ril dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 15
allow sec-ril dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow sec-ril dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow sec-ril bugreport_exec:file { execute execute_no_trans };
#line 15
allow sec-ril dumpstate_exec:file { execute execute_no_trans };
#line 15
allow sec-ril dumpsys_exec:file { execute execute_no_trans };
#line 15


#line 16
# Call the servicemanager and transfer references to it.
#line 16
allow sec-ril servicemanager:binder { call transfer };
#line 16
# servicemanager performs getpidcon on clients.
#line 16
allow servicemanager sec-ril:dir search;
#line 16
allow servicemanager sec-ril:file { read open };
#line 16
allow servicemanager sec-ril:process getattr;
#line 16
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 16
# all domains in domain.te.
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow sec-ril system:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow system sec-ril:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow sec-ril system:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow sec-ril servicemanager:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow servicemanager sec-ril:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow sec-ril servicemanager:fd use;
#line 18


########## self and domain_type
allow sec-ril init:unix_stream_socket connectto;
allow sec-ril kernel:system module_request;
allow sec-ril rild:unix_stream_socket connectto;
allow sec-ril self:capability { net_admin dac_override net_raw sys_module setuid chown };
allow sec-ril self:process ptrace;
allow sec-ril self:{ udp_socket packet_socket } { read create ioctl };

########## fs_type
allow sec-ril rootfs:file execute;
allow sec-ril sysfs:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sec-ril sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow sec-ril alarm_device:chr_file write;
allow sec-ril ashmem_device:chr_file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## file_type
allow sec-ril anr_data_file:dir { open getattr read search ioctl };
allow sec-ril anr_data_file:file { { getattr open read ioctl lock } { open append write } };
allow sec-ril app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sec-ril gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 41
allow sec-ril app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sec-ril gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 42
allow sec-ril app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sec-ril app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sec-ril carrier_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sec-ril carrier_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sec-ril efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sec-ril efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sec-ril imei_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sec-ril imei_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sec-ril property_socket:sock_file write;
allow sec-ril radio_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow sec-ril radio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sec-ril radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sec-ril sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sec-ril sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sec-ril shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow sec-ril system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sec-ril system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow sec-ril system_file:dir setattr;
allow sec-ril system_file:file { getattr execute execute_no_trans };
allow sec-ril zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow sec-ril radio_prop:property_service set;
allow sec-ril rild_prop:property_service set;
allow sec-ril system_prop:property_service set;

########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
allow sec-ril qmuxd:unix_stream_socket connectto;

########## fs_type
allow sec-ril sysfs_wake_lock:file { read write open };

########## dev_type
########## file_type
allow sec-ril qmux_radio_socket:dir { write add_name };
allow sec-ril qmux_radio_socket:sock_file { write create setattr };

########## etc_type
########## known issue.


############ avc_log #############
# avc: denied { execute } for pid=17071 comm="app_process" path="/data/dalvik-cache/arm/system@framework@boot.oat" dev="mmcblk0p28" ino=130574 scontext=u:r:sec-ril:s0 tcontext=u:object_r:dalvikcache_data_file:s0 tclass=file
#audit(46769.790:28): avc:  denied  { write } for  pid=201 comm="sec-ril" name="qmux_radio" dev="tmpfs" ino=5644 scontext=u:r:sec-ril:s0 tcontext=u:object_r:qmux_radio_socket:s0 tclass=dir
#audit(46769.790:28): avc:  denied  { add_name } for  pid=201 comm="sec-ril" name=716D75785F636C69656E745F736F636B657420202020323031 scontext=u:r:sec-ril:s0 tcontext=u:object_r:qmux_radio_socket:s0 tclass=dir
#audit(46769.790:28): avc:  denied  { create } for  pid=201 comm="sec-ril" name=716D75785F636C69656E745F736F636B657420202020323031 scontext=u:r:sec-ril:s0 tcontext=u:object_r:qmux_radio_socket:s0 tclass=sock_file
#audit(46769.790:28): arch=40000028 syscall=282 per=800000 success=yes exit=0 a0=a a1=bec674ac a2=32 a3=0 items=3 ppid=1 pid=201 auid=4294967295 uid=1001 gid=1001 euid=1001 suid=1001 fsuid=1001 egid=1001 sgid=1001 fsgid=1001 tty=(none) ses=4294967295 comm=
#audit(46769.790:28): saddr=01002F6465762F736F636B65742F716D75785F726164696F2F716D75785F636C69656E745F736F636B657420202020323031
#audit(46769.790:28): item=0 name=(null) inode=5644 dev=00:0b mode=042770 ouid=1001 ogid=1001 rdev=00:00 obj=u:object_r:qmux_radio_socket:s0
#audit(46769.790:28): item=1 name=(null) inode=5644 dev=00:0b mode=042770 ouid=1001 ogid=1001 rdev=00:00 obj=u:object_r:qmux_radio_socket:s0
#audit(46769.790:28): item=2 name=(null) inode=5859 dev=00:0b mode=0140700 ouid=1001 ogid=1001 rdev=00:00 obj=u:object_r:qmux_radio_socket:s0
#audit(46769.790:29): avc:  denied  { setattr } for  pid=201 comm="sec-ril" name=716D75785F636C69656E745F736F636B657420202020323031 dev="tmpfs" ino=5859 scontext=u:r:sec-ril:s0 tcontext=u:object_r:qmux_radio_socket:s0 tclass=sock_file
#audit(46769.790:29): arch=40000028 syscall=333 per=800000 success=yes exit=0 a0=ffffff9c a1=bec674ae a2=1b0 a3=0 items=1 ppid=1 pid=201 auid=4294967295 uid=1001 gid=1001 euid=1001 suid=1001 fsuid=1001 egid=1001 sgid=1001 fsgid=1001 tty=(none) ses=42949672audit(46769.790:29):  cwd="/"
#audit(46769.790:29): item=0 name=2F6465762F736F636B65742F716D75785F726164696F2F716D75785F636C69656E745F736F636B657420202020323031 inode=5859 dev=00:0b mode=0140700 ouid=1001 ogid=1001 rdev=00:00 obj=u:object_r:qmux_radio_socket:s0
#audit(46778.788:39): avc:  denied  { write } for  pid=201 comm="sec-ril" name="qmux_connect_socket" dev="tmpfs" ino=7224 scontext=u:r:sec-ril:s0 tcontext=u:object_r:qmux_radio_socket:s0 tclass=sock_file
#audit(46778.788:39): avc:  denied  { connectto } for  pid=201 comm="sec-ril" path="/dev/socket/qmux_radio/qmux_connect_socket" scontext=u:r:sec-ril:s0 tcontext=u:r:qmuxd:s0 tclass=unix_stream_socket
#audit(46778.788:39): arch=40000028 syscall=283 per=800000 success=yes exit=0 a0=a a1=bec6743c a2=2c a3=b6e7a774 items=1 ppid=1 pid=201 auid=4294967295 uid=1001 gid=1001 euid=1001 suid=1001 fsuid=1001 egid=1001 sgid=1001 fsgid=1001 tty=(none) ses=429496729
#audit(46778.788:39): saddr=01002F6465762F736F636B65742F716D75785F726164696F2F716D75785F636F6E6E6563745F736F636B6574
#audit(46778.788:39): item=0 name=(null) inode=7224 dev=00:0b mode=0140660 ouid=1001 ogid=1001 rdev=00:00 obj=u:object_r:qmux_radio_socket:s0
#audit(46778.929:40): avc:  denied  { read write } for  pid=795 comm="sec-ril" name="wake_lock" dev="sysfs" ino=58 scontext=u:r:sec-ril:s0 tcontext=u:object_r:sysfs_wake_lock:s0 tclass=file
#audit(46778.929:40): avc:  denied  { read write open } for  pid=795 comm="sec-ril" name="wake_lock" dev="sysfs" ino=58 scontext=u:r:sec-ril:s0 tcontext=u:object_r:sysfs_wake_lock:s0 tclass=file
#audit(46778.929:40): arch=40000028 syscall=322 per=800000 success=yes exit=16 a0=ffffff9c a1=b6c03316 a2=20002 a3=0 items=1 ppid=1 pid=795 auid=4294967295 uid=1001 gid=1001 euid=1001 suid=1001 fsuid=1001 egid=1001 sgid=1001 fsgid=1001 tty=(none) ses=42949audit(46778.929:40):  cwd="/"
#audit(46778.929:40): item=0 name="/sys/power/wake_lock" inode=58 dev=00:0c mode=0100660 ouid=1001 ogid=1000 rdev=00:00 obj=u:object_r:sysfs_wake_lock:s0


#line 1 "vendor/samsung/common/sepolicy/sec_common/secure_storage.te"
#
# secure_storage
#

############ aosp and sec_common #############
########## type and macro.
type secure_storage, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type secure_storage_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute secure_storage trusteddomain;
typeattribute secure_storage system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init secure_storage_exec:file { getattr open read execute };
#line 13
allow init secure_storage:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow secure_storage secure_storage_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow secure_storage init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init secure_storage:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init secure_storage:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init secure_storage_exec:process secure_storage;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type secure_storage_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition secure_storage tmpfs:file secure_storage_tmpfs;
#line 13
allow secure_storage secure_storage_tmpfs:file { read write };
#line 13

#line 13


#line 14
allow secure_storage mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 14
allow secure_storage mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 14
# TODO: Figure out proper sockets
#line 14
allow secure_storage mobicoredaemon:unix_stream_socket connectto;
#line 14


#line 15
allow secure_storage firmware:dir { open getattr read search ioctl };
#line 15
allow secure_storage firmware:{ file lnk_file } { getattr open read ioctl lock };
#line 15


#line 16
allow secure_storage secure_storage_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 16
allow secure_storage secure_storage_device:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 16
allow secure_storage secure_storage_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 16
allow secure_storage efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 16
allow secure_storage efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 16


########## self and domain_type
allow secure_storage commonplatformappdomain:fd use;
allow secure_storage init_shell:unix_stream_socket connectto;
allow secure_storage system_app:fd use;
allow secure_storage s_system_app:fd use;
#line 22
allow secure_storage vold:fd use;
allow secure_storage wpa:fd use;

########## fs_type
allow secure_storage debugfs:file { getattr open read ioctl lock };
allow secure_storage debugfs:dir { open getattr read search ioctl };
allow secure_storage sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow secure_storage sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
########## file_type
allow secure_storage system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow secure_storage system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.

############ knox_common #############
########## type and macro.
########## self and domain_type
allow secure_storage container_app:fd use;
allow secure_storage store_app:fd use;

########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow secure_storage qseecom_device:chr_file { read write ioctl open };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/sec_common/sem.te"
#
# sem
#

############ aosp and sec_common #############
########## type and macro.
type sem, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type sem_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 10

#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow init sem_exec:file { getattr open read execute };
#line 10
allow init sem:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow sem sem_exec:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow sem init:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
dontaudit init sem:process noatsecure;
#line 10
# XXX dontaudit candidate but requires further study.
#line 10
allow init sem:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition init sem_exec:process sem;
#line 10

#line 10

#line 10
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 10
type sem_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 10
type_transition sem tmpfs:file sem_tmpfs;
#line 10
allow sem sem_tmpfs:file { read write };
#line 10

#line 10


########## self and domain_type

allow sem init:unix_stream_socket connectto;
allow sem mobicoredaemon:unix_stream_socket connectto;
allow sem mobicore-user_device:chr_file { read write open ioctl };
allow sem self:capability dac_override;

########## fs_type
########## dev_type
allow sem qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sem sem_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sem nfc_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sem property_socket:sock_file write;

########## file_type
allow sem app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sem app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sem efs_file:dir { open getattr read search ioctl };
allow sem efs_file:file { getattr open read ioctl lock };
allow sem prov_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sem prov_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sem sec_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow sem sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sem system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sem system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow sem system_prop:property_service set;

########## known issue.


############ avc_log #############
# audit(1422522027.080:202): avc:  denied  { read write } for  pid=16577 comm="sem_daemon" name="p3" dev="tmpfs" ino=16404 scontext=u:r:sem:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# audit(1422522027.080:202): avc:  denied  { open } for  pid=16577 comm="sem_daemon" path="/dev/p3" dev="tmpfs" ino=16404 scontext=u:r:sem:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# audit(1422522027.090:203): avc:  denied  { ioctl } for  pid=16577 comm="sem_daemon" path="/dev/p3" dev="tmpfs" ino=16404 scontext=u:r:sem:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# audit(1422522027.190:205): avc:  denied  { write } for  pid=16577 comm="sem_daemon" name="property_service" dev="tmpfs" ino=5569 scontext=u:r:sem:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file permissive=1
# audit(1422522027.190:205): avc:  denied  { connectto } for  pid=16577 comm="sem_daemon" path="/dev/socket/property_service" scontext=u:r:sem:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket permissive=1
# audit(1422522029.320:210): avc:  denied  { search } for  pid=16577 comm="sem_daemon" name="sec_efs" dev="sda3" ino=45 scontext=u:r:sem:s0 tcontext=u:object_r:sec_efs_file:s0 tclass=dir permissive=1
# audit(1422522029.320:210): avc:  denied  { write } for  pid=16577 comm="sem_daemon" name="sec_efs" dev="sda3" ino=45 scontext=u:r:sem:s0 tcontext=u:object_r:sec_efs_file:s0 tclass=dir permissive=1
# audit(1422522029.320:210): avc:  denied  { add_name } for  pid=16577 comm="sem_daemon" name="ssp_data" scontext=u:r:sem:s0 tcontext=u:object_r:sec_efs_file:s0 tclass=dir permissive=1
# audit(1422522029.320:210): avc:  denied  { create } for  pid=16577 comm="sem_daemon" name="ssp_data" scontext=u:r:sem:s0 tcontext=u:object_r:sec_efs_file:s0 tclass=file permissive=1
# audit(1422522029.320:210): avc:  denied  { write open } for  pid=16577 comm="sem_daemon" path="/efs/sec_efs/ssp_data" dev="sda3" ino=61 scontext=u:r:sem:s0 tcontext=u:object_r:sec_efs_file:s0 tclass=file permissive=1
# audit(1422522029.320:211): avc:  denied  { read } for  pid=16577 comm="sem_daemon" name="ssp_data" dev="sda3" ino=61 scontext=u:r:sem:s0 tcontext=u:object_r:sec_efs_file:s0 tclass=file permissive=1
# avc:  denied  { read write } for  pid=5534 comm="sem_daemon" name="qseecom" dev="tmpfs" ino=9455 scontext=u:r:sem:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file permissive=0 SEPF_SM-A8000_5.1_0011
# avc:  denied  { search } for  pid=5225 comm="sem_daemon" name="FactoryApp" dev="sda3" ino=20 scontext=u:r:sem:s0 tcontext=u:object_r:app_efs_file:s0 tclass=dir permissive=0# 
# avc:  denied  { search } for  pid=5225 comm="sem_daemon" name="prov_data" dev="sda3" ino=18 scontext=u:r:sem:s0 tcontext=u:object_r:prov_efs_file:s0 tclass=dir permissive=0

#line 1 "vendor/samsung/common/sepolicy/sec_common/sensorhubservice.te"
#
# sensorhubservice
#

############ aosp and sec_common #############
########## type and macro.
type sensorhubservice, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type sensorhubservice_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute sensorhubservice trusteddomain;
typeattribute sensorhubservice system_domain;


#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow sensorhubservice servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager sensorhubservice:dir search;
#line 13
allow servicemanager sensorhubservice:file { read open };
#line 13
allow servicemanager sensorhubservice:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow sensorhubservice system:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow system sensorhubservice:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow sensorhubservice system:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow sensorhubservice servicemanager:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow servicemanager sensorhubservice:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow sensorhubservice servicemanager:fd use;
#line 15


#line 16
allow sensorhubservice dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 16
allow sensorhubservice dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 16
allow sensorhubservice dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 16
allow sensorhubservice bugreport_exec:file { execute execute_no_trans };
#line 16
allow sensorhubservice dumpstate_exec:file { execute execute_no_trans };
#line 16
allow sensorhubservice dumpsys_exec:file { execute execute_no_trans };
#line 16


#line 17

#line 17
# Allow the necessary permissions.
#line 17

#line 17
# Old domain may exec the file and transition to the new domain.
#line 17
allow init sensorhubservice_exec:file { getattr open read execute };
#line 17
allow init sensorhubservice:process transition;
#line 17
# New domain is entered by executing the file.
#line 17
allow sensorhubservice sensorhubservice_exec:file { entrypoint open read execute getattr };
#line 17
# New domain can send SIGCHLD to its caller.
#line 17
allow sensorhubservice init:process sigchld;
#line 17
# Enable AT_SECURE, i.e. libc secure mode.
#line 17
dontaudit init sensorhubservice:process noatsecure;
#line 17
# XXX dontaudit candidate but requires further study.
#line 17
allow init sensorhubservice:process { siginh rlimitinh };
#line 17

#line 17
# Make the transition occur by default.
#line 17
type_transition init sensorhubservice_exec:process sensorhubservice;
#line 17

#line 17

#line 17
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 17
type sensorhubservice_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 17
type_transition sensorhubservice tmpfs:file sensorhubservice_tmpfs;
#line 17
allow sensorhubservice sensorhubservice_tmpfs:file { read write };
#line 17

#line 17


#line 18
allow sensorhubservice init:unix_stream_socket connectto;
#line 18
allow sensorhubservice init:unix_stream_socket { read write };
#line 18


########## self and domain_type
allow sensorhubservice at_distributor:fd use;
allow sensorhubservice radio:fd use;
allow sensorhubservice self:capability dac_override;
allow sensorhubservice system_app:fd use;
allow sensorhubservice s_system_app:fd use;
#line 25
allow sensorhubservice system_app:fifo_file { open append write };
allow sensorhubservice s_system_app:fifo_file { open append write };
#line 26

########## fs_type
allow sensorhubservice sdcard_type:file { open append write };
allow sensorhubservice sysfs:file write;
allow sensorhubservice sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow sensorhubservice input_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sensorhubservice input_device:dir { open getattr read search ioctl };
########## file_type
allow sensorhubservice platform_app_data_file:file { open append write };

########## etc_type
allow sensorhubservice sensorhubservice_service:service_manager add;

########## known issue.
# for CTS
allow sensorhubservice app_data_file:file { open append write };
allow sensorhubservice gad_untrusted_app_data_file:file { open append write };
#line 44
allow sensorhubservice untrusteddomain:fd use;



############ avc_log #############
# avc:  denied  { add } for service=sensorhubservice scontext=u:r:sensorhubservice:s0 tcontext=u:object_r:default_android_service:s0 tclass=service_manager


#line 1 "vendor/samsung/common/sepolicy/sec_common/shell.te"
#
# shell
#

############ aosp and sec_common #############
########## type and macro.
#shell should not allow to access container's data files
#type shell, domain, mlstrustedsubject;
#type shell, domain;
#type shell_exec, exec_type, file_type;

# run dumpstate, dumpsys, bugreport on its own domain to get proper result

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow shell bugreport_exec:file { getattr open read execute };
#line 13
allow shell bugreport:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow bugreport bugreport_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow bugreport shell:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit shell bugreport:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow shell bugreport:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition shell bugreport_exec:process bugreport;
#line 13


#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow shell dumpstate_exec:file { getattr open read execute };
#line 14
allow shell dumpstate:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow dumpstate dumpstate_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow dumpstate shell:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit shell dumpstate:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow shell dumpstate:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition shell dumpstate_exec:process dumpstate;
#line 14


#line 15
# Allow the necessary permissions.
#line 15

#line 15
# Old domain may exec the file and transition to the new domain.
#line 15
allow shell dumpsys_exec:file { getattr open read execute };
#line 15
allow shell dumpsys:process transition;
#line 15
# New domain is entered by executing the file.
#line 15
allow dumpsys dumpsys_exec:file { entrypoint open read execute getattr };
#line 15
# New domain can send SIGCHLD to its caller.
#line 15
allow dumpsys shell:process sigchld;
#line 15
# Enable AT_SECURE, i.e. libc secure mode.
#line 15
dontaudit shell dumpsys:process noatsecure;
#line 15
# XXX dontaudit candidate but requires further study.
#line 15
allow shell dumpsys:process { siginh rlimitinh };
#line 15

#line 15
# Make the transition occur by default.
#line 15
type_transition shell dumpsys_exec:process dumpsys;
#line 15


#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow shell tima_dump_exec:file { getattr open read execute };
#line 16
allow shell system:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow system tima_dump_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow system shell:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit shell system:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow shell system:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition shell tima_dump_exec:process system;
#line 16



#line 18
allow shell dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 18
allow shell dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18
allow shell dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18
allow shell bugreport_exec:file { execute execute_no_trans };
#line 18
allow shell dumpstate_exec:file { execute execute_no_trans };
#line 18
allow shell dumpsys_exec:file { execute execute_no_trans };
#line 18



#line 20
allow shell apk_data_file:dir { open getattr read search ioctl };
#line 20
allow shell apk_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 20


#line 21
allow shell firmware:dir { open getattr read search ioctl };
#line 21
allow shell firmware:{ file lnk_file } { getattr open read ioctl lock };
#line 21


# setprop toolbox command

#line 24
allow shell property_socket:sock_file write;
#line 24
allow shell init:unix_stream_socket connectto;
#line 24


# Run logcat.

#line 27
allow shell log_device:chr_file read;
#line 27
allow shell system_file:file { getattr execute execute_no_trans };
#line 27


########## self and domain_type
allow shell init:unix_stream_socket connectto;
allow shell netd:unix_stream_socket connectto;
allow shell self:netlink_route_socket { write getattr setopt read bind create nlmsg_read };
allow shell self:rawip_socket { getopt create };
allow shell self:tcp_socket { connect setopt read bind create accept write getattr getopt listen shutdown };
allow shell self:udp_socket { create ioctl };

########## fs_typev
allow shell devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow shell rootfs:dir { open getattr read search ioctl };
allow shell proc_avc_msg:file read;

########## dev_type
allow shell adb_device:chr_file read;
allow shell console_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow shell full_device:chr_file read;
allow shell tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow shell anr_data_file:file { getattr open read ioctl lock };
#Remote Code Execution issue: allow shell dalvikcache_data_file:dir w_dir_perms;
#Remote Code Execution issue: allow shell dalvikcache_data_file:file { write setattr };
#Remote Code Execution issue: allow shell dalvikcache_data_file:file create_file_perms;
allow shell dnsproxyd_socket:sock_file { open append write };
allow shell efs_file:dir { open getattr read search ioctl };
allow shell media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow shell media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow shell shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow shell shell_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow shell shell_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow shell csc_prop:property_service set;
allow shell node:tcp_socket node_bind;
allow shell port:tcp_socket { name_connect name_bind };
allow shell port:udp_socket name_bind;
allow shell setupwizard_prop:property_service set;
allow shell system_prop:property_service set;

########## known issue.
# Allow run dumpstate, dumpsys bugreport from shell
allow shell bugreport:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#neverallow Google CTS-android-5.0.2_r1 : allow shell bugreport:process signal;
allow shell dumpstate:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#allow shell dumpstate:process signal;
#violate neverallow rule.

allow shell dumpsys:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#neverallow Google CTS-android-5.0.2_r1 : allow shell dumpsys:process signal;

# ctl interface
allow shell ctl_dumpstate_prop:property_service set;

# Access sdcard.
allow shell sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow shell sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Accesses to apk_tmp_file and shell_data_file
#neverallow by Google: allow shell apk_tmp_file:dir rw_dir_perms;
#neverallow by Google: allow shell apk_tmp_file:file rw_file_perms;
#neverallow by Google: allow shell dalvikcache_data_file:file write;

# Property Service
allow shell shell_prop:property_service set;

# for monkey test
allow shell input_device:chr_file { { getattr open read ioctl lock } { open append write } };

# for CTS
# XXX Suspect
allow shell log_device:chr_file { getattr open read ioctl lock };
allow shell vold:unix_stream_socket connectto;
#neverallow by Google: allow shell vold_socket:sock_file w_file_perms;

# for logcat
#neverallow by Google: allow shell self:capability2 syslog;

# for Bugreport
allow shell device:sock_file write;

# for SPrint
allow shell input_device:chr_file { read ioctl };

# SDcard Encryption
#neverallow by Google: allow shell efs_file:file setattr;
allow shell usb_bus_device:chr_file { getattr open read ioctl lock };

# MobileCare Log
#neverallow by Google: allow shell wifi_data_file:dir w_dir_perms;
#neverallow by Google: allow shell wifi_data_file:sock_file create_file_perms;
allow shell wifi_data_file:sock_file { getattr open read ioctl lock };

allow shell wpa:unix_dgram_socket sendto;
allow shell wpa_socket:sock_file { open append write };
allow shell adbd:fifo_file { { getattr open read ioctl lock } { open append write } };
allow shell adbd:unix_stream_socket getopt;

# F5 VPN
allow shell cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow shell cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Reads /proc/pid entries to check that no unexpected root
# processes are running.
allow shell newAttr33:dir { open getattr read search ioctl };
allow shell newAttr33:{ file lnk_file } { getattr open read ioctl lock };

# Walk the file tree, stat any file.
allow shell newAttr54:dir { open getattr read search ioctl };
allow shell newAttr74:dir { open getattr read search ioctl };
allow shell newAttr27 :dir { open getattr read search ioctl };
#Give read permission to correct CTS denials
allow shell newAttr54:dir { open getattr read search ioctl };
allow shell newAttr54:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };
allow shell newAttr27:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } getattr;
allow shell newAttr68:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } getattr;
allow shell dev_type:lnk_file read;

# for B2C users
allow shell newAttr33:process getattr;

# for AWS denials

#line 155
# Call the server domain and optionally transfer references to it.
#line 155
allow shell bintvoutservice:binder { call transfer };
#line 155
# Allow the serverdomain to transfer references to the client on the reply.
#line 155
allow bintvoutservice shell:binder transfer;
#line 155
# Receive and use open files from the server.
#line 155
allow shell bintvoutservice:fd use;
#line 155


#line 156
# Call the server domain and optionally transfer references to it.
#line 156
allow shell jackservice:binder { call transfer };
#line 156
# Allow the serverdomain to transfer references to the client on the reply.
#line 156
allow jackservice shell:binder transfer;
#line 156
# Receive and use open files from the server.
#line 156
allow shell jackservice:fd use;
#line 156


#line 157
# Call the server domain and optionally transfer references to it.
#line 157
allow shell sensorhubservice:binder { call transfer };
#line 157
# Allow the serverdomain to transfer references to the client on the reply.
#line 157
allow sensorhubservice shell:binder transfer;
#line 157
# Receive and use open files from the server.
#line 157
allow shell sensorhubservice:fd use;
#line 157


# for Systrace

#line 160
# Call the server domain and optionally transfer references to it.
#line 160
allow shell healthd:binder { call transfer };
#line 160
# Allow the serverdomain to transfer references to the client on the reply.
#line 160
allow healthd shell:binder transfer;
#line 160
# Receive and use open files from the server.
#line 160
allow shell healthd:fd use;
#line 160

allow shell debug_prop:property_service set;
allow shell debugfs:file read;

# for sysprof
allow shell shell_data_file:fifo_file { write create };

# Create and use network sockets.

#line 168
typeattribute shell netdomain;
#line 168


# logd access

#line 171

#line 171
allow shell logdr_socket:sock_file write;
#line 171
allow shell logd:unix_stream_socket connectto;
#line 171

#line 171


#line 172
# Group AID_LOG checked by filesystem & logd
#line 172
# to permit control commands
#line 172

#line 172
allow shell logd_socket:sock_file write;
#line 172
allow shell logd:unix_stream_socket connectto;
#line 172

#line 172


# patchoat at CTS, run cts --class dot.junit.opcodes.invoke_direct.JUnit_Test_invoke_direct --method testVFE15
#                 run cts --class dot.junit.opcodes.invoke_direct_range.JUnit_Test_invoke_direct_range --method testVFE15
allow shell shell_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# allow shell to read lowmemorykiller for TinyMonitor Tool
allow shell sysfs_lowmemorykiller:file { getattr open read ioctl lock };

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow shell audit_log:file read;
allow shell audit_log:dir read;

########## etc_type
########## known issue.
# Knox 20
allow shell container_app:process getattr;

# Fixmo
allow shell fixmo_app:process getattr;
allow shell fixmo_app_data_file:dir getattr;

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow shell vibrator_device:chr_file read;

########## file_type
########## etc_type
########## known issue.


#
# Don't Audit
#

# Shell should never have setenforce ability
dontaudit shell kernel:security setenforce;

# Shell should not be able to access selinuxfs
dontaudit shell selinuxfs:file { read write open getattr };
dontaudit shell selinuxfs:dir search;

# Shell should never be able to override dac controls

# Su won't always be there

#line 225
dontaudit shell su:process *;
#line 227


# Shell shouldn't be getting the audit logs
dontaudit shell audit_log:file *;

# Shell should never be getting dmesg
dontaudit shell kernel:system { syslog_read syslog_mod };

# Shell should not be overriding DAC controls
dontaudit shell self:capability *;
dontaudit shell self:capability2 *;

############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402394448.121:264): avc:  denied  { create } for  pid=26494 comm="sh" name="1402394443719" scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402394448.121:264): avc:  denied  { write } for  pid=26494 comm="sh" name="0" dev="mmcblk0p25" ino=522241 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402394448.211:265): avc:  denied  { remove_name } for  pid=26501 comm="rm" name="1402394443719" dev="mmcblk0p25" ino=522300 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402394448.211:265): avc:  denied  { unlink } for  pid=26501 comm="rm" name="1402394443719" dev="mmcblk0p25" ino=522300 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.357:211): avc:  denied  { add_name } for  pid=2378 comm="sh" name="1402396718760" scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.357:211): avc:  denied  { create } for  pid=2378 comm="sh" name="1402396718760" scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.357:211): avc:  denied  { write } for  pid=2378 comm="sh" name="0" dev="mmcblk0p25" ino=522241 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.357:211): avc:  denied  { write } for  pid=2378 comm="sh" name="1402396718760" dev="mmcblk0p25" ino=522259 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.577:212): avc:  denied  { remove_name } for  pid=2405 comm="rm" name="1402396718760" dev="mmcblk0p25" ino=522259 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# audit(1421386937.856:220): avc:  denied  { getattr } for  pid=24613 comm="ls" path="/efs" dev="mmcblk0p13" ino=2 scontext=u:r:shell:s0 tcontext=u:object_r:efs_file:s0 tclass=dir permissive=0


#line 1 "vendor/samsung/common/sepolicy/sec_common/smdexe.te"
#
# smdexe
#

############ aosp and sec_common #############
########## type and macro.
type smdexe, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type smdexe_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute smdexe trusteddomain;
typeattribute smdexe device_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init smdexe_exec:file { getattr open read execute };
#line 13
allow init smdexe:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow smdexe smdexe_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow smdexe init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init smdexe:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init smdexe:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init smdexe_exec:process smdexe;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type smdexe_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition smdexe tmpfs:file smdexe_tmpfs;
#line 13
allow smdexe smdexe_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
########## fs_type
allow smdexe sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
########## file_type
########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
allow smdexe ddexe:unix_stream_socket connectto;
allow smdexe rild:unix_stream_socket connectto;
allow smdexe self:capability { setuid dac_override };

########## fs_type
allow smdexe sysfs:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow smdexe dun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow smdexe smd_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow smdexe system_data_file:sock_file { { getattr open read ioctl lock } { open append write } };

########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow smdexe mif_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/ss_conn_daemon.te"
#
# ss_conn_daemon
#

############ aosp and sec_common #############
########## type and macro.
type ss_conn_daemon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type ss_conn_daemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute ss_conn_daemon trusteddomain;
typeattribute ss_conn_daemon system_domain;


#line 12

#line 12
# Allow the necessary permissions.
#line 12

#line 12
# Old domain may exec the file and transition to the new domain.
#line 12
allow init ss_conn_daemon_exec:file { getattr open read execute };
#line 12
allow init ss_conn_daemon:process transition;
#line 12
# New domain is entered by executing the file.
#line 12
allow ss_conn_daemon ss_conn_daemon_exec:file { entrypoint open read execute getattr };
#line 12
# New domain can send SIGCHLD to its caller.
#line 12
allow ss_conn_daemon init:process sigchld;
#line 12
# Enable AT_SECURE, i.e. libc secure mode.
#line 12
dontaudit init ss_conn_daemon:process noatsecure;
#line 12
# XXX dontaudit candidate but requires further study.
#line 12
allow init ss_conn_daemon:process { siginh rlimitinh };
#line 12

#line 12
# Make the transition occur by default.
#line 12
type_transition init ss_conn_daemon_exec:process ss_conn_daemon;
#line 12

#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type ss_conn_daemon_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition ss_conn_daemon tmpfs:file ss_conn_daemon_tmpfs;
#line 12
allow ss_conn_daemon ss_conn_daemon_tmpfs:file { read write };
#line 12

#line 12


#line 13
typeattribute ss_conn_daemon netdomain;
#line 13


########## self and domain_type
########## fs_type
########## dev_type
allow ss_conn_daemon usb_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## file_type
allow ss_conn_daemon system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ss_conn_daemon system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.
#SideSync issue
allow ss_conn_daemon node:tcp_socket node_bind;
allow ss_conn_daemon node:udp_socket node_bind;
allow ss_conn_daemon port:tcp_socket { name_bind name_connect };
allow ss_conn_daemon port:udp_socket name_bind;

#support SideSync socket
#allow ss_conn_daemon socket_device:dir rw_dir_perms;
allow ss_conn_daemon ss_conn_daemon_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


############ avc_log #############
# avc:  denied  { write } for  pid=379 comm="ss_conn_daemon" name="fwmarkd" dev="tmpfs" ino=7051 scontext=u:r:ss_conn_daemon:s0 tcontext=u:object_r:fwmarkd_socket:s0 tclass=sock_file SEPF_SM-G900F_5.0_0001
# arch=40000028 syscall=283 per=800000 success=no exit=-13 a0=17 a1=b6da3fea a2=6e a3=b6e32be8 items=1 ppid=1 pid=379 auid=4294967295 uid=1000 gid=3003 euid=1000 suid=1000 fsuid=1000 egid=3003 sgid=3003 fsgid=3003 tty=(none) ses=4294967295 comm="ss_conn_daemon" exe="/system/bin/ss_conn_daemon" subj=u:r:ss_conn_daemon:s0 key=(null)
#saddr=01002F6465762F736F636B65742F66776D61726B6400


#line 1 "vendor/samsung/common/sepolicy/sec_common/sshd.te"
#
# sshd
#

############ aosp and sec_common #############
########## type and macro.
type sshd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type sshd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# for B2C users
typeattribute sshd trusteddomain;
typeattribute sshd system_domain;


#line 14

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow init sshd_exec:file { getattr open read execute };
#line 14
allow init sshd:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow sshd sshd_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow sshd init:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit init sshd:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow init sshd:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition init sshd_exec:process sshd;
#line 14

#line 14

#line 14
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 14
type sshd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 14
type_transition sshd tmpfs:file sshd_tmpfs;
#line 14
allow sshd sshd_tmpfs:file { read write };
#line 14

#line 14

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/sec_common/ss_kbservice_daemon.te"
#
#  ss_kbservice_daemon
#

############ sec_common #############
########## type and macro.
type ss_kbservice_daemon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type ss_kbservice_daemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute ss_kbservice_daemon trusteddomain;
#typeattribute ss_kbservice_daemon system_domain;


#line 12

#line 12
# Allow the necessary permissions.
#line 12

#line 12
# Old domain may exec the file and transition to the new domain.
#line 12
allow init ss_kbservice_daemon_exec:file { getattr open read execute };
#line 12
allow init ss_kbservice_daemon:process transition;
#line 12
# New domain is entered by executing the file.
#line 12
allow ss_kbservice_daemon ss_kbservice_daemon_exec:file { entrypoint open read execute getattr };
#line 12
# New domain can send SIGCHLD to its caller.
#line 12
allow ss_kbservice_daemon init:process sigchld;
#line 12
# Enable AT_SECURE, i.e. libc secure mode.
#line 12
dontaudit init ss_kbservice_daemon:process noatsecure;
#line 12
# XXX dontaudit candidate but requires further study.
#line 12
allow init ss_kbservice_daemon:process { siginh rlimitinh };
#line 12

#line 12
# Make the transition occur by default.
#line 12
type_transition init ss_kbservice_daemon_exec:process ss_kbservice_daemon;
#line 12

#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type ss_kbservice_daemon_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition ss_kbservice_daemon tmpfs:file ss_kbservice_daemon_tmpfs;
#line 12
allow ss_kbservice_daemon ss_kbservice_daemon_tmpfs:file { read write };
#line 12

#line 12


########## self and domain_type
########## fs_type
########## dev_type
allow ss_kbservice_daemon uhid_device:chr_file { write ioctl open };
########## file_type
allow ss_kbservice_daemon system_data_file:dir { write add_name remove_name };
allow ss_kbservice_daemon system_data_file:sock_file { create setattr unlink };

########## etc_type
########## known issue.
# type transtion from system_data_file to ss_kbservice_daemon_socket
allow ss_kbservice_daemon system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
type_transition ss_kbservice_daemon system_data_file:sock_file ss_kbservice_daemon_socket;
allow ss_kbservice_daemon ss_kbservice_daemon_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ avc_log #############
#from CTS testing
#avc:  denied  { ioctl } for  pid=283 comm="ss_kbservice_da" path="/dev/uinput" dev="tmpfs" ino=10477 scontext=u:r:ss_kbservice_daemon:s0 tcontext=u:object_r:uhid_device:s0 tclass=chr_file SEPF_SM-G900F_5.0_0001
#avc:  denied  { write } for  pid=283 comm="ss_kbservice_da" name="uinput" dev="tmpfs" ino=10477 scontext=u:r:ss_kbservice_daemon:s0 tcontext=u:object_r:uhid_device:s0 tclass=chr_file SEPF_SM-G900F_5.0_0001
#avc:  denied  { open } for  pid=283 comm="ss_kbservice_da" name="uinput" dev="tmpfs" ino=10477 scontext=u:r:ss_kbservice_daemon:s0 tcontext=u:object_r:uhid_device:s0 tclass=chr_file SEPF_SM-G900F_5.0_0001
#avc:  denied  { add_name } for  pid=283 comm="ss_kbservice_da" name="ss_kbservice_daemon" scontext=u:r:ss_kbservice_daemon:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir SEPF_SM-G900F_5.0_0001
#avc:  denied  { write } for  pid=283 comm="ss_kbservice_da" name="/" dev="mmcblk0p26" ino=2 scontext=u:r:ss_kbservice_daemon:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir SEPF_SM-G900F_5.0_0001
#avc:  denied  { create } for  pid=283 comm="ss_kbservice_da" name="ss_kbservice_daemon" scontext=u:r:ss_kbservice_daemon:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file SEPF_SM-G900F_5.0_0001
#avc:  denied  { setattr } for  pid=283 comm="ss_kbservice_da" name="ss_kbservice_daemon" dev="mmcblk0p26" ino=15 scontext=u:r:ss_kbservice_daemon:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file SEPF_SM-G900F_5.0_0001



#line 1 "vendor/samsung/common/sepolicy/sec_common/sswap.te"
#
# sswap seclabel
#

############ aosp and sec_common #############
########## type and macro.
type sswap, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type sswap_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute sswap trusteddomain;
typeattribute sswap system_domain;


#line 12

#line 12
# Allow the necessary permissions.
#line 12

#line 12
# Old domain may exec the file and transition to the new domain.
#line 12
allow init sswap_exec:file { getattr open read execute };
#line 12
allow init sswap:process transition;
#line 12
# New domain is entered by executing the file.
#line 12
allow sswap sswap_exec:file { entrypoint open read execute getattr };
#line 12
# New domain can send SIGCHLD to its caller.
#line 12
allow sswap init:process sigchld;
#line 12
# Enable AT_SECURE, i.e. libc secure mode.
#line 12
dontaudit init sswap:process noatsecure;
#line 12
# XXX dontaudit candidate but requires further study.
#line 12
allow init sswap:process { siginh rlimitinh };
#line 12

#line 12
# Make the transition occur by default.
#line 12
type_transition init sswap_exec:process sswap;
#line 12

#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type sswap_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition sswap tmpfs:file sswap_tmpfs;
#line 12
allow sswap sswap_tmpfs:file { read write };
#line 12

#line 12

########## self and domain_type
allow sswap self:capability sys_admin;

########## fs_type
allow sswap rootfs:file entrypoint;
allow sswap sysfs:file { open append write };
allow sswap sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow sswap block_device:dir { open getattr read search ioctl };
allow sswap swap_device:blk_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ slsi_common #############
########## type and macro.
########## self and domain_type
allow sswap self:capability { sys_admin dac_override };

########## fs_type
allow sswap proc:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
########## file_type
allow sswap cache_file:file { open append write };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { write } for  pid=2841 comm="sswap" name="swappiness" dev="proc" ino=5429 scontext=u:r:sswap:s0 tcontext=u:object_r:proc:s0 tclass=file


#line 1 "vendor/samsung/common/sepolicy/sec_common/syscope.te"
#
# syscope_app
#

############ aosp and sec_common #############
########## type and macro.

#type definition is in each the model/ctsv# directory.


#line 10
allow syscope_app dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 10
allow syscope_app dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 10
allow syscope_app dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 10
allow syscope_app bugreport_exec:file { execute execute_no_trans };
#line 10
allow syscope_app dumpstate_exec:file { execute execute_no_trans };
#line 10
allow syscope_app dumpsys_exec:file { execute execute_no_trans };
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow syscope_app servicemanager:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow servicemanager syscope_app:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow syscope_app servicemanager:fd use;
#line 11


########## self and domain_type
#neverallow Google CTS :allow syscope_app init:binder call;

########## fs_type
allow syscope_app sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow syscope_app sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow syscope_app sysrq_proc:file { getattr open read ioctl lock };
allow syscope_app sysrq_proc:file { getattr execute execute_no_trans };

########## dev_type
#neverallow Google CTS-android-5.0.2_r1 : allow syscope_app block_device:blk_file w_file_perms;
allow syscope_app block_device:dir { open getattr read search ioctl };
allow syscope_app block_device:lnk_file { getattr open read ioctl lock };
#neverallow Google CTS-android-5.0.2_r1 : allow syscope_app emmcblk_device:blk_file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow syscope_app paramblk_device:blk_file rw_file_perms;

########## file_type
allow syscope_app anr_data_file:dir { open search write add_name remove_name };
allow syscope_app anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#Remote Code Execution issue: allow syscope_app dalvikcache_data_file:file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow syscope_app system_data_file:dir create_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow syscope_app system_data_file:file create_file_perms;
allow syscope_app system_sysscope_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow syscope_app system_sysscope_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.
#r_dir_file(syscope_app, file_type)
# replacing r_dir_file macro and removing container related access
allow syscope_app newAttr54:dir { open getattr read search ioctl };
allow syscope_app newAttr54:{ file lnk_file } { getattr open read ioctl lock };

#r_dir_file(syscope_app, appdomain)
#r_dir_file(syscope_app, domain)
# replacing r_dir_file macro and removing container related access
allow syscope_app domain:dir { open getattr read search ioctl };
allow syscope_app domain:{ file lnk_file } { getattr open read ioctl lock };

# After removing android_cts, denials show the following rules are needed
allow syscope_app block_device:lnk_file { getattr open read ioctl lock };

# Read and write /data/data subdirectory.
allow syscope_app system_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow syscope_app system_app_data_file:{ file fifo_file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow syscope_app system_app_data_file:file { getattr execute execute_no_trans };



############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
#neverallow Google CTS-android-5.0.2_r1 : allow syscope_app emmcblk_device:blk_file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow syscope_app padblk_device:blk_file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow syscope_app persistblk_device:blk_file w_file_perms;

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
#line 1 "vendor/samsung/common/sepolicy/sec_common/sysmon.te"
#
# sysmon
#

############ aosp and sec_common #############
########## type and macro.
# sysmon
type sysmon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type sysmon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute sysmon trusteddomain;
typeattribute sysmon system_domain;


#line 14

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow init sysmon_exec:file { getattr open read execute };
#line 14
allow init sysmon:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow sysmon sysmon_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow sysmon init:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit init sysmon:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow init sysmon:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition init sysmon_exec:process sysmon;
#line 14

#line 14

#line 14
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 14
type sysmon_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 14
type_transition sysmon tmpfs:file sysmon_tmpfs;
#line 14
allow sysmon sysmon_tmpfs:file { read write };
#line 14

#line 14


########## self and domain_type
allow sysmon init:dir { open getattr read search ioctl };
allow sysmon init:file { getattr open read ioctl lock };
allow sysmon kernel:dir { open getattr read search ioctl };
allow sysmon kernel:file { getattr open read ioctl lock };
allow sysmon kernel:system syslog_read;
allow sysmon self:capability { fowner chown fsetid dac_override sys_admin };
allow sysmon self:capability2 syslog;

########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/sysprof.te"
#
# sysprof
#

############ aosp and sec_common #############
########## type and macro.
type sysprof, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type sysprof_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
#neverallow Google CTS : type event_log_tags_file, file_type, data_file_type, mlstrustedobject;
typeattribute sysprof trusteddomain;
#typeattribute sysprof system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init sysprof_exec:file { getattr open read execute };
#line 13
allow init sysprof:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow sysprof sysprof_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow sysprof init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init sysprof:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init sysprof:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init sysprof_exec:process sysprof;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type sysprof_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition sysprof tmpfs:file sysprof_tmpfs;
#line 13
allow sysprof sysprof_tmpfs:file { read write };
#line 13

#line 13


########## self and domain_type
allow sysprof self:capability dac_override;
allow sysprof self:capability2 syslog;
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.
# Access /data/local/tmp.
allow sysprof shell_data_file:{ file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sysprof shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

# Access android device log
allow sysprof log_device:chr_file { getattr open read ioctl lock };

# Access event log tags file.
allow sysprof event_log_tags_file:file { getattr open read ioctl lock };

# Access /proc/pid data for additional information logging.
allow sysprof newAttr33:dir { open getattr read search ioctl };
allow sysprof newAttr33:{ file lnk_file } { getattr open read ioctl lock };


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sec_common/tlc_server.te"
#
#  tlc_server
#

############ sec_common #############
########## type and macro.
type tlc_server, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type tlc_server_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute tlc_server trusteddomain;
typeattribute tlc_server system_domain;
typeattribute tlc_server mlstrustedsubject;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init tlc_server_exec:file { getattr open read execute };
#line 13
allow init tlc_server:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow tlc_server tlc_server_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow tlc_server init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init tlc_server:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init tlc_server:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init tlc_server_exec:process tlc_server;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type tlc_server_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69, newAttr90;
#line 13
type_transition tlc_server tmpfs:file tlc_server_tmpfs;
#line 13
allow tlc_server tlc_server_tmpfs:file { read write };
#line 13

#line 13


#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow system_server tlc_server_exec:file { getattr open read execute };
#line 14
allow system_server tlc_server:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow tlc_server tlc_server_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow tlc_server system_server:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit system_server tlc_server:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow system_server tlc_server:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition system_server tlc_server_exec:process tlc_server;
#line 14


#line 15
# Call the servicemanager and transfer references to it.
#line 15
allow tlc_server servicemanager:binder { call transfer };
#line 15
# servicemanager performs getpidcon on clients.
#line 15
allow servicemanager tlc_server:dir search;
#line 15
allow servicemanager tlc_server:file { read open };
#line 15
allow servicemanager tlc_server:process getattr;
#line 15
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 15
# all domains in domain.te.
#line 15


#line 16
allow tlc_server mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 16
allow tlc_server mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 16
# TODO: Figure out proper sockets
#line 16
allow tlc_server mobicoredaemon:unix_stream_socket connectto;
#line 16


########## self and domain_type
allow tlc_server system_server:fifo_file { read write getattr ioctl };

allow tlc_server tlc_server_service:service_manager add;
########## fs_type
#neverallow Google CTS-android-5.0.2_r1 : allow tlc_server firmware_file:file { rx_file_perms open };
allow tlc_server firmware_file:file { getattr open read ioctl lock };
allow tlc_server firmware_file:dir { open getattr read search ioctl };

########## dev_type
allow tlc_server qseecom_device:chr_file { read write ioctl open };

########## file_type
allow tlc_server app_efs_file:file { read open };
allow tlc_server dcm_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow tlc_server dcm_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow tlc_server efs_file:dir search;
allow tlc_server efs_type:dir { open getattr read search ioctl };
allow tlc_server efs_type:{ file lnk_file } { getattr open read ioctl lock };
allow tlc_server platform_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow tlc_server platform_app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow tlc_server radio_data_file:dir search;
allow tlc_server radio_data_file:file { read open };
allow tlc_server shell_exec:file { read execute open execute_no_trans };
allow tlc_server system_file:file execute_no_trans;
allow tlc_server wifi_efs_file:file { read open };

########## etc_type
allow tlc_server tlc_server_service:service_manager add;

########## self
allow tlc_server self:capability dac_override;

########## known issue.


############ avc_log #############
#from CTS testing
#avc:  denied  { call } for  pid=1337 comm="tlc_server" scontext=u:r:tlc_server:s0 tcontext=u:r:servicemanager:s0 tclass=binder
#avc:  denied  { transfer } for  pid=1337 comm="tlc_server" scontext=u:r:tlc_server:s0 tcontext=u:r:servicemanager:s0 tclass=binder
#avc:  denied  { read } for  pid=1337 comm="tlc_server" path="pipe:[13582]" dev="pipefs" ino=13582 scontext=u:r:tlc_server:s0 tcontext=u:r:system_server:s0 tclass=fifo_file
#avc:  denied  { write } for  pid=1337 comm="tlc_server" path="pipe:[13583]" dev="pipefs" ino=13583 scontext=u:r:tlc_server:s0 tcontext=u:r:system_server:s0 tclass=fifo_file
#avc:  denied  { getattr } for  pid=1337 comm="tlc_server" path="pipe:[13582]" dev="pipefs" ino=13582 scontext=u:r:tlc_server:s0 tcontext=u:r:system_server:s0 tclass=fifo_file
#avc:  denied  { ioctl } for  pid=1338 comm="sh" path="pipe:[13582]" dev="pipefs" ino=13582 scontext=u:r:tlc_server:s0 tcontext=u:r:system_server:s0 tclass=fifo_file
#avc:  denied  { read write } for  pid=1337 comm="tlc_server" name="qseecom" dev="tmpfs" ino=9963 scontext=u:r:tlc_server:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file SEPF_SM-G900F_5.0_0001
#avc:  denied  { open } for  pid=1337 comm="tlc_server" name="qseecom" dev="tmpfs" ino=9963 scontext=u:r:tlc_server:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file SEPF_SM-G900F_5.0_0001
#avc:  denied  { ioctl } for  pid=1337 comm="tlc_server" path="/dev/qseecom" dev="tmpfs" ino=9963 scontext=u:r:tlc_server:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file SEPF_SM-G900F_5.0_0001
#avc:  denied  { read } for  pid=1337 comm="tlc_server" name="tz_ccm.mdt" dev="mmcblk0p1" ino=86 scontext=u:r:tlc_server:s0 tcontext=u:object_r:firmware_file:s0 tclass=file SEPF_SM-G900F_5.0_0001
#avc:  denied  { open } for  pid=1337 comm="tlc_server" name="tz_ccm.mdt" dev="mmcblk0p1" ino=86 scontext=u:r:tlc_server:s0 tcontext=u:object_r:firmware_file:s0 tclass=file SEPF_SM-G900F_5.0_0001i
#avc:  denied  { getattr } for  pid=1337 comm="tlc_server" path="/firmware/image/tz_ccm.mdt" dev="mmcblk0p1" ino=86 scontext=u:r:tlc_server:s0 tcontext=u:object_r:firmware_file:s0 tclass=file SEPF_SM-G900F_5.0_0001
#avc:  denied  { execute } for  pid=1338 comm="tlc_server" name="sh" dev="mmcblk0p23" ino=955 scontext=u:r:tlc_server:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#avc:  denied  { read open } for  pid=1338 comm="tlc_server" name="sh" dev="mmcblk0p23" ino=955 scontext=u:r:tlc_server:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#avc:  denied  { execute_no_trans } for  pid=1338 comm="tlc_server" path="/system/bin/sh" dev="mmcblk0p23" ino=955 scontext=u:r:tlc_server:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#avc:  denied  { execute_no_trans } for  pid=1338 comm="sh" path="/system/bin/ccm_gen_cert" dev="mmcblk0p23" ino=750 scontext=u:r:tlc_server:s0 tcontext=u:object_r:system_file:s0 tclass=file
# avc:  denied  { search } for  pid=4422 comm="ccm_gen_cert" name="/" dev="mmcblk0p3" ino=2 scontext=u:r:tlc_server:s0 tcontext=u:object_r:efs_file:s0 tclass=dir
# avc:  denied  { connectto } for  pid=4432 comm="tlc_server" path=006D636461656D6F6E scontext=u:r:tlc_server:s0 tcontext=u:r:mobicoredaemon:s0 tclass=unix_stream_socket
# avc:  denied  { read write } for  pid=4432 comm="tlc_server" name="mobicore-user" dev="tmpfs" ino=11727 scontext=u:r:tlc_server:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file
# avc:  denied  { open } for  pid=4432 comm="tlc_server" path="/dev/mobicore-user" dev="tmpfs" ino=11727 scontext=u:r:tlc_server:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file
# avc:  denied  { ioctl } for  pid=4432 comm="tlc_server" path="/dev/mobicore-user" dev="tmpfs" ino=11727 scontext=u:r:tlc_server:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file
# avc:  denied  { search } for  pid=4422 comm="ccm_gen_cert" name="/" dev="mmcblk0p3" ino=2 scontext=u:r:tlc_server:s0 tcontext=u:object_r:efs_file:s0 tclass=dir
# audit(1415850082.690:223): avc:  denied  { read } for  pid=13657 comm="ccm_gen_cert" name="serial_no" dev="mmcblk0p3" ino=36 scontext=u:r:tlc_server:s0 tcontext=u:object_r:app_efs_file:s0 tclass=file
# audit(1415850082.690:223): avc:  denied  { open } for  pid=13657 comm="ccm_gen_cert" path="/efs/FactoryApp/serial_no" dev="mmcblk0p3" ino=36 scontext=u:r:tlc_server:s0 tcontext=u:object_r:app_efs_file:s0 tclass=file
# audit(1415850082.690:223): item=0 name="/efs/FactoryApp/serial_no" inode=36 dev=b3:03 mode=0100744 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:app_efs_file:s0
# audit(1415850082.680:222): avc:  denied  { read } for  pid=13657 comm="ccm_gen_cert" name=".mac.info" dev="mmcblk0p3" ino=16 scontext=u:r:tlc_server:s0 tcontext=u:object_r:wifi_efs_file:s0 tclass=file
# audit(1415850082.680:222): avc:  denied  { open } for  pid=13657 comm="ccm_gen_cert" path="/efs/wifi/.mac.info" dev="mmcblk0p3" ino=16 scontext=u:r:tlc_server:s0 tcontext=u:object_r:wifi_efs_file:s0 tclass=file
# audit(1415850082.680:222): item=0 name="/efs/wifi/.mac.info" inode=16 dev=b3:03 mode=0100660 ouid=1000 ogid=1010 rdev=00:00 obj=u:object_r:wifi_efs_file:s0
# avc:  denied  { dac_override } for  pid=1128 comm="tlc_server" capability=1  scontext=u:r:tlc_server:s0 tcontext=u:r:tlc_server:s0 tclass=capability
# audit(1416534453.878:171): avc:  denied  { write } for  pid=1897 comm="Binder_1" path="/data/knox/data/101/EN.FXblbPYB98I3xEaPny.ZQfzetrm8eV7w3oy5mV6Bb1M.E42Zgc4cxoVzdkNfpGUyP0U29FnF16qp8jU-/EN.FWblbPYB98I3xEaPny.ZQfzetrm8eV7w3oy52I3wY3bYsNxNGhCQAs6.6U--/EN.FXblbPYB98I3xEaPny.ZQfzetrm8eV7w3oy5-scTpdQIW8RlXZEMr6Dlu9yOfekIIlLMmwGlKXgM5CE-" dev="mmcblk0p26" ino=262101 scontext=u:r:tlc_server:s0 tcontext=u:object_r:platform_app_data_file:s0:c3 tclass=file
# avc:  denied  { search } for  pid=4153 comm="cp" name="tz_dcm" dev="sda17" ino=130606 scontext=u:r:tlc_server:s0 tcontext=u:object_r:dcm_data_file:s0 tclass=dir permissive=0
# avc:  denied  { write } for  pid=3874 comm="cp" name="dcm.dat" dev="sda18" ino=130607 scontext=u:r:tlc_server:s0 tcontext=u:object_r:dcm_data_file:s0 tclass=file permissive=0
# avc:  denied  { write } for  pid=3874 comm="cp" name="tz_dcm" dev="sda18" ino=130606 scontext=u:r:tlc_server:s0 tcontext=u:object_r:dcm_data_file:s0 tclass=dir permissive=0
# avc:  denied  { getattr } for  pid=3895 comm="cp" path="/data/misc/tz_dcm/dcm.dat" dev="sda18" ino=130607 scontext=u:r:tlc_server:s0 tcontext=u:object_r:dcm_data_file:s0 tclass=file permissive=0

#line 1 "vendor/samsung/common/sepolicy/sec_common/trusteddomainCTS.te"
#
# trusteddomain for CTS compatible
#

############ trusteddomain #############
########## type and macro.
########## self and domain_type
#neverallow by Google: signal is neverallow of appdomain
# allow trusteddomain newAttr33:process { signal sigchld signull getsched getpgid getcap getattr };
allow trusteddomain newAttr45:process { sigchld signull getsched getpgid getcap getattr };
allow { system_domain device_domain } newAttr48:process { signal sigchld signull getsched getpgid getcap getattr };

allow trusteddomain newAttr48:fd use;
allow trusteddomain newAttr45:dir { open getattr read search ioctl };
allow trusteddomain newAttr45:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };

# socket, ipc, key, msg, peer, binder
#neverallow by Google:allow trusteddomain { domain -containerdomain -fixmo_app -good_app -system_domain }:socket_class_set { ioctl read getattr bind connect getopt accept };
allow trusteddomain newAttr48:{ udp_socket unix_dgram_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow trusteddomain newAttr48:{ tcp_socket unix_stream_socket } { { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } } connectto };
allow trusteddomain newAttr48:{ sem msgq shm ipc } { { getattr read associate unix_read } { write unix_write } };
allow trusteddomain newAttr45:key { view read search };
allow trusteddomain newAttr45:msg *;
allow trusteddomain newAttr45:peer recv;
allow newAttr93 newAttr46:binder { call transfer };
allow trusteddomain zygote:unix_stream_socket { getopt getattr };

########## fs_type
#neverallow by Google: ({ surfaceflinger system_server } sdcard_type:file rw_file_perms;)
#neverallow Google CTS-android-5.0.2_r1 : allow { trusteddomain -cts_domain } { sysfs }:file rw_file_perms;
allow newAttr94 newAttr71:dir { open getattr read search ioctl };
allow newAttr94 newAttr71:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };
allow { surfaceflinger system_server } newAttr73:dir { open getattr read search ioctl };
allow { surfaceflinger system_server } newAttr73:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };
allow trusteddomain sysfs_app_writable:file { { getattr open read ioctl lock } { open append write } };


########## dev_type
allow trusteddomain newAttr27:dir { open getattr read search ioctl };
allow trusteddomain newAttr27:{ { file lnk_file sock_file fifo_file } chr_file } { getattr open read ioctl lock };

########## file_type
allow trusteddomain newAttr54:dir { open getattr read search ioctl };
allow trusteddomain newAttr54:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };
# Modify: allow trusteddomain newAttr89 : dir w_dir_perms;
# IME ISSUE
allow newAttr92 newAttr89 : dir { open search write add_name remove_name };
allow ime_app newAttr90 : dir { open search write add_name remove_name };
# Modify: allow trusteddomain newAttr89 : notdevfile_class_set w_file_perms;
# IME ISSUE
allow newAttr92 newAttr89 : { file lnk_file sock_file fifo_file } { open append write };
allow ime_app newAttr90 : { file lnk_file sock_file fifo_file } { open append write };

#neverallow Google CTS-android-5.0.2_r1 :allow trusteddomain { exec_type library_file_type -domain_no_read_file }:file rx_file_perms;
allow trusteddomain newAttr52:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#neverallow by Google: allow trusteddomain shell_data_file:file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { trusteddomain -cts_domain } shell_data_file:file rw_file_perms;

# add more permissions to access generic type.
#neverallow Google CTS-android-5.0.2_r1 : allow { system_domain device_domain -cts_domain } { device block_device }:dir rw_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { system_domain device_domain -cts_domain } device:file_class_set rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { system_domain device_domain -cts_domain } block_device:file_class_set rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { system_domain device_domain -cts_domain } socket_device:dir rw_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { system_domain device_domain -cts_domain } socket_device:file_class_set rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { trusteddomain -cts_domain } efs_type:dir rw_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { trusteddomain -cts_domain } efs_type:file_class_set rw_file_perms;


########## etc_type
########## known issue.
# dumpstate/dumpsys of stressTest saves the log at sdcard_internal, CryptfsUtil::doDumpstate saves the log into cache_file 
# allow trusteddomain { media_rw_data_file sdcard_internal cache_file }:file { append write getattr };
#allow memtrack to trusteddomain
allow trusteddomain debugfs:file { read getattr };

# keyboard issue
#neverallow by Google: allow trusteddomain app_data_file:file execute;
#neverallow by Google: allow trusted_app_domain app_data_file:file execute;

############ trusted_app_domain system_domain device_domain #############

########## self and domain_type ##########
allow trusted_app_domain kernel:system module_request;
# from "allow domain self:capability sys_nice;"
allow { system_domain device_domain } self:capability sys_nice;

# dir, file class
allow system_domain newAttr48:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_domain newAttr48:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow device_domain newAttr47:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow device_domain newAttr47:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow trusted_app_domain appdomain:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow trusted_app_domain appdomain:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow { device_domain trusted_app_domain } newAttr25:dir { open getattr read search ioctl };
allow { device_domain trusted_app_domain } newAttr25:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };

# socket, ipc, key
allow system_domain newAttr48:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
allow trusted_app_domain newAttr48 : { udp_socket unix_dgram_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow trusted_app_domain newAttr48 : { tcp_socket unix_stream_socket } { { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } } connectto };
allow trusted_app_domain newAttr48 : { socket tun_socket appletalk_socket key_socket packet_socket rawip_socket } { ioctl read getattr bind connect getopt accept };
#allow trusted_app_domain { domain -unconfineddomain -containerdomain -fixmo_app -good_app -trusted_app_domain }:socket_class_set *;
allow { system_domain trusted_app_domain } newAttr48:{ sem msgq shm ipc } *;
allow { system_domain trusted_app_domain } newAttr48:key *;

allow device_domain newAttr47:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
allow device_domain newAttr47:{ sem msgq shm ipc } *;
allow device_domain newAttr47:key *;
allow device_domain system_domain:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } { ioctl read getattr bind connect getopt };
allow device_domain system_domain:{ sem msgq shm ipc } ~{ create destroy setattr };
allow device_domain system_domain:key { view read search };

########## fs_type ##########
# Modify: allow trusteddomain { fs_type -proc -sysfs -selinuxfs -rootfs -system_file -system_data_file -security_file -knox_clipboard_file -unlabeled -container_service_secure_type -container_file_type }:filesystem *;
# to satisfy the assertion that
# (1) Appdomain apps should not have mount permissions to certain fs_type.
# (2) No domain can execute a type that it can write
#neverallow by Google: allow { system_domain device_domain trusted_app_domain } newAttr74:filesystem ~{ mount remount unmount };
allow trusted_app_domain fs_type:filesystem getattr;
allow { system_domain device_domain } newAttr74:filesystem ~{ mount remount unmount relabelfrom relabelto };

# Modify: allow trusteddomain { fs_type -proc -sysfs -selinuxfs -rootfs -system_file -system_data_file -security_file -knox_clipboard_file -unlabeled -dev_type -container_service_secure_type -container_file_type }:dir_file_class_set *;
# to satisfy the assertion that
# (1) Appdomain apps should not have mounton permissions to dir and file types
# (2) Domain cannot execute a type it can write

## r_fs_type
allow { system_domain device_domain trusted_app_domain } newAttr81: dir { open getattr read search ioctl };
allow { system_domain device_domain trusted_app_domain } newAttr81 : { { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };

## rx_fs_type
allow { system_domain device_domain trusted_app_domain } newAttr84: dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 : allow { system_domain device_domain trusted_app_domain -cts_domain } newAttr84: { chr_file file } rx_file_perms;
allow { system_domain device_domain } newAttr84: { chr_file file } { getattr open read ioctl lock };
allow trusted_app_domain newAttr84: { chr_file file } { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

allow { system_domain device_domain } newAttr84 : { blk_file lnk_file sock_file fifo_file } { { getattr open read ioctl lock } { getattr link unlink rename } execute execmod };
allow trusted_app_domain newAttr84 : { blk_file lnk_file sock_file fifo_file } { { getattr open read ioctl lock } execute execmod };

## rw_fs_type
#neverallow by Google: ({ surfaceflinger system_server } sdcard_type:file rw_file_perms;)
allow newAttr87 newAttr82 : dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow newAttr87 newAttr82 : { { chr_file blk_file } { file lnk_file sock_file fifo_file } } { { getattr open read ioctl lock } { open append write } };
allow { surfaceflinger system_server } newAttr83 : dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow { surfaceflinger system_server } newAttr83 : { { chr_file blk_file } { file lnk_file sock_file fifo_file } } { { getattr open read ioctl lock } { open append write } };
allow trusted_app_domain newAttr82 : dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow trusted_app_domain newAttr82 : { { chr_file blk_file } { file lnk_file sock_file fifo_file } } { { getattr open read ioctl lock } { open append write } };


########## dev_type ##########
allow { system_domain device_domain } newAttr30:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow { system_domain device_domain } newAttr30:{ { file lnk_file sock_file fifo_file } chr_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow newAttr86 newAttr30:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow trusted_app_domain newAttr26:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow trusted_app_domain newAttr26:{ { file lnk_file sock_file fifo_file } chr_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## file_type ##########
allow trusted_app_domain { system_file system_library_file }:file execmod;

#Modify: allow trusteddomain { file_type -system_file -system_data_file -security_file -knox_clipboard_file -unlabeled -container_file_type }:dir_file_class_set *;
# to satisfy the assertion that
# (1) Unprivileged domain cannot write to system partition, a.k.a., /system/ 
# (2) No domain can execute any type it can write (except kernel, init, and su). (Note: we give write permission to data_file_type, but not execute permissions)
# (3) No domain can write to exec_type except init, kernel and su.
# (4) Appdomain apps should not have mounton permissions to dir and file types
# excluding container_app_data_file to satisfy assert rule
#allow { system_domain device_domain } { file_type -system_file -system_data_file -security_file -knox_clipboard_file -unlabeled -container_file_type }:dir *;
#allow { system_domain device_domain } { file_type -knox_clipboard_file -unlabeled -container_file_type }:dir *;
#allow trusted_app_domain { file_type -knox_clipboard_file -unlabeled -container_file_type }:dir ~mounton;

# read access
allow { system_domain device_domain } newAttr59:dir { open getattr read search ioctl };
allow { system_domain device_domain } newAttr59:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };

# write and create access
#neverallow by Google: (netd { app_data_file system_data_file }:dir_file_class_set write;)
allow newAttr86 newAttr18:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 180
allow newAttr86 newAttr18 : { { chr_file blk_file } { file lnk_file sock_file fifo_file } } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 182

allow netd newAttr19:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 186
allow netd newAttr19 : { { chr_file blk_file } { file lnk_file sock_file fifo_file } } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 189

# Modify: allow trusted_app_domain { cache_file_type data_file_type efs_type log_file_type misc_rw_file_type security_file_type socket_file_type 
#                                      -appdomain_no_read_file -appdomain_no_write_file -domain_no_read_file -domain_no_write_file -domain_no_read_knoxfile -domain_no_write_knoxfile }:dir create_dir_perms;
# IME ISSUE
allow newAttr91 newAttr16:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 195
allow ime_app newAttr17:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 197


# Modify: allow trusted_app_domain { cache_file_type data_file_type efs_type log_file_type misc_rw_file_type security_file_type socket_file_type 
#                                      -appdomain_no_read_file -appdomain_no_write_file -domain_no_read_file -domain_no_write_file -domain_no_read_knoxfile -domain_no_write_knoxfile }:file_class_set create_file_perms;
# IME ISSUE
allow newAttr91 newAttr16:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 204
allow ime_app newAttr17:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 206

# executable files
#neverallow Google CTS-android-5.0.2_r1 :allow { system_domain device_domain trusted_app_domain } { system_file exec_type library_file_type -domain_no_read_file } : dir r_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 :allow { system_domain device_domain trusted_app_domain } { system_file exec_type library_file_type -domain_no_read_file } : { chr_file file } rx_file_perms;
#neverallow Google CTS-android-5.0.2_r1 :allow { system_domain device_domain trusted_app_domain } { system_file exec_type library_file_type -domain_no_read_file } : { blk_file lnk_file sock_file fifo_file } { r_file_perms execute execmod };
allow { system_domain device_domain trusted_app_domain } newAttr88 : dir { open getattr read search ioctl };
allow { system_domain device_domain trusted_app_domain } newAttr88 : { chr_file file } { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow { system_domain device_domain trusted_app_domain } newAttr88 : { blk_file lnk_file sock_file fifo_file } { { getattr open read ioctl lock } execute execmod };
allow trusted_app_domain newAttr78 : dir { open getattr read search ioctl };
allow trusted_app_domain newAttr78 : { chr_file file } { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow trusted_app_domain newAttr78 : { blk_file lnk_file sock_file fifo_file } { { getattr open read ioctl lock } execute execmod };


########## etc_type ##########

#line 220
allow system_domain property_socket:sock_file write;
#line 220
allow system_domain init:unix_stream_socket connectto;
#line 220

allow { system_domain device_domain trusted_app_domain } node_type:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
allow { system_domain device_domain trusted_app_domain } netif_type:netif *;
allow { system_domain device_domain trusted_app_domain } port_type:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
#neverallow Google CTS-android-5.0.2_r1 : allow { system_domain device_domain { system_app syscope_app policyloader_app radio bluetooth mfc mfm mfs mfw } } newAttr79:property_service set;
allow { system_domain device_domain system_app s_system_app radio bluetooth } newAttr79:property_service set;

########## known issue. ##########


## avc_log : AOSP/B2C
# avc:  denied  { write } for  pid=15761 comm="dumpsys" path="/mnt/shell/emulated/0/GORILLA_OUTPUT/dumpstate_app_201407071110_com_sec_android_inputmethod_error.log" dev="sdcardfs" ino=1573325 scontext=u:r:healthd:s0 tcontext=u:object_r:sdcard_internal:s0 tclass=file SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { write } for  pid=29803 comm="dumpsys" path="/mnt/shell/emulated/0/GORILLA_OUTPUT/dumpstate_app_201407071041_com_sec_android_app_together:external_error.log" dev="sdcardfs" ino=1573325 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sdcard_internal:s0 tclass=file SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { append } for  pid=24121 comm="dumpsys" path="/storage/emulated/legacy/ACT_LOGS/2014-07-18-07-08-17/act_bugreport_.txt" dev="sdcardfs" ino=522613 scontext=u:r:keystore:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N910A_4.4.4_A018

#line 1 "vendor/samsung/common/sepolicy/sec_common/tzdaemon.te"
#
# TZDaemon (Trustzone Daemon of Blowfish)
#
#TZDaemon is normal world daemon binary of Blowfish(Samsung Secure OS) TrustZone. 
#The purpose of TZDaemon is to receive requests from TEE Client Application and direct them to TZDev device driver in linux-kernel and forward request results in opposite direction. In android system, #init.rc run tzdaemon automatically and then system can use trusted application through tzdaemon. It works client applictation between trusted application. 
#TAADaemon is trusted component in the normal world that acts as a proxy to the remote server.
#- hyungsic.noh,Security R&D Group
#

############ aosp and sec_common #############
########## type and macro.
type tzdaemon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type tzdaemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 15

#line 15
# Allow the necessary permissions.
#line 15

#line 15
# Old domain may exec the file and transition to the new domain.
#line 15
allow init tzdaemon_exec:file { getattr open read execute };
#line 15
allow init tzdaemon:process transition;
#line 15
# New domain is entered by executing the file.
#line 15
allow tzdaemon tzdaemon_exec:file { entrypoint open read execute getattr };
#line 15
# New domain can send SIGCHLD to its caller.
#line 15
allow tzdaemon init:process sigchld;
#line 15
# Enable AT_SECURE, i.e. libc secure mode.
#line 15
dontaudit init tzdaemon:process noatsecure;
#line 15
# XXX dontaudit candidate but requires further study.
#line 15
allow init tzdaemon:process { siginh rlimitinh };
#line 15

#line 15
# Make the transition occur by default.
#line 15
type_transition init tzdaemon_exec:process tzdaemon;
#line 15

#line 15

#line 15
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 15
type tzdaemon_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69, newAttr90;
#line 15
type_transition tzdaemon tmpfs:file tzdaemon_tmpfs;
#line 15
allow tzdaemon tzdaemon_tmpfs:file { read write };
#line 15

#line 15



#line 17
typeattribute tzdaemon netdomain;
#line 17


# setprop

#line 20
allow tzdaemon property_socket:sock_file write;
#line 20
allow tzdaemon init:unix_stream_socket connectto;
#line 20


#to collect denials
#permissive tzdaemon;


########## self and domain_type
#allow tzdaemon self:capability sys_ptrace;
allow tzdaemon self:capability { ipc_lock dac_override };

########## fs_type
########## dev_type
# access /dev/tzdev
allow tzdaemon tz_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow tzdaemon tz_socket:sock_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow tzdaemon shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow tzdaemon socket_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow tzdaemon socket_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow tzdaemon system_data_file:dir { write add_name };
allow tzdaemon system_data_file:file { write lock create open };
allow tzdaemon system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow tzdaemon tee_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow tzdaemon tee_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow tzdaemon system_prop:property_service set;
# [sys.tzdaemon] : [Ready] 
allow tzdaemon tzdaemon_prop:property_service set;


########## known issue.

############ avc_log #############
# avc:  denied  { sys_ptrace } for  pid=15202 comm="tzdaemon" capability=19  scontext=u:r:tzdaemon:s0 tcontext=u:r:tzdaemon:s0 tclass=capability permissive=1 Enterprise Policy
# avc:  denied  { write } for  pid=15203 comm="tzdaemon" name="tzdaemon.pid" dev="mmcblk0p21" ino=391705 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1 Enterprise Policy
# avc:  denied  { open } for  pid=15203 comm="tzdaemon" path="/data/tee/run/tzdaemon.pid" dev="mmcblk0p21" ino=391705 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1 Enterprise Policy
# avc:  denied  { lock } for  pid=15203 comm="tzdaemon" path="/data/tee/run/tzdaemon.pid" dev="mmcblk0p21" ino=391705 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1 Enterprise Policy
# avc:  denied  { dac_override } for  pid=15203 comm="tzdaemon" capability=1  scontext=u:r:tzdaemon:s0 tcontext=u:r:tzdaemon:s0 tclass=capability permissive=1 Enterprise Policy
# avc:  denied  { read write } for  pid=15203 comm="tzdaemon" name="tzdev" dev="tmpfs" ino=1325 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1 Enterprise Policy
# avc:  denied  { open } for  pid=15203 comm="tzdaemon" path="/dev/tzdev" dev="tmpfs" ino=1325 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1 Enterprise Policy
# avc:  denied  { ipc_lock } for  pid=15203 comm="tzdaemon" capability=14  scontext=u:r:tzdaemon:s0 tcontext=u:r:tzdaemon:s0 tclass=capability permissive=1 Enterprise Policy
# avc:  denied  { ioctl } for  pid=15203 comm="tzdaemon" path="/dev/tzdev" dev="tmpfs" ino=1325 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1 Enterprise Policy
# avc:  denied  { execute } for  pid=15212 comm="tzdaemon" name="sh" dev="mmcblk0p18" ino=448 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1 Enterprise Policy
# avc:  denied  { read open } for  pid=15212 comm="tzdaemon" path="/system/bin/sh" dev="mmcblk0p18" ino=448 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1 Enterprise Policy
# avc:  denied  { execute_no_trans } for  pid=15212 comm="tzdaemon" path="/system/bin/sh" dev="mmcblk0p18" ino=448 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:shell_exec:s0 tclass=file permissive=1 Enterprise Policy
# avc:  denied  { execute_no_trans } for  pid=15212 comm="sh" path="/system/bin/toolbox" dev="mmcblk0p18" ino=462 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:system_file:s0 tclass=file permissive=1 Enterprise Policy
# avc:  denied  { write } for  pid=15212 comm="setprop" name="property_service" dev="tmpfs" ino=4291 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file permissive=1 Enterprise Policy
# avc:  denied  { connectto } for  pid=15212 comm="setprop" path="/dev/socket/property_service" scontext=u:r:tzdaemon:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket permissive=1 Enterprise Policy
# avc:  denied  { ioctl } for  pid=15210 comm="tzdaemon" path="/dev/tzdev" dev="tmpfs" ino=1325 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1 Enterprise Policy
# avc:  denied  { write } for  pid=2207 comm="tzdaemon" name="tz" dev="tmpfs" ino=9243 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:tz_socket:s0 tclass=sock_file permissive=1 SEPF_CARMEN2-EUR-OPEN_5.0.2_0009
# avc:  denied  { set } for property=sys.secureos.nwd_libs.version scontext=u:r:tzdaemon:s0 tcontext=u:object_r:system_prop:s0 tclass=property_service
# avc:  denied  { name_bind } for  pid=521 comm="taadaemon" src=5550 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:port:s0 tclass=tcp_socket permissive=1 SEPF_SM-A8000_5.1.1_0017
# avc:  denied  { node_bind } for  pid=521 comm="taadaemon" saddr=127.0.0.1 src=5550 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:node:s0 tclass=tcp_socket permissive=1 SEPF_SM-A8000_5.1.1_0017
# avc:  denied  { write } for  pid=538 comm="taadaemon" name="fwmarkd" dev="tmpfs" ino=9257 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:fwmarkd_socket:s0 tclass=sock_file permissive=1 SEPF_SM-A8000_5.1.1_0017
# avc:  denied  { name_connect } for  pid=538 comm="taadaemon" dest=28880 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:port:s0 tclass=tcp_socket permissive=1 SEPF_SM-A8000_5.1.1_0017
# avc:  denied  { write } for  pid=559 comm="taadaemon" name="socket" dev="tmpfs" ino=8338 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:socket_device:s0 tclass=dir permissive=1 SEPF_SM-A8000_5.1.1_0019
# avc:  denied  { add_name } for  pid=559 comm="taadaemon" name="taa" scontext=u:r:tzdaemon:s0 tcontext=u:object_r:socket_device:s0 tclass=dir permissive=1 SEPF_SM-A8000_5.1.1_0019
# avc:  denied  { create } for  pid=559 comm="taadaemon" name="taa" scontext=u:r:tzdaemon:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file permissive=1 SEPF_SM-A8000_5.1.1_0019
# avc:  denied  { setattr } for  pid=559 comm="taadaemon" name="taa" dev="tmpfs" ino=10587 scontext=u:r:tzdaemon:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file permissive=1 SEPF_SM-A8000_5.1.1_0019


#line 1 "vendor/samsung/common/sepolicy/sec_common/undefined_service.te"
#
# undefined_service
#

############ aosp and sec_common #############
########## type and macro.
type undefined_service, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;

#permissive undefined_service;
typeattribute undefined_service trusteddomain;
typeattribute undefined_service system_domain;
typeattribute undefined_service mlstrustedsubject;

allow init undefined_service:process dyntransition;

########## self and domain_type
allow undefined_service newAttr33:dir { open getattr read search ioctl };
allow undefined_service newAttr33:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };
allow undefined_service self:capability dac_override;

#umount
allow undefined_service self:capability sys_admin;

########## fs_type
allow undefined_service tmpfs:chr_file write;

########## dev_type
########## file_type
########## etc_type
########## known issue.

## service umount_service
allow undefined_service container_app_data_backend:dir { open getattr read search ioctl };
allow undefined_service bbccontainer_app_data_backend:dir { open getattr read search ioctl };
#line 34
allow undefined_service labeledfs:filesystem unmount;
allow undefined_service block_device:blk_file getattr;


## service umount_cpdump
allow undefined_service block_device:dir { open getattr read search ioctl };
allow undefined_service efsblk_device:blk_file getattr;
allow undefined_service systemblk_device:blk_file getattr;
allow undefined_service userdatablk_device:blk_file getattr;
allow undefined_service tmpfs:filesystem unmount;

############ avc_log #############
# avc:  denied  { getattr } for  pid=17794 comm="umount" path="/data/knox/sdcard" dev="sda21" ino=720901 scontext=u:r:undefined_service:s0 tcontext=u:object_r:container_app_data_backend:s0 tclass=dir permissive=1
# avc:  denied  { unmount } for  pid=3642 comm="umount" scontext=u:r:undefined_service:s0 tcontext=u:object_r:tmpfs:s0 tclass=filesystem permissive=1
# avc:  denied  { search } for  pid=3792 comm="umount" name="block" dev="tmpfs" ino=9083 scontext=u:r:undefined_service:s0 tcontext=u:object_r:block_device:s0 tclass=dir permissive=0
# avc:  denied  { search } for  pid=3792 comm="umount" name="knox" dev="sda21" ino=720899 scontext=u:r:undefined_service:s0 tcontext=u:object_r:container_app_data_backend:s0 tclass=dir permissive=0
# after umount searches direcetory, it fails and then tries to get the sys_admin capability.
# avc:  denied  { sys_admin } for  pid=3792 comm="umount" capability=21  scontext=u:r:undefined_service:s0 tcontext=u:r:undefined_service:s0 tclass=capability permissive=0
# avc:  denied  { getattr } for  pid=3868 comm="umount" path="/dev/block/sda21" dev="tmpfs" ino=4438 scontext=u:r:undefined_service:s0 tcontext=u:object_r:userdatablk_device:s0 tclass=blk_file permissive=1
# avc:  denied  { getattr } for  pid=7821 comm="umount" path="/dev/block/vold/179:65" dev="tmpfs" ino=11460 scontext=u:r:undefined_service:s0 tcontext=u:object_r:block_device:s0 tclass=blk_file permissive=0


#line 1 "vendor/samsung/common/sepolicy/sec_common/vcsFPService.te"
#
# vcsFPService
#

############ aosp and sec_common #############
########## type and macro.
type vcsFPService, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type vcsFPService_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute vcsFPService trusteddomain;
typeattribute vcsFPService system_domain;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init vcsFPService_exec:file { getattr open read execute };
#line 13
allow init vcsFPService:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow vcsFPService vcsFPService_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow vcsFPService init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init vcsFPService:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init vcsFPService:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init vcsFPService_exec:process vcsFPService;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type vcsFPService_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 13
type_transition vcsFPService tmpfs:file vcsFPService_tmpfs;
#line 13
allow vcsFPService vcsFPService_tmpfs:file { read write };
#line 13

#line 13


#line 14
allow vcsFPService property_socket:sock_file write;
#line 14
allow vcsFPService init:unix_stream_socket connectto;
#line 14

########## self and domain_type
allow vcsFPService container_app:fd use;
allow vcsFPService mobicoredaemon:unix_stream_socket connectto;
allow vcsFPService self:capability { kill dac_override };
allow vcsFPService system_app:process signull;
allow vcsFPService s_system_app:process signull;
#line 20

########## fs_type
allow vcsFPService firmware:dir { open getattr read search ioctl };
allow vcsFPService firmware:file { getattr open read ioctl lock };
allow vcsFPService sdcard_external:file { { getattr open read ioctl lock } { open append write } } ;
allow vcsFPService dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

########## dev_type
allow vcsFPService console_device:chr_file { open append write };
allow vcsFPService input_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vcsFPService kmsg_device:chr_file { getattr open read ioctl lock };
allow vcsFPService mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vcsFPService tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vcsFPService uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vcsFPService validity_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow vcsFPService validity_device:{ file fifo_file chr_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vcsFPService vfsspi_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow vcsFPService shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow vcsFPService system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vcsFPService system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vcsFPService system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vcsFPService system_file:file { getattr execute execute_no_trans };

########## etc_type
########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow vcsFPService qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow vcsFPService s5p_smem_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
#avc:  denied  { write } for  pid=328 comm="vcsFPService" name="log" dev="mmcblk0p26" ino=523269 scontext=u:r:vcsFPService:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir SEPF_SM-G900F_5.0_0001
#avc:  denied  { create } for  pid=358 comm="vcsFPService" name="validity" scontext=u:r:vcsFPService:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir SEPF_SM-G900F_5.0_0001

#line 1 "vendor/samsung/common/sepolicy/sec_common/vpnclientd.te"
#
# vpnclientd
# 
# Provides following functions for Insidesecure vpn
# - Handle raw socket for IPsec turnneling
# - Manage iptable to redirect packet in order to encryt it
# Only ipsecservice needs to communicate with vpnclientd. No other apps.
# Contact: van_thang.ng, mk58.kim, myeongjin.oh
#

############ aosp and sec_common #############
########## type and macro.
# create the vpnclientd domain
type vpnclientd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
# Introduce the vpnclientd executable
type vpnclientd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Inherit settings from init_daemon_domain

#line 19

#line 19
# Allow the necessary permissions.
#line 19

#line 19
# Old domain may exec the file and transition to the new domain.
#line 19
allow init vpnclientd_exec:file { getattr open read execute };
#line 19
allow init vpnclientd:process transition;
#line 19
# New domain is entered by executing the file.
#line 19
allow vpnclientd vpnclientd_exec:file { entrypoint open read execute getattr };
#line 19
# New domain can send SIGCHLD to its caller.
#line 19
allow vpnclientd init:process sigchld;
#line 19
# Enable AT_SECURE, i.e. libc secure mode.
#line 19
dontaudit init vpnclientd:process noatsecure;
#line 19
# XXX dontaudit candidate but requires further study.
#line 19
allow init vpnclientd:process { siginh rlimitinh };
#line 19

#line 19
# Make the transition occur by default.
#line 19
type_transition init vpnclientd_exec:process vpnclientd;
#line 19

#line 19

#line 19
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 19
type vpnclientd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 19
type_transition vpnclientd tmpfs:file vpnclientd_tmpfs;
#line 19
allow vpnclientd vpnclientd_tmpfs:file { read write };
#line 19

#line 19

#typeattribute vpnclientd mlstrustedsubject;

# Inherit settings from net_domain

#line 23
typeattribute vpnclientd netdomain;
#line 23


# vpnclientd needs to communicate with the netd daemon

#line 26
allow vpnclientd netd_socket:sock_file write;
#line 26
allow vpnclientd netd:unix_stream_socket connectto;
#line 26


# Allow system application to communicate with the /dev/socket/vpnclientd
# UNIX domain socket. IPsecService is a system app.

#line 30
allow system_app vpnclientd_socket:sock_file write;
allow s_system_app vpnclientd_socket:sock_file write;
#line 30
allow system_app vpnclientd:unix_stream_socket connectto;
allow s_system_app vpnclientd:unix_stream_socket connectto;
#line 30


########## self and domain_type
# vpnclientd needs net_admin and net_raw capabilities for
# sending ESP packets and manipulating routing tables
allow vpnclientd self:capability { net_admin net_raw };

# Route manipulation
allow vpnclientd self:netlink_route_socket nlmsg_write;

# Allow vpnclientd to manipulate TUN/TAP devices
allow vpnclientd self:tun_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

########## fs_type
# vpnclientd needs to communicate with the kernel security
# module via /proc/spd
allow vpnclientd proc_spd:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
# Allow vpnclientd to manipulate TUN/TAP devices
allow vpnclientd tun_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
# vpnclientd needs permissions to manipulate files and directories
# under the private /data/misc/vpnclientd directory
allow vpnclientd vpnclientd_data_file:file { read create getattr append open };
allow vpnclientd vpnclientd_data_file:dir { search write add_name };

########## etc_type
# Bind rawip socket for ESP traffic
allow vpnclientd node_type:{ rawip_socket } node_bind;

########## known issue.
#rild socket connection and denials

#line 64
allow vpnclientd rild_socket:sock_file write;
#line 64
allow vpnclientd rild:unix_stream_socket connectto;
#line 64

allow vpnclientd rild:tun_socket relabelfrom;
allow vpnclientd sysfs_wake_lock:file write;


############ avc_log #############
# avc:  denied  { connectto } for  pid=25197 comm="vpnclientd" path=004D756C7469636C69656E74 scontext=u:r:vpnclientd:s0 tcontext=u:r:rild:s0 tclass=unix_stream_socket permissive=0
# avc:  denied  { relabelfrom } for  pid=30721 comm="vpnclientd" scontext=u:r:vpnclientd:s0 tcontext=u:r:rild:s0 tclass=tun_socket permissive=1
# avc:  denied  { write } for  pid=22537 comm="vpnclientd" name="wake_lock" dev="sysfs" ino=103 scontext=u:r:vpnclientd:s0 tcontext=u:object_r:sysfs_wake_lock:s0 tclass=file permissive=1

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/adbd.te"
#Make adbd daemon permissive for userdebug or eng builds
allow adbd tombstone_data_file:dir getattr;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/adsprpcd.te"
# adsprpcd daemon
type adsprpcd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type adsprpcd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init adsprpcd_exec:file { getattr open read execute };
#line 6
allow init adsprpcd:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow adsprpcd adsprpcd_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow adsprpcd init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init adsprpcd:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init adsprpcd:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init adsprpcd_exec:process adsprpcd;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type adsprpcd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition adsprpcd tmpfs:file adsprpcd_tmpfs;
#line 6
allow adsprpcd adsprpcd_tmpfs:file { read write };
#line 6

#line 6


#============= adsprpcd ==============
allow adsprpcd qdsp_device:chr_file { read ioctl open };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/app.te"
# allow application to access cnd domain and socket

#line 2
allow appdomain cnd_socket:sock_file write;
#line 2
allow appdomain cnd:unix_stream_socket connectto;
#line 2


# allow application to access dpmd domain and socket

#line 5
allow appdomain dpmwrapper_socket:sock_file write;
#line 5
allow appdomain dpmd:unix_stream_socket connectto;
#line 5



#line 7
allow appdomain qlogd_socket:sock_file write;
#line 7
allow appdomain qlogd:unix_stream_socket connectto;
#line 7

#Allow all apps to open and send ioctl to qdsp device
allow appdomain qdsp_device:chr_file { getattr open read ioctl lock };

# access to perflock
allow appdomain mpctl_socket:dir { open getattr read search ioctl };

#line 13
allow appdomain mpctl_socket:sock_file write;
#line 13
allow appdomain perfd:unix_dgram_socket sendto;
#line 13


#line 14
allow appdomain mpctl_socket:sock_file write;
#line 14
allow appdomain perfd:unix_stream_socket connectto;
#line 14

# test apps needs to communicate with imscm
# using binder call
#line 19

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/atfwd.te"
type atfwd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type atfwd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init atfwd_exec:file { getattr open read execute };
#line 5
allow init atfwd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow atfwd atfwd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow atfwd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init atfwd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init atfwd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init atfwd_exec:process atfwd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type atfwd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition atfwd tmpfs:file atfwd_tmpfs;
#line 5
allow atfwd atfwd_tmpfs:file { read write };
#line 5

#line 5


# Creates/Talks to qmuxd via the qmux_radio socket.

#line 8
allow atfwd qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 8

#line 8
allow atfwd qmuxd_socket:sock_file write;
#line 8
allow atfwd qmuxd:unix_stream_socket connectto;
#line 8

#line 8
allow atfwd qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 8
;

#Allow IPC binding with ServiceManager & System apps

#line 11
# Call the servicemanager and transfer references to it.
#line 11
allow atfwd servicemanager:binder { call transfer };
#line 11
# servicemanager performs getpidcon on clients.
#line 11
allow servicemanager atfwd:dir search;
#line 11
allow servicemanager atfwd:file { read open };
#line 11
allow servicemanager atfwd:process getattr;
#line 11
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 11
# all domains in domain.te.
#line 11
;

#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow atfwd system_app:binder { call transfer };
allow atfwd s_system_app:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow system_app atfwd:binder transfer;
allow s_system_app atfwd:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow atfwd system_app:fd use;
allow atfwd s_system_app:fd use;
#line 12
;

#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow atfwd servicemanager:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow servicemanager atfwd:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow atfwd servicemanager:fd use;
#line 13
;

#line 14
allow atfwd sysfs_ssr:dir { open getattr read search ioctl };
#line 14
allow atfwd sysfs_ssr:{ file lnk_file } { getattr open read ioctl lock };
#line 14
;

allow atfwd self:udp_socket create;

#line 17
allow atfwd property_socket:sock_file write;
#line 17
allow atfwd init:unix_stream_socket connectto;
#line 17
;

allow atfwd radio_prop:property_service set;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/audiod.te"
# audio deamon
type audiod, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type audiod_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init audiod_exec:file { getattr open read execute };
#line 4
allow init audiod:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow audiod audiod_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow audiod init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init audiod:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init audiod:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init audiod_exec:process audiod;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type audiod_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition audiod tmpfs:file audiod_tmpfs;
#line 4
allow audiod audiod_tmpfs:file { read write };
#line 4

#line 4

allow audiod proc_audiod:file { getattr open read ioctl lock };
allow audiod audio_device:chr_file { { getattr open read ioctl lock } { open append write } };

#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow audiod servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager audiod:dir search;
#line 7
allow servicemanager audiod:file { read open };
#line 7
allow servicemanager audiod:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow audiod mediaserver:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow mediaserver audiod:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow audiod mediaserver:fd use;
#line 8

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/bluetooth.te"
#Adding all bt related service to bt domains
type sapd, bluetoothdomain;
type sapd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init sapd_exec:file { getattr open read execute };
#line 4
allow init bluetooth:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow bluetooth sapd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow bluetooth init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init bluetooth:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init bluetooth:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init sapd_exec:process bluetooth;
#line 4


type dun-server, bluetoothdomain;
type dun-server_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 8
# Allow the necessary permissions.
#line 8

#line 8
# Old domain may exec the file and transition to the new domain.
#line 8
allow init dun-server_exec:file { getattr open read execute };
#line 8
allow init bluetooth:process transition;
#line 8
# New domain is entered by executing the file.
#line 8
allow bluetooth dun-server_exec:file { entrypoint open read execute getattr };
#line 8
# New domain can send SIGCHLD to its caller.
#line 8
allow bluetooth init:process sigchld;
#line 8
# Enable AT_SECURE, i.e. libc secure mode.
#line 8
dontaudit init bluetooth:process noatsecure;
#line 8
# XXX dontaudit candidate but requires further study.
#line 8
allow init bluetooth:process { siginh rlimitinh };
#line 8

#line 8
# Make the transition occur by default.
#line 8
type_transition init dun-server_exec:process bluetooth;
#line 8


type btsnoop, bluetoothdomain;
type btsnoop_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 12
# Allow the necessary permissions.
#line 12

#line 12
# Old domain may exec the file and transition to the new domain.
#line 12
allow init btsnoop_exec:file { getattr open read execute };
#line 12
allow init bluetooth:process transition;
#line 12
# New domain is entered by executing the file.
#line 12
allow bluetooth btsnoop_exec:file { entrypoint open read execute getattr };
#line 12
# New domain can send SIGCHLD to its caller.
#line 12
allow bluetooth init:process sigchld;
#line 12
# Enable AT_SECURE, i.e. libc secure mode.
#line 12
dontaudit init bluetooth:process noatsecure;
#line 12
# XXX dontaudit candidate but requires further study.
#line 12
allow init bluetooth:process { siginh rlimitinh };
#line 12

#line 12
# Make the transition occur by default.
#line 12
type_transition init btsnoop_exec:process bluetooth;
#line 12


#BT needes  read and write on smd device node
allow bluetooth smd_device:chr_file { { getattr open read ioctl lock } { open append write } };

allow bluetooth bluetooth_prop:property_service set;
allow bluetooth serial_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bluetooth sysfs:file { { getattr open read ioctl lock } { open append write } };

#BT Snoop logging
allow bluetooth self:tcp_socket { create setopt bind accept listen };
allow bluetooth port:tcp_socket name_bind;
allow bluetooth node:tcp_socket node_bind;

allow bluetooth uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bluetooth input_device:chr_file { open read write ioctl };

allow bluetooth persist_file:dir search;
allow bluetooth persist_file:file { { getattr open read ioctl lock } { open append write } };

#For bluetooth firmware
allow bluetooth bt_firmware_file:dir { open getattr read search ioctl };
allow bluetooth bt_firmware_file:file { getattr open read ioctl lock };

#dun-server requires interaction with net_domain socket

#line 37
typeattribute bluetooth netdomain;
#line 37
;

#dun-server requires binding with system_app and servicemanager

#line 40
# Call the servicemanager and transfer references to it.
#line 40
allow bluetooth servicemanager:binder { call transfer };
#line 40
# servicemanager performs getpidcon on clients.
#line 40
allow servicemanager bluetooth:dir search;
#line 40
allow servicemanager bluetooth:file { read open };
#line 40
allow servicemanager bluetooth:process getattr;
#line 40
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 40
# all domains in domain.te.
#line 40
;

#line 41
# Call the server domain and optionally transfer references to it.
#line 41
allow bluetooth system_app:binder { call transfer };
allow bluetooth s_system_app:binder { call transfer };
#line 41
# Allow the serverdomain to transfer references to the client on the reply.
#line 41
allow system_app bluetooth:binder transfer;
allow s_system_app bluetooth:binder transfer;
#line 41
# Receive and use open files from the server.
#line 41
allow bluetooth system_app:fd use;
allow bluetooth s_system_app:fd use;
#line 41
;

#line 42
# Call the server domain and optionally transfer references to it.
#line 42
allow bluetooth servicemanager:binder { call transfer };
#line 42
# Allow the serverdomain to transfer references to the client on the reply.
#line 42
allow servicemanager bluetooth:binder transfer;
#line 42
# Receive and use open files from the server.
#line 42
allow bluetooth servicemanager:fd use;
#line 42
;

#sapd requires interaction with qmux sockets

#line 45
allow bluetooth qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 45

#line 45
allow bluetooth qmuxd_socket:sock_file write;
#line 45
allow bluetooth qmuxd:unix_stream_socket connectto;
#line 45

#line 45
allow bluetooth qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 45
;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/bootanim.te"
allow bootanim shell_data_file:dir search;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/charger_monitor.te"
#integrated process
type charger_monitor, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type charger_monitor_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init charger_monitor_exec:file { getattr open read execute };
#line 6
allow init charger_monitor:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow charger_monitor charger_monitor_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow charger_monitor init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init charger_monitor:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init charger_monitor:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init charger_monitor_exec:process charger_monitor;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type charger_monitor_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition charger_monitor tmpfs:file charger_monitor_tmpfs;
#line 6
allow charger_monitor charger_monitor_tmpfs:file { read write };
#line 6

#line 6


#charger monitor will use uevent, visit sysfs and use the wake lock
allow charger_monitor self:netlink_kobject_uevent_socket { read create setopt bind };
allow charger_monitor sysfs:file { { getattr open read ioctl lock } { open append write } };
allow charger_monitor sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

allow charger_monitor sysfs_battery_supply:dir search;
allow charger_monitor sysfs_battery_supply:file { { getattr open read ioctl lock } { open append write } };
allow charger_monitor sysfs_usb_supply:dir search;
allow charger_monitor sysfs_usb_supply:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/cnd.te"
#permissive cnd;
type cnd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type cnd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Allow the domain to add entries to the directory.
#line 4
allow cnd socket_device:dir { { open getattr read search ioctl } add_name write };
#line 4
# Allow the domain to create the file.
#line 4
allow cnd cnd_socket:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 4
allow cnd cnd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition cnd socket_device:dir cnd_socket;
#line 4
type_transition cnd socket_device:{ file lnk_file sock_file fifo_file } cnd_socket;
#line 4
;

# cnd is started by init, type transit from init domain to cnd domain

#line 7

#line 7
# Allow the necessary permissions.
#line 7

#line 7
# Old domain may exec the file and transition to the new domain.
#line 7
allow init cnd_exec:file { getattr open read execute };
#line 7
allow init cnd:process transition;
#line 7
# New domain is entered by executing the file.
#line 7
allow cnd cnd_exec:file { entrypoint open read execute getattr };
#line 7
# New domain can send SIGCHLD to its caller.
#line 7
allow cnd init:process sigchld;
#line 7
# Enable AT_SECURE, i.e. libc secure mode.
#line 7
dontaudit init cnd:process noatsecure;
#line 7
# XXX dontaudit candidate but requires further study.
#line 7
allow init cnd:process { siginh rlimitinh };
#line 7

#line 7
# Make the transition occur by default.
#line 7
type_transition init cnd_exec:process cnd;
#line 7

#line 7

#line 7
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 7
type cnd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 7
type_transition cnd tmpfs:file cnd_tmpfs;
#line 7
allow cnd cnd_tmpfs:file { read write };
#line 7

#line 7

# associate netdomain as an attribute of cnd domain

#line 9
typeattribute cnd netdomain;
#line 9


allow cnd smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };

# allow cnd the following capability
allow cnd self:capability { setuid setgid dac_override net_raw chown fsetid net_admin sys_module };
#line 16
allow cnd self:capability2 block_suspend;

# socket used to communicate with kernel via the netlink syscall
allow cnd self:netlink_tcpdiag_socket { bind create write read nlmsg_read getopt };
#line 21
allow cnd self:netlink_route_socket { read bind create write nlmsg_read };
#line 23
allow cnd self:netlink_socket { create setopt getopt bind getattr write read };

# allow cnd to set system property
allow cnd system_prop:property_service set;
allow cnd property_socket:sock_file write;
allow cnd init:unix_stream_socket connectto;

# allow cnd to communicate with wlan driver
allow cnd kernel:system module_request;

# allow cnd to access cnd_data_file
allow cnd cnd_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cnd cnd_data_file:sock_file { unlink create setattr };
allow cnd cnd_data_file:dir { open read write add_name remove_name search };

# allow cnd to access qmux_radio_socket

#line 39
allow cnd qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 39

#line 39
allow cnd qmuxd_socket:sock_file write;
#line 39
allow cnd qmuxd:unix_stream_socket connectto;
#line 39

#line 39
allow cnd qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 39


# cnd access diag_device /dev/diag for logging
allow cnd diag_device:chr_file { read write open ioctl };

# allow cnd to access wpa_socket
allow cnd wpa:unix_dgram_socket sendto;
allow cnd wpa_socket:dir { write remove_name search add_name search };
allow cnd wpa_socket:sock_file { write create unlink setattr };
allow cnd wifi_data_file:dir search;

# allow cnd to obtain wakelock
allow cnd sysfs_wake_lock:file { open append };

# allow cnd to get appname and use inet socket

#line 54
allow cnd appdomain:dir { open getattr read search ioctl };
#line 54
allow cnd appdomain:file { getattr open read ioctl lock };
#line 54
allow cnd appdomain:fd use;
#line 54
allow cnd appdomain:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
#line 54


#line 55
allow cnd system_server:dir { open getattr read search ioctl };
#line 55
allow cnd system_server:file { getattr open read ioctl lock };
#line 55
allow cnd system_server:fd use;
#line 55
allow cnd system_server:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
#line 55


#line 56
allow cnd mediaserver:dir { open getattr read search ioctl };
#line 56
allow cnd mediaserver:file { getattr open read ioctl lock };
#line 56
allow cnd mediaserver:fd use;
#line 56
allow cnd mediaserver:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
#line 56


#line 57
allow cnd mtp:dir { open getattr read search ioctl };
#line 57
allow cnd mtp:file { getattr open read ioctl lock };
#line 57
allow cnd mtp:fd use;
#line 57
allow cnd mtp:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
#line 57


# allow cnd to perform socket operation on itself
allow cnd self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# allow cnd to access ipa_dev
allow cnd ipa_dev:chr_file { getattr open read ioctl lock };

# allow access to nims
allow cnd socket_device:dir remove_name;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/device.te"
#Define the logging device type
type diag_device, dev_type, newAttr26, newAttr27, newAttr29, newAttr30, newAttr31, newAttr69;
type smem_log_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define the hsic device
type hsic_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define the mhi device
type mhi_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#device type for smd device nodes, ie /dev/smd*
type smd_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#device type for rmnet device nodes, ie /dev/rmnet_ctrl*
type rmnet_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define thermal-engine devices
type thermal_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define vm_bms devices
type vm_bms_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type battery_data_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Add qdsp_device type
type qdsp_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
#Define hvdcp/quickcharge device
type hvdcp_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define mpdecision device
type device_latency, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define rct device type for time daemon
type rtc_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Added for fm_radio device
type fm_radio_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Add for storage pertitions for EFS partitions
type modem_efs_partition_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define device for partition links
type ssd_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type rpmb_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
##SEC removed dup type, type sg_device, dev_type;

#ESOC device
type esoc_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#SSR device
type ssr_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Ramdump device
type ramdump_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Kickstart bridge devices
type ksbridgehsic_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#EFS sync bridge devices
type efsbridgehsic_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#EFS sync block devices
type efs_boot_dev, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#MBA debug image partition
type mba_debug_dev, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Misc partition
type misc_partition, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Bootselect partition
type bootselect_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#define usb_uicc_device for usb_uicc daemon
type usb_uicc_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

# Define IPA devices
type ipa_dev, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

type wcnss_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

type mmc_block_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

# Define QDSS devices
type qdss_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define Gadget serial device
type gadget_serial_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#energy-awareness device
##SEC removed dup type, type pta_device, dev_type;

#Added for hbtp
type bu21150_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type hbtp_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#added for voice device
type voice_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define system health monitor devices
type system_health_monitor_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

#Define usf device
# SEC removed : type usf_device, dev_type;

#Define seemplog device
type seemplog_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/dhcp.te"

#line 1
allow dhcp cnd_socket:sock_file write;
#line 1
allow dhcp cnd:unix_stream_socket connectto;
#line 1

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/diag.te"
type diag, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type diag_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
#line 28

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/dnsmasq.te"
# allow dnsmasq access to netd fifo_file
allow dnsmasq netd:fifo_file { getattr };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/domain.te"
## SEC CHANGED;
allow newAttr50 diag_device:chr_file { { getattr open read ioctl lock } { open append write } };


#line 4
allow domain sysfs_socinfo:dir { open getattr read search ioctl };
#line 4
allow domain sysfs_socinfo:{ file lnk_file } { getattr open read ioctl lock };
#line 4
;

#line 5
allow domain sysfs_esoc:dir { open getattr read search ioctl };
#line 5
allow domain sysfs_esoc:{ file lnk_file } { getattr open read ioctl lock };
#line 5
;

#line 6
allow domain sysfs_ssr:dir { open getattr read search ioctl };
#line 6
allow domain sysfs_ssr:{ file lnk_file } { getattr open read ioctl lock };
#line 6
;

#all apps and services allowed access to seempdw_socket
#TODO: Investigate if needs to be restricted to apps only domains

#line 10
allow domain seempdw_socket:sock_file write;
#line 10
allow domain seempd:unix_dgram_socket sendto;
#line 10

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/dpmd.te"
#dpmd as domain
type dpmd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type dpmd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Allow the domain to add entries to the directory.
#line 4
allow dpmd socket_device:dir { { open getattr read search ioctl } add_name write };
#line 4
# Allow the domain to create the file.
#line 4
allow dpmd dpmwrapper_socket:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 4
allow dpmd dpmwrapper_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition dpmd socket_device:dir dpmwrapper_socket;
#line 4
type_transition dpmd socket_device:{ file lnk_file sock_file fifo_file } dpmwrapper_socket;
#line 4
;

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init dpmd_exec:file { getattr open read execute };
#line 5
allow init dpmd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow dpmd dpmd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow dpmd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init dpmd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init dpmd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init dpmd_exec:process dpmd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type dpmd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition dpmd tmpfs:file dpmd_tmpfs;
#line 5
allow dpmd dpmd_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute dpmd netdomain;
#line 6

allow dpmd dpmd_exec:file execute_no_trans;

#allow dpmd to access dpm_data_file
allow dpmd dpmd_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow dpmd dpmd_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

#allow dpmd to access qmux radio socket

#line 14
allow dpmd qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 14

#line 14
allow dpmd qmuxd_socket:sock_file write;
#line 14
allow dpmd qmuxd:unix_stream_socket connectto;
#line 14

#line 14
allow dpmd qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 14
;

#self capability
allow dpmd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };
allow dpmd self:capability { setuid setgid dac_override net_raw chown fsetid net_admin sys_module };

#socket, self
allow dpmd smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };

#line 22
allow dpmd property_socket:sock_file write;
#line 22
allow dpmd init:unix_stream_socket connectto;
#line 22

allow dpmd self:capability2 block_suspend;
allow dpmd system_prop:property_service set;
allow dpmd ctl_default_prop:property_service set;

#misc.
allow dpmd shell_exec:file { read execute open execute_no_trans };
allow dpmd system_file:file execute_no_trans;

#kernel
allow dpmd kernel:system module_request;

#appdomain
allow dpmd appdomain:fd use;
allow dpmd appdomain:tcp_socket { read write getopt getattr };

#permission to unlink dpmwrapper socket
allow dpmd socket_device:dir remove_name;

# allow dpmd to communicate with system_server
allow dpmd system_server:tcp_socket { write getattr shutdown getopt read bind setopt };

#allow dpmd to create socket
allow dpmd self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow dpmd self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

#allow dpmd to access /proc/<pid>/net
allow dpmd domain:dir { open getattr read search ioctl };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/drmserver.te"
#Address denial logs for drm server accessing firmware file
allow drmserver firmware_file:file { read getattr open };
allow drmserver firmware_file:dir { open getattr read search ioctl };

#Address denial logs for drm server accessing qseecom driver
allow drmserver tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/dtsconfigurator.te"
type dtsconfigurator, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type dtsconfigurator_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init dtsconfigurator_exec:file { getattr open read execute };
#line 5
allow init dtsconfigurator:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow dtsconfigurator dtsconfigurator_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow dtsconfigurator init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init dtsconfigurator:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init dtsconfigurator:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init dtsconfigurator_exec:process dtsconfigurator;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type dtsconfigurator_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition dtsconfigurator tmpfs:file dtsconfigurator_tmpfs;
#line 5
allow dtsconfigurator dtsconfigurator_tmpfs:file { read write };
#line 5

#line 5


allow dtsconfigurator audio_device:dir { open getattr read search ioctl };
allow dtsconfigurator audio_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/dtseagleservice.te"
type dtseagleservice, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type dtseagleservice_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#Allow for transition from init domain to dtseagleservice

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init dtseagleservice_exec:file { getattr open read execute };
#line 5
allow init dtseagleservice:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow dtseagleservice dtseagleservice_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow dtseagleservice init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init dtseagleservice:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init dtseagleservice:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init dtseagleservice_exec:process dtseagleservice;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type dtseagleservice_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition dtseagleservice tmpfs:file dtseagleservice_tmpfs;
#line 5
allow dtseagleservice dtseagleservice_tmpfs:file { read write };
#line 5

#line 5


#Allow dtseagleservice to use Binder IPC

#line 8
# Call the servicemanager and transfer references to it.
#line 8
allow dtseagleservice servicemanager:binder { call transfer };
#line 8
# servicemanager performs getpidcon on clients.
#line 8
allow servicemanager dtseagleservice:dir search;
#line 8
allow servicemanager dtseagleservice:file { read open };
#line 8
allow servicemanager dtseagleservice:process getattr;
#line 8
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 8
# all domains in domain.te.
#line 8


#Allow dtseagleservice to interact with apps

#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow dtseagleservice platform_app:binder { call transfer };
allow dtseagleservice s_platform_app:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow platform_app dtseagleservice:binder transfer;
allow s_platform_app dtseagleservice:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow dtseagleservice platform_app:fd use;
allow dtseagleservice s_platform_app:fd use;
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow dtseagleservice system_app:binder { call transfer };
allow dtseagleservice s_system_app:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow system_app dtseagleservice:binder transfer;
allow s_system_app dtseagleservice:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow dtseagleservice system_app:fd use;
allow dtseagleservice s_system_app:fd use;
#line 12


# Mark dtseagleservice as a Binder service domain

#line 15
typeattribute dtseagleservice binderservicedomain;
#line 15


#Allow dtseagleservice to be registered with service manager
allow dtseagleservice dtseagleservice_service:service_manager add;

#Allow access to audio drivers
allow dtseagleservice audio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow dtseagleservice audio_device:dir { open getattr read search ioctl };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/energyawareness.te"
type energyawareness, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type energyawareness_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init energyawareness_exec:file { getattr open read execute };
#line 5
allow init energyawareness:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow energyawareness energyawareness_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow energyawareness init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init energyawareness:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init energyawareness:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init energyawareness_exec:process energyawareness;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type energyawareness_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition energyawareness tmpfs:file energyawareness_tmpfs;
#line 5
allow energyawareness energyawareness_tmpfs:file { read write };
#line 5

#line 5


#allow access to pta and uio interface
allow energyawareness pta_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow energyawareness uio_device:chr_file { { getattr open read ioctl lock } { open append write } };

allow energyawareness self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow energyawareness self:capability net_admin;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/fidodaemon.te"
type fidodaemon, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type fidodaemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#Allow for transition from init domain to fidodaemon

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init fidodaemon_exec:file { getattr open read execute };
#line 5
allow init fidodaemon:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow fidodaemon fidodaemon_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow fidodaemon init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init fidodaemon:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init fidodaemon:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init fidodaemon_exec:process fidodaemon;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type fidodaemon_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition fidodaemon tmpfs:file fidodaemon_tmpfs;
#line 5
allow fidodaemon fidodaemon_tmpfs:file { read write };
#line 5

#line 5


#Allow fidodaemon to use Binder IPC

#line 8
# Call the servicemanager and transfer references to it.
#line 8
allow fidodaemon servicemanager:binder { call transfer };
#line 8
# servicemanager performs getpidcon on clients.
#line 8
allow servicemanager fidodaemon:dir search;
#line 8
allow servicemanager fidodaemon:file { read open };
#line 8
allow servicemanager fidodaemon:process getattr;
#line 8
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 8
# all domains in domain.te.
#line 8


#Allow apps to interact with fidodaemon

#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow fidodaemon platform_app:binder { call transfer };
allow fidodaemon s_platform_app:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow platform_app fidodaemon:binder transfer;
allow s_platform_app fidodaemon:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow fidodaemon platform_app:fd use;
allow fidodaemon s_platform_app:fd use;
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow fidodaemon system_app:binder { call transfer };
allow fidodaemon s_system_app:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow system_app fidodaemon:binder transfer;
allow s_system_app fidodaemon:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow fidodaemon system_app:fd use;
allow fidodaemon s_system_app:fd use;
#line 12


#Mark fidodaemon as a Binder service domain

#line 15
typeattribute fidodaemon binderservicedomain;
#line 15


#Allow fidodaemon to be registered with service manager
allow fidodaemon fidodaemon_service:service_manager add;

#Allow communication with init over property server

#line 21
allow fidodaemon property_socket:sock_file write;
#line 21
allow fidodaemon init:unix_stream_socket connectto;
#line 21
;

#Allow access to tee device
allow fidodaemon tee_device:chr_file { { getattr open read ioctl lock } { open append write } };

#Allow access to firmware
allow fidodaemon firmware_file:dir { open getattr read search ioctl };
allow fidodaemon firmware_file:file { getattr open read ioctl lock };


#SEC added
allow fidodaemon qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/file.te"
# Default type for anything under /firmware.
type firmware_file, fs_type, contextmount_type, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr81, newAttr76;

#Define the qmux socket type
type qmuxd_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

#Define the pps socket type
type pps_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

# Define cnd socket and data file type
type cnd_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type cnd_data_file, file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

# Define dpmd data file type
type dpmd_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type dpmwrapper_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type dpmd_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;

#Define the timeout for platform specific transports
type sysfs_hsic_modem_wait, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type sysfs_smd_open_timeout, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;

#Define the files written during the operation of netmgrd and qmuxd
type data_test_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type sysrq_trigger_proc, fs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr69;
# Persist file types
type persist_file, file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# SEC removed : type persist_data_file, file_type;
type persist_drm_file, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type data_qsee_file, file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type seemp_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;

type diag_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;

#file type for restricting proc read by audiod
type proc_audiod, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;

#file type for irqbalance socket
type msm_irqbalance_socket, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

# Sensor file types
type sensors_socket, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type sensors_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type sensors_persist_file, file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

#type for thermal-engine
type sysfs_thermal, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type thermal_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
#type for uart
type sysfs_msmuart_file, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;

# Storage RFS file types
type rfs_data_file, file_type, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type rfs_system_file, file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type rfs_shared_hlos_file, file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

#mm-pp-daemon file type for sysfs access
type sysfs_leds, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;

#Define the files written during the operation of mm-pp-daemon
type data_ad_calib_cfg, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;

#SurfaceFlinger file type for sysfs access
type sysfs_graphics, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;

# USB/battery power supply type for hvdcp/quickcharge
type sysfs_usb_supply, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type sysfs_battery_supply, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr81, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;

#Define the files written during the operation of mpdecision
type sysfs_mpdecision, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type sysfs_rqstats, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type sysfs_cpu_online, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type mpctl_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type mpctl_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;

#mm-qcamera-daemon socket
type camera_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

#Socket node needed by ims_data daemon
type ims_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

#location file types
type location_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr24, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type location_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type location_app_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr24, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;

#File types required by mdm-helper
type sysfs_esoc, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type sysfs_ssr, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type sysfs_ssr_toggle, sysfs_type, file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr81, newAttr85, newAttr69;
type sysfs_hsic, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type sysfs_hsic_host_rdy, sysfs_type, file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr81, newAttr85, newAttr69;

# Files accessed by qcom-system-daemon
type sysfs_socinfo, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;

#Define the sysfs files for usb_uicc_daemon
type sysfs_usb_uicc, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr81, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;

type qlogd_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type qlogd_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#Defines the files (configs, dumps, etc) used by display processes
type display_misc_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
typealias display_misc_file alias display_config;

# IPA file types
type ipacm_socket, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type ipacm_data_file, file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;

#Define the files written during the operation of mmi
type mmi_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;

#bluetooth firmware file types
type bt_firmware_file, fs_type, contextmount_type, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr81, newAttr76;

#needed by vold
type proc_dirty_ratio, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;

# hbtp config file
type hbtp_cfg_file, file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type hbtp_log_file, file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

#Define the files written during the operation of usf
type usf_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
type persist_usf_file, file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

# dts notifier files
type dts_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;

#seemp socket
type seempdw_socket, file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;# Policies for hbtp (host based touch processing)
#line 2 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/hbtp.te"
type hbtp, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type hbtp_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init hbtp_exec:file { getattr open read execute };
#line 5
allow init hbtp:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow hbtp hbtp_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow hbtp init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init hbtp:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init hbtp:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init hbtp_exec:process hbtp;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type hbtp_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition hbtp tmpfs:file hbtp_tmpfs;
#line 5
allow hbtp hbtp_tmpfs:file { read write };
#line 5

#line 5


# Allow access for /dev/hbtp_input and /dev/jdi-bu21150
allow hbtp hbtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow hbtp bu21150_device:chr_file { { getattr open read ioctl lock } { open append write } };

allow hbtp hbtp_cfg_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow hbtp hbtp_cfg_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow hbtp hbtp_log_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow hbtp hbtp_log_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow hbtp self:netlink_kobject_uevent_socket { create read setopt bind };


#line 19
# Call the servicemanager and transfer references to it.
#line 19
allow hbtp servicemanager:binder { call transfer };
#line 19
# servicemanager performs getpidcon on clients.
#line 19
allow servicemanager hbtp:dir search;
#line 19
allow servicemanager hbtp:file { read open };
#line 19
allow servicemanager hbtp:process getattr;
#line 19
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 19
# all domains in domain.te.
#line 19
;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/healthd.te"
allow healthd sysfs_battery_supply:dir search;
allow healthd sysfs_battery_supply:file { read open };
allow healthd sysfs_usb_supply:dir search;
allow healthd sysfs_usb_supply:file { read open };

#line 5
allow healthd sysfs_thermal:dir { open getattr read search ioctl };
#line 5
allow healthd sysfs_thermal:{ file lnk_file } { getattr open read ioctl lock };
#line 5
;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/hvdcp.te"
# HVDVP quickcharge
type hvdcp, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type hvdcp_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Make transition to its own HVDCP domain from init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init hvdcp_exec:file { getattr open read execute };
#line 6
allow init hvdcp:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow hvdcp hvdcp_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow hvdcp init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init hvdcp:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init hvdcp:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init hvdcp_exec:process hvdcp;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type hvdcp_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition hvdcp tmpfs:file hvdcp_tmpfs;
#line 6
allow hvdcp hvdcp_tmpfs:file { read write };
#line 6

#line 6


# Add rules for access permissions
allow hvdcp hvdcp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow hvdcp sysfs_battery_supply:file { { getattr open read ioctl lock } { open append write } };
allow hvdcp sysfs_battery_supply:dir { search };
allow hvdcp sysfs_usb_supply:file { { getattr open read ioctl lock } { open append write } };
allow hvdcp sysfs_usb_supply:dir { search };
allow hvdcp self:capability { setgid setuid };
allow hvdcp cgroup:dir { create add_name };
allow hvdcp self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/imscm.te"
#integrated sensor process
type imscm, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type imscm_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init imscm_exec:file { getattr open read execute };
#line 6
allow init imscm:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow imscm imscm_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow imscm init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init imscm:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init imscm:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init imscm_exec:process imscm;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type imscm_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition imscm tmpfs:file imscm_tmpfs;
#line 6
allow imscm imscm_tmpfs:file { read write };
#line 6

#line 6


#line 7
typeattribute imscm netdomain;
#line 7


# To make VT call

#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow imscm servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager imscm:dir search;
#line 10
allow servicemanager imscm:file { read open };
#line 10
allow servicemanager imscm:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


#Add connectionmanager service
allow imscm imscm_service:service_manager add;

#allow imscm ims_socket:sock_file write;
#allow imscm ims:unix_stream_socket connectto;

#line 17
allow imscm ims_socket:sock_file write;
#line 17
allow imscm ims:unix_stream_socket connectto;
#line 17

allow imscm self:capability net_raw;
#allow imscm untrusted_app:binder call;

# imscm needs to communicate with test app
# using binder call
#line 25


# imscm needs read/write access to devpts
allow imscm devpts:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/ims.te"
#integrated sensor process
type ims, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type ims_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init ims_exec:file { getattr open read execute };
#line 6
allow init ims:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow ims ims_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow ims init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init ims:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init ims:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init ims_exec:process ims;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type ims_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition ims tmpfs:file ims_tmpfs;
#line 6
allow ims ims_tmpfs:file { read write };
#line 6

#line 6


#line 7
typeattribute ims netdomain;
#line 7


# Talk to qmuxd

#line 10
allow ims qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 10

#line 10
allow ims qmuxd_socket:sock_file write;
#line 10
allow ims qmuxd:unix_stream_socket connectto;
#line 10

#line 10
allow ims qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 10


# To make VT call

#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow ims servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager ims:dir search;
#line 13
allow servicemanager ims:file { read open };
#line 13
allow servicemanager ims:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13


# Bring up IMSPDM
allow ims kernel:system module_request;

allow ims self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow ims self:capability { net_admin net_raw };

# Use generic netlink socket
allow ims self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# To run NDC command
allow ims shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ims system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# IMS route installation
allow ims wcnss_service_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Talk to netd via netd_socket

#line 32
allow ims netd_socket:sock_file write;
#line 32
allow ims netd:unix_stream_socket connectto;
#line 32


# Talk to qumuxd via ims_socket

#line 35
allow ims ims_socket:sock_file write;
#line 35
allow ims qmuxd:unix_stream_socket connectto;
#line 35


# Talk to init via property_socket

#line 38
allow ims property_socket:sock_file write;
#line 38
allow ims init:unix_stream_socket connectto;
#line 38


#Add connectionmanager service
allow ims imscm_service:service_manager add;

# Set property to start imsdata_daemon and ims_rtp_daemon
allow ims qcom_ims_prop:property_service set;

# permissions needed for IMS to connect and interact with WPA supplicant
allow ims wpa:unix_dgram_socket sendto;
allow ims wpa_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ims wpa_socket:dir { open search write add_name remove_name };
allow ims wpa_socket:sock_file { write create unlink setattr };
allow ims wifi_data_file:dir { open getattr read search ioctl };

# permissions for communication with CNE in LBO use case

#line 54
allow ims cnd_socket:sock_file write;
#line 54
allow ims cnd:unix_stream_socket connectto;
#line 54


#Communication with voice_svc device for audio on APP
allow ims voice_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/init_shell.te"
#for accessing fmradio device node
allow init_shell fm_radio_device:chr_file { open read ioctl };
# for insmod of iris ko  , this is needed .
allow init_shell self:capability sys_module;


#for  property starting with hw
allow init_shell system_prop:property_service set ;

#for access to set BT property
allow init_shell bluetooth_prop:property_service set;

#most of the default properties are set by init_shell
#SEC removed. neverallow Google CTS-android-5.0.2_r1 : allow init_shell  default_prop:property_service set;

allow init_shell shell_exec:file execute_no_trans;

#Needed in order to set properties while going in/out of debug mode.
allow init_shell ctl_default_prop:property_service set;

allow init_shell efs_boot_dev:blk_file { getattr open read ioctl lock };

#perfd
allow init_shell ctl_default_prop:property_service set;

allow init_shell ctl_rildaemon_prop:property_service set;

#for access to UICC property
allow init_shell uicc_prop:property_service set;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/init.te"
# Adding allow rule for search on /fuse
allow init fuse:dir search;
allow init self:capability sys_module;
allow init fuse:dir mounton;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/installd.te"
allow installd location_app_data_file:dir { relabelto { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } };
allow installd location_app_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/ipacm.te"
# General definitions
type ipacm, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type ipacm-diag, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type ipacm_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
type ipacm-diag_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init ipacm_exec:file { getattr open read execute };
#line 6
allow init ipacm:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow ipacm ipacm_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow ipacm init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init ipacm:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init ipacm:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init ipacm_exec:process ipacm;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type ipacm_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition ipacm tmpfs:file ipacm_tmpfs;
#line 6
allow ipacm ipacm_tmpfs:file { read write };
#line 6

#line 6


#line 7

#line 7
# Allow the necessary permissions.
#line 7

#line 7
# Old domain may exec the file and transition to the new domain.
#line 7
allow init ipacm-diag_exec:file { getattr open read execute };
#line 7
allow init ipacm-diag:process transition;
#line 7
# New domain is entered by executing the file.
#line 7
allow ipacm-diag ipacm-diag_exec:file { entrypoint open read execute getattr };
#line 7
# New domain can send SIGCHLD to its caller.
#line 7
allow ipacm-diag init:process sigchld;
#line 7
# Enable AT_SECURE, i.e. libc secure mode.
#line 7
dontaudit init ipacm-diag:process noatsecure;
#line 7
# XXX dontaudit candidate but requires further study.
#line 7
allow init ipacm-diag:process { siginh rlimitinh };
#line 7

#line 7
# Make the transition occur by default.
#line 7
type_transition init ipacm-diag_exec:process ipacm-diag;
#line 7

#line 7

#line 7
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 7
type ipacm-diag_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 7
type_transition ipacm-diag tmpfs:file ipacm-diag_tmpfs;
#line 7
allow ipacm-diag ipacm-diag_tmpfs:file { read write };
#line 7

#line 7


# associate netdomain to use for accessing internet sockets

#line 10
typeattribute ipacm netdomain;
#line 10


# Allow using the logging file between ipacm and ipacm-diag

#line 13
allow ipacm ipacm_socket:sock_file write;
#line 13
allow ipacm ipacm-diag:unix_dgram_socket sendto;
#line 13


# Allow capabilities to perform network operations and interactions with network interfaces
allow ipacm kernel:system module_request;
allow ipacm ipacm:capability net_admin;

# Allow operations with /dev/ipa, /dev/wwan_ioctl and /dev/ipaNatTable
allow ipacm ipa_dev:chr_file { { getattr open read ioctl lock } { open append write } };

# Allow querying the network stack via IOCTLs
allow ipacm ipacm:udp_socket { create ioctl };

# Allow receiving NETLINK messages
allow ipacm ipacm:netlink_route_socket { create getopt setopt bind read };
allow ipacm ipacm:netlink_socket { create setopt bind getattr read write };

# Allow creating and modifying the PID file
allow ipacm ipacm_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ipacm ipacm_data_file:dir { open search write add_name remove_name };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/irsc_util.te"
type irsc_util, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type irsc_util_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init irsc_util_exec:file { getattr open read execute };
#line 3
allow init irsc_util:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow irsc_util irsc_util_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow irsc_util init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
dontaudit init irsc_util:process noatsecure;
#line 3
# XXX dontaudit candidate but requires further study.
#line 3
allow init irsc_util:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init irsc_util_exec:process irsc_util;
#line 3

#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type irsc_util_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition irsc_util tmpfs:file irsc_util_tmpfs;
#line 3
allow irsc_util irsc_util_tmpfs:file { read write };
#line 3

#line 3


#line 8


allow irsc_util irsc_util:socket { create ioctl };
allow irsc_util devpts:chr_file { read write getattr ioctl };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/kernel.te"
allow kernel block_device:blk_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/keystore.te"
# Allow keystore to operate using qseecom_device
allow keystore tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/location_app.te"
type location_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

#line 2
typeattribute location_app appdomain;
#line 2
# Label ashmem objects with our own unique type.
#line 2

#line 2
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 2
type location_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 2
type_transition location_app tmpfs:file location_app_tmpfs;
#line 2
allow location_app location_app_tmpfs:file { read write };
#line 2

#line 2
# Map with PROT_EXEC.
#line 2
allow location_app location_app_tmpfs:file execute;
#line 2


#line 3
# Call the servicemanager and transfer references to it.
#line 3
allow location_app servicemanager:binder { call transfer };
#line 3
# servicemanager performs getpidcon on clients.
#line 3
allow servicemanager location_app:dir search;
#line 3
allow servicemanager location_app:file { read open };
#line 3
allow servicemanager location_app:process getattr;
#line 3
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 3
# all domains in domain.te.
#line 3



#line 5
allow location_app qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 5

#line 5
allow location_app qmuxd_socket:sock_file write;
#line 5
allow location_app qmuxd:unix_stream_socket connectto;
#line 5

#line 5
allow location_app qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 5


#Permissions for JDWP
#line 11


allow location_app location_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow location_app location_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } ;
allow location_app location_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow location_app location_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow location_app self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow location_app system_app_data_file:dir { open getattr read search ioctl };
allow location_app anr_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow location_app anr_data_file:file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/location.te"
# location - Location daemon
type location, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type location_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init location_exec:file { getattr open read execute };
#line 5
allow init location:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow location location_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow location init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init location:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init location:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init location_exec:process location;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type location_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition location tmpfs:file location_tmpfs;
#line 5
allow location location_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute location netdomain;
#line 6


# Socket is created by the daemon, not by init, and under /data/gps,
# not under /dev/socket.
type_transition location location_data_file:sock_file location_socket;


#line 12
allow location qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 12

#line 12
allow location qmuxd_socket:sock_file write;
#line 12
allow location qmuxd:unix_stream_socket connectto;
#line 12

#line 12
allow location qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 12


#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow location servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager location:dir search;
#line 13
allow servicemanager location:file { read open };
#line 13
allow servicemanager location:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow location system_server:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow system_server location:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow location system_server:fd use;
#line 14


allow location location_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow location location_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow location location_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow location location_exec:file execute_no_trans;
allow location location_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow location self:capability { setuid setgid net_admin };
allow location self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow location sensors:unix_stream_socket connectto;
allow location sensors_device:chr_file { getattr open read ioctl lock };
allow location sensors_socket:sock_file { open append write };
allow location self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow location system_server:unix_stream_socket { read write };
allow location rfs_shared_hlos_file:dir { open getattr read search ioctl };
allow location rfs_shared_hlos_file:file { getattr open read ioctl lock };

dontaudit location domain:dir { open getattr read search ioctl };

#line 32
allow location netmgrd:dir { open getattr read search ioctl };
#line 32
allow location netmgrd:{ file lnk_file } { getattr open read ioctl lock };
#line 32

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/logd.te"
allow logd location_app:dir { open getattr read search ioctl };
allow logd location_app:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/mcStarter.te"
# mobicore daemon
##SEC removed: type mcStarter, domain;
typealias mobicoredaemon alias mcStarter;
type mcStarter_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
##SEC removed:init_daemon_domain(mcStarter)

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init mcStarter_exec:file { getattr open read execute };
#line 6
allow init mcStarter:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow mcStarter mcStarter_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow mcStarter init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init mcStarter:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init mcStarter:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init mcStarter_exec:process mcStarter;
#line 6


# Allow Mobicore to use qseecom services for loading the app
allow mcStarter tee_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Allow Mobicore to access the firmware files
allow mcStarter firmware_file:dir { open getattr read search ioctl };
allow mcStarter firmware_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/mdm_helper.te"
#Policy for mdm_helper
#mdm_helper - mdm_helper domain
type mdm_helper, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mdm_helper_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init mdm_helper_exec:file { getattr open read execute };
#line 5
allow init mdm_helper:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow mdm_helper mdm_helper_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow mdm_helper init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init mdm_helper:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init mdm_helper:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init mdm_helper_exec:process mdm_helper;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type mdm_helper_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition mdm_helper tmpfs:file mdm_helper_tmpfs;
#line 5
allow mdm_helper mdm_helper_tmpfs:file { read write };
#line 5

#line 5
;

#block_suspend capability is needed by kickstart(ks)
allow mdm_helper self:capability2 block_suspend;

#Needed to power on the peripheral
allow mdm_helper ssr_device:chr_file { open read };

#Needed to access the esoc device to control the mdm
allow mdm_helper esoc_device:chr_file { read write ioctl open };
allow mdm_helper esoc_device:dir { open search };

#Needed to detect presence of hsic bridge and to xfer images
allow mdm_helper ksbridgehsic_device:chr_file { read write open getattr ioctl };

#Needed to detect efs sync and for kickstart to run the efs sync server
allow mdm_helper efsbridgehsic_device:chr_file { read write open getattr ioctl };

#Needed for communication with the HSIC driver
allow mdm_helper sysfs_hsic:dir { open read search };
allow mdm_helper sysfs_hsic:file { read write open };

#Needed by libmdmdetect to figure out the system configuration
allow mdm_helper sysfs_esoc:dir { open search read };
allow mdm_helper sysfs_esoc:lnk_file { read };

#Needed by libmdmdetect to get system information regarding subsystems and to check their states
allow mdm_helper sysfs_ssr:dir { open search read };
allow mdm_helper sysfs_ssr:lnk_file { read open };

#Needed in order to run kickstart
allow mdm_helper shell:fd { use };
allow mdm_helper shell_exec:file { read open execute execute_no_trans };
allow mdm_helper system_file:file { execute_no_trans };
allow mdm_helper mdm_helper_exec:file { execute_no_trans };

#Needed to inform the hsic driver that mdm has booted up
allow mdm_helper sysfs:file { open read write getattr };

#Needed by ks in order to access the efs sync partitions.
allow mdm_helper efs_boot_dev:blk_file { open read getattr write };
allow mdm_helper block_device:dir { getattr search write };

#Ks needs to aquire the wake lock
allow mdm_helper sysfs_wake_lock:file { open append };

#Needed in order to access the firmware partition
allow mdm_helper firmware_file:dir { search };
allow mdm_helper firmware_file:file { open read getattr };

#Needed in order to collect ramdumps
allow mdm_helper tombstone_data_file:file { create read write open getattr };
allow mdm_helper tombstone_data_file:dir { create search open read write getattr add_name };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/mediaserver.te"
# allow mediaserver to communicate with cnd

#line 2
allow mediaserver cnd_socket:sock_file write;
#line 2
allow mediaserver cnd:unix_stream_socket connectto;
#line 2


allow mediaserver camera_device:chr_file { { getattr open read ioctl lock } { open append write } };

#line 5
allow mediaserver camera_socket:sock_file write;
#line 5
allow mediaserver mm-qcamerad:unix_dgram_socket sendto;
#line 5


allow mediaserver tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver qdsp_device:chr_file { getattr open read ioctl lock };

allow mediaserver self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow mediaserver rild:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow rild mediaserver:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow mediaserver rild:fd use;
#line 12



#line 14
allow mediaserver qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 14

#line 14
allow mediaserver qmuxd_socket:sock_file write;
#line 14
allow mediaserver qmuxd:unix_stream_socket connectto;
#line 14

#line 14
allow mediaserver qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 14

allow mediaserver camera_data_file:sock_file write;
#line 19


allow mediaserver sysfs_esoc:dir { open getattr read search ioctl };
allow mediaserver sysfs_esoc:lnk_file read;
allow mediaserver system_app_data_file:file { { getattr open read ioctl lock } { open append write } };

# allow mediaserver to write DTS files
allow mediaserver dts_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mediaserver dts_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# access to perflock
allow mediaserver mpctl_socket:dir { open getattr read search ioctl };

#line 31
allow mediaserver mpctl_socket:sock_file write;
#line 31
allow mediaserver mpdecision:unix_dgram_socket sendto;
#line 31


#line 32
allow mediaserver mpctl_socket:sock_file write;
#line 32
allow mediaserver mpdecision:unix_stream_socket connectto;
#line 32


# access to perflock
allow mediaserver mpctl_socket:dir { open getattr read search ioctl };

#line 36
allow mediaserver mpctl_socket:sock_file write;
#line 36
allow mediaserver perfd:unix_dgram_socket sendto;
#line 36


#line 37
allow mediaserver mpctl_socket:sock_file write;
#line 37
allow mediaserver perfd:unix_stream_socket connectto;
#line 37


# for thermal sock files

#line 40
allow mediaserver thermal_socket:sock_file write;
#line 40
allow mediaserver thermal-engine:unix_stream_socket connectto;
#line 40


#allow mediaserver to communicate with timedaemon
allow mediaserver time_daemon:unix_stream_socket connectto;

# Allow mediaserver to create socket files for audio arbitration
allow mediaserver audio_data_file:sock_file { create setattr unlink };
allow mediaserver audio_data_file:dir remove_name;

#access to audio
#line 52

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/mmi.te"
#integrated process
type mmi, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type mmi_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init mmi_exec:file { getattr open read execute };
#line 6
allow init mmi:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow mmi mmi_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow mmi init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init mmi:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init mmi:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init mmi_exec:process mmi;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type mmi_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition mmi tmpfs:file mmi_tmpfs;
#line 6
allow mmi mmi_tmpfs:file { read write };
#line 6

#line 6


#self capability
allow mmi self:capability { sys_nice dac_override };
allow mmi self:capability2 block_suspend;

#For various devices
allow mmi graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mmi input_device:chr_file { getattr open read ioctl lock };
allow mmi input_device:dir { getattr open read ioctl lock };
allow mmi nfc_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mmi shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow mmi sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

#FTM_AP folder permissions
allow mmi mmi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mmi mmi_data_file:file { { getattr open read ioctl lock } { open append write } };

#socket

#line 25
allow mmi property_socket:sock_file write;
#line 25
allow mmi init:unix_stream_socket connectto;
#line 25


#allow mmi set system prop
allow mmi powerctl_prop:property_service set;

#allow mmi operation on MISC partition
allow mmi misc_partition:blk_file { open append write };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/mm-pp-daemon.te"
type mm-pp-daemon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mm-pp-daemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init mm-pp-daemon_exec:file { getattr open read execute };
#line 4
allow init mm-pp-daemon:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow mm-pp-daemon mm-pp-daemon_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow mm-pp-daemon init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init mm-pp-daemon:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init mm-pp-daemon:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init mm-pp-daemon_exec:process mm-pp-daemon;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type mm-pp-daemon_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition mm-pp-daemon tmpfs:file mm-pp-daemon_tmpfs;
#line 4
allow mm-pp-daemon mm-pp-daemon_tmpfs:file { read write };
#line 4

#line 4


#============= mm-pp-daemon ==============
#Need to use fb ioctls to communicate with kernel
allow mm-pp-daemon graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mm-pp-daemon graphics_device:dir search;

# Allow reading/writing to persist
# The color config file is dynamically created
allow mm-pp-daemon persist_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mm-pp-daemon persist_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Allow reading/writing data config files
allow mm-pp-daemon display_misc_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mm-pp-daemon display_misc_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Allow read to sensor device and read/write to sensor socket
allow mm-pp-daemon sensors_device:chr_file { getattr open read ioctl lock };
allow mm-pp-daemon sensors_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow mm-pp-daemon sensors:unix_stream_socket connectto;

allow mm-pp-daemon system_prop:property_service set;

# Allow diag to access tempfs
allow mm-pp-daemon diag_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Allow mm-pp-daemon to call binder for screen refresh

#line 31
# Call the servicemanager and transfer references to it.
#line 31
allow mm-pp-daemon servicemanager:binder { call transfer };
#line 31
# servicemanager performs getpidcon on clients.
#line 31
allow servicemanager mm-pp-daemon:dir search;
#line 31
allow servicemanager mm-pp-daemon:file { read open };
#line 31
allow servicemanager mm-pp-daemon:process getattr;
#line 31
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 31
# all domains in domain.te.
#line 31


#line 32
# Call the server domain and optionally transfer references to it.
#line 32
allow mm-pp-daemon system_server:binder { call transfer };
#line 32
# Allow the serverdomain to transfer references to the client on the reply.
#line 32
allow system_server mm-pp-daemon:binder transfer;
#line 32
# Receive and use open files from the server.
#line 32
allow mm-pp-daemon system_server:fd use;
#line 32


#line 33
# Call the server domain and optionally transfer references to it.
#line 33
allow mm-pp-daemon surfaceflinger:binder { call transfer };
#line 33
# Allow the serverdomain to transfer references to the client on the reply.
#line 33
allow surfaceflinger mm-pp-daemon:binder transfer;
#line 33
# Receive and use open files from the server.
#line 33
allow mm-pp-daemon surfaceflinger:fd use;
#line 33


#line 42


# Allow mm-pp-daemon to change the brightness of the target during display
# calibration
allow mm-pp-daemon sysfs:file { { getattr open read ioctl lock } { open append write } };

# Allow socket calls in pp-daemon

#line 49
allow mm-pp-daemon property_socket:sock_file write;
#line 49
allow mm-pp-daemon init:unix_stream_socket connectto;
#line 49


#line 50
allow mm-pp-daemon pps_socket:sock_file write;
#line 50
allow mm-pp-daemon init:unix_stream_socket connectto;
#line 50


allow mm-pp-daemon init:unix_stream_socket { listen accept };
allow mm-pp-daemon system_server:unix_stream_socket { read write };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/mm-qcamerad.te"
type mm-qcamerad, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mm-qcamerad_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init mm-qcamerad_exec:file { getattr open read execute };
#line 3
allow init mm-qcamerad:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow mm-qcamerad mm-qcamerad_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow mm-qcamerad init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
dontaudit init mm-qcamerad:process noatsecure;
#line 3
# XXX dontaudit candidate but requires further study.
#line 3
allow init mm-qcamerad:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init mm-qcamerad_exec:process mm-qcamerad;
#line 3

#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type mm-qcamerad_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition mm-qcamerad tmpfs:file mm-qcamerad_tmpfs;
#line 3
allow mm-qcamerad mm-qcamerad_tmpfs:file { read write };
#line 3

#line 3


#added to support EZTune for camera
#line 10


#Communicate with user land process through domain socket
allow mm-qcamerad camera_socket:sock_file { create unlink write };
allow mm-qcamerad camera_socket:dir { open search write add_name remove_name };

#line 15
allow mm-qcamerad sensors_socket:sock_file write;
#line 15
allow mm-qcamerad sensors:unix_stream_socket connectto;
#line 15


#Allow connections between sensor manager and mm-qcamerad
allow mm-qcamerad system_server:unix_stream_socket { read write };

#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow mm-qcamerad system_server:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow system_server mm-qcamerad:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow mm-qcamerad system_server:fd use;
#line 19
;

#line 20
# Call the servicemanager and transfer references to it.
#line 20
allow mm-qcamerad servicemanager:binder { call transfer };
#line 20
# servicemanager performs getpidcon on clients.
#line 20
allow servicemanager mm-qcamerad:dir search;
#line 20
allow servicemanager mm-qcamerad:file { read open };
#line 20
allow servicemanager mm-qcamerad:process getattr;
#line 20
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 20
# all domains in domain.te.
#line 20
;

allow mm-qcamerad self:process execmem;
# Interact with other media devices
allow mm-qcamerad camera_device:dir search;
allow mm-qcamerad { gpu_device video_device camera_device sensors_device }:chr_file { { getattr open read ioctl lock } { open append write } };

allow mm-qcamerad { surfaceflinger mediaserver }:fd use;
# Need to investigate this
allow mm-qcamerad self:tcp_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow mm-qcamerad camera_data_file:dir { write remove_name search add_name };
allow mm-qcamerad camera_data_file:sock_file { create unlink };
allow mm-qcamerad node:tcp_socket node_bind;

#/data/fdAlbum
allow mm-qcamerad system_data_file:dir { open search write add_name remove_name };
allow mm-qcamerad system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#Remove GL fine reference
allow mm-qcamerad shell_data_file:dir search;

# IMS use camera daemon to make VT call
allow mm-qcamerad port:tcp_socket name_bind;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/mpdecision.te"
type mpdecision, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mpdecision_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init mpdecision_exec:file { getattr open read execute };
#line 4
allow init mpdecision:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow mpdecision mpdecision_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow mpdecision init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init mpdecision:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init mpdecision:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init mpdecision_exec:process mpdecision;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type mpdecision_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition mpdecision tmpfs:file mpdecision_tmpfs;
#line 4
allow mpdecision mpdecision_tmpfs:file { read write };
#line 4

#line 4


allow mpdecision sysfs_mpdecision:file { { getattr open read ioctl lock } { open append write } };
allow mpdecision sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write } };
allow mpdecision sysfs_rqstats:file { open append write };
allow mpdecision sysfs_cpu_online:file { { getattr open read ioctl lock } { open append write } };
#Allow mpdecision set cpu affinity
allow mpdecision kernel:process setsched;
#Allow writes to /dev/cpu_dma_latency
allow mpdecision self:netlink_kobject_uevent_socket { create read setopt bind };
allow mpdecision self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow mpdecision device_latency:chr_file { open append write };

allow mpdecision sysfs_rqstats:dir search;
allow mpdecision sysfs_thermal:dir search;

#policies for mpctl
#mpctl socket
allow mpdecision self:capability { net_admin chown dac_override fsetid sys_nice };
allow mpdecision mpctl_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mpdecision mpctl_socket:sock_file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } unlink };

allow mpdecision sysfs:file write;

#default_values file
allow mpdecision mpctl_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mpdecision mpctl_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } unlink };

#allow poll of system_server status
allow mpdecision system_server:dir search;
allow mpdecision system_server:file { open read };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/msm_irqbalanced.te"
type msm_irqbalanced, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type msm_irqbalanced_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init msm_irqbalanced_exec:file { getattr open read execute };
#line 3
allow init msm_irqbalanced:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow msm_irqbalanced msm_irqbalanced_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow msm_irqbalanced init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
dontaudit init msm_irqbalanced:process noatsecure;
#line 3
# XXX dontaudit candidate but requires further study.
#line 3
allow init msm_irqbalanced:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init msm_irqbalanced_exec:process msm_irqbalanced;
#line 3

#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type msm_irqbalanced_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition msm_irqbalanced tmpfs:file msm_irqbalanced_tmpfs;
#line 3
allow msm_irqbalanced msm_irqbalanced_tmpfs:file { read write };
#line 3

#line 3

allow msm_irqbalanced cgroup:dir { create add_name };
allow msm_irqbalanced proc:file write;
allow msm_irqbalanced sysfs_devices_system_cpu:file write;
allow msm_irqbalanced self:capability { setuid setgid dac_override };

#line 8
allow msm_irqbalanced sysfs_rqstats:dir { open getattr read search ioctl };
#line 8
allow msm_irqbalanced sysfs_rqstats:{ file lnk_file } { getattr open read ioctl lock };
#line 8
;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/netd.te"
#Policies for IPv6 tethering
allow netd netd:capability { setgid setuid };
allow netd netd:packet_socket { create bind setopt read ioctl };

dontaudit netd self:capability sys_module;

#needed for ipt_TCPMSS and ip6t_TCPMSS
allow netd kernel:system module_request;

#line 9
allow netd cnd_socket:sock_file write;
#line 9
allow netd cnd:unix_stream_socket connectto;
#line 9


allow netd wfdservice:fd use;
allow netd wfdservice:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };

## SEC keeped old perms
allow netd wfd_app:fd use;
allow netd wfd_app:tcp_socket { read write setopt getopt };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/netmgrd.te"
type netmgrd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type netmgrd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3
typeattribute netmgrd netdomain;
#line 3


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init netmgrd_exec:file { getattr open read execute };
#line 4
allow init netmgrd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow netmgrd netmgrd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow netmgrd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init netmgrd:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init netmgrd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init netmgrd_exec:process netmgrd;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type netmgrd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition netmgrd tmpfs:file netmgrd_tmpfs;
#line 4
allow netmgrd netmgrd_tmpfs:file { read write };
#line 4

#line 4


#line 9


#Allow files to be written during the operation of netmgrd

#line 12
# Allow the necessary permissions.
#line 12

#line 12
# Allow the domain to add entries to the directory.
#line 12
allow netmgrd system_data_file:dir { { open getattr read search ioctl } add_name write };
#line 12
# Allow the domain to create the file.
#line 12
allow netmgrd data_test_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 12
allow netmgrd data_test_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 12

#line 12
# Make the transition occur by default.
#line 12
type_transition netmgrd system_data_file:dir data_test_data_file;
#line 12
type_transition netmgrd system_data_file:{ file lnk_file sock_file fifo_file } data_test_data_file;
#line 12


#Allow netmgrd operations
allow netmgrd netmgrd:capability { dac_override net_raw net_admin sys_module fsetid setgid setuid setpcap };

#Allow access to kernel modules
allow netmgrd kernel:system { module_request };

#Allow logging
allow netmgrd diag_device:chr_file { { { getattr open read ioctl lock } { open append write } } };
allow netmgrd smem_log_device:chr_file { { { getattr open read ioctl lock } { open append write } } };

#Allow operations on different types of sockets
allow netmgrd netmgrd:rawip_socket { create getopt setopt write };
allow netmgrd netmgrd:netlink_xfrm_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_write nlmsg_read };
allow netmgrd netmgrd:netlink_socket { write read create bind };
allow netmgrd netmgrd:socket { create ioctl };
allow netmgrd netmgrd:netlink_route_socket { setopt getattr write nlmsg_write };
allow netmgrd init:unix_stream_socket { connectto };
allow netmgrd property_socket:sock_file write;


#line 33
allow netmgrd cnd_socket:sock_file write;
#line 33
allow netmgrd cnd:unix_stream_socket connectto;
#line 33
;


#line 35
allow netmgrd qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 35

#line 35
allow netmgrd qmuxd_socket:sock_file write;
#line 35
allow netmgrd qmuxd:unix_stream_socket connectto;
#line 35

#line 35
allow netmgrd qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 35
;

#Allow writing of ipv6 network properties
allow netmgrd proc_net:file { write };

#Allow address configuration
allow netmgrd system_prop:property_service { set };

#Allow setting of DNS and GW Android properties
allow netmgrd net_radio_prop:property_service { set };

#Allow execution of commands in shell
allow netmgrd system_file:file { execute_no_trans };

allow netmgrd self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netmgrd sysfs_esoc:dir { open getattr read search ioctl };

#Allow communication with netd
allow netmgrd netd_socket:sock_file write;
allow netmgrd net_data_file:file { getattr open read ioctl lock };
allow netmgrd wpa_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow netmgrd net_data_file:dir { open getattr read search ioctl };

#Allow nemtgrd to use esoc api's to determine target
allow netmgrd shell_exec:file { execute { getattr open read ioctl lock } execute_no_trans };
allow netmgrd sysfs_esoc:lnk_file read;


#line 62
allow netmgrd sysfs_ssr:dir { open getattr read search ioctl };
#line 62
allow netmgrd sysfs_ssr:{ file lnk_file } { getattr open read ioctl lock };
#line 62
;

allow netmgrd { wcnss_service_exec wpa_exec }:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

allow netmgrd sysfs:file write;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/net.te"
# allow netdomain access to cnd

#line 2
allow netdomain cnd_socket:sock_file write;
#line 2
allow netdomain cnd:unix_stream_socket connectto;
#line 2


# allow netdomain access to dpmd

#line 5
allow netdomain dpmwrapper_socket:sock_file write;
#line 5
allow netdomain dpmd:unix_stream_socket connectto;
#line 5

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/perfd.te"
type perfd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type perfd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init perfd_exec:file { getattr open read execute };
#line 4
allow init perfd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow perfd perfd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow perfd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init perfd:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init perfd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init perfd_exec:process perfd;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type perfd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition perfd tmpfs:file perfd_tmpfs;
#line 4
allow perfd perfd_tmpfs:file { read write };
#line 4

#line 4


allow perfd self:capability { net_admin chown dac_override fsetid };
allow perfd sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write } };
allow perfd sysfs_cpu_online:file { { getattr open read ioctl lock } { open append write } };
allow perfd cpuctl_device:file { { getattr open read ioctl lock } { open append write } };
allow perfd self:netlink_kobject_uevent_socket { create read setopt bind };
allow perfd self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

#mpctl socket
allow perfd mpctl_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow perfd mpctl_socket:sock_file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } unlink };

allow perfd sysfs:file write;

#default_values file
allow perfd mpctl_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow perfd mpctl_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } unlink };

#allow poll of system_server status
allow perfd system_server:dir search;
allow perfd system_server:file { open read };

allow perfd proc:file write;

#KTM
allow perfd sysfs_thermal:dir search;
allow perfd sysfs_thermal:file { open write };

#IRQbalancer access

#line 34
allow perfd msm_irqbalance_socket:sock_file write;
#line 34
allow perfd msm_irqbalanced:unix_stream_socket connectto;
#line 34
;

#Thermal lib access

#line 37
allow perfd thermal_socket:sock_file write;
#line 37
allow perfd thermal-engine:unix_stream_socket connectto;
#line 37
;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/peripheral_manager.te"
#Policy for peripheral_manager
#per_mgr - peripheral_manager domain
type per_mgr, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;

type per_mgr_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init per_mgr_exec:file { getattr open read execute };
#line 6
allow init per_mgr:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow per_mgr per_mgr_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow per_mgr init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init per_mgr:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init per_mgr:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init per_mgr_exec:process per_mgr;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type per_mgr_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition per_mgr tmpfs:file per_mgr_tmpfs;
#line 6
allow per_mgr per_mgr_tmpfs:file { read write };
#line 6

#line 6
;

#Needed for binder transactions

#line 9
# Call the servicemanager and transfer references to it.
#line 9
allow per_mgr servicemanager:binder { call transfer };
#line 9
# servicemanager performs getpidcon on clients.
#line 9
allow servicemanager per_mgr:dir search;
#line 9
allow servicemanager per_mgr:file { read open };
#line 9
allow servicemanager per_mgr:process getattr;
#line 9
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 9
# all domains in domain.te.
#line 9
;

#line 10
typeattribute per_mgr binderservicedomain;
#line 10
;
allow per_mgr self:socket { create ioctl bind read write };
allow per_mgr per_mgr_service:service_manager add;

#Rules for peripheral manager clients
#Rules for RILD

#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow per_mgr rild:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow rild per_mgr:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow per_mgr rild:fd use;
#line 16
;

#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow rild per_mgr:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow per_mgr rild:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow rild per_mgr:fd use;
#line 17
;

#Rules for system server

#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow per_mgr system_server:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow system_server per_mgr:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow per_mgr system_server:fd use;
#line 20
;

#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow system_server per_mgr:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow per_mgr system_server:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow system_server per_mgr:fd use;
#line 21
;

#Needed by ipc_router
allow per_mgr self:capability { net_raw };

#Needed to power on the peripheral
allow per_mgr ssr_device:chr_file { open read };

#Needed by libmdmdetect to figure out the system configuration
allow per_mgr sysfs_esoc:dir { open search read };
allow per_mgr sysfs_esoc:lnk_file { read };

#Needed by libmdmdetect to get subsystem info and to check their states
allow per_mgr sysfs_ssr:dir { open search read };
allow per_mgr sysfs_ssr:lnk_file { read open };

#Needed by pm-proxy to talk to peripheral manager

#line 38
# Call the server domain and optionally transfer references to it.
#line 38
allow per_mgr per_mgr:binder { call transfer };
#line 38
# Allow the serverdomain to transfer references to the client on the reply.
#line 38
allow per_mgr per_mgr:binder transfer;
#line 38
# Receive and use open files from the server.
#line 38
allow per_mgr per_mgr:fd use;
#line 38
;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/platform_app.te"
#Allow platform apps to interact with dtseagleservice

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow platform_app dtseagleservice:binder { call transfer };
allow s_platform_app dtseagleservice:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow dtseagleservice platform_app:binder transfer;
allow dtseagleservice s_platform_app:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow platform_app dtseagleservice:fd use;
allow s_platform_app dtseagleservice:fd use;
#line 2

#Allow platform apps to interact with fido daemon

#line 4
# Call the server domain and optionally transfer references to it.
#line 4
allow platform_app fidodaemon:binder { call transfer };
allow s_platform_app fidodaemon:binder { call transfer };
#line 4
# Allow the serverdomain to transfer references to the client on the reply.
#line 4
allow fidodaemon platform_app:binder transfer;
allow fidodaemon s_platform_app:binder transfer;
#line 4
# Receive and use open files from the server.
#line 4
allow platform_app fidodaemon:fd use;
allow s_platform_app fidodaemon:fd use;
#line 4

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/port-bridge.te"
type port-bridge, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type port-bridge_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init port-bridge_exec:file { getattr open read execute };
#line 3
allow init port-bridge:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow port-bridge port-bridge_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow port-bridge init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
dontaudit init port-bridge:process noatsecure;
#line 3
# XXX dontaudit candidate but requires further study.
#line 3
allow init port-bridge:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init port-bridge_exec:process port-bridge;
#line 3

#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type port-bridge_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition port-bridge tmpfs:file port-bridge_tmpfs;
#line 3
allow port-bridge port-bridge_tmpfs:file { read write };
#line 3

#line 3


#line 8


#Allow operations on different types of sockets
allow port-bridge port-bridge:netlink_kobject_uevent_socket { create bind read };

#Allow process capabilities
allow port-bridge port-bridge:capability { dac_override };

#Allow operations on mhi transport
allow port-bridge mhi_device:chr_file { { getattr open read ioctl lock } { open append write } };

#Allow operations on gadget serial device
allow port-bridge gadget_serial_device:chr_file { { { getattr open read ioctl lock } { open append write } } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/property.te"
# property for uicc_daemon
type uicc_prop, property_type, newAttr79, newAttr80;
type qcom_ims_prop, property_type, newAttr79, newAttr80;

# properties for usf daemons
type usf_prop, property_type, newAttr79, newAttr80;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/qcomsysd.te"
#Policy file for qcom-system-daemon
#qcomsysd = qcom-system-daemon domain
type qcomsysd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type qcomsysd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init qcomsysd_exec:file { getattr open read execute };
#line 5
allow init qcomsysd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow qcomsysd qcomsysd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow qcomsysd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init qcomsysd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init qcomsysd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init qcomsysd_exec:process qcomsysd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type qcomsysd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition qcomsysd tmpfs:file qcomsysd_tmpfs;
#line 5
allow qcomsysd qcomsysd_tmpfs:file { read write };
#line 5

#line 5
;

#Needed for logging
allow qcomsysd smem_log_device:chr_file { open read write ioctl };

#Needed for handling diag commands
allow qcomsysd diag_device:chr_file { open read write ioctl };

#Needed to read/write cookies to the misc partition
allow qcomsysd block_device:dir { search };
allow qcomsysd misc_partition:blk_file { open read getattr write };

#Needed to access the bootselect partition
allow qcomsysd bootselect_device:blk_file { open read getattr write };

#Needed to get image info from socinfo
allow qcomsysd sysfs_socinfo:dir { open search read };
allow qcomsysd sysfs_socinfo:file { open read write };

allow qcomsysd self:capability { dac_override };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/qlogd.te"
# qlogd
type qlogd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type qlogd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# make transition from init to its domain

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init qlogd_exec:file { getattr open read execute };
#line 6
allow init qlogd:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow qlogd qlogd_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow qlogd init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init qlogd:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init qlogd:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init qlogd_exec:process qlogd;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type qlogd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition qlogd tmpfs:file qlogd_tmpfs;
#line 6
allow qlogd qlogd_tmpfs:file { read write };
#line 6

#line 6


# need to access sharemem log device for smem logs
allow qlogd smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };

# need to add more capabilities for qlogd
allow qlogd self:capability { setuid setgid dac_override dac_read_search sys_admin net_raw net_admin fowner fsetid kill sys_module };
#line 14
allow qlogd self:capability2 { block_suspend syslog };
allow qlogd self:packet_socket { create ioctl bind getopt setopt };

# need to access system_data partitions for configration files
allow qlogd qlogd_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow qlogd qlogd_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qlogd system_file:file execute_no_trans;

# need to create and listen socket
allow qlogd qlogd_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# need to start shell execute files
allow qlogd shell_exec:file { execute read open execute_no_trans };

# need to create and write files in fuse partition
allow qlogd fuse:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qlogd fuse:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# need to capture kmsg
allow qlogd kernel:system syslog_mod;

# need for qdss log
#line 40


# need for capture adb logs

#line 43
allow qlogd logdr_socket:sock_file write;
#line 43
allow qlogd logd:unix_stream_socket connectto;
#line 43


# need for subsystem ramdump
allow qlogd device:dir { open getattr read search ioctl };
allow qlogd ramdump_device:chr_file { setattr { { getattr open read ioctl lock } { open append write } } };

# need for qxdm log
allow qlogd diag_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow qlogd sysfs_wake_lock:file { { getattr open read ioctl lock } append };

# need for tcpdump
#line 56


## SEC keeped old perms.
allow qlogd system_data_file:dir { write add_name };
allow qlogd system_data_file:file { open read write create };
allow qlogd socket_device:sock_file { create setattr };

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/qmuxd.te"
type qmuxd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type qmuxd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3
typeattribute qmuxd netdomain;
#line 3


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init qmuxd_exec:file { getattr open read execute };
#line 4
allow init qmuxd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow qmuxd qmuxd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow qmuxd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init qmuxd:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init qmuxd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init qmuxd_exec:process qmuxd;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type qmuxd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition qmuxd tmpfs:file qmuxd_tmpfs;
#line 4
allow qmuxd qmuxd_tmpfs:file { read write };
#line 4

#line 4


#line 9


#Allow qmuxd to operate on various qmux device sockets
#allow qmuxd qmux_radio_socket:dir { write add_name remove_name search };
#allow qmuxd qmux_radio_socket:sock_file { create setattr getattr write unlink };
#allow qmuxd qmux_audio_socket:dir { write add_name remove_name search };
#allow qmuxd qmux_audio_socket:sock_file { create setattr getattr write unlink };
#allow qmuxd qmux_gps_socket:dir { write add_name remove_name search };
#allow qmuxd qmux_gps_socket:sock_file { create setattr getattr write unlink };
#allow qmuxd qmux_bluetooth_socket:dir { write add_name remove_name search };
#allow qmuxd qmux_bluetooth_socket:sock_file { create setattr getattr write unlink };


#line 21
allow qmuxd qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 21

#line 21
allow qmuxd qmuxd_socket:sock_file write;
#line 21
allow qmuxd qmuxd:unix_stream_socket connectto;
#line 21

#line 21
allow qmuxd qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 21
;

#Allow logging
allow qmuxd diag_device:chr_file { { { getattr open read ioctl lock } { open append write } } };

#Allow operation in platform specific transports
allow qmuxd smd_device:chr_file { { { getattr open read ioctl lock } { open append write } } };
allow qmuxd hsic_device:chr_file { { { getattr open read ioctl lock } { open append write } } };

#Allow qmuxd to operate in platform specific transports
allow qmuxd sysfs_smd_open_timeout:file { open append write };
allow qmuxd sysfs_wake_lock:file { append open };

#Allow qmuxd to write in hsic specific transport
allow qmuxd sysfs:file { open append write };

allow qmuxd self:capability { setuid setgid setpcap dac_override };

#Allow qmuxd to have the CAP_BLOCK_SUSPEND capability
allow qmuxd qmuxd:capability2 { block_suspend };

allow qmuxd sysfs_esoc:dir { open getattr read search ioctl };
allow qmuxd sysfs_hsic_modem_wait:file { open append write };
allow qmuxd sysfs_esoc:lnk_file read;


#line 46
allow qmuxd sysfs_ssr:dir { open getattr read search ioctl };
#line 46
allow qmuxd sysfs_ssr:{ file lnk_file } { getattr open read ioctl lock };
#line 46
;
allow qmuxd mhi_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/qseecomd.te"
# tee starts as root, and drops privileges
allow tee self:capability { setuid setgid sys_admin chown dac_override sys_rawio };

# Need to directly manipulate certain block devices
# for anti-rollback protection
allow tee block_device:dir { open getattr read search ioctl };
allow tee rpmb_device:blk_file { { getattr open read ioctl lock } { open append write } };

# Need to figure out how many scsi generic devices are preset
# before being able to identify which one is rpmb device
allow tee device:dir { open getattr read search ioctl };
allow tee sg_device:chr_file { { { getattr open read ioctl lock } { open append write } } setattr };

# Allow qseecom to qsee folder so that listeners can create
# respective directories
allow tee data_qsee_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow tee data_qsee_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow tee system_data_file:dir { open getattr read search ioctl };

allow tee persist_file:dir { open getattr read search ioctl };

#line 21
allow tee persist_data_file:dir { open getattr read search ioctl };
#line 21
allow tee persist_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 21

# Write to drm related pieces of persist partition
allow tee persist_drm_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow tee persist_drm_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Provide tee access to ssd partition for HW FDE
allow tee ssd_device:blk_file { { getattr open read ioctl lock } { open append write } };

# allow tee to operate tee device
allow tee tee_device:chr_file { { getattr open read ioctl lock } { open append write } };

# allow tee to load firmware images
allow tee firmware_file:dir { open getattr read search ioctl };
allow tee firmware_file:file { getattr open read ioctl lock };

# allow qseecom access to time domain
allow tee time_daemon:unix_stream_socket connectto;

# allow tee access for secure UI to work
allow tee graphics_device:chr_file { getattr open read ioctl lock };
allow tee graphics_device:dir { open getattr read search ioctl };


#line 43
# Call the server domain and optionally transfer references to it.
#line 43
allow tee surfaceflinger:binder { call transfer };
#line 43
# Allow the serverdomain to transfer references to the client on the reply.
#line 43
allow surfaceflinger tee:binder transfer;
#line 43
# Receive and use open files from the server.
#line 43
allow tee surfaceflinger:fd use;
#line 43


#line 44
# Call the servicemanager and transfer references to it.
#line 44
allow tee servicemanager:binder { call transfer };
#line 44
# servicemanager performs getpidcon on clients.
#line 44
allow servicemanager tee:dir search;
#line 44
allow servicemanager tee:file { read open };
#line 44
allow servicemanager tee:process getattr;
#line 44
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 44
# all domains in domain.te.
#line 44


allow tee system_app:unix_dgram_socket sendto;
allow tee s_system_app:unix_dgram_socket sendto;

#line 47
allow tee property_socket:sock_file write;
#line 47
allow tee init:unix_stream_socket connectto;
#line 47


#line 53


# allow qseecom access to set system property
allow tee system_prop:property_service set;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/qti.te"
type qti, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type qti_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init qti_exec:file { getattr open read execute };
#line 3
allow init qti:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow qti qti_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow qti init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
dontaudit init qti:process noatsecure;
#line 3
# XXX dontaudit candidate but requires further study.
#line 3
allow init qti:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init qti_exec:process qti;
#line 3

#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type qti_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition qti tmpfs:file qti_tmpfs;
#line 3
allow qti qti_tmpfs:file { read write };
#line 3

#line 3


#line 4
typeattribute qti netdomain;
#line 4


allow qti rmnet_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qti smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 10

allow qti mhi_device:chr_file { { getattr open read ioctl lock } { open append write } };

#line 12
allow qti qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 12

#line 12
allow qti qmuxd_socket:sock_file write;
#line 12
allow qti qmuxd:unix_stream_socket connectto;
#line 12

#line 12
allow qti qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 12

allow qti rmnet_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qti self:capability { net_admin net_raw fsetid sys_module dac_override };
allow qti self:netlink_socket { write bind create read };
allow qti self:socket { write read create ioctl };
allow qti self:udp_socket { create ioctl };
allow qti kernel:system module_request;
allow qti shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow qti smd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qti system_file:file execute_no_trans;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/radio.te"
# Talks to qmuxd via the qmux_radio socket.

#line 2
allow radio qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 2

#line 2
allow radio qmuxd_socket:sock_file write;
#line 2
allow radio qmuxd:unix_stream_socket connectto;
#line 2

#line 2
allow radio qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 2
;
allow radio ims_socket:sock_file write;

#Need permission to execute com.qualcomm.qti.telephony/app_dex/xx
allow radio radio_data_file:file execute;
allow radio shell_data_file:dir search;

#Need permission to execute dpmd talk to radio layer

#line 10
allow radio dpmd_socket:sock_file write;
#line 10
allow radio dpmd:unix_stream_socket connectto;
#line 10


# IMS needs permission to use unix domain socket
allow radio ims:unix_stream_socket connectto;
#line 11 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/recovery.te"

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/rfs_access.te"
# rfs_access - rfs_access daemon
type rfs_access, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type rfs_access_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init rfs_access_exec:file { getattr open read execute };
#line 4
allow init rfs_access:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow rfs_access rfs_access_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow rfs_access init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init rfs_access:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init rfs_access:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init rfs_access_exec:process rfs_access;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type rfs_access_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition rfs_access tmpfs:file rfs_access_tmpfs;
#line 4
allow rfs_access rfs_access_tmpfs:file { read write };
#line 4

#line 4


#The files created by rfs_access process in the /data folder will have type rfs_data_file
type_transition rfs_access system_data_file:{ dir file } rfs_data_file;
type_transition rfs_access system_data_file:dir rfs_shared_hlos_file "hlos_rfs";

#To read the uio char device
allow rfs_access uio_device:chr_file { { getattr open read ioctl lock } { open append write } };

#For QMI sockets and IPCR Sockets
allow rfs_access self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow rfs_access smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };

#For Wakelocks

#line 18
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 18
allow rfs_access sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };
#line 18
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 18
allow rfs_access self:capability2 block_suspend;
#line 18


#To create the folders in /data
allow rfs_access system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

#For system folder entries
allow rfs_access rfs_system_file:dir { open getattr read search ioctl };
allow rfs_access rfs_system_file:lnk_file { getattr open read ioctl lock };
allow rfs_access rfs_system_file:file { getattr open read ioctl lock };

#For data folder entries
allow rfs_access rfs_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rfs_access rfs_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow rfs_access rfs_shared_hlos_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rfs_access rfs_shared_hlos_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#For ramdump entries in /data/tombstones.
allow rfs_access tombstone_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rfs_access tombstone_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#For firmware entries in /firmware to read NHLOS.bin files ( only perms to read and get attributes).
allow rfs_access firmware_file:dir { open getattr read search ioctl };
allow rfs_access firmware_file:file { getattr open read ioctl lock };

#For dropping permisions from root and wakelock
allow rfs_access self:capability { setuid setgid setpcap net_raw };

#Prevent other domains from accessing RFS data files.
#SEC modified: -trusteddomain -containerdomain
neverallow { domain -rfs_access -kernel -recovery -init -su -init_shell -trusteddomain -containerdomain } rfs_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
neverallow { domain -rfs_access -kernel -recovery -init -su -init_shell -trusteddomain -containerdomain } rfs_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/rild.te"
#allow rild qmux_radio_socket:dir { write remove_name search add_name };
#allow rild qmux_radio_socket:sock_file { write create unlink setattr };
#allow rild qmuxd:unix_stream_socket connectto;

#line 4
allow rild qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 4

#line 4
allow rild qmuxd_socket:sock_file write;
#line 4
allow rild qmuxd:unix_stream_socket connectto;
#line 4

#line 4
allow rild qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 4
;

#line 5
# Call the servicemanager and transfer references to it.
#line 5
allow rild servicemanager:binder { call transfer };
#line 5
# servicemanager performs getpidcon on clients.
#line 5
allow servicemanager rild:dir search;
#line 5
allow servicemanager rild:file { read open };
#line 5
allow servicemanager rild:process getattr;
#line 5
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 5
# all domains in domain.te.
#line 5


allow rild ssr_device:chr_file { open read };
allow rild sysfs_esoc:dir { search read open };
allow rild sysfs_esoc:lnk_file { read };
allow rild sysfs_esoc:file { write };
allow rild sysfs_ssr:dir { open search read };
allow rild sysfs_ssr:lnk_file { read open };

allow rild mediaserver:binder { transfer call };

#allow rild diag_device:chr_file { open read write };
allow rild rild_socket:chr_file { open read write };
allow rild system_health_monitor_device:chr_file { getattr open read ioctl lock };

allow rild sysfs_ssr:dir { open getattr read search ioctl };
allow rild sysfs_ssr:lnk_file read;
allow rild system_data_file:dir { open search write add_name remove_name };
allow rild system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild time_daemon:unix_stream_socket connectto;

dontaudit rild domain:dir { open getattr read search ioctl };

#line 27
allow rild netmgrd:dir { open getattr read search ioctl };
#line 27
allow rild netmgrd:{ file lnk_file } { getattr open read ioctl lock };
#line 27

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/rmt_storage.te"
# rmt_storage - rmt_storage daemon
type rmt_storage, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type rmt_storage_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init rmt_storage_exec:file { getattr open read execute };
#line 4
allow init rmt_storage:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow rmt_storage rmt_storage_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow rmt_storage init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init rmt_storage:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init rmt_storage:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init rmt_storage_exec:process rmt_storage;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type rmt_storage_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition rmt_storage tmpfs:file rmt_storage_tmpfs;
#line 4
allow rmt_storage rmt_storage_tmpfs:file { read write };
#line 4

#line 4


allow rmt_storage modem_efs_partition_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow rmt_storage block_device:dir { open getattr read search ioctl };
allow rmt_storage cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rmt_storage smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };

# sys_admin is needed for ioprio_set
allow rmt_storage self:capability { setuid setgid sys_admin dac_override net_raw setpcap };

#For set the ctl properties

#line 15
allow rmt_storage property_socket:sock_file write;
#line 15
allow rmt_storage init:unix_stream_socket connectto;
#line 15

allow rmt_storage ctl_default_prop:property_service set;

#For Wakelocks

#line 19
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 19
allow rmt_storage sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };
#line 19
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 19
allow rmt_storage self:capability2 block_suspend;
#line 19


allow rmt_storage self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow rmt_storage uio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rmt_storage mmc_block_device:blk_file { getattr open read ioctl lock };type seempd, domain;
#line 2 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/seempd.te"
type seempd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init seempd_exec:file { getattr open read execute };
#line 4
allow init seempd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow seempd seempd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow seempd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init seempd:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init seempd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init seempd_exec:process seempd;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type seempd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition seempd tmpfs:file seempd_tmpfs;
#line 4
allow seempd seempd_tmpfs:file { read write };
#line 4

#line 4


allow seempd tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow seempd seemplog_device:chr_file { { getattr open read ioctl lock } { open append write } };
#TODO: create the dir from init.rc instead.
allow seempd seemp_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow seempd seemp_file:{ file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# allow seempd to load firmware images
allow seempd firmware_file:dir { open getattr read search ioctl };
allow seempd firmware_file:file { getattr open read ioctl lock };

#allow access to packages.list
allow seempd system_data_file:file { getattr open read ioctl lock };

#TODO: Need to fix this in the code and remove these 2 lines.
dontaudit seempd init:dir getattr;
dontaudit seempd kernel:dir getattr;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/sensors.te"
# Policy for sensor daemon
type sensors, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type sensors_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init sensors_exec:file { getattr open read execute };
#line 6
allow init sensors:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow sensors sensors_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow sensors init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init sensors:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init sensors:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init sensors_exec:process sensors;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type sensors_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition sensors tmpfs:file sensors_tmpfs;
#line 6
allow sensors sensors_tmpfs:file { read write };
#line 6

#line 6


type_transition sensors system_data_file:{ dir file } sensors_data_file;

# Change own perms to (nobody,nobody)
allow sensors self:capability { setuid setgid };
# Chown /data/misc/sensors/debug/ to nobody
allow sensors self:capability chown;
dontaudit sensors self:capability fsetid;

# Access /data/misc/sensors/debug and /data/system/sensors/settings
allow sensors self:capability { dac_override dac_read_search net_bind_service };

# Sensors socket
allow sensors sensors_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
type_transition sensors socket_device:sock_file sensors_socket "sensor_ctl_socket";
allow sensors socket_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

# Create directories and files under /data/misc/sensors
# and /data/system/sensors. Allow generic r/w file access.
allow sensors system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sensors sensors_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sensors sensors_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Access sensor nodes (/dev/msm_dsps, /dev/sensors)
allow sensors sensors_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Access to /persist/sensors
allow sensors persist_file:dir { open getattr read search ioctl };
allow sensors sensors_persist_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sensors sensors_persist_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Access to execmem
allow sensors self:process execmem;

# Wake lock access

#line 42
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 42
allow sensors sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };
#line 42
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 42
allow sensors self:capability2 block_suspend;
#line 42


allow sensors cgroup:dir { create add_name };

allow sensors self:socket *;

# Access to other devices
allow sensors smd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sensors smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sensors device_latency:chr_file { open append write };

# Access to tests from userdebug/eng builds
#line 57

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/service.te"
type atfwd_service, service_manager_type;
type per_mgr_service, service_manager_type;
type dpmservice, service_manager_type;
type cne_service, service_manager_type;
type fidodaemon_service, service_manager_type;
type wbc_service, service_manager_type;
type dun_service, service_manager_type;
type imscm_service, service_manager_type;
type color_service, service_manager_type;
type wfdservice_service, service_manager_type;
type usf_service, service_manager_type;
type dtseagleservice_service, service_manager_type;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/shell.te"
allow shell persist_file:dir { open getattr read search ioctl };
allow shell persist_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/ssr_diag.te"
type ssr_diag, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type ssr_diag_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init ssr_diag_exec:file { getattr open read execute };
#line 3
allow init ssr_diag:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow ssr_diag ssr_diag_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow ssr_diag init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
dontaudit init ssr_diag:process noatsecure;
#line 3
# XXX dontaudit candidate but requires further study.
#line 3
allow init ssr_diag:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init ssr_diag_exec:process ssr_diag;
#line 3

#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type ssr_diag_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition ssr_diag tmpfs:file ssr_diag_tmpfs;
#line 3
allow ssr_diag ssr_diag_tmpfs:file { read write };
#line 3

#line 3
;

#line 8

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/ssr_setup.te"
#Policy for ssr_setup
#ssr_setup - ssr_setup domain
type ssr_setup, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type ssr_setup_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init ssr_setup_exec:file { getattr open read execute };
#line 5
allow init ssr_setup:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow ssr_setup ssr_setup_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow ssr_setup init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init ssr_setup:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init ssr_setup:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init ssr_setup_exec:process ssr_setup;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type ssr_setup_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition ssr_setup tmpfs:file ssr_setup_tmpfs;
#line 5
allow ssr_setup ssr_setup_tmpfs:file { read write };
#line 5

#line 5
;

#Required to discover esoc's
allow ssr_setup sysfs_esoc:dir { { getattr open read ioctl lock } search };
allow ssr_setup sysfs_esoc:lnk_file { getattr open read ioctl lock };

#Required to enable/disable ssr
allow ssr_setup sysfs_ssr:dir { { getattr open read ioctl lock } search };
allow ssr_setup sysfs_ssr_toggle:file { { getattr open read ioctl lock } { open append write } };
allow ssr_setup sysfs_ssr:lnk_file { { getattr open read ioctl lock } { open append write } };

#Keeping this here till sysfs labeling is resolved
allow ssr_setup sysfs:file { open append write };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/subsystem_ramdump.te"
type subsystem_ramdump, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type subsystem_ramdump_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init subsystem_ramdump_exec:file { getattr open read execute };
#line 3
allow init subsystem_ramdump:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow subsystem_ramdump subsystem_ramdump_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow subsystem_ramdump init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
dontaudit init subsystem_ramdump:process noatsecure;
#line 3
# XXX dontaudit candidate but requires further study.
#line 3
allow init subsystem_ramdump:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init subsystem_ramdump_exec:process subsystem_ramdump;
#line 3

#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type subsystem_ramdump_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 3
type_transition subsystem_ramdump tmpfs:file subsystem_ramdump_tmpfs;
#line 3
allow subsystem_ramdump subsystem_ramdump_tmpfs:file { read write };
#line 3

#line 3
;

#line 8

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/surfaceflinger.te"
allow surfaceflinger sysfs_graphics:file { { getattr open read ioctl lock } { open append write } };
allow surfaceflinger shell_data_file:dir search;
allow surfaceflinger sysfs:file write;

# Allows pp-daemon to refresh the screen in calibration mode

#line 6
allow surfaceflinger mm-pp-daemon:dir { open getattr read search ioctl };
#line 6
allow surfaceflinger mm-pp-daemon:{ file lnk_file } { getattr open read ioctl lock };
#line 6



#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow surfaceflinger location:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow location surfaceflinger:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow surfaceflinger location:fd use;
#line 8


#line 9
# Call the server domain and optionally transfer references to it.
#line 9
allow surfaceflinger tee:binder { call transfer };
#line 9
# Allow the serverdomain to transfer references to the client on the reply.
#line 9
allow tee surfaceflinger:binder transfer;
#line 9
# Receive and use open files from the server.
#line 9
allow surfaceflinger tee:fd use;
#line 9


# access to perflock
allow surfaceflinger mpctl_socket:dir { open getattr read search ioctl };

#line 13
allow surfaceflinger mpctl_socket:sock_file write;
#line 13
allow surfaceflinger perfd:unix_dgram_socket sendto;
#line 13


#line 14
allow surfaceflinger mpctl_socket:sock_file write;
#line 14
allow surfaceflinger perfd:unix_stream_socket connectto;
#line 14


# access to /data/misc/display for dumping input frames
allow surfaceflinger display_misc_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow surfaceflinger display_misc_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/system_app.te"
# fm_radio app needes  open read write on fm_radio_device
allow system_app fm_radio_device:chr_file { read open ioctl };
allow s_system_app fm_radio_device:chr_file { read open ioctl };
#line 3
allow system_app ctl_default_prop:property_service set;
allow s_system_app ctl_default_prop:property_service set;
#line 4
allow system_app atfwd_service:service_manager add;
allow s_system_app atfwd_service:service_manager add;
#line 5
allow system_app dun_service:service_manager add;
allow s_system_app dun_service:service_manager add;
#line 6

# access to perflock
allow system_app mpctl_socket:dir { open getattr read search ioctl };
allow s_system_app mpctl_socket:dir { open getattr read search ioctl };

#line 9
allow system_app mpctl_socket:sock_file write;
allow s_system_app mpctl_socket:sock_file write;
#line 9
allow system_app mpdecision:unix_dgram_socket sendto;
allow s_system_app mpdecision:unix_dgram_socket sendto;
#line 9


#line 10
allow system_app mpctl_socket:sock_file write;
allow s_system_app mpctl_socket:sock_file write;
#line 10
allow system_app mpdecision:unix_stream_socket connectto;
allow s_system_app mpdecision:unix_stream_socket connectto;
#line 10

allow system_app dpmservice:service_manager add;
allow s_system_app dpmservice:service_manager add;

#line 12
allow system_app mpctl_socket:sock_file write;
allow s_system_app mpctl_socket:sock_file write;
#line 12
allow system_app perfd:unix_dgram_socket sendto;
allow s_system_app perfd:unix_dgram_socket sendto;
#line 12


#line 13
allow system_app mpctl_socket:sock_file write;
allow s_system_app mpctl_socket:sock_file write;
#line 13
allow system_app perfd:unix_stream_socket connectto;
allow s_system_app perfd:unix_stream_socket connectto;
#line 13


# access to mm-pp-daemon

#line 16
allow system_app pps_socket:sock_file write;
allow s_system_app pps_socket:sock_file write;
#line 16
allow system_app mm-pp-daemon:unix_stream_socket connectto;
allow s_system_app mm-pp-daemon:unix_stream_socket connectto;
#line 16

allow system_app cne_service:service_manager add;
allow s_system_app cne_service:service_manager add;

#line 25

allow system_app cnd_data_file:dir { open search write add_name remove_name };
allow s_system_app cnd_data_file:dir { open search write add_name remove_name };
#line 27
allow system_app cnd_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app cnd_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 28
allow system_app bluetooth:unix_stream_socket ioctl;
allow s_system_app bluetooth:unix_stream_socket ioctl;
#line 29

# access to tee domain
allow system_app tee:unix_dgram_socket sendto;
allow s_system_app tee:unix_dgram_socket sendto;
#line 32

# access to color service SDK
allow system_app color_service:service_manager add;
allow s_system_app color_service:service_manager add;
#line 35

# system app to access DTS data files
allow system_app dts_data_file:dir { open getattr read search ioctl };
allow s_system_app dts_data_file:dir { open getattr read search ioctl };
#line 38
allow system_app dts_data_file:file { getattr open read ioctl lock };
allow s_system_app dts_data_file:file { getattr open read ioctl lock };
#line 39

# access to firmware file
#line 43


# access to time_daemon
allow system_app time_daemon:unix_stream_socket connectto;
allow s_system_app time_daemon:unix_stream_socket connectto;
#line 47

# usf (ultrasound) apps need following permissions
allow system_app usf:unix_stream_socket connectto;
allow s_system_app usf:unix_stream_socket connectto;
#line 50
allow system_app usf_data_file:sock_file write;
allow s_system_app usf_data_file:sock_file write;
#line 51
allow system_app usf_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app usf_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 52
allow system_app usf_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app usf_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 53
allow system_app usf_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app usf_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 54
allow system_app usf_prop:property_service set;
allow s_system_app usf_prop:property_service set;
#line 55

# allow system_app to interact with dtseagleservice

#line 57
# Call the server domain and optionally transfer references to it.
#line 57
allow system_app dtseagleservice:binder { call transfer };
allow s_system_app dtseagleservice:binder { call transfer };
#line 57
# Allow the serverdomain to transfer references to the client on the reply.
#line 57
allow dtseagleservice system_app:binder transfer;
allow dtseagleservice s_system_app:binder transfer;
#line 57
# Receive and use open files from the server.
#line 57
allow system_app dtseagleservice:fd use;
allow s_system_app dtseagleservice:fd use;
#line 57

# allow system_app to interact with fido daemon

#line 59
# Call the server domain and optionally transfer references to it.
#line 59
allow system_app fidodaemon:binder { call transfer };
allow s_system_app fidodaemon:binder { call transfer };
#line 59
# Allow the serverdomain to transfer references to the client on the reply.
#line 59
allow fidodaemon system_app:binder transfer;
allow fidodaemon s_system_app:binder transfer;
#line 59
# Receive and use open files from the server.
#line 59
allow system_app fidodaemon:fd use;
allow s_system_app fidodaemon:fd use;
#line 59


# access to seemp folder
allow system_app seemp_file:dir { open getattr read search ioctl };
allow s_system_app seemp_file:dir { open getattr read search ioctl };
#line 63
allow system_app seemp_file:{ file fifo_file } { { getattr open read ioctl lock } { open append write } };
allow s_system_app seemp_file:{ file fifo_file } { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/system_server.te"
#============= system_server ==============
# allow system_server to communicate with cnd process over cnd_socket

#line 3
allow system_server cnd_socket:sock_file write;
#line 3
allow system_server cnd:unix_stream_socket connectto;
#line 3

# allow  system/framework applications to update the cnd configuration files
allow system_server cnd_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server cnd_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Access to sensors socket

#line 9
allow system_server sensors_socket:sock_file write;
#line 9
allow system_server sensors:unix_stream_socket connectto;
#line 9


#line 10
allow system_server sensors_socket:sock_file write;
#line 10
allow system_server sensors:unix_dgram_socket sendto;
#line 10

allow system_server sensors:unix_stream_socket sendto;
allow system_server sensors_socket:sock_file { getattr open read ioctl lock };

#line 13
allow system_server qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 13

#line 13
allow system_server qmuxd_socket:sock_file write;
#line 13
allow system_server qmuxd:unix_stream_socket connectto;
#line 13

#line 13
allow system_server qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 13
;

# access to perflock
allow system_server mpctl_socket:dir { open getattr read search ioctl };

#line 17
allow system_server mpctl_socket:sock_file write;
#line 17
allow system_server mpdecision:unix_dgram_socket sendto;
#line 17


#line 18
allow system_server mpctl_socket:sock_file write;
#line 18
allow system_server mpdecision:unix_stream_socket connectto;
#line 18


# allow  system/framework applications to update the dpmd configuration files

#line 21
allow system_server dpmd_socket:sock_file write;
#line 21
allow system_server dpmd:unix_stream_socket connectto;
#line 21
;
allow system_server dpmd_socket:sock_file write;
allow system_server dpmd_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server dpmservice:service_manager add;
allow system_server dpmd_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server socket_device:sock_file write;


#line 28
allow system_server mpctl_socket:sock_file write;
#line 28
allow system_server perfd:unix_dgram_socket sendto;
#line 28


#line 29
allow system_server mpctl_socket:sock_file write;
#line 29
allow system_server perfd:unix_stream_socket connectto;
#line 29


# For location
type_transition system_server location_data_file:sock_file location_socket "location-mq-s";
allow system_server location:unix_stream_socket connectto;
allow system_server location_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server location_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server location_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server location_app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow system_server location_app_data_file:dir { open getattr read search ioctl };
allow system_server location_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#For wifistatemachine
allow system_server kernel:key search;
allow system_server wbc_service:service_manager add;

#For ssr
allow system_server ssr_device:chr_file { read open };

allow system_server fuse:dir search;
allow system_server persist_file:dir search;

#For ANT tty communication and to set wc_transport prop
allow system_server bluetooth_prop:property_service set;
allow system_server serial_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server smd_device:chr_file { { getattr open read ioctl lock } { open append write } };

#For BT firmware
allow system_server bt_firmware_file:dir { open getattr read search ioctl };
allow system_server bt_firmware_file:file { getattr open read ioctl lock };

# Allow system_server to add digital pen system service
allow system_server usf_service:service_manager add;

# Allow system server access to usf resources
allow system_server usf:process signal;
allow system_server usf:unix_stream_socket connectto;
allow system_server usf_data_file:sock_file write;
allow system_server usf_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server usf_data_file:file { getattr open read ioctl lock };
allow system_server usf_data_file:lnk_file { getattr open read ioctl lock };
allow system_server usf_prop:property_service set;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/tbaseLoader.te"
# Copyright (c) 2015, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# tbase loader
## SEC removed: type tbaseLoader, domain;
typealias mobicoredaemon alias tbaseLoader;
type tbaseLoader_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
## SEC removed:init_daemon_domain(tbaseLoader)

#line 33
# Allow the necessary permissions.
#line 33

#line 33
# Old domain may exec the file and transition to the new domain.
#line 33
allow init tbaseLoader_exec:file { getattr open read execute };
#line 33
allow init tbaseLoader:process transition;
#line 33
# New domain is entered by executing the file.
#line 33
allow tbaseLoader tbaseLoader_exec:file { entrypoint open read execute getattr };
#line 33
# New domain can send SIGCHLD to its caller.
#line 33
allow tbaseLoader init:process sigchld;
#line 33
# Enable AT_SECURE, i.e. libc secure mode.
#line 33
dontaudit init tbaseLoader:process noatsecure;
#line 33
# XXX dontaudit candidate but requires further study.
#line 33
allow init tbaseLoader:process { siginh rlimitinh };
#line 33

#line 33
# Make the transition occur by default.
#line 33
type_transition init tbaseLoader_exec:process tbaseLoader;
#line 33


# Allow tbaseLoader to use qseecom services for loading the app
allow tbaseLoader tee_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Allow tbaseLoader to access the firmware files

#line 39
allow tbaseLoader firmware_file:dir { open getattr read search ioctl };
#line 39
allow tbaseLoader firmware_file:{ file lnk_file } { getattr open read ioctl lock };
#line 39

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/thermal-engine.te"
# thermal-engine daemon
type thermal-engine, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type thermal-engine_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init thermal-engine_exec:file { getattr open read execute };
#line 6
allow init thermal-engine:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow thermal-engine thermal-engine_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow thermal-engine init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init thermal-engine:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init thermal-engine:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init thermal-engine_exec:process thermal-engine;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type thermal-engine_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition thermal-engine tmpfs:file thermal-engine_tmpfs;
#line 6
allow thermal-engine thermal-engine_tmpfs:file { read write };
#line 6

#line 6


#============= thermal-engine ==============
#This is to access thermal query device
allow thermal-engine thermal_device:chr_file { { getattr open read ioctl lock } { open append write } };
#This is required to access smem log device
allow thermal-engine smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow thermal-engine self:capability { dac_read_search dac_override fsetid sys_boot };
allow thermal-engine self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#This is required to access thermal sockets
allow thermal-engine thermal_socket:dir { open search write add_name remove_name };
allow thermal-engine thermal_socket:sock_file { create setattr open read write };
allow thermal-engine socket_device:dir { open search write add_name remove_name };
#This is required for thermal sysfs access
allow thermal-engine sysfs_thermal:dir { open getattr read search ioctl };
allow thermal-engine sysfs_thermal:file { { getattr open read ioctl lock } { open append write } };
allow thermal-engine sysfs_thermal:lnk_file read;
allow thermal-engine sysfs:file write;
#This is required for qmi access

#line 25
allow thermal-engine qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 25

#line 25
allow thermal-engine qmuxd_socket:sock_file write;
#line 25
allow thermal-engine qmuxd:unix_stream_socket connectto;
#line 25

#line 25
allow thermal-engine qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 25
;
allow thermal-engine sysfs_mpdecision:file { { getattr open read ioctl lock } { open append write } };

#line 27
allow thermal-engine sysfs_ssr:dir { open getattr read search ioctl };
#line 27
allow thermal-engine sysfs_ssr:{ file lnk_file } { getattr open read ioctl lock };
#line 27
;
#This is required for wake alarm access
allow thermal-engine self:capability2 wake_alarm;
#This is required for thermal perfd access
allow thermal-engine mpctl_socket:dir search;
allow thermal-engine mpctl_socket:sock_file write;

#line 33
allow thermal-engine mpctl_socket:sock_file write;
#line 33
allow thermal-engine perfd:unix_dgram_socket sendto;
#line 33


#line 34
allow thermal-engine mpctl_socket:sock_file write;
#line 34
allow thermal-engine perfd:unix_stream_socket connectto;
#line 34

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/time_daemon.te"
# Policies for time daemon
type time_daemon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type time_daemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# SEC removed : type time_data_file, file_type, data_file_type;

# Make transition to its own time_daemon domain from init

#line 7

#line 7
# Allow the necessary permissions.
#line 7

#line 7
# Old domain may exec the file and transition to the new domain.
#line 7
allow init time_daemon_exec:file { getattr open read execute };
#line 7
allow init time_daemon:process transition;
#line 7
# New domain is entered by executing the file.
#line 7
allow time_daemon time_daemon_exec:file { entrypoint open read execute getattr };
#line 7
# New domain can send SIGCHLD to its caller.
#line 7
allow time_daemon init:process sigchld;
#line 7
# Enable AT_SECURE, i.e. libc secure mode.
#line 7
dontaudit init time_daemon:process noatsecure;
#line 7
# XXX dontaudit candidate but requires further study.
#line 7
allow init time_daemon:process { siginh rlimitinh };
#line 7

#line 7
# Make the transition occur by default.
#line 7
type_transition init time_daemon_exec:process time_daemon;
#line 7

#line 7

#line 7
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 7
type time_daemon_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69, newAttr90;
#line 7
type_transition time_daemon tmpfs:file time_daemon_tmpfs;
#line 7
allow time_daemon time_daemon_tmpfs:file { read write };
#line 7

#line 7

allow time_daemon smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Add rules for access permissions
#============= IOCTL operations ==============
allow time_daemon rtc_device:chr_file { open read ioctl };
allow time_daemon alarm_device:chr_file { open read write ioctl };

#============= File read/write ==============
allow time_daemon time_data_file:file { write create open read };
allow time_daemon time_data_file:dir { write add_name search };
allow time_daemon self:socket { write read create ioctl };
allow time_daemon self:capability { setuid setgid };


#line 21
allow time_daemon sysfs_esoc:dir { open getattr read search ioctl };
#line 21
allow time_daemon sysfs_esoc:{ file lnk_file } { getattr open read ioctl lock };
#line 21
;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/ueventd.te"
#Allow firmware_file access to load Non-HLOS images
allow ueventd firmware_file:dir search;
allow ueventd firmware_file:file { read getattr open };

#Allow persist_file access to wcnss bin
allow ueventd persist_file:dir search;
allow ueventd persist_file:file { read getattr open };

#for wifi to access wifi_data_file
allow ueventd wifi_data_file:dir search;
allow ueventd wifi_data_file:file { read getattr open };

allow ueventd sysfs_battery_supply:file { open append write };
allow ueventd sysfs_thermal:file { open append write };
allow ueventd sysfs_usb_supply:file { open append write };
allow ueventd mba_debug_dev:blk_file { getattr open read ioctl lock };
allow ueventd sysfs_socinfo:file { open append write };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/untrusted_app.te"
# access to perflock

#line 2
allow untrusted_app mpctl_socket:sock_file write;
allow umcagent_app mpctl_socket:sock_file write;
allow vpn_untrusted_app mpctl_socket:sock_file write;
allow trustonicpartner_app mpctl_socket:sock_file write;
allow llk_untrusted_app mpctl_socket:sock_file write;
allow filtered_untrusted_app mpctl_socket:sock_file write;
allow filtered_google_app mpctl_socket:sock_file write;
allow knox_untrusted_app mpctl_socket:sock_file write;
allow irm_app mpctl_socket:sock_file write;
allow gad_untrusted_app mpctl_socket:sock_file write;
allow carrier_app mpctl_socket:sock_file write;
#line 2
allow untrusted_app mpdecision:unix_dgram_socket sendto;
allow umcagent_app mpdecision:unix_dgram_socket sendto;
allow vpn_untrusted_app mpdecision:unix_dgram_socket sendto;
allow trustonicpartner_app mpdecision:unix_dgram_socket sendto;
allow llk_untrusted_app mpdecision:unix_dgram_socket sendto;
allow filtered_untrusted_app mpdecision:unix_dgram_socket sendto;
allow filtered_google_app mpdecision:unix_dgram_socket sendto;
allow knox_untrusted_app mpdecision:unix_dgram_socket sendto;
allow irm_app mpdecision:unix_dgram_socket sendto;
allow gad_untrusted_app mpdecision:unix_dgram_socket sendto;
allow carrier_app mpdecision:unix_dgram_socket sendto;
#line 2


#line 3
allow untrusted_app mpctl_socket:sock_file write;
allow umcagent_app mpctl_socket:sock_file write;
allow vpn_untrusted_app mpctl_socket:sock_file write;
allow trustonicpartner_app mpctl_socket:sock_file write;
allow llk_untrusted_app mpctl_socket:sock_file write;
allow filtered_untrusted_app mpctl_socket:sock_file write;
allow filtered_google_app mpctl_socket:sock_file write;
allow knox_untrusted_app mpctl_socket:sock_file write;
allow irm_app mpctl_socket:sock_file write;
allow gad_untrusted_app mpctl_socket:sock_file write;
allow carrier_app mpctl_socket:sock_file write;
#line 3
allow untrusted_app mpdecision:unix_stream_socket connectto;
allow umcagent_app mpdecision:unix_stream_socket connectto;
allow vpn_untrusted_app mpdecision:unix_stream_socket connectto;
allow trustonicpartner_app mpdecision:unix_stream_socket connectto;
allow llk_untrusted_app mpdecision:unix_stream_socket connectto;
allow filtered_untrusted_app mpdecision:unix_stream_socket connectto;
allow filtered_google_app mpdecision:unix_stream_socket connectto;
allow knox_untrusted_app mpdecision:unix_stream_socket connectto;
allow irm_app mpdecision:unix_stream_socket connectto;
allow gad_untrusted_app mpdecision:unix_stream_socket connectto;
allow carrier_app mpdecision:unix_stream_socket connectto;
#line 3


# diag device node access is restricted to untrusted_app
#SEC neverallow untrusted_app diag_device:chr_file rw_file_perms;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/usb_uicc_daemon.te"
# usb_uicc_daemon
type usb_uicc_daemon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type usb_uicc_daemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Make transition from init to its domain

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init usb_uicc_daemon_exec:file { getattr open read execute };
#line 6
allow init usb_uicc_daemon:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow usb_uicc_daemon usb_uicc_daemon_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow usb_uicc_daemon init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init usb_uicc_daemon:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init usb_uicc_daemon:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init usb_uicc_daemon_exec:process usb_uicc_daemon;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type usb_uicc_daemon_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 6
type_transition usb_uicc_daemon tmpfs:file usb_uicc_daemon_tmpfs;
#line 6
allow usb_uicc_daemon usb_uicc_daemon_tmpfs:file { read write };
#line 6

#line 6


allow usb_uicc_daemon property_socket:sock_file { open append write };
allow usb_uicc_daemon self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow usb_uicc_daemon usb_uicc_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow usb_uicc_daemon uicc_prop:property_service set;
allow usb_uicc_daemon sysfs_usb_uicc:file { { getattr open read ioctl lock } { open append write } };
allow usb_uicc_daemon sysfs_usb_uicc:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow usb_uicc_daemon init:unix_stream_socket connectto;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/usf.te"
# Policy for usf daemons
type usf, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type usf_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# Started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init usf_exec:file { getattr open read execute };
#line 6
allow init usf:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow usf usf_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow usf init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init usf:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init usf:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init usf_exec:process usf;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type usf_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 6
type_transition usf tmpfs:file usf_tmpfs;
#line 6
allow usf usf_tmpfs:file { read write };
#line 6

#line 6


#line 7
typeattribute usf netdomain;
#line 7


# Ultrasound device
allow usf usf_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Audio
allow usf audio_data_file:sock_file write;
allow usf audio_data_file:dir { open getattr read search ioctl };
allow usf audio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow usf proc_audiod:file { getattr open read ioctl lock };
allow usf mediaserver:unix_stream_socket connectto;
allow usf audio_device:dir search;

# Data files and persist storage
allow usf usf_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow usf usf_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow usf usf_data_file:sock_file { create unlink setattr };
allow usf usf_data_file:lnk_file { getattr open read ioctl lock };

#line 25
allow usf persist_file:dir { open getattr read search ioctl };
#line 25
allow usf persist_file:{ file lnk_file } { getattr open read ioctl lock };
#line 25


#line 26
allow usf persist_usf_file:dir { open getattr read search ioctl };
#line 26
allow usf persist_usf_file:{ file lnk_file } { getattr open read ioctl lock };
#line 26


# Properties
allow usf ctl_default_prop:property_service set;
allow usf usf_prop:property_service set;

# Sockets

#line 33
allow usf property_socket:sock_file write;
#line 33
allow usf init:unix_stream_socket connectto;
#line 33
;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/vm_bms.te"
#integrated process
type vm_bms, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type vm_bms_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init vm_bms_exec:file { getattr open read execute };
#line 6
allow init vm_bms:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow vm_bms vm_bms_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow vm_bms init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init vm_bms:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init vm_bms:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init vm_bms_exec:process vm_bms;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type vm_bms_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 6
type_transition vm_bms tmpfs:file vm_bms_tmpfs;
#line 6
allow vm_bms vm_bms_tmpfs:file { read write };
#line 6

#line 6


#allow vm_bms to visit chr_file
allow vm_bms tmpfs:chr_file { read write getattr };
allow vm_bms vm_bms_device:chr_file { open read write ioctl };
allow vm_bms battery_data_device:chr_file { open read write ioctl };

#allow vm_bms to drop down to system service
allow vm_bms self:capability { setpcap setgid setuid };

#allow vm_bms to block the system suspend
allow vm_bms self:capability2 block_suspend;

#allow vm_bms to get the wake lock
allow vm_bms sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

#allow vm_bms to visit sysfs
allow vm_bms sysfs:file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/vold.te"
allow vold tee_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vold kernel:system module_request;
allow vold self:capability2 block_suspend;
allow vold fscklogs:file { write create open getattr };
allow vold proc_sysrq:file { { getattr open read ioctl lock } { open append write } };
allow vold self:capability sys_boot;
allow vold cache_file:dir { write add_name };
allow vold cache_file:file { write create open };
allow vold proc_dirty_ratio:file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/wcnss_service.te"
type wcnss_service, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type wcnss_service_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init wcnss_service_exec:file { getattr open read execute };
#line 4
allow init wcnss_service:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow wcnss_service wcnss_service_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow wcnss_service init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init wcnss_service:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init wcnss_service:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init wcnss_service_exec:process wcnss_service;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type wcnss_service_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 4
type_transition wcnss_service tmpfs:file wcnss_service_tmpfs;
#line 4
allow wcnss_service wcnss_service_tmpfs:file { read write };
#line 4

#line 4


#line 5
typeattribute wcnss_service netdomain;
#line 5



#line 7
allow wcnss_service property_socket:sock_file write;
#line 7
allow wcnss_service init:unix_stream_socket connectto;
#line 7

allow wcnss_service wcnss_device:chr_file { { getattr open read ioctl lock } { open append write } };


#line 10
allow wcnss_service qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 10

#line 10
allow wcnss_service qmuxd_socket:sock_file write;
#line 10
allow wcnss_service qmuxd:unix_stream_socket connectto;
#line 10

#line 10
allow wcnss_service qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 10
;

allow wcnss_service wifi_data_file:dir { open search write add_name remove_name };
allow wcnss_service wifi_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow wcnss_service system_prop:property_service set;
allow wcnss_service persist_file:dir { open getattr read search ioctl };

#line 17
allow wcnss_service qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 17

#line 17
allow wcnss_service qmuxd_socket:sock_file write;
#line 17
allow wcnss_service qmuxd:unix_stream_socket connectto;
#line 17

#line 17
allow wcnss_service qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 17
;

allow wcnss_service self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow wcnss_service smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow wcnss_service proc_net:file write;

# allow wpa_supplicant to send back wifi information to cnd
allow wcnss_service cnd:unix_dgram_socket sendto;
allow wcnss_service self:capability { setuid setgid dac_override net_admin };

allow wcnss_service self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow wcnss_service firmware_file:dir { open getattr read search ioctl };
allow wcnss_service firmware_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/wfd_app.te"
allow wfd_app init:unix_stream_socket connectto;
allow wfd_app node:tcp_socket node_bind;
allow wfd_app port:tcp_socket { name_bind name_connect };
allow wfd_app self:tcp_socket { bind create setopt listen write read getopt connect accept getattr };
allow wfd_app dalvikcache_data_file:file { write setattr };
allow wfd_app graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow wfd_app graphics_device:dir { open getattr read search ioctl };
allow wfd_app node:udp_socket node_bind;
allow wfd_app port:udp_socket name_bind;
allow wfd_app self:udp_socket { bind create getattr write setopt ioctl read getopt };
allow wfd_app video_device:dir { open getattr read search ioctl };
allow wfd_app video_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow wfd_app audio_device:dir { open getattr read search ioctl };
#SEC removed, neverallow Google CTS-android-5.0.2_r1 : allow wfd_app audio_device:chr_file rw_file_perms;
allow wfd_app fwmarkd_socket:sock_file write;
allow wfd_app mpctl_socket:dir { open getattr read search ioctl };
allow wfd_app netd:unix_stream_socket connectto;
allow wfd_app firmware_file:dir { open getattr read search ioctl };
allow wfd_app firmware_file:file { getattr open read ioctl lock };
#SEC removed, neverallow Google CTS-android-5.0.2_r1 : allow wfd_app tee_device:chr_file rw_file_perms;
allow wfd_app media_rw_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow wfd_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow wfd_app system_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow wfd_app uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/wfdservice.te"
type wfdservice, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type wfdservice_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#Allow for transition from init domain to wfdservice

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init wfdservice_exec:file { getattr open read execute };
#line 5
allow init wfdservice:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow wfdservice wfdservice_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow wfdservice init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init wfdservice:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init wfdservice:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init wfdservice_exec:process wfdservice;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type wfdservice_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 5
type_transition wfdservice tmpfs:file wfdservice_tmpfs;
#line 5
allow wfdservice wfdservice_tmpfs:file { read write };
#line 5

#line 5


#Inherit base socket permissions from netd domain

#line 8
typeattribute wfdservice netdomain;
#line 8


#Allow wfdservice to use Binder IPC

#line 11
# Call the servicemanager and transfer references to it.
#line 11
allow wfdservice servicemanager:binder { call transfer };
#line 11
# servicemanager performs getpidcon on clients.
#line 11
allow servicemanager wfdservice:dir search;
#line 11
allow servicemanager wfdservice:file { read open };
#line 11
allow servicemanager wfdservice:process getattr;
#line 11
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 11
# all domains in domain.te.
#line 11


#Allow for interaction with Display HAL

#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow wfdservice surfaceflinger:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow surfaceflinger wfdservice:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow wfdservice surfaceflinger:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow surfaceflinger wfdservice:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow wfdservice surfaceflinger:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow surfaceflinger wfdservice:fd use;
#line 15


#Allow apps to interact with wfdservice

#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow wfdservice platform_app:binder { call transfer };
allow wfdservice s_platform_app:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow platform_app wfdservice:binder transfer;
allow s_platform_app wfdservice:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow wfdservice platform_app:fd use;
allow wfdservice s_platform_app:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow platform_app wfdservice:binder { call transfer };
allow s_platform_app wfdservice:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow wfdservice platform_app:binder transfer;
allow wfdservice s_platform_app:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow platform_app wfdservice:fd use;
allow s_platform_app wfdservice:fd use;
#line 19


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow wfdservice system_app:binder { call transfer };
allow wfdservice s_system_app:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow system_app wfdservice:binder transfer;
allow s_system_app wfdservice:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow wfdservice system_app:fd use;
allow wfdservice s_system_app:fd use;
#line 20


#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow system_app wfdservice:binder { call transfer };
allow s_system_app wfdservice:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow wfdservice system_app:binder transfer;
allow wfdservice s_system_app:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow system_app wfdservice:fd use;
allow s_system_app wfdservice:fd use;
#line 21


#Allow access to Audio Flinger APIs

#line 24
# Call the server domain and optionally transfer references to it.
#line 24
allow wfdservice mediaserver:binder { call transfer };
#line 24
# Allow the serverdomain to transfer references to the client on the reply.
#line 24
allow mediaserver wfdservice:binder transfer;
#line 24
# Receive and use open files from the server.
#line 24
allow wfdservice mediaserver:fd use;
#line 24


#Allow access to Permission Controller in System Server

#line 27
# Call the server domain and optionally transfer references to it.
#line 27
allow wfdservice system_server:binder { call transfer };
#line 27
# Allow the serverdomain to transfer references to the client on the reply.
#line 27
allow system_server wfdservice:binder transfer;
#line 27
# Receive and use open files from the server.
#line 27
allow wfdservice system_server:fd use;
#line 27


# Mark wfdservice as a Binder service domain

#line 30
typeattribute wfdservice binderservicedomain;
#line 30


#Allow wfdservice to be registered with service manager
allow wfdservice wfdservice_service:service_manager add;

#Allow access to PCM sound card
allow wfdservice audio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow wfdservice audio_device:dir { open getattr read search ioctl };

#Allow access to /dev/graphics/fb* for screen capture
allow wfdservice graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };

#Allow communication with init over property server

#line 43
allow wfdservice property_socket:sock_file write;
#line 43
allow wfdservice init:unix_stream_socket connectto;
#line 43
;

#Allow access to /dev/video/* devices for encoding/decoding
allow wfdservice video_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow wfdservice video_device:dir { open getattr read search ioctl };

#Allow access to tee device for HDCP sessions
allow wfdservice tee_device:chr_file { { getattr open read ioctl lock } { open append write } };

#Allow access to uhid driver for HID event injection
allow wfdservice uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };

#Allow PROT_EXEC for 3rd party library loaded by wfdservice
allow wfdservice self:process execmem;

#Allow access to read mmosal_logmask file in /data partition

#line 59
 allow wfdservice system_data_file:file { getattr open read ioctl lock };
#line 61


#Allow access to firmware files for HDCP session
allow wfdservice firmware_file:file { getattr open read ioctl lock };
allow wfdservice firmware_file:dir { open getattr read search ioctl };

#Allow access to /data/media for dumping
allow wfdservice media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow wfdservice media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#allow access to sysfs to know HDMI repeater state
allow wfdservice sysfs_graphics:file { { getattr open read ioctl lock } { open append write } };
allow wfdservice self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/wpa.te"
allow wpa persist_file:dir search;

#line 2
allow wpa qmuxd_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 2

#line 2
allow wpa qmuxd_socket:sock_file write;
#line 2
allow wpa qmuxd:unix_stream_socket connectto;
#line 2

#line 2
allow wpa qmuxd_socket:sock_file { read getattr write setattr create unlink };
#line 2
;

allow wpa self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow wpa smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow wpa proc_net:file write;

# allow wpa_supplicant to send back wifi information to cnd
allow wpa cnd:unix_dgram_socket sendto;

# permission for wpa socket which IMS use to communicate
allow wpa ims:unix_dgram_socket sendto;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/zygote.te"
allow zygote shell_data_file:dir search;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/adsprpcd.te"
# for B2C users
typeattribute adsprpcd trusteddomain;
typeattribute adsprpcd device_domain;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/charger_monitor.te"

# for B2C users
typeattribute charger_monitor trusteddomain;
typeattribute charger_monitor device_domain;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/device.te"

type qseecom_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

typealias ssd_device alias ssdblk_device;
typealias modem_efs_partition_device alias modemstblk_device;
typealias modem_efs_partition_device alias fsg_device;

typealias mmc_block_device alias mmcblk0_device;
typealias rpmb_device alias mmcblk0rpmb_device;

typealias hsic_device alias qmuxd_device;

typealias gpu_device alias kgsl_device;
typeattribute kgsl_device mlstrustedobject;

typealias gadget_serial_device alias usb_serial_device;
typealias wcnss_device alias wifi_device;



#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/diag_uart_log.te"

# for B2C users
typeattribute diag trusteddomain;
typeattribute diag device_domain;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/domain.te"

#
#SEC added, /dev/qseecom contexts changed from tee_device to qseecom_device because of neverallow Rule CTS-android-5.0.2_r1
#
#bsp_qcom_v1/mediaserver.te
allow mediaserver qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

#bsp_qcom_v1/qseecomd.te
allow tee qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

#bsp_qcom_v1/drmserver.te
allow drmserver qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

#bsp_qcom_v1/vold.te
allow vold qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

#bsp_qcom_v1/keystore.te
allow keystore qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

#bsp_qcom_v1/mcStarter.te
#MSM8996 patch ES2: allow mcStarter qseecom_device:chr_file rw_file_perms;

#bsp_qcom_v1/wfd_app.te:
allow wfd_app qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/energy-awareness.te"
typealias energyawareness alias energy-awareness;
typealias energyawareness_exec alias energy-awareness_exec;

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/file.te"
typeattribute rfs_data_file appdomain_no_read_file;

typeattribute ipacm_data_file data_file_type;
typeattribute usf_data_file data_file_type;

typeattribute camera_socket socket_file_type;
typeattribute cnd_socket socket_file_type;
typeattribute dpmd_socket socket_file_type;
typeattribute dpmwrapper_socket socket_file_type;
typeattribute ims_socket socket_file_type;
typeattribute ipacm_socket socket_file_type;
typeattribute location_socket socket_file_type;
typeattribute pps_socket socket_file_type;
typeattribute mpctl_socket socket_file_type;
typeattribute sensors_socket socket_file_type;
typeattribute qmuxd_socket socket_file_type;
typeattribute qlogd_socket socket_file_type;
typeattribute thermal_socket socket_file_type;


typealias qmuxd_socket alias qmux_audio_socket;
typealias qmuxd_socket alias qmux_bluetooth_socket;
typealias qmuxd_socket alias qmux_gps_socket;
typealias qmuxd_socket alias qmux_radio_socket;


typeattribute proc_audiod rw_fs_type;
typeattribute proc_dirty_ratio rw_fs_type;

typeattribute bt_firmware_file r_fs_type;
typeattribute sysfs_battery_supply r_fs_type;
typeattribute sysfs_cpu_online r_fs_type;
typeattribute sysfs_esoc r_fs_type;
typeattribute sysfs_hsic r_fs_type;
typeattribute sysfs_hsic_modem_wait r_fs_type;
typeattribute sysfs_hsic_host_rdy r_fs_type;
typeattribute sysfs_leds r_fs_type;
typeattribute sysfs_mpdecision r_fs_type;
typeattribute sysfs_msmuart_file r_fs_type;
typeattribute sysfs_rqstats r_fs_type;
typeattribute sysfs_smd_open_timeout r_fs_type;
typeattribute sysfs_socinfo r_fs_type;
typeattribute sysfs_ssr r_fs_type;
typeattribute sysfs_ssr_toggle r_fs_type;
typeattribute sysfs_thermal r_fs_type;
typeattribute sysrq_trigger_proc r_fs_type;
typeattribute sysfs_usb_supply r_fs_type;
typeattribute sysfs_usb_uicc r_fs_type;


typeattribute location_app_data_file app_data_type;

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/gpsone_daemon.te"

typealias location alias gpsone_daemon;
typealias location_exec alias gpsone_daemon_exec;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/gsiff_daemon.te"

typealias location alias gsiff_daemon;
typealias location_exec alias gsiff_daemon_exec;

# for B2C users
typeattribute gsiff_daemon trusteddomain;
typeattribute gsiff_daemon device_domain;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/imsqmidaemon.te"
typealias ims alias imsqmidaemon;
typealias ims_exec alias imsqmidaemon_exec;

# for B2C users
typeattribute imsqmidaemon trusteddomain;
typeattribute imsqmidaemon device_domain;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/init_shell.te"

allow init_shell qcom_bt_prop:property_service set;
allow init_shell freq_prop:property_service set;

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/ipacm.te"
# ipacm-diag

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow ipacm-diag diag_device:chr_file { read write open };

########## file_type
allow ipacm-diag system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ipacm-diag system_data_file:sock_file unlink;

########## etc_type
########## known issue.
# create socket IPACMDIAG_FILE "/data/ipacm_log_file
type_transition ipacm-diag system_data_file:sock_file ipacm_socket;
allow ipacm-diag system_data_file:dir { { open getattr read search ioctl } add_name write };
allow ipacm-diag ipacm_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


############ avc_log #############
# avc:  denied  { read write } for  pid=684 comm="ipacm-diag" name="diag" dev="tmpfs" ino=6712 scontext=u:r:ipacm-diag:s0 tcontext=u:object_r:diag_device:s0 tclass=chr_file permissive=1
# avc:  denied  { write } for  pid=684 comm="ipacm-diag" name="/" dev="sda16" ino=2 scontext=u:r:ipacm-diag:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { add_name } for  pid=684 comm="ipacm-diag" name="ipacm_log_file" scontext=u:r:ipacm-diag:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=684 comm="ipacm-diag" name="ipacm_log_file" scontext=u:r:ipacm-diag:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1
# avc:  denied  { remove_name } for  pid=668 comm="ipacm-diag" name="ipacm_log_file" dev="sda16" ino=40 scontext=u:r:ipacm-diag:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { unlink } for  pid=668 comm="ipacm-diag" name="ipacm_log_file" dev="sda16" ino=40 scontext=u:r:ipacm-diag:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/irsc_util.te"
allow irsc_util system_data_file:file { getattr open read ioctl lock };

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/ks.te"
typealias mdm_helper alias ks;
typealias mdm_helper_exec alias ks_exec;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/location-mq.te"
typealias location alias location-mq;
typealias location_exec alias location-mq_exec;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/lowi-server.te"
typealias location alias lowi-server;
typealias location_exec alias lowi-server_exec;

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/mcStarter.te"
# mobicore daemon
# MSM8996 patch ES2 : allow mcStarter self:capability dac_override;

#  avc:  denied  { dac_override } for  pid=576 comm="mcStarter" capability=1  scontext=u:r:mcStarter:s0 tcontext=u:r:mcStarter:s0 tclass=capability permissive=0

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/mdm_helper_proxy.te"
typealias mdm_helper alias mdm_helper_proxy;
typealias mdm_helper_exec alias mdm_helper_proxy_exec;

# for B2C users
typeattribute mdm_helper_proxy trusteddomain;
typeattribute mdm_helper_proxy device_domain;

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/mdm_helper.te"

# for B2C users
typeattribute mdm_helper trusteddomain;
typeattribute mdm_helper device_domain;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/mm-qcamera-daemon.te"
typealias mm-qcamerad alias mm-qcamera-daemon;
typealias mm-qcamerad_exec alias mm-qcamera-daemon_exec;



#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/netmgrd.te"
# for B2C users
typeattribute netmgrd trusteddomain;
typeattribute netmgrd device_domain;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/perfd.te"


#line 2
allow appdomain mpctl_socket:sock_file write;
#line 2
allow appdomain perfd:unix_stream_socket connectto;
#line 2


#P150222-00403 
allow perfd mediaserver:dir { open getattr read search ioctl };
allow perfd mediaserver:file { getattr open read ioctl lock };

# JPN denials
allow perfd domain:dir search;
allow perfd domain:file { open read };

############ avc_log #############
# avc:  denied  { connectto } for  pid=5730 comm="amsung.mdmtest2" path="/data/misc/perfd/mpctl" scontext=u:r:s_untrusted_app:s0 tcontext=u:r:perfd:s0 tclass=unix_stream_socket permissive=0 SEPF_SM-P355_5.0.2_0003
# avc:  denied  { search } for  pid=1991 comm="perfd" name="276" dev="proc" ino=76287 scontext=u:r:perfd:s0 tcontext=u:r:mediaserver:s0 tclass=dir permissive=0 SEPF_SM-T355_5.0.2_0008
# avc:  denied  { search } for  pid=3673 comm="perfd" name="330" dev="proc" ino=133438 scontext=u:r:perfd:s0 tcontext=u:r:oneseg_mw:s0 tclass=dir permissive=1 SEPF_SM-J500F_5.0.2_0011
# avc:  denied  { read } for  pid=3673 comm="perfd" name="status" dev="proc" ino=133439 scontext=u:r:perfd:s0 tcontext=u:r:oneseg_mw:s0 tclass=file permissive=1 SEPF_SM-J500F_5.0.2_0011
# avc:  denied  { open } for  pid=3673 comm="perfd" path="/proc/330/status" dev="proc" ino=133439 scontext=u:r:perfd:s0 tcontext=u:r:oneseg_mw:s0 tclass=file permissive=1 SEPF_SM-J500F_5.0.2_0011

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/property.te"
type qcom_bt_prop, property_type, newAttr79, newAttr80;
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/qcom-system-daemon.te"
typealias qcomsysd alias qcom-system-daemon;
typealias qcomsysd_exec alias qcom-system-daemon_exec;

# for B2C users
typeattribute qcom-system-daemon trusteddomain;
typeattribute qcom-system-daemon device_domain;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/qseecomd.te"
typealias tee alias qseecomd;
typealias tee_exec alias qseecomd_exec;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/quipc_igsn.te"
typealias location alias quipc_igsn;
typealias location_exec alias quipc_igsn_exec;


#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/quipc_main.te"
typealias location alias quipc_main;
typealias location_exec alias quipc_main_exec;

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/rfs_access.te"
# rfs_access
# for B2C users
typeattribute rfs_access trusteddomain;
typeattribute rfs_access device_domain;

#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/qcom_common/wcnss_service.te"

typeattribute wcnss_service trusteddomain;
typeattribute wcnss_service device_domain;

#line 1 "vendor/samsung/common/sepolicy/model/ime_app.te"

# ime_app(com.sec.android.inputmethod)
# Remote Code Execution issue
# https://www.nowsecure.com/blog/2015/06/16/remote-code-execution-as-system-user-on-samsung-phones/

# Read and write /data/data subdirectory.
allow ime_app system_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app system_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Read /data/misc/keychain subdirectory.
allow ime_app keychain_data_file:dir { open getattr read search ioctl };
allow ime_app keychain_data_file:file { getattr open read ioctl lock };

# Read and write to other system-owned /data directories, such as
# /data/system/cache and /data/misc/user.
#allow ime_app system_data_file:dir create_dir_perms;
#allow ime_app system_data_file:file create_file_perms;
allow ime_app system_data_file:dir { open getattr read search ioctl };
allow ime_app system_data_file:file { getattr open read ioctl lock };
#allow ime_app misc_user_data_file:dir create_dir_perms;
#allow ime_app misc_user_data_file:file create_file_perms;
allow ime_app misc_user_data_file:dir { open getattr read search ioctl };
allow ime_app misc_user_data_file:file { getattr open read ioctl lock };
# Audit writes to these directories and files so we can identify
# and possibly move these directories into their own type in the future.
## SEC_SEforAndroid
#auditallow ime_app system_data_file:dir { create setattr add_name remove_name rmdir rename };
#auditallow ime_app system_data_file:file { create setattr append write link unlink rename };

# Read wallpaper file.
allow ime_app wallpaper_file:file { getattr open read ioctl lock };

# Write to properties

#line 34
allow ime_app property_socket:sock_file write;
#line 34
allow ime_app init:unix_stream_socket connectto;
#line 34

allow ime_app debug_prop:property_service set;
allow ime_app net_radio_prop:property_service set;
allow ime_app system_radio_prop:property_service set;
## SEC_SEforAndroid
#auditallow ime_app net_radio_prop:property_service set;
#auditallow ime_app system_radio_prop:property_service set;
allow ime_app system_prop:property_service set;
allow ime_app ctl_bugreport_prop:property_service set;
allow ime_app logd_prop:property_service set;

# Create /data/anr/traces.txt.
allow ime_app anr_data_file:dir { { open getattr read search ioctl } add_name write };
allow ime_app anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Settings need to access app name and icon from asec
allow ime_app asec_apk_file:file { getattr open read ioctl lock };

allow ime_app system_app_service:service_manager add;

allow ime_app keystore:keystore_key { test get insert delete exist saw reset password lock unlock zero sign verify grant duplicate clear_uid };


#line 56
# Group AID_LOG checked by filesystem & logd
#line 56
# to permit control commands
#line 56

#line 56
allow ime_app logd_socket:sock_file write;
#line 56
allow ime_app logd:unix_stream_socket connectto;
#line 56

#line 56


#
# ime_app
#

############ aosp and sec_common #############
########## type and macro.
# temporary permissive to gather the log.
# permissive ime_app;


#line 67
allow ime_app kernel:system syslog_read;
#line 67


#line 68
allow ime_app log_device:chr_file read;
#line 68
allow ime_app system_file:file { getattr execute execute_no_trans };
#line 68


#binder_call(ime_app, init)
#violate neverallow rule


#line 73
# Call the server domain and optionally transfer references to it.
#line 73
allow ime_app bintvoutservice:binder { call transfer };
#line 73
# Allow the serverdomain to transfer references to the client on the reply.
#line 73
allow bintvoutservice ime_app:binder transfer;
#line 73
# Receive and use open files from the server.
#line 73
allow ime_app bintvoutservice:fd use;
#line 73


#line 74
# Call the server domain and optionally transfer references to it.
#line 74
allow ime_app sensorhubservice:binder { call transfer };
#line 74
# Allow the serverdomain to transfer references to the client on the reply.
#line 74
allow sensorhubservice ime_app:binder transfer;
#line 74
# Receive and use open files from the server.
#line 74
allow ime_app sensorhubservice:fd use;
#line 74


#line 75
# Call the server domain and optionally transfer references to it.
#line 75
allow ime_app healthd:binder { call transfer };
#line 75
# Allow the serverdomain to transfer references to the client on the reply.
#line 75
allow healthd ime_app:binder transfer;
#line 75
# Receive and use open files from the server.
#line 75
allow ime_app healthd:fd use;
#line 75


#line 76
# Call the server domain and optionally transfer references to it.
#line 76
allow ime_app jackservice:binder { call transfer };
#line 76
# Allow the serverdomain to transfer references to the client on the reply.
#line 76
allow jackservice ime_app:binder transfer;
#line 76
# Receive and use open files from the server.
#line 76
allow ime_app jackservice:fd use;
#line 76


#line 77
# Call the server domain and optionally transfer references to it.
#line 77
allow ime_app zygote:binder { call transfer };
#line 77
# Allow the serverdomain to transfer references to the client on the reply.
#line 77
allow zygote ime_app:binder transfer;
#line 77
# Receive and use open files from the server.
#line 77
allow ime_app zygote:fd use;
#line 77


#line 78
allow ime_app dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 78
allow ime_app dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 78
allow ime_app dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 78
allow ime_app bugreport_exec:file { execute execute_no_trans };
#line 78
allow ime_app dumpstate_exec:file { execute execute_no_trans };
#line 78
allow ime_app dumpsys_exec:file { execute execute_no_trans };
#line 78


#line 79
allow ime_app mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 79
allow ime_app mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 79
# TODO: Figure out proper sockets
#line 79
allow ime_app mobicoredaemon:unix_stream_socket connectto;
#line 79


#line 80
allow ime_app cs_socket:sock_file write;
#line 80
allow ime_app cs:unix_stream_socket connectto;
#line 80


#line 81
allow ime_app epm_socket:sock_file write;
#line 81
allow ime_app epmd:unix_stream_socket connectto;
#line 81


#line 82
allow ime_app property_socket:sock_file write;
#line 82
allow ime_app init:unix_stream_socket connectto;
#line 82


########## self and domain_type
allow ime_app at_distributor:unix_stream_socket connectto;
allow ime_app connfwexe:unix_stream_socket connectto;
allow ime_app container_app:dir { open getattr read search ioctl };
allow ime_app cs:unix_stream_socket connectto;
allow ime_app init:process signull;
allow ime_app init:unix_dgram_socket sendto;
allow ime_app init:unix_stream_socket setopt;
allow ime_app IPSecService:unix_stream_socket connectto;
allow ime_app kernel:process setsched;
allow ime_app kernel:system module_request;
#neverallow Google CTS-android-5.0.2_r1 :allow ime_app kiesexe:process signal;
allow ime_app mediaserver:unix_stream_socket connectto;
allow ime_app mobexdaemon:unix_stream_socket connectto;
allow ime_app netd:unix_stream_socket connectto;
allow ime_app samsung_app:lnk_file { getattr open read ioctl lock };
allow ime_app secure_storage:unix_stream_socket connectto;

#allow ime_app self:capability { setuid setgid net_raw chown sys_ptrace sys_module setgid net_admin dac_override };
#violate neverallow rule

allow ime_app self:chr_file { { getattr open read ioctl lock } { open append write } };

#allow ime_app self:netlink_kobject_uevent_socket *;
#violate neverallow rule. change to:
allow ime_app self:netlink_kobject_uevent_socket { read create getattr setattr lock relabelfrom relabelto bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };

allow ime_app self:netlink_route_socket *;
allow ime_app self:packet_socket { write bind create read setopt };
allow ime_app self:tun_socket create;
allow ime_app self:{ udp_socket tcp_socket rawip_socket } *;
allow ime_app sensorhubservice:fifo_file { getattr open read ioctl lock };
allow ime_app syscope_app:process signal;
allow ime_app system:tcp_socket { getattr getopt };
allow ime_app system:unix_stream_socket connectto;
allow ime_app untrusteddomain:lnk_file { { getattr link unlink rename } { getattr open read ioctl lock } };
allow ime_app vcsFPService:process signull;
allow ime_app vold:unix_stream_socket connectto;
allow ime_app wpa:unix_dgram_socket sendto;

########## fs_type
allow ime_app cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app debugfs:file { getattr open read ioctl lock };

#allow ime_app proc:file w_file_perms;
#violate neverallow rule. change to:
allow ime_app proc:file { open append };

allow ime_app sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow ime_app sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write } };
allow ime_app sysfs_exynos_writable:file { open append write };
allow ime_app sysfs_lcd_writable:file { open append write };
allow ime_app sysfs_mst_writable:file { { getattr open read ioctl lock } { open append write } };
allow ime_app sysfs_sec:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ime_app sysfs_sec:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow ime_app sysfs_sensor_writable:file { { getattr open read ioctl lock } { open append write } };
allow ime_app sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow ime_app tmpfs:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ime_app tmpfs:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow ime_app alarm_device:chr_file { { getattr open read ioctl lock } { open append write } };

#allow ime_app block_device:blk_file rw_file_perms;
#violate neverallow rule. change to:
allow ime_app block_device:blk_file { getattr ioctl lock append };

allow ime_app block_device:lnk_file { getattr open read ioctl lock };
allow ime_app device:sock_file write;
allow ime_app device:file { getattr open read ioctl lock };
allow ime_app dw_mmc_device:dir { open getattr read search ioctl };
allow ime_app dw_mmc_device:file { { getattr open read ioctl lock } { open append write } };
#neverallow Google CTS-android-5.0.2_r1 : allow ime_app efsblk_device:blk_file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow ime_app emmcblk_device:blk_file rw_file_perms;
allow ime_app graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ime_app input_device:chr_file { read write ioctl open };
allow ime_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ime_app null_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app ovr_device:chr_file { { getattr open read ioctl lock } { open append write } };
#neverallow Google CTS-android-5.0.2_r1 : allow ime_app paramblk_device:blk_file rw_file_perms;
allow ime_app secure_storage_device:dir { open getattr read search ioctl };
allow ime_app secure_storage_device:sock_file { open append write };
allow ime_app socket_device:dir { open search write add_name remove_name };

#allow ime_app socket_device:sock_file write;
#violate neverallow rule

#allow ime_app socket_device:sock_file create_file_perms;
#violate neverallow rule. change to:
allow ime_app socket_device:sock_file { create setattr { getattr open read ioctl lock } append { getattr link unlink rename } };

allow ime_app tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ime_app tui_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ime_app url_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ime_app validity_device:{ fifo_file chr_file } { { getattr open read ioctl lock } { open append write } };
allow ime_app validity_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ime_app validity_device:file { getattr open read ioctl lock };

########## file_type
allow ime_app anr_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app anr_data_file:file { getattr link unlink rename };
allow ime_app app_data_file:file { execute execmod };
allow ime_app gad_untrusted_app_data_file:file { execute execmod };
#line 190
allow ime_app app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#allow ime_app apk_tmp_file:file rw_file_perms;
#violate neverallow rule. change to

allow ime_app audit_log:file { open append write };
allow ime_app backup_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app backup_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app cache_backup_file:file { getattr link unlink rename };
allow ime_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app carrier_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app carrier_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app carrier_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app cs_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow ime_app dalvikcache_data_file:dir { open getattr read search ioctl };

#allow ime_app dhcp_data_file:file create_file_perms;
#violate neverallow rule. change to:
allow ime_app dhcp_data_file:file { getattr open read ioctl lock };

allow ime_app dhcp_exec:file { getattr execute execute_no_trans };
allow ime_app diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ime_app dnsproxyd_socket:sock_file { open append write };

#allow ime_app drm_data_file:dir rw_dir_perms;
#violate neverallow rule. change to:
allow ime_app drm_data_file:dir { { open getattr read search ioctl } add_name remove_name };

#allow ime_app drm_data_file:file create_file_perms;
#violate neverallow rule. change to:
allow ime_app drm_data_file:file { getattr open read ioctl lock };
allow ime_app drm_playready_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ime_app drm_playready_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow ime_app dumpstate_socket:sock_file { { getattr open read ioctl lock } { open append write } };

#allow ime_app efs_file:dir create_dir_perms;
#violate neverallow rule. change to:
allow ime_app efs_file:dir { create reparent rmdir setattr open getattr search ioctl add_name remove_name link unlink rename };	

#allow ime_app efs_file:file create_file_perms;
#violate neverallow rule. change to:
allow ime_app efs_file:file { create setattr open ioctl lock append getattr link unlink rename };

allow ime_app epm_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow ime_app gps_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app gps_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app hidden_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app hidden_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app icd_exec:file { getattr open read ioctl lock };
allow ime_app ipsec_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow ime_app msockets_socket:sock_file { open append write };
allow ime_app mtp_socket:sock_file { open append write };
allow ime_app platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app radio_data_file:file { getattr open read ioctl lock };
allow ime_app shell_exec:file { getattr execute execute_no_trans };
allow ime_app security_file:dir { open getattr read search ioctl };
allow ime_app security_spota_file:dir { open getattr read search ioctl };
#line 249
allow ime_app security_file:file { getattr open read ioctl lock };
allow ime_app security_spota_file:file { getattr open read ioctl lock };
#line 250
allow ime_app sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app store_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app store_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app system_app_data_file:file { getattr execute execute_no_trans };
allow ime_app system_app_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app system_app_tmpfs:file { open append write };
#allow ime_app system_data_file:dir create_dir_perms;
#allow ime_app system_data_file:fifo_file rw_file_perms;
#allow ime_app system_data_file:file create_file_perms;
#allow ime_app system_data_file:lnk_file create_file_perms;
#allow ime_app system_data_file:sock_file create_file_perms;
#allow ime_app system_fifo:fifo_file w_file_perms;
#allow ime_app system_data_file:dir create_dir_perms;
allow ime_app system_data_file:fifo_file { getattr open read ioctl lock };
allow ime_app system_data_file:file { getattr open read ioctl lock };
allow ime_app system_data_file:lnk_file { getattr open read ioctl lock };
allow ime_app system_data_file:sock_file { getattr open read ioctl lock };

#allow ime_app system_file:file setattr;
#violate neverallow rule

allow ime_app tima_dump_exec:file { getattr execute execute_no_trans };
allow ime_app tombstone_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app tombstone_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app unlabeled:file write;
#allow ime_app users_system_data_file:dir create_dir_perms;
#allow ime_app users_system_data_file:file create_file_perms;
allow ime_app users_system_data_file:dir { open getattr read search ioctl };
allow ime_app users_system_data_file:file { getattr open read ioctl lock };

#allow ime_app wifi_data_file:dir rw_dir_perms;
#violate neverallow rule. change to:
allow ime_app wifi_data_file:dir { open getattr read search ioctl };

#allow ime_app wifi_data_file:file create_file_perms;
#violate neverallow rule. change to:
allow ime_app wifi_data_file:file { getattr open read ioctl lock };

#allow ime_app wifi_data_file:sock_file create_file_perms;
#violate neverallow rule. change to:
allow ime_app wifi_data_file:sock_file { getattr open read ioctl lock };

allow ime_app wifi_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app wifi_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app wpa_socket:sock_file { open append write };

########## etc_type
allow ime_app ctl_default_prop:property_service set;
allow ime_app ctl_dumpstate_prop:property_service set;
#neverallow Google CTS-android-5.0.2_r1 : allow ime_app default_prop:property_service set;
allow ime_app csc_prop:property_service set;
allow ime_app ims_service:service_manager add;
allow ime_app log_prop:property_service set;
allow ime_app node:{ tcp_socket udp_socket } node_bind;
allow ime_app port:tcp_socket { name_bind name_connect };
allow ime_app port:udp_socket name_bind;
allow ime_app seclevel_prop:property_service set;
allow ime_app shell_prop:property_service set;
allow ime_app system_prop:property_service set;
allow ime_app writingbuddymanager_service:service_manager add;

########## known issue.
#r_dir_file(ime_app, file_type)
# replacing r_dir_file macro and removing container related access
allow ime_app newAttr54:dir { open getattr read search ioctl };
allow ime_app newAttr54:{ file lnk_file } { getattr open read ioctl lock };

# Allow settings app to read from asec
allow ime_app asec_apk_file:dir search;
allow ime_app asec_apk_file:file { getattr open read ioctl lock };

# Remove remount permission to satisfy assertion that appdomain apps cannot have mounton/unmount capabilities
#allow ime_app labeledfs:filesystem remount;

#from NSA
# Perform binder IPC to any app domain.

#line 327
# Call the server domain and optionally transfer references to it.
#line 327
allow ime_app appdomain:binder { call transfer };
#line 327
# Allow the serverdomain to transfer references to the client on the reply.
#line 327
allow appdomain ime_app:binder transfer;
#line 327
# Receive and use open files from the server.
#line 327
allow ime_app appdomain:fd use;
#line 327


# Read SELinux enforcing status.

#line 330
allow ime_app selinuxfs:dir { open getattr read search ioctl };
#line 330
allow ime_app selinuxfs:file { getattr open read ioctl lock };
#line 330


# filterpackageservice app: load library downfilter library
allow ime_app downfilters_lib_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app downfilters_lib_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# com.samsung.syncmlservice
allow ime_app otadm_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ime_app otadm_efs_file:file { { getattr open read ioctl lock } { open append write } };

# com.sec.android.security.LogGuard
allow ime_app iss_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ime_app iss_efs_file:file { { getattr open read ioctl lock } { open append write } };

# efs relabeling for DRK and Contents Protection Key
allow ime_app prov_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app prov_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app cpk_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app cpk_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Rolback BSP Qcom Policy changes for /dev/qseecom.
allow ime_app qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

# com.sec.keyverifier read dev/icd, dev/icdr, dev/tzic
allow ime_app icd_device:chr_file { getattr open read ioctl lock };
allow ime_app tzic_device:chr_file { getattr open read ioctl lock };


############ knox_common #############
########## type and macro.
########## self and domain_type

#line 361
# Call the server domain and optionally transfer references to it.
#line 361
allow ime_app containerdomain:binder { call transfer };
#line 361
# Allow the serverdomain to transfer references to the client on the reply.
#line 361
allow containerdomain ime_app:binder transfer;
#line 361
# Receive and use open files from the server.
#line 361
allow ime_app containerdomain:fd use;
#line 361


########## fs_type
allow ime_app proc_avc_msg:file { getattr open read ioctl lock };

########## dev_type
allow ime_app knox_dar_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ime_app knox_kap_device:chr_file { getattr open read ioctl lock };

########## file_type
allow ime_app container_app_data_backend:dir { open getattr read search ioctl };
allow ime_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
#line 372
allow ime_app container_app_data_backend:lnk_file { getattr open read ioctl lock };
allow ime_app bbccontainer_app_data_backend:lnk_file { getattr open read ioctl lock };
#line 373
allow ime_app knox_clipboard_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ime_app knox_clipboard_file:file { { getattr open read ioctl lock } { open append write } };

########## etc_type
allow ime_app knox_kap_prop:property_service set;

########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
allow ime_app androidshmservice:binder call; 
allow ime_app apaservice:binder call; 
allow ime_app ATFWD-daemon:blk_file { getattr open read ioctl lock };
allow ime_app jackservice:binder call; 
allow ime_app logwrapper:unix_dgram_socket sendto;
allow ime_app mm-pp-daemon:unix_stream_socket connectto;
allow ime_app mpdecision:unix_stream_socket connectto;
allow ime_app qmuxd:unix_stream_socket connectto;
allow ime_app qseecomd:unix_dgram_socket sendto;
allow ime_app rild:unix_stream_socket connectto; 
allow ime_app secstarter:unix_dgram_socket sendto;

########## fs_type
allow ime_app ecryptfs:filesystem getattr;
allow ime_app firmware:file { getattr open read ioctl lock };

########## dev_type
#allow ime_app audio_device:chr_file rw_file_perms;
#violate neverallow rule. change to:

allow ime_app device:sock_file write;
#neverallow Google CTS-android-5.0.2_r1 : allow ime_app emmcblk_device:blk_file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow ime_app padblk_device:blk_file create_file_perms;

########## file_type
#allow ime_app app_library_file:file create_file_perms;
allow ime_app app_library_file:file { getattr open read ioctl lock };
allow ime_app carrier_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app dhcp_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ime_app pps_socket:sock_file { open append write };
allow ime_app qmux_radio_socket:dir { write add_name };
allow ime_app qmux_radio_socket:sock_file { write create setattr };

#allow ime_app shell_data_file:file w_file_perms;
#violate neverallow rule. change to:
allow ime_app shell_data_file:file { open write };

allow ime_app system_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ime_app su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ime_app zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type

########## known issue.
#TUI
allow ime_app system_server:unix_dgram_socket sendto;

# dontaudit from MtpApplication. MtpApplication enumerates /data directory. /data/rfs doesn't need to enumerate.
dontaudit ime_app rfs_data_file:dir getattr;

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow ime_app adbd:unix_stream_socket accept; 
allow ime_app diagexe:unix_stream_socket connectto;
allow ime_app syscope_app:process signal;
allow ime_app system:tcp_socket { read write };

########## fs_type
########## dev_type
allow ime_app s5p_smem_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## file_type
allow ime_app apk_data_file:dir { open getattr read search ioctl };
allow ime_app asec_image_file:dir { open getattr read search ioctl };
allow ime_app drm_security_system_file:dir { open getattr read search ioctl };
allow ime_app app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ime_app app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app sensor_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ime_app shell_data_file:dir { open getattr read search ioctl };
allow ime_app su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ime_app system_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#allow ime_app system_file:file create_file_perms;
#violate neverallow rule. change to:
allow ime_app system_file:file { getattr open read ioctl lock };

allow ime_app system_file:lnk_file { getattr execute };

########## etc_type
allow ime_app seclevel_prop:property_service set;

########## known issue.


############ avc_log #############
# avc:  denied  { add_name write } for  pid=6359 comm=".MtpApplication" name="mtp_event_socket" scontext=u:r:ime_app:s0 #tcontext=u:object_r:socket_device:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# avc:  denied  { create } for  pid=6359 comm=".MtpApplication" name="mtp_event_socket" scontext=u:r:ime_app:s0 #tcontext=u:object_r:socket_device:s0 tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# avc:  denied  { execute } for  pid=4992 comm="com.wssnps" path="/data/data/com.wssnps/files/libCryptionkey.so" dev="mmcblk0p25" #ino=914470 scontext=u:r:ime_app:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# avc:  denied  { lock } for  pid=1113 comm="erprint.service" path="/dev/validity/ValidityService.pid" dev="tmpfs" ino=9838 #scontext=u:r:ime_app:s0 tcontext=u:object_r:validity_device:s0 tclass=file
# avc:  denied  { signull } for  pid=1113 comm="erprint.service" #scontext=u:r:ime_app:s0 tcontext=u:r:vcsFPService:s0 tclass=process
# avc:  denied  { signull } for  pid=1261 comm="erprint.service" scontext=u:r:ime_app:s0 tcontext=u:r:init:s0 tclass=process 
# avc:  denied  { write } for  pid=19163 comm="debug_interface" name="dip_cmd" dev="tmpfs" ino=2749 scontext=u:r:ime_app:s0 #tcontext=u:object_r:msockets_socket:s0 tclass=sock_file
# avc:  denied  { write } for  pid=12299 comm="TMS_SVC_MAIN" name="cs_socket" dev="tmpfs" ino=10954 scontext=u:r:ime_app:s0 (TmsService.Process) tcontext=u:object_r:cs_socket:s0 (skm daemon) tclass=sock_file SEPF_SM-N910F_4.4.4_A018
# avc:  denied  { connectto } for  pid=20065 comm="TMS_SVC_MAIN" path="/dev/socket/cs_socket/cs_socket" scontext=u:r:ime_app:s0 tcontext=u:r:cs:s0 tclass=unix_stream_socket SEPF_SM-N910F_4.4.4_A018
#avc:  denied  { ioctl open read } for  pid=11745 comm="droid.hmt.vrsvc" path="/dev/ovr0" dev="tmpfs" ino=55244 scontext=u:r:ime_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file SEPF_SM-N910F_4.4.4_0018 # com.samsung.android.hmt.vrsvc
# avc:  denied  { create write } for  pid=6630 comm="g.syncmlservice" name="omadm_io_ipc_channel" scontext=u:r:ime_app:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=sock_file SEPF_SM-N910V_4.4.4_0018 # com.samsung.syncmlservicecom.samsung.syncmlservice
# avc:  denied  { rmdir remove_name write } for  pid=11695 comm=".android.system" name="mdm" dev="mmcblk0p27" ino=1441800 scontext=u:r:ime_app:s0 tcontext=u:object_r:tombstone_data_file:s0 tclass=dir SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { unlink } for  pid=7076 comm=".android.system" name="load.cmm" dev="mmcblk0p26" ino=391715 scontext=u:r:ime_app:s0 tcontext=u:object_r:tombstone_data_file:s0 tclass=file
# avc:  denied  { write } for  pid=1838 comm="pboarduiservice" name="1149786200740_639_632" dev="mmcblk0p27" ino=1048631 scontext=u:r:ime_app:s0 tcontext=u:object_r:knox_clipboard_file:s0:c2 tclass=dir
# avc:  denied  { read } for  pid=8573 comm="ung.inputmethod" name="lib" dev="ecryptfs" ino=615 scontext=u:r:ime_app:s0:c2 tcontext=u:object_r:container_app_data_backend:s0 tclass=lnk_file SEPF_SM-N9108W_4.4.4_A019
#from CTS testing
# avc:  denied  { getattr } for  pid=4611 comm=".MtpApplication" path="/data/knox" dev="mmcblk0p25" ino=522245 #scontext=u:r:ime_app:s0 tcontext=u:object_r:container_app_data_backend:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { write } for  pid=7652 comm="Thread-727" name="dek_req" dev="tmpfs" ino=10429 scontext=u:r:ime_app:s0:c2 tcontext=u:object_r:knox_dar_device:s0 tclass=chr_file SEPF_SAMSUNG-SM-N910A_4.4.4_A019
# avc:  denied  { sendto } for  pid=2660 comm="eui:sui_service" path=007375696C7374 scontext=u:r:ime_app:s0 tcontext=u:r:qseecomd:s0 tclass=unix_dgram_socket
# Camera data/DownFilters/Lib 
# avc:  denied  { setattr } for  pid=17855 comm="FilterPackageSe" name="Lib" dev="mmcblk0p26" ino=131037 scontext=u:r:ime_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=dir
# audit(1415732666.465:203): avc:  denied  { write } for  pid=17855 comm="FilterPackageSe" name="Lib" dev="mmcblk0p26" ino=131037 scontext=u:r:ime_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=dir
# audit(1415732666.465:203): avc:  denied  { add_name } for  pid=17855 comm="FilterPackageSe" name="com.samsung.android.filter.effect.sunshine.libsunshine.sig" scontext=u:r:ime_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=dir
# audit(1415732666.465:203): avc:  denied  { create } for  pid=17855 comm="FilterPackageSe" name="com.samsung.android.filter.effect.sunshine.libsunshine.sig" scontext=u:r:ime_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=file
# audit(1415732666.465:203): avc:  denied  { write } for  pid=17855 comm="FilterPackageSe" name="com.samsung.android.filter.effect.sunshine.libsunshine.sig" dev="mmcblk0p26" ino=131963 scontext=u:r:ime_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=file
# audit(1417179275.760:204): avc:  denied  { read } for  pid=15422 comm="onic.tuiservice" name="t-base-tui" dev="tmpfs" ino=7994 scontext=u:r:ime_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# audit(1417179275.760:204): avc:  denied  { open } for  pid=15422 comm="onic.tuiservice" path="/dev/t-base-tui" dev="tmpfs" ino=7994 scontext=u:r:ime_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# audit(1417179275.760:204): arch=40000028 syscall=322 per=800000 success=yes exit=28 a0=ffffff9c a1=b43e2fd9 a2=20800 a3=0 items=1 ppid=2955 pid=15422 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 ses=4294967295 tty=(none) comm="onic.tuiservice" exe="/system/bin/app_process32" subj=u:r:ime_app:s0 key=(null)
# audit(1417179275.760:204):  cwd="/"
# audit(1417179275.760:204): item=0 name="/dev/t-base-tui" inode=7994 dev=00:0d mode=020660 ouid=1000 ogid=1000 rdev=f1:00 obj=u:object_r:device:s0
# audit(1417179275.760:205): avc:  denied  { ioctl } for  pid=15422 comm="onic.tuiservice" path="/dev/t-base-tui" dev="tmpfs" ino=7994 scontext=u:r:ime_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file
#audit(1388535096.149:209): avc:  denied  { write } for  pid=9859 comm="Thread-1043" name="mtp_sink_socket" dev="tmpfs" ino=71345 scontext=u:r:ime_app:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file
#saddr=01002F6465762F736F636B65742F6D74702F6D74705F73696E6B5F736F636B65740
# com.samsung.android.MtpApplication
# audit(741.079:205): avc:  denied  { write } for  pid=10993 comm="Thread-1271" name=".playready" dev="mmcblk0p27" ino=784900 scontext=u:r:ime_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=dir permissive=1
# audit(741.079:205): avc:  denied  { create } for  pid=10993 comm="Thread-1271" name="keyfile.dat" scontext=u:r:ime_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=file permissive=1
# audit(741.079:205): avc:  denied  { write } for  pid=10993 comm="Thread-1271" path="/data/data/.drm/.playready/keyfile.dat" dev="mmcblk0p27" ino=786323 scontext=u:r:ime_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=file permissive=1
# audit(741.079:205): item=1 name="/data/data/.drm/.playready/keyfile.dat" inode=786323 dev=b3:1b mode=0100600 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:drm_data_file:s0 nametype=CREATE
# audit(741.079:206): avc:  denied  { setattr } for  pid=10993 comm="Thread-1271" name="keyfile.dat" dev="mmcblk0p27" ino=786323 scontext=u:r:ime_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=file permissive=1
# audit(741.079:206): item=0 name="/data/data/.drm/.playready/keyfile.dat" inode=786323 dev=b3:1b mode=0100600 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:drm_data_file:s0 nametype=NORMAL
# /sys/class/mst/mst_ftmdrv/transmit : com.sec.android.app.hwmoduletest, com.sec.factory
# avc:  denied  { write } for  pid=3889 comm="Thread-1646" name="transmit" dev="sysfs" ino=12755 scontext=u:r:ime_app:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=0
# avc:  denied  { write } for  pid=8549 comm="Thread-818" name="url" dev="tmpfs" ino=3002 scontext=u:r:ime_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=0 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { open } for  pid=13227 comm="Thread-832" path="/dev/url" dev="tmpfs" ino=3002 scontext=u:r:ime_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { read } for  pid=13227 comm="Thread-832" name="url" dev="tmpfs" ino=3002 scontext=u:r:ime_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { write } for  pid=27039 comm="ImsServiceStub" name="ipsec_socket" dev="tmpfs" ino=19859 scontext=u:r:ime_app:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file permissive=0 SEPF_SAMSUNG-SM-G920A_5.0.2_0002
# avc:  denied  { set } for property=com.google.clientidbase.ms scontext=u:r:ime_app:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { read } for  pid=18158 comm="ndroid.settings" name="sepolicy_version" dev="sda17" ino=1441806 scontext=u:r:ime_app:s0 tcontext=u:object_r:security_file:s0 tclass=file permissive=0
# avc:  denied  { read } for  pid=12958 comm="Thread-1667" name="Screenshot_2015-01-30-15-39-17.png_thum.jpg" dev="sda20" ino=1179659 scontext=u:r:ime_app:s0 tcontext=u:object_r:knox_clipboard_file:s0:c2 tclass=file permissive=0 SEPF_SM-G9250_5.0.2_0003
# avc:  denied  { getattr } for  pid=12958 comm="Thread-1667" path="/data/clipboard100/3132646383920_596_287/Screenshot_2015-01-30-15-39-17.png" dev="sda20" ino=1179658 scontext=u:r:ime_app:s0 tcontext=u:object_r:knox_clipboard_file:s0:c2 tclass=file permissive=0 SEPF_SM-G9250_5.0.2_0003
# avc:  denied  { set } for property=diag.oriented scontext=u:r:ime_app:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { read } for  pid=4955 comm="g.syncmlservice" name="otadm_sw_version" dev="mmcblk0p11" ino=78 scontext=u:r:ime_app:s0 tcontext=u:object_r:efs_file:s0 tclass=file SEPF_SM-T807V_5.0.2_0005
# avc:  denied  { write } for  pid=4955 comm="g.syncmlservice" name="/" dev="mmcblk0p11" ino=2 scontext=u:r:ime_app:s0 tcontext=u:object_r:efs_file:s0 tclass=file

#line 1 "vendor/samsung/common/sepolicy/model/s_platform_app.te"
###
### Apps signed with the platform key.
###

allow s_platform_app property_socket:sock_file write;
allow s_platform_app init:unix_stream_socket connectto;

#allow { platformappdomain -platform_app } init:binder { transfer call };
allow s_platform_app init:binder { transfer call };
allow s_platform_app self:capability { dac_read_search dac_override setuid net_raw setgid net_admin };

allow s_platform_app socket_device:sock_file write;
allow s_platform_app system_data_file:dir { relabelfrom relabelto };
allow s_platform_app newAttr56:file { getattr open read ioctl lock };
allow s_platform_app system_data_file:lnk_file { getattr link unlink rename };
allow s_platform_app system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#Access to qseecom_device /dev/qseecom
allow s_platform_app qseecom_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_platform_app qseecom_device:{ { file lnk_file sock_file fifo_file } chr_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# com.sec.android.security.NetworkGuard
# avc:  denied  { net_raw } for  pid=5402 comm="iptables" capability=13  scontext=u:r:platform_app:s0 tcontext=u:r:platform_app:s0 tclass=capability permissive=0
# avc:  denied  { net_admin } for  pid=6010 comm="iptables" capability=12  scontext=u:r:platform_app:s0 tcontext=u:r:platform_app:s0 tclass=capability permissive=1

#line 1 "vendor/samsung/common/sepolicy/model/s_system_app.te"
# ssystem_app



#line 5
# Call the server domain and optionally transfer references to it.
#line 5
allow s_system_app init:binder { call transfer };
#line 5
# Allow the serverdomain to transfer references to the client on the reply.
#line 5
allow init s_system_app:binder transfer;
#line 5
# Receive and use open files from the server.
#line 5
allow s_system_app init:fd use;
#line 5

allow s_system_app self:capability { setuid setgid net_raw chown sys_ptrace sys_module setgid net_admin dac_override };
allow s_system_app self:netlink_kobject_uevent_socket *;
allow s_system_app proc:file { open append write };
allow s_system_app block_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app socket_device:sock_file write;
allow s_system_app socket_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app apk_tmp_file:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app dhcp_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app drm_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app drm_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app system_file:file setattr;
allow s_system_app wifi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app wifi_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app wifi_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app newAttr57:dir { open getattr read search ioctl };
allow s_system_app newAttr57:{ file lnk_file } { getattr open read ioctl lock };

#qcom
allow s_system_app audio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app shell_data_file:file { open append write };

#slsi
allow s_system_app system_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#spr itsonclient_app
allow s_system_app self:netlink_socket *;

# BSP Qcom Policy changed /dev/qseecom from qseecom_device to tee_device.
allow s_system_app qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

############ avc_log #############
##com.sec.android.preloadinstaller
#audit(1388535044.079:199): avc:  denied  { write } for  pid=4259 comm="reloadinstaller" name="/" dev="mmcblk0p12" ino=2 scontext=u:r:system_app:s0 tcontext=u:object_r:efs_file:s0 tclass=dir
#audit(1388535044.079:199): arch=40000028 syscall=328 per=800000 success=yes exit=0 a0=ffffff9c a1=b4e50420 a2=0 a3=8180 items=2 ppid=332 pid=4259 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4294967295 comm="reloadinstaller" exe="/system/bin/app_process32" subj=u:r:system_app:s0 key=(null)
#audit(1388535044.079:199):  cwd="/"
#audit(1388535044.079:199): item=0 name="/efs/" inode=2 dev=b3:0c mode=040771 ouid=1000 ogid=1001 rdev=00:00 obj=u:object_r:efs_file:s0
#audit(1388535044.079:199): item=1 name="/efs/.currentlyFactoryReset" inode=48 dev=b3:0c mode=0100600 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:efs_file:s0

## com.samsung.android.MtpApplication,com.sec.android.service.sm
#audit(1388534800.419:212): avc:  denied  { create } for  pid=4261 comm="UEventObserver" scontext=u:r:system_app:s0 tcontext=u:r:system_app:s0 tclass=netlink_kobject_uevent_socket
#audit(1388534800.419:212): arch=40000028 syscall=281 per=800000 success=yes exit=28 a0=10 a1=2 a2=f a3=b5177070 items=0 ppid=324 pid=4261 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4294967295 comm="UEventObserver" exe="/system/bin/app_process32" subj=u:r:system_app:s0 key=(null)
#audit(1388534800.419:213): avc:  denied  { setopt } for  pid=4261 comm="UEventObserver" scontext=u:r:system_app:s0 tcontext=u:r:system_app:s0 tclass=netlink_kobject_uevent_socket
#audit(1388534800.419:214): avc:  denied  { bind } for  pid=4261 comm="UEventObserver" scontext=u:r:system_app:s0 tcontext=u:r:system_app:s0 tclass=netlink_kobject_uevent_socket
#audit(1388534800.419:214): arch=40000028 syscall=282 per=800000 success=yes exit=0 a0=1c a1=af5ffafc a2=c a3=b6f2bbd0 items=0 ppid=324 pid=4261 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4294967295 comm="UEventObserver" exe="/system/bin/app_process32" subj=u:r:system_app:s0 key=(null)
#audit(1388534800.419:214): saddr=100000005A0E0000FFFFFFFF
#audit(1388534800.529:215): avc:  denied  { getattr } for  pid=259 comm="servicemanager" scontext=u:r:servicemanager:s0 tcontext=u:r:edmaudit:s0 tclass=process
#audit(1388534800.529:215): arch=40000028 syscall=3 per=800000 success=yes exit=16 a0=a a1=b6b54000 a2=fff a3=ffffff84 items=0 ppid=1 pid=259 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4294967295 comm="servicemanager" exe="/system/bin/servicemanager" subj=u:r:servicemanager:s0 key=(null)
#audit(1388534801.519:216): avc:  denied  { read } for  pid=4261 comm="UEventObserver" scontext=u:r:system_app:s0 tcontext=u:r:system_app:s0 tclass=netlink_kobject_uevent_socket

## com.samsung.android.MtpApplication
#audit(790.139:207): avc:  denied  { net_admin } for  pid=12637 comm="UEventObserver" capability=12  scontext=u:r:system_app:s0 tcontext=u:r:system_app:s0 tclass=capability permissive=1 
#audit(790.499:208): avc:  denied  { write } for  pid=12651 comm="Thread-1511" name="keyfile.dat" dev="mmcblk0p27" ino=786323 scontext=u:r:system_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=file permissive=1
#audit(790.499:208): arch=40000028 syscall=322 per=800000 success=yes exit=34 a0=ffffff9c a1=a0ff6b74 a2=20002 a3=0 items=1 ppid=401 pid=12651 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 ses=4294967295 tty=(none) comm="Thread-1511" exe="/system/bin/app_process32" subj=u:r:system_app:s0 key=(null)
#audit(790.499:208):  cwd="/"
#audit(790.499:208): item=0 name="/data/data/.drm/.playready/keyfile.dat" inode=786323 dev=b3:1b mode=0100660 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:drm_data_file:s0 nametype=NORMAL
#audit(790.509:209): avc:  denied  { setattr } for  pid=12651 comm="Thread-1511" name="keyfile.dat" dev="mmcblk0p27" ino=786323 scontext=u:r:system_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=file permissive=1
#audit(790.509:209): arch=40000028 syscall=333 per=800000 success=yes exit=0 a0=ffffff9c a1=a0ff6b74 a2=1b0 a3=0 items=1 ppid=401 pid=12651 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 ses=4294967295 tty=(none) comm="Thread-1511" exe="/system/bin/app_process32" subj=u:r:system_app:s0 key=(null)
#audit(790.509:209):  cwd="/"
#audit(790.509:209): item=0 name="/data/data/.drm/.playready/keyfile.dat" inode=786323 dev=b3:1b mode=0100660 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:drm_data_file:s0 nametype=NORMAL

## com.wssnps
#audit(1388548230.409:219): avc:  denied  { net_admin } for  pid=3959 comm="UEventObserver" capability=12  scontext=u:r:system_app:s0 tcontext=u:r:system_app:s0 tclass=capability permissive=1

# com.sec.imsservice write /efs/silent_redial
# avc:  denied  { write } for  pid=17009 comm=".sec.imsservice" name="silent_redial" dev="sda3" ino=35 scontext=u:r:system_app:s0 tcontext=u:object_r:efs_file:s0 tclass=file permissive=1

# com.ipsec.service
# P141222-03078 avc:  denied  { net_raw } for  pid=5310 comm="m.ipsec.service" capability=13  scontext=u:r:system_app:s0 tcontext=u:r:system_app:s0 tclass=capability permissive=0 SEPF_SM-G920T_5.0.1_0002

#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/app.te"

# /data/media labeling issue when device was updated from KK to L using FOTA.
# That issue can be occurred on models which are disabled MSC Feature on KK.
# In the normal case, issue will be not reproduced, but if drsd module is not worked fine after FOTA upgrading, device needs rules below
allow appdomain media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow appdomain media_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/container.te"
#
# Container related policy
#

type container_app, containerdomain, domain, newAttr1, newAttr4, newAttr7, newAttr5, newAttr3, newAttr8, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr49, newAttr50;
type container_service, containerdomain, domain, newAttr1, newAttr4, newAttr7, newAttr5, newAttr3, newAttr8, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr32, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr49, newAttr50;


#line 8
typeattribute container_app appdomain;
#line 8
# Label ashmem objects with our own unique type.
#line 8

#line 8
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 8
type container_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 8
type_transition container_app tmpfs:file container_app_tmpfs;
#line 8
allow container_app container_app_tmpfs:file { read write };
#line 8

#line 8
# Map with PROT_EXEC.
#line 8
allow container_app container_app_tmpfs:file execute;
#line 8


#line 9
typeattribute container_service appdomain;
#line 9
# Label ashmem objects with our own unique type.
#line 9

#line 9
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 9
type container_service_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 9
type_transition container_service tmpfs:file container_service_tmpfs;
#line 9
allow container_service container_service_tmpfs:file { read write };
#line 9

#line 9
# Map with PROT_EXEC.
#line 9
allow container_service container_service_tmpfs:file execute;
#line 9


#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/diagandroid_app.te"
#
# diagandroid_app for CIQ
#
typealias system_app alias diagandroid_app;

#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/drsd.te"
#
# drsd
#

###### known issue ######
# When device was updated from KK(non msc), /data/system/container directory and files inside directory had a security_context as security_file, but context need to change to container_system_file on L binary

allow drsd security_file:dir { relabelfrom relabelto { open getattr read search ioctl } write };
allow drsd security_spota_file:dir { relabelfrom relabelto { open getattr read search ioctl } write };
#line 9
allow drsd security_file:file { relabelfrom relabelto { getattr open read ioctl lock } write };
allow drsd security_spota_file:file { relabelfrom relabelto { getattr open read ioctl lock } write };
#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/epmd.te"
#
# epmd 
#

#typealias vold alias epmd;
#domain_auto_trans(init, epmd_exec, epmd)
type epmd, domain, mlstrustedsubject, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;

#line 8

#line 8
# Allow the necessary permissions.
#line 8

#line 8
# Old domain may exec the file and transition to the new domain.
#line 8
allow init epmd_exec:file { getattr open read execute };
#line 8
allow init epmd:process transition;
#line 8
# New domain is entered by executing the file.
#line 8
allow epmd epmd_exec:file { entrypoint open read execute getattr };
#line 8
# New domain can send SIGCHLD to its caller.
#line 8
allow epmd init:process sigchld;
#line 8
# Enable AT_SECURE, i.e. libc secure mode.
#line 8
dontaudit init epmd:process noatsecure;
#line 8
# XXX dontaudit candidate but requires further study.
#line 8
allow init epmd:process { siginh rlimitinh };
#line 8

#line 8
# Make the transition occur by default.
#line 8
type_transition init epmd_exec:process epmd;
#line 8

#line 8

#line 8
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 8
type epmd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 8
type_transition epmd tmpfs:file epmd_tmpfs;
#line 8
allow epmd epmd_tmpfs:file { read write };
#line 8

#line 8

allow epmd self:capability sys_ptrace;
allow epmd labeledfs:filesystem { mount unmount };
allow epmd labeledfs:filesystem mount;
allow epmd labeledfs:filesystem relabelfrom;

#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/file.te"

############ aosp and sec_common #############
type xsdcardfs, sdcard_type, fs_type, newAttr68, newAttr70, newAttr71, newAttr74, newAttr75, newAttr76, newAttr69;

typealias system_file alias dhcp_system_file;
typealias system_file alias system_library_file;
typealias system_file alias event_log_tags_file;

############ knox_common #############
allow media_rw_data_file xsdcardfs:filesystem associate;
allow container_app_data_backend xsdcardfs:filesystem associate;
allow bbccontainer_app_data_backend xsdcardfs:filesystem associate;
#line 12
allow fuse xsdcardfs:filesystem associate;
allow personal_page_file xsdcardfs:filesystem associate;
allow vfat xsdcardfs:filesystem associate;
allow file_type xsdcardfs:filesystem associate; 

# from aosp/file.te
typealias app_data_file alias download_file;

# avc:  denied  { associate } for  pid=22916 comm="MediaScannerRec" name="Android" scontext=u:object_r:media_rw_data_file:s0 tcontext=u:object_r:xsdcardfs:s0 tclass=filesystem permissive=0 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { associate } for  pid=4148 comm="epmd" name="101" scontext=u:object_r:container_app_data_backend:s0 tcontext=u:object_r:xsdcardfs:s0 tclass=filesystem permissive=1
# avc:  denied  { associate } for  pid=3149 comm="vold" name="files" scontext=u:object_r:vfat:s0 tcontext=u:object_r:xsdcardfs:s0 tclass=filesystem
# arch=40000028 syscall=323 per=800000 success=no exit=-13 a0=14 a1=b46160ec a2=1c0 a3=100 items=1 ppid=1 ppcomm=init pid=3149 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="vold" exe="/system/bin/vold" subj=u:r:vold:s0 key=(null)
# item=0 name="/" inode=107 dev=00:1b mode=040770 ouid=10038 ogid=1028 rdev=00:00 obj=u:object_r:vfat:s0
#avc:  denied  { associate } for  pid=7087 comm="BGAsyncWorker" name="EN.FWaUUQ3twFW0TUaEdZPvJ5OhmgKj-bu7nT85Ln1kKrLq3CLe5HuDjOVWgk--" scontext=u:object_r:personal_page_file:s0 tcontext=u:object_r:xsdcardfs:s0 tclass=filesystem permissive=0
#item=0 name="/storage/Private/" inode=392452 dev=00:1b mode=040775 ouid=0 ogid=1015 rdev=00:00 obj=u:object_r:personal_page_file:s0 nametype=PARENT
#item=1 name="/storage/Private/Android" nametype=CREATE
#item=2 name=(null) inode=392452 dev=00:19 mode=040775 ouid=0 ogid=1015 rdev=00:00 obj=u:object_r:personal_page_file:s0 nametype=PARENT

#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/fixmo.te"
#
# fixmo_app

type fixmo_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr41, newAttr42, newAttr43, newAttr44, newAttr49, newAttr50;
type fixmo_app_data_file, file_type, newAttr56, newAttr58, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

#neverallow Google CTS-android-5.0.2_r1 : add into appdomain

#line 8
typeattribute fixmo_app appdomain;
#line 8
# Label ashmem objects with our own unique type.
#line 8

#line 8
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 8
type fixmo_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 8
type_transition fixmo_app tmpfs:file fixmo_app_tmpfs;
#line 8
allow fixmo_app fixmo_app_tmpfs:file { read write };
#line 8

#line 8
# Map with PROT_EXEC.
#line 8
allow fixmo_app fixmo_app_tmpfs:file execute;
#line 8


#line 9
typeattribute fixmo_app netdomain;
#line 9


#line 10
typeattribute fixmo_app bluetoothdomain;
#line 10


#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/good.te"
#
# good_app
#

type good_app, domain, newAttr5, newAttr7, newAttr9, newAttr12, newAttr10, newAttr14, newAttr41, newAttr42, newAttr43, newAttr44, newAttr49, newAttr50;
type good_app_data_file, file_type, newAttr56, newAttr58, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

#neverallow Google CTS-android-5.0.2_r1 : temporary add into appdomain

#line 11
typeattribute good_app appdomain;
#line 11
# Label ashmem objects with our own unique type.
#line 11

#line 11
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 11
type good_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 11
type_transition good_app tmpfs:file good_app_tmpfs;
#line 11
allow good_app good_app_tmpfs:file { read write };
#line 11

#line 11
# Map with PROT_EXEC.
#line 11
allow good_app good_app_tmpfs:file execute;
#line 11


#line 12
typeattribute good_app netdomain;
#line 12


#line 13
typeattribute good_app bluetoothdomain;
#line 13



#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/property.te"
############ domain_no_set_prop #############
typeattribute default_prop domain_no_set_prop;

#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/sdcardd.te"
#
# sdcardd
#

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
allow sdcardd xsdcardfs:filesystem { mount unmount remount };
########## dev_type
########## file_type
########## etc_type
########## known issue.
############ avc_log #############

#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/ss_domain.te"
#/sepolicy/sec_common/actlmand.te
allow actlmand self:capability sys_rawio;
allow actlmand block_device:blk_file { { getattr open read ioctl lock } { open append write } };

#/sepolicy/sec_common/syscope.te
allow syscope_app init:binder call;
allow syscope_app block_device:blk_file { open append write };
allow syscope_app emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow syscope_app paramblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow syscope_app system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow syscope_app system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow syscope_app emmcblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow syscope_app padblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow syscope_app persistblk_device:blk_file { open append write };


#/sepolicy/system_app.te -> for SecurityMagerService(com.sec.android.service.sm)
allow s_system_app kiesexe:process signal;
allow s_system_app efsblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app paramblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app default_prop:property_service set;
allow s_system_app emmcblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app padblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for ipsecservice
allow s_system_app rild:tun_socket relabelfrom;
#avc:  denied  { relabelfrom } for  pid=6782 comm="m.ipsec.service" scontext=u:r:s_system_app:s0 tcontext=u:r:rild:s0 tclass=tun_socket permissive=0

#/sepolicy/sec_common/apaservice.te
allow apaservice app_library_file:file execute;
allow apaservice apk_data_file:file execute;

##
# com.ipsec.service(darkangel@samsung.com/CP System), com.sec.android.service.sm, com.sec.android.security.NetworkGuard
##
##
# com.sec.imsservice(sj76.kim@samsung.com/CP System)
##
##
# com.samsung.android.MtpApplication(inchul23.lee@samsung.com/Service Dev)
##

#/sepolicy/knox_common/policyloader_app.te
#mmac_manage_policy(policyloader_app)

#/sepolicy/slsi_common/exyrngd.te,qrngd.te : bumhan.kim@samsung.com/Security team.
allow exyrngd hw_random_device:chr_file { getattr open read ioctl lock };
allow qrngd hw_random_device:chr_file { getattr open read ioctl lock };

#/sepolicy/mediaserver.te
allow mediaserver downfilters_lib_file:file { getattr execute execute_no_trans };

#dontaudit until add the filter module
# com.sec.imsservice(sj76.kim@samsung.com/CP System)
dontaudit s_system_app self:capability { net_raw net_admin };
dontaudit system_app self:capability { net_raw net_admin };
dontaudit s_system_app self:capability { net_raw net_admin };
#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/syscope.te"
#
# syscope_app
#

type syscope_app, domain, mlstrustedsubject, newAttr1, newAttr5, newAttr4, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr13, newAttr12, newAttr14, newAttr10, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;
# for B2C users
typeattribute syscope_app trusteddomain;
typeattribute syscope_app trusted_app_domain;


#line 10
typeattribute syscope_app appdomain;
#line 10
# Label ashmem objects with our own unique type.
#line 10

#line 10
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 10
type syscope_app_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 10
type_transition syscope_app tmpfs:file syscope_app_tmpfs;
#line 10
allow syscope_app syscope_app_tmpfs:file { read write };
#line 10

#line 10
# Map with PROT_EXEC.
#line 10
allow syscope_app syscope_app_tmpfs:file execute;
#line 10


allow syscope_app system_prop:property_service set;

#line 13
allow syscope_app property_socket:sock_file write;
#line 13
allow syscope_app init:unix_stream_socket connectto;
#line 13


# avc:  denied  { set } for property=vzw.os.rooted scontext=u:r:syscope_app:s0 tcontext=u:object_r:system_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=25003 comm="SysScope" name="property_service" dev="tmpfs" ino=8485 scontext=u:r:syscope_app:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file permissive=1 SEPF_SM-S906L_5.0.2_0023
# avc:  denied  { connectto } for  pid=25003 comm="SysScope" path="/dev/socket/property_service" scontext=u:r:syscope_app:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket permissive=1 SEPF_SM-S906L_5.0.2_0023
#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/system_app.te"

# below rules move here for payment module. ctsv4 doesn't include belows.
allow system_app sysfs_mst_writable:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app sysfs_mst_writable:file { { getattr open read ioctl lock } { open append write } };
#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/trusteddomainCTS.te"
#
# trusteddomain for CTS compatible
#

############ trusteddomain #############
########## type and macro.
########## self and domain_type
allow { system_domain device_domain } { untrusteddomain shell }:process { signal sigchld signull getsched getpgid getcap getattr };
allow trusteddomain { untrusteddomain shell }:fd use;

# socket, ipc, key, msg, peer, binder
allow trusteddomain { untrusteddomain shell }:{ udp_socket unix_dgram_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow trusteddomain { untrusteddomain shell }:{ tcp_socket unix_stream_socket } { { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } } connectto };
allow trusteddomain { untrusteddomain shell }:{ sem msgq shm ipc } { { getattr read associate unix_read } { write unix_write } };
allow newAttr93 { untrusteddomain shell }:binder { call transfer };


############ trusted_app_domain system_domain device_domain #############

########## self and domain_type ##########
# dir, file class
allow system_domain { untrusteddomain shell }:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_domain { untrusteddomain shell }:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow device_domain { untrusteddomain shell }:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow device_domain { untrusteddomain shell }:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# socket, ipc, key
allow system_domain { untrusteddomain shell }:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
allow trusted_app_domain { untrusteddomain shell } : { udp_socket unix_dgram_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow trusted_app_domain { untrusteddomain shell } : { tcp_socket unix_stream_socket } { { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } } connectto };
allow trusted_app_domain { untrusteddomain shell } : { socket tun_socket appletalk_socket key_socket packet_socket rawip_socket } { ioctl read getattr bind connect getopt accept };

allow { system_domain trusted_app_domain } { untrusteddomain shell }:{ sem msgq shm ipc } *;
allow { system_domain trusted_app_domain } { untrusteddomain shell }:key *;

allow device_domain { untrusteddomain shell }:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket } *;
allow device_domain { untrusteddomain shell }:{ sem msgq shm ipc } *;
allow device_domain { untrusteddomain shell }:key *;

#line 1 "vendor/samsung/common/sepolicy/knox_common/auditd.te"
#
# Auditd
#

############  knox_common #############
dontaudit auditd self:capability fsetid;

########## type and macro.
# auditd - Audit event daemon
type auditd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type auditd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init auditd_exec:file { getattr open read execute };
#line 13
allow init auditd:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow auditd auditd_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow auditd init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init auditd:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init auditd:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init auditd_exec:process auditd;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type auditd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 13
type_transition auditd tmpfs:file auditd_tmpfs;
#line 13
allow auditd auditd_tmpfs:file { read write };
#line 13

#line 13


#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Allow the domain to add entries to the directory.
#line 14
allow auditd system_data_file:dir { { open getattr read search ioctl } add_name write };
#line 14
# Allow the domain to create the file.
#line 14
allow auditd audit_log:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 14
allow auditd audit_log:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition auditd system_data_file:dir audit_log;
#line 14
type_transition auditd system_data_file:{ file lnk_file sock_file fifo_file } audit_log;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow auditd servicemanager:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow servicemanager auditd:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow auditd servicemanager:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow auditd system_server:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow system_server auditd:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow auditd system_server:fd use;
#line 16


########## self and domain_type
allow auditd drsd:unix_stream_socket connectto;
allow auditd init:unix_stream_socket connectto;
allow auditd kernel:system syslog_read;
allow auditd self:capability { audit_control setuid setgid };
allow auditd self:capability2 syslog;
allow auditd self:netlink_audit_socket { write create nlmsg_write read };

########## fs_type
allow auditd cgroup:dir { create add_name };

########## dev_type
allow auditd drsd_socket:sock_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow auditd property_socket:sock_file { open append write };
allow auditd security_file:file { getattr open read ioctl lock };
allow auditd security_spota_file:file { getattr open read ioctl lock };
#line 35
allow auditd security_file:dir { open getattr read search ioctl };
allow auditd security_spota_file:dir { open getattr read search ioctl };
#line 36
allow auditd system_data_file:dir { { open getattr read search ioctl } remove_name };
allow auditd system_data_file:file { { getattr open read ioctl lock } unlink };

########## etc_type
allow auditd denial_prop:property_service { set };

########## known issue.
# To add sepolicy level (H=B2B, L=B2C) info to audit denial logs
allow auditd selinuxfs:dir search;
allow auditd selinuxfs:file { read open };



############ avc_log #############
# avc:  denied  { call } for  pid=5297 comm="auditd" scontext=u:r:auditd:s0 tcontext=u:r:system_server:s0 tclass=binder SEPF_SM-T817P_5.1.1_0024


#line 1 "vendor/samsung/common/sepolicy/knox_common/container.te"
#
# Container related policy
#


#line 1 "vendor/samsung/common/sepolicy/knox_common/createsystemfile.te"
#
# createsystemfile
#

############ knox_common #############
########## type and macro.
type createsystemfile, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type createsystemfile_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute createsystemfile mlstrustedsubject;


#line 11

#line 11
# Allow the necessary permissions.
#line 11

#line 11
# Old domain may exec the file and transition to the new domain.
#line 11
allow init createsystemfile_exec:file { getattr open read execute };
#line 11
allow init createsystemfile:process transition;
#line 11
# New domain is entered by executing the file.
#line 11
allow createsystemfile createsystemfile_exec:file { entrypoint open read execute getattr };
#line 11
# New domain can send SIGCHLD to its caller.
#line 11
allow createsystemfile init:process sigchld;
#line 11
# Enable AT_SECURE, i.e. libc secure mode.
#line 11
dontaudit init createsystemfile:process noatsecure;
#line 11
# XXX dontaudit candidate but requires further study.
#line 11
allow init createsystemfile:process { siginh rlimitinh };
#line 11

#line 11
# Make the transition occur by default.
#line 11
type_transition init createsystemfile_exec:process createsystemfile;
#line 11

#line 11

#line 11
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 11
type createsystemfile_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 11
type_transition createsystemfile tmpfs:file createsystemfile_tmpfs;
#line 11
allow createsystemfile createsystemfile_tmpfs:file { read write };
#line 11

#line 11


########## self and domain_type
allow createsystemfile self:capability { dac_override chown fowner };

########## fs_type
########## dev_type
########## file_type
allow createsystemfile container_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow createsystemfile bbccontainer_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 20
allow createsystemfile container_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow createsystemfile bbccontainer_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 21
allow createsystemfile container_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow createsystemfile container_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow createsystemfile data_file_type:dir create_dir_perms;
allow createsystemfile newAttr21:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow createsystemfile data_file_type:file  create_file_perms;
allow createsystemfile newAttr21:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow createsystemfile system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow createsystemfile system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/knox_common/drsd.te"
#
# drs daemon
#
############ knox_common #############
########## type and macro.
type drsd, mlstrustedsubject, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type drsd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# for B2C users
typeattribute drsd trusteddomain;
typeattribute drsd system_domain;


#line 12

#line 12
# Allow the necessary permissions.
#line 12

#line 12
# Old domain may exec the file and transition to the new domain.
#line 12
allow init drsd_exec:file { getattr open read execute };
#line 12
allow init drsd:process transition;
#line 12
# New domain is entered by executing the file.
#line 12
allow drsd drsd_exec:file { entrypoint open read execute getattr };
#line 12
# New domain can send SIGCHLD to its caller.
#line 12
allow drsd init:process sigchld;
#line 12
# Enable AT_SECURE, i.e. libc secure mode.
#line 12
dontaudit init drsd:process noatsecure;
#line 12
# XXX dontaudit candidate but requires further study.
#line 12
allow init drsd:process { siginh rlimitinh };
#line 12

#line 12
# Make the transition occur by default.
#line 12
type_transition init drsd_exec:process drsd;
#line 12

#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type drsd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition drsd tmpfs:file drsd_tmpfs;
#line 12
allow drsd drsd_tmpfs:file { read write };
#line 12

#line 12


#line 13
allow drsd property_socket:sock_file write;
#line 13
allow drsd init:unix_stream_socket connectto;
#line 13


########## self and domain_type
allow drsd self:capability { chown fowner dac_override setuid setgid };

########## fs_type
allow drsd rootfs:file { getattr open read ioctl lock };
allow drsd selinuxfs:dir { open getattr read search ioctl };
allow drsd selinuxfs:file { getattr open read ioctl lock };

########## dev_type
########## file_type
allow drsd audit_log:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow drsd audit_log:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drsd drsd_socket:sock_file setattr;
#neverallow by Google CTS : allow drsd file_type:dir { relabelfrom relabelto r_dir_perms write };
#neverallow by Google CTS : allow drsd file_type:file { relabelfrom relabelto r_file_perms write };
#neverallow by Google CTS : allow drsd file_type:sock_file { relabelfrom relabelto r_file_perms write };
#neverallow by Google CTS : allow drsd file_type:lnk_file { relabelfrom relabelto r_file_perms write };
#neverallow by Google CTS : allow drsd file_type:fifo_file { relabelfrom relabelto r_file_perms write };
allow drsd newAttr62:dir { relabelfrom relabelto { open getattr read search ioctl } write };
allow drsd newAttr62:file { relabelfrom relabelto { getattr open read ioctl lock } write };
allow drsd newAttr62:sock_file { relabelfrom relabelto { getattr open read ioctl lock } write };
allow drsd newAttr62:lnk_file { relabelfrom relabelto { getattr open read ioctl lock } write };
allow drsd newAttr62:fifo_file { relabelfrom relabelto { getattr open read ioctl lock } write };
allow drsd security_file:dir { open getattr read search ioctl };
allow drsd security_spota_file:dir { open getattr read search ioctl };
#line 39
allow drsd security_file:file { getattr open read ioctl lock };
allow drsd security_spota_file:file { getattr open read ioctl lock };
#line 40
allow drsd system_data_file:dir { relabelfrom relabelto { open getattr read search ioctl } };
allow drsd system_data_file:file { getattr open read ioctl lock };

########## etc_type
allow drsd drs_date_prop:property_service set;

########## known issue.

# dontaudit for drsd to access /data/misc/keystore
dontaudit drsd keystore_data_file:dir { open getattr read search ioctl };
dontaudit drsd keystore_data_file:file { getattr open read ioctl lock };


############ avc_log #############
# avc:  denied  { write } for  pid=466 comm="drsd" path="/data/knox/data/100" dev="mmcblk0p27" ino=131489 scontext=u:r:drsd:s0 tcontext=u:object_r:container_app_data_backend:s0 tclass=dir
# avc:  denied  { write } for  pid=466 comm="drsd" path="/data/knox/data/101/EN.FXaaYJ72jyORdEbhUdxo24bwExUrrVt521vNxyH0dFNWdJohdkAeVZsElYODyc.wiyfVaEtaSWCIDt6-/EN.FWaaYJ72jyORdEbhUdxo24bwExUrrVt521vNOWBOmNhyQiKADnerjSn9.k--/EN.FWaaYJ72jyORdEbhUdxo24bwExUrrVt521vNEYbWHqlsgOX.09XM2GoWO---/EN.FWaaYJ72jyORdEbhUdxo24bwExUrrVt521vNY1H.yazvqMKRRwlUZjoyeE--" dev="mmcblk0p27" ino=262971 scontext=u:r:drsd:s0 tcontext=u:object_r:container_app_data_backend:s0:c3 tclass=file SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { read } for  pid=4641 comm="drsd" name="seapp_contexts" dev="dm-0" ino=1048587 scontext=u:r:drsd:s0 tcontext=u:object_r:security_file:s0 tclass=file permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { open } for  pid=4641 comm="drsd" path="/data/security/good/seapp_contexts" dev="dm-0" ino=1048587 scontext=u:r:drsd:s0 tcontext=u:object_r:security_file:s0 tclass=file permissive=1 
# avc:  denied  { getattr } for  pid=3088 comm="drsd" path="/data/misc/keystore" dev="sda16" ino=261639 scontext=u:r:drsd:s0 tcontext=u:object_r:keystore_data_file:s0 tclass=dir permissive=0

#line 1 "vendor/samsung/common/sepolicy/knox_common/edmaudit.te"
# edmaudit
type edmaudit, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type edmaudit_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init edmaudit_exec:file { getattr open read execute };
#line 4
allow init edmaudit:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow edmaudit edmaudit_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow edmaudit init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init edmaudit:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init edmaudit:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init edmaudit_exec:process edmaudit;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type edmaudit_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition edmaudit tmpfs:file edmaudit_tmpfs;
#line 4
allow edmaudit edmaudit_tmpfs:file { read write };
#line 4

#line 4


allow edmaudit kernel:system syslog_read;
allow edmaudit self:capability { setuid setgid };
allow edmaudit self:capability2 syslog;
allow edmaudit servicemanager:binder call;
allow edmaudit system:binder call;

typeattribute edmaudit trusteddomain;
typeattribute edmaudit system_domain;
#line 1 "vendor/samsung/common/sepolicy/knox_common/epmd.te"
#
# epmd
# 

############ knox_common #############
########## type and macro.
# moved into s_samsung.te for cts_v0,v1
#type epmd, domain, mlstrustedsubject;
type epmd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
# permissive epmd;
# for B2C users
typeattribute epmd trusteddomain;
typeattribute epmd system_domain;


#line 15
typeattribute epmd mlstrustedsubject;
#line 15
allow epmd container_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow epmd container_app_sdcard_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow epmd container_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 15
allow epmd container_app_sdcard_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 15

#line 15
allow epmd container_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow epmd bbccontainer_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 15
allow epmd container_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow epmd bbccontainer_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow epmd container_app:dir { open getattr read search ioctl };
#line 15
allow epmd container_app:file { getattr open read ioctl lock };
#line 15


#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow epmd dumpstate_exec:file { getattr open read execute };
#line 16
allow epmd dumpstate:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow dumpstate dumpstate_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow dumpstate epmd:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit epmd dumpstate:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow epmd dumpstate:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition epmd dumpstate_exec:process dumpstate;
#line 16


#line 17
allow epmd dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 17
allow epmd dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 17
allow epmd dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 17
allow epmd bugreport_exec:file { execute execute_no_trans };
#line 17
allow epmd dumpstate_exec:file { execute execute_no_trans };
#line 17
allow epmd dumpsys_exec:file { execute execute_no_trans };
#line 17

# moved into s_samsung.te for cts_v0,v1
#init_daemon_domain(epmd)

#line 20
allow epmd mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 20
allow epmd mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 20
# TODO: Figure out proper sockets
#line 20
allow epmd mobicoredaemon:unix_stream_socket connectto;
#line 20


########## self and domain_type
allow epmd container_app:fd use;
# remove container : search /proc
allow epmd domain:dir { read search open getattr };
allow epmd domain:{ file lnk_file } { read getattr open };
allow epmd domain:process { signal sigkill };
#neverallow Google CTS-android-5.0.2_r1 : remove sys_ptrace
allow epmd kernel:system module_request;
allow epmd self:capability { chown dac_override fowner fsetid sys_admin sys_boot sys_resource setuid net_raw setgid kill ipc_lock };
allow epmd self:capability2 syslog;

########## fs_type
allow epmd firmware:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 :allow epmd firmware:file rw_file_perms;
allow epmd firmware:file { getattr open read ioctl lock };
#neverallow Google CTS-android-5.0.2_r1 :allow epmd labeledfs:filesystem { mount unmount };
allow epmd sdcard_type:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow epmd sdcard_type:file unlink;
allow epmd sdcard_type:filesystem { mount remount unmount };

########## dev_type
allow epmd block_device:dir { open getattr read search ioctl };
allow epmd block_device:file { getattr open read ioctl lock };
allow epmd knox_dar_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow epmd knox_dar_shared_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow epmd asec_apk_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton relabelto };
allow epmd asec_apk_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelto };
allow epmd asec_apk_file:lnk_file relabelto;
allow epmd container_app_data_backend:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom relabelto };
allow epmd bbccontainer_app_data_backend:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom relabelto };
#line 53
allow epmd container_app_data_backend:{ file lnk_file } { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom relabelto };
allow epmd bbccontainer_app_data_backend:{ file lnk_file } { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom relabelto };
#line 54
allow epmd knox_clipboard_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow epmd knox_clipboard_file:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow epmd media_rw_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton relabelfrom relabelto };
allow epmd media_rw_data_file:{ file lnk_file } { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom relabelto };
allow epmd system_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto relabelfrom };
allow epmd system_app_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom relabelto };
allow epmd system_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow epmd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow epmd users_system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow epmd users_system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.
# when remove container : read app_data_type and unlink
allow epmd { app_data_type system_data_file }:dir { { { open getattr read search ioctl } { open search write add_name remove_name } } rmdir };
allow epmd { app_data_type system_data_file }:file { getattr unlink };
allow epmd { app_data_type system_data_file }:lnk_file { getattr unlink };

# booting denials
#neverallow Google CTS-android-5.0.2_r1 :allow epmd labeledfs:filesystem mount;
allow epmd system_data_file:dir mounton;

# encrypted device -> create container -> add_key(syscall 309) error at mounting encryptfs
allow epmd init:key write;
allow epmd kernel:key *;

# to support writeData of ApplicationPolicy, copyFile() API of RCPManagerService
allow epmd container_system_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow epmd container_system_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# "move to knox" : select a file from sdcard
allow epmd sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow epmd sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# from vold rules.
allow epmd media_rw_data_file:dir mounton;
#neverallow Google CTS-android-5.0.2_r1 :allow epmd labeledfs:filesystem relabelfrom;

# from vold rules for KNOX 2.0
allow epmd container_app:fd use;
allow epmd container_app_data_file:filesystem { relabelfrom relabelto mount unmount };
allow epmd container_app_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow epmd container_app_sdcard_file:filesystem { relabelfrom relabelto mount unmount };
allow epmd container_app_sdcard_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow epmd container_app_data_backend:dir mounton;
allow epmd bbccontainer_app_data_backend:dir mounton;
#line 99
allow epmd container_app_data_backend:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow epmd bbccontainer_app_data_backend:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 100

# form vold of nsa rules for KNOX 2.0
allow epmd rootfs:dir mounton;
allow epmd sdcard_type:dir mounton;
allow epmd tmpfs:dir mounton;
allow epmd system_data_file:dir { create { { open getattr read search ioctl } { open search write add_name remove_name } } mounton };

# restorecon by addding category to encryptfs
# container_app_backend(/data/knox/data/xxx/), media_rw_data_file(/mnt/shell/emulated/xxx/) and all app data.
allow epmd { container_app_data_backend bbccontainer_app_data_backend media_rw_data_file system_data_file app_data_type } :dir { relabelfrom relabelto };
allow epmd { container_app_data_backend bbccontainer_app_data_backend media_rw_data_file system_data_file app_data_type } :{ file lnk_file } { relabelfrom relabelto };

# create/remove container for each app data in EcryptFS's source and target(/data/knox/data/xxx and /data/user/xxx)
allow epmd { container_app_data_backend bbccontainer_app_data_backend media_rw_data_file system_data_file app_data_type } :dir { { { open getattr read search ioctl } { open search write add_name remove_name } } rmdir };
allow epmd { container_app_data_backend bbccontainer_app_data_backend media_rw_data_file system_data_file app_data_type } :{ file lnk_file } { getattr unlink };
allow epmd app_data_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow epmd app_data_type:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


# from vold and PLM priviate mode
allow epmd efs_file:dir { open getattr read search ioctl };
allow epmd km_fips_prop:property_service set;

#line 122
allow epmd property_socket:sock_file write;
#line 122
allow epmd init:unix_stream_socket connectto;
#line 122

#neverallow Google CTS-android-5.0.2_r1 : remove set_prop(epmd), add unix_socket_connect

#line 124
allow epmd property_socket:sock_file write;
#line 124
allow epmd init:unix_stream_socket connectto;
#line 124


allow epmd rootfs:dir mounton;

# Personal Page
allow epmd personal_page_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow epmd personal_page_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# IRM
allow epmd irm_media_data_file:{ dir file lnk_file } { relabelfrom relabelto };
allow epmd irm_media_data_file:dir { { { open getattr read search ioctl } { open search write add_name remove_name } } rmdir };
allow epmd irm_media_data_file:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow epmd qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ avc_log #############
# avc:  denied  { sys_admin } for  pid=324 comm="epmd" capability=21  scontext=u:r:epmd:s0 tcontext=u:r:epmd:s0 tclass=capability
# avc:  denied  { dac_override } for  pid=324 comm="epmd" capability=1  scontext=u:r:epmd:s0 tcontext=u:r:epmd:s0 tclass=capability
# avc:  denied  { search } for  pid=495 comm="epmd" name="3229" dev="proc" ino=27385 scontext=u:r:epmd:s0 tcontext=u:r:system_app:s0:c3 tclass=dir
# avc:  denied  { read } for  pid=495 comm="epmd" name="cmdline" dev="proc" ino=27402 scontext=u:r:epmd:s0 tcontext=u:r:system_app:s0:c3 tclass=file
# avc:  denied  { mounton } for  pid=324 comm="epmd" path="/data/user/100" dev="mmcblk0p26" ino=1048589 scontext=u:r:epmd:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { mount } for  pid=324 comm="epmd" name="/" item=0 name="/data/user/100" dev="ecryptfs" ino=918796 scontext=u:r:epmd:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem
# avc:  denied  { unmount } for  pid=471 comm="epmd" scontext=u:r:epmd:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem item=0 name="/data/user/100" inode=918913 dev=00:1c mode=040771 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:container_app_data_backend:s0:c2
# avc:  denied  { getattr } for  pid=7742 comm="epmd" path="/mnt/shell/emulated" dev="sdcardfs" ino=1179652 scontext=u:r:epmd:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
# item=0 name="/mnt/shell/emulated/" inode=1179652 dev=00:18 mode=040771 ouid=0 ogid=1028 rdev=00:00 obj=u:object_r:media_rw_data_file:s0
# avc:  denied  { write } for  pid=7742 comm="epmd" name="/" dev="sdcardfs" ino=1179652 scontext=u:r:epmd:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
# avc:  denied  { add_name } for  pid=7742 comm="epmd" name="101" scontext=u:r:epmd:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
# item=0 name="/mnt/shell/emulated/" inode=1179652 dev=00:18 mode=040771 ouid=0 ogid=1028 rdev=00:00 obj=u:object_r:media_rw_data_file:s0
# avc:  denied  { open } for  pid=7742 comm="epmd" path="/data/user/101/com.sec.knox.bridge/files/ClipboardSandbox/to/11577951923947_300_183" dev="ecryptfs" ino=1050096 scontext=u:r:epmd:s0 tcontext=u:object_r:system_app_data_file:s0:c3 tclass=dir
# avc:  denied  { open } for  pid=413 comm="epmd" path="/data/system/users/100/100.xml" dev="mmcblk0p26" ino=919489 scontext=u:r:epmd:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { open } for  pid=7742 comm="epmd" path="/data/clipboard/11577951923947_300_183" dev="mmcblk0p26" ino=1441823 scontext=u:r:epmd:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { read } for  pid=495 comm="epmd" name="EN.FWbriPqsI7Zad-Zxf2WV5V5lByAs47liA0zDt7GqUjvL2eRF-chLMFlcKE--" dev="mmcblk0p26" ino=918818 scontext=u:r:epmd:s0 tcontext=u:object_r:system_app_data_file:s0:c2 tclass=dir
# item=0 name="/data/knox/data/100/EN.FWbriPqsI7Zad-Zxf2WV5V5lByAs47liA0zDt7GqUjvL2eRF-chLMFlcKE--" inode=918818 dev=b3:1a mode=040751 ouid=10001000 ogid=10001000 rdev=00:00 obj=u:object_r:system_app_data_file:s0:c2
# avc:  denied  { write } for  pid=495 comm="epmd" name="EN.FWbriPqsI7Zad-Zxf2WV5V5lByAs47liA0zDt7GqUjvL2eRF-chLMFlcKE--" dev="mmcblk0p26" ino=918818 scontext=u:r:epmd:s0 tcontext=u:object_r:system_app_data_file:s0:c2 tclass=dir
# avc:  denied  { remove_name } for  pid=495 comm="epmd" name="EN.FWbriPqsI7Zad-Zxf2WV5V5lByAs47liA0zD3XmnAA6mwJRmwqB0ReJGL---" dev="mmcblk0p26" ino=918819 scontext=u:r:epmd:s0 tcontext=u:object_r:system_app_data_file:s0:c2 tclass=dir
# item=0 name="/data/knox/data/100/EN.FWbriPqsI7Zad-Zxf2WV5V5lByAs47liA0zDt7GqUjvL2eRF-chLMFlcKE--/" inode=918818 dev=b3:1a mode=040751 ouid=10001000 ogid=10001000 rdev=00:00 obj=u:object_r:system_app_data_file:s0:c2
# avc:  denied  { rmdir } for  pid=495 comm="epmd" name="EN.FWbriPqsI7Zad-Zxf2WV5V5lByAs47liA0zDt7GqUjvL2eRF-chLMFlcKE--" dev="mmcblk0p26" ino=918818 scontext=u:r:epmd:s0 tcontext=u:object_r:system_app_data_file:s0:c2 tclass=dir
## relabel clips.info file
# avc:  denied  { fowner } for  pid=495 comm="epmd" capability=3  scontext=u:r:epmd:s0 tcontext=u:r:epmd:s0 tclass=capability
# avc:  denied  { relabelfrom } for  pid=495 comm="epmd" name="clips.info" dev="ecryptfs" ino=1048901 scontext=u:r:epmd:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file
# avc:  denied  { relabelto } for  pid=495 comm="epmd" name="clips.info" dev="ecryptfs" ino=1048901 scontext=u:r:epmd:s0 tcontext=u:object_r:system_app_data_file:s0:c2 tclass=file
# item=0 name="/data/user/100/com.sec.knox.bridge/files/ClipboardSandbox/from/clips.info" inode=1048901 dev=00:1a mode=0100700 ouid=10001000 ogid=10001000 rdev=00:00 obj=u:object_r:system_app_data_file:s0
# remove container
# avc:  denied  { write } for  pid=471 comm="epmd" name="EN.FXbSs2quWd.fvUYuxiQBHt9JGY.NzPeeBIDLcTE-4FJ2uxojBkYpdftFvYaIC7hzcMYrxhv-NafIyaQ-" dev="mmcblk0p26" ino=919163 scontext=u:r:epmd:s0 tcontext=u:object_r:system_data_file:s0:c2 tclass=dir
# avc:  denied  { remove_name } for  pid=471 comm="epmd" name="EN.FWbSs2quWd.fvUYuxiQBHt9JGY.NzPeeBIDLelJ0L2gA7wFLWbRtYt2VfU--" dev="mmcblk0p26" ino=919164 scontext=u:r:epmd:s0 tcontext=u:object_r:system_data_file:s0:c2 tclass=dir
# item=0 name="/data/knox/data/100/EN.FXbSs2quWd.fvUYuxiQBHt9JGY.NzPeeBIDLcTE-4FJ2uxojBkYpdftFvYaIC7hzcMYrxhv-NafIyaQ-/" inode=919163 dev=b3:1a mode=040751 ouid=10001000 ogid=10001000 rdev=00:00 obj=u:object_r:system_data_file:s0:c2
# avc:  denied  { write } for  pid=471 comm="epmd" name="user" dev="mmcblk0p26" ino=1048580 scontext=u:r:epmd:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { remove_name } for  pid=471 comm="epmd" name="100" dev="mmcblk0p26" ino=1048589 scontext=u:r:epmd:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# item=0 name="/data/user/" inode=1048580 dev=b3:1a mode=040711 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:system_data_file:s0
# item=1 name="/data/user/100" inode=1048589 dev=b3:1a mode=040700 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:system_data_file:s0
# mobicore use
# avc:  denied  { connectto } for  pid=2943 comm="epmd" path=006D636461656D6F6E scontext=u:r:epmd:s0 tcontext=u:r:mobicoredaemon:s0 tclass=unix_stream_socket SEPF_SM-N910C_4.4.4_A019
# avc:  denied  { write } for  pid=2943 comm="epmd" name="mobicore-user" dev="tmpfs" ino=4393 scontext=u:r:epmd:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file
# from vold and PLM priviate mode
# avc:  denied  { mounton } for  pid=446 comm="epmd" path="/storage/Private" dev="rootfs" ino=11409 scontext=u:r:epmd:s0 tcontext=u:object_r:rootfs:s0 tclass=dir
# avc:  denied  { mount } for  pid=446 comm="epmd" name="/" dev="ecryptfs" ino=524293 scontext=u:r:epmd:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem
# avc:  denied  { set } for property=rw.km_fips_status scontext=u:r:epmd:s0 tcontext=u:object_r:km_fips_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=446 comm="epmd" name="property_service" dev="tmpfs" ino=12897 scontext=u:r:epmd:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file
# avc:  denied  { connectto } for  pid=446 comm="epmd" path="/dev/socket/property_service" scontext=u:r:epmd:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket
# avc:  denied  { create } for  pid=534 comm="epmd" name="100" scontext=u:r:epmd:s0 tcontext=u:object_r:sdcard_internal:s0 tclass=dir SEPF_SM-N900V_4.4.4_0026
# avc:  denied  { write } for  pid=324 comm="epmd" name="qseecom" dev="tmpfs" ino=12507 scontext=u:r:epmd:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file
# TB L OS avc:  denied  { syslog } for  pid=645 comm="logcat" capability=34  scontext=u:r:epmd:s0 tcontext=u:r:epmd:s0 tclass=capability2 permissive=0
# audit(1419847551.989:14263): avc:  denied  { sigkill } for  pid=3047 comm="epmd" scontext=u:r:epmd:s0 tcontext=u:r:media_app:s0 tclass=process permissive=0
# audit(1425381413.203:229): avc:  denied  { module_request } for  pid=591 comm="epmd" kmod="ecb(aes)-all" scontext=u:r:epmd:s0 tcontext=u:r:kernel:s0 tclass=system permissive=0 
# avc:  denied  { write } for  pid=529 comm="epmd" name="100" dev="mmcblk0p26" ino=916014 scontext=u:r:epmd:s0 tcontext=u:object_r:users_system_data_file:s0 tclass=dir
# avc:  denied  { add_name } for  pid=3221 comm="epmd" name="VFEKEK_100" scontext=u:r:epmd:s0 tcontext=u:object_r:users_system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=3221 comm="epmd" name="VFEKEK_100" scontext=u:r:epmd:s0 tcontext=u:object_r:users_system_data_file:s0 tclass=file permissive=1
# avc:  denied  { write } for  pid=3221 comm="epmd" path="/data/system/users/100/VFEKEK_100" dev="sda21" ino=525032 scontext=u:r:epmd:s0 tcontext=u:object_r:users_system_data_file:s0 tclass=file permissive=1
# item=0 name="/data/system/users/100/VFEKEK_100" inode=916014 dev=b3:1a mode=040700 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:users_system_data_file:s0
# item=0 name="/data/system/users/100/ccstatus_100" inode=916014 dev=b3:1a mode=040700 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:users_system_data_file:s0
# avc:  denied  { getattr } for  pid=525 comm="epmd" path="/proc/78/fd/0" dev="proc" ino=247896 scontext=u:r:epmd:s0 tcontext=u:r:kernel:s0 tclass=dir SEPF_SM-T535_5.0.2_0011
# avc:  denied  { search } for  pid=2508 comm="vold" scontext=u:r:vold:s0 tcontext=u:r:kernel:s0 tclass=key permissive=0 SEPF_SM-G361F_5.1_0011
# avc:  denied  { relabelto } for  pid=3190 comm="vold" name=".irm" dev="ecryptfs" ino=130970 scontext=u:r:vold:s0 tcontext=u:object_r:irm_media_data_file:s0 tclass=dir permissive=0
#line 1 "vendor/samsung/common/sepolicy/knox_common/fixmo.te"
#
# fixmo_app
# Most FIXMO related policies should be here.
#

############ knox_common #############
########## type and macro.

### Use Binder

#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow fixmo_app servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager fixmo_app:dir search;
#line 10
allow servicemanager fixmo_app:file { read open };
#line 10
allow servicemanager fixmo_app:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow fixmo_app fixmo_app:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow fixmo_app fixmo_app:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow fixmo_app fixmo_app:fd use;
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow fixmo_app mediaserver:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow mediaserver fixmo_app:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow fixmo_app mediaserver:fd use;
#line 12


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow fixmo_app nfc:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow nfc fixmo_app:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow fixmo_app nfc:fd use;
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow fixmo_app bluetooth:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow bluetooth fixmo_app:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow fixmo_app bluetooth:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow fixmo_app platform_app:binder { call transfer };
allow fixmo_app s_platform_app:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow platform_app fixmo_app:binder transfer;
allow s_platform_app fixmo_app:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow fixmo_app platform_app:fd use;
allow fixmo_app s_platform_app:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow fixmo_app radio:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow radio fixmo_app:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow fixmo_app radio:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow fixmo_app surfaceflinger:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow surfaceflinger fixmo_app:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow fixmo_app surfaceflinger:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow fixmo_app system_app:binder { call transfer };
allow fixmo_app s_system_app:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow system_app fixmo_app:binder transfer;
allow s_system_app fixmo_app:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow fixmo_app system_app:fd use;
allow fixmo_app s_system_app:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow fixmo_app system:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow system fixmo_app:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow fixmo_app system:fd use;
#line 19


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow fixmo_app zygote:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow zygote fixmo_app:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow fixmo_app zygote:fd use;
#line 20


#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow mediaserver fixmo_app:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow fixmo_app mediaserver:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow mediaserver fixmo_app:fd use;
#line 21


#line 22
# Call the server domain and optionally transfer references to it.
#line 22
allow nfc fixmo_app:binder { call transfer };
#line 22
# Allow the serverdomain to transfer references to the client on the reply.
#line 22
allow fixmo_app nfc:binder transfer;
#line 22
# Receive and use open files from the server.
#line 22
allow nfc fixmo_app:fd use;
#line 22


#line 23
# Call the server domain and optionally transfer references to it.
#line 23
allow platform_app fixmo_app:binder { call transfer };
allow s_platform_app fixmo_app:binder { call transfer };
#line 23
# Allow the serverdomain to transfer references to the client on the reply.
#line 23
allow fixmo_app platform_app:binder transfer;
allow fixmo_app s_platform_app:binder transfer;
#line 23
# Receive and use open files from the server.
#line 23
allow platform_app fixmo_app:fd use;
allow s_platform_app fixmo_app:fd use;
#line 23


#line 24
# Call the server domain and optionally transfer references to it.
#line 24
allow radio fixmo_app:binder { call transfer };
#line 24
# Allow the serverdomain to transfer references to the client on the reply.
#line 24
allow fixmo_app radio:binder transfer;
#line 24
# Receive and use open files from the server.
#line 24
allow radio fixmo_app:fd use;
#line 24


#line 25
# Call the server domain and optionally transfer references to it.
#line 25
allow surfaceflinger fixmo_app:binder { call transfer };
#line 25
# Allow the serverdomain to transfer references to the client on the reply.
#line 25
allow fixmo_app surfaceflinger:binder transfer;
#line 25
# Receive and use open files from the server.
#line 25
allow surfaceflinger fixmo_app:fd use;
#line 25


#line 26
# Call the server domain and optionally transfer references to it.
#line 26
allow system fixmo_app:binder { call transfer };
#line 26
# Allow the serverdomain to transfer references to the client on the reply.
#line 26
allow fixmo_app system:binder transfer;
#line 26
# Receive and use open files from the server.
#line 26
allow system fixmo_app:fd use;
#line 26


#line 27
# Call the server domain and optionally transfer references to it.
#line 27
allow system_app fixmo_app:binder { call transfer };
allow s_system_app fixmo_app:binder { call transfer };
#line 27
# Allow the serverdomain to transfer references to the client on the reply.
#line 27
allow fixmo_app system_app:binder transfer;
allow fixmo_app s_system_app:binder transfer;
#line 27
# Receive and use open files from the server.
#line 27
allow system_app fixmo_app:fd use;
allow s_system_app fixmo_app:fd use;
#line 27


#line 28
# Call the server domain and optionally transfer references to it.
#line 28
allow fixmo_app knox_untrusted_app:binder { call transfer };
#line 28
# Allow the serverdomain to transfer references to the client on the reply.
#line 28
allow knox_untrusted_app fixmo_app:binder transfer;
#line 28
# Receive and use open files from the server.
#line 28
allow fixmo_app knox_untrusted_app:fd use;
#line 28


#line 29
# Call the server domain and optionally transfer references to it.
#line 29
allow knox_untrusted_app fixmo_app:binder { call transfer };
#line 29
# Allow the serverdomain to transfer references to the client on the reply.
#line 29
allow fixmo_app knox_untrusted_app:binder transfer;
#line 29
# Receive and use open files from the server.
#line 29
allow knox_untrusted_app fixmo_app:fd use;
#line 29


#line 30
# Call the server domain and optionally transfer references to it.
#line 30
allow zygote fixmo_app:binder { call transfer };
#line 30
# Allow the serverdomain to transfer references to the client on the reply.
#line 30
allow fixmo_app zygote:binder transfer;
#line 30
# Receive and use open files from the server.
#line 30
allow zygote fixmo_app:fd use;
#line 30


########## self and domain_type
########## fs_type
########## dev_type
allow fixmo_app kgsl_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.
## Zygote <--> FIXMO
allow zygote fixmo_app:process *;
allow fixmo_app zygote:process sigchld;
allow zygote fixmo_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow zygote fixmo_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow fixmo_app zygote:unix_stream_socket { getopt getattr };
allow fixmo_app zygote_tmpfs:file { getattr open read ioctl lock };

### System <--> FIXMO
allow system fixmo_app:process *;
allow { system system_app s_system_app } fixmo_app:dir { open getattr read search ioctl };
allow { system system_app s_system_app } fixmo_app:{ file lnk_file fifo_file } { { getattr open read ioctl lock } { open append write } };
allow { system system_app s_system_app } fixmo_app:{ tcp_socket udp_socket unix_stream_socket } { setopt read write getopt };
allow { system system_app s_system_app } fixmo_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom relabelto };
allow { system system_app s_system_app } fixmo_app_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom relabelto };
allow fixmo_app { system system_app s_system_app }:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 :allow fixmo_app { system system_app }:{ file lnk_file fifo_file } rw_file_perms;
allow fixmo_app { system_app s_system_app }:{ file lnk_file fifo_file } { { getattr open read ioctl lock } { open append write } };
allow fixmo_app { system system_app s_system_app }:{ tcp_socket udp_socket unix_stream_socket } { setopt read write getopt };
allow fixmo_app system_file:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 :allow fixmo_app system_file:{ file lnk_file } rw_file_perms;
allow fixmo_app system_file:{ file lnk_file } { getattr open read ioctl lock };

allow fixmo_app system_file:file execute_no_trans;
allow fixmo_app system_data_file:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 :allow fixmo_app system_data_file:{ file lnk_file } rw_file_perms;
allow fixmo_app system_data_file:{ file lnk_file } { getattr open read ioctl lock };

### Installd <--> FIXMO
allow installd fixmo_app:fd use;
allow installd fixmo_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom relabelto };
allow installd fixmo_app_data_file:{ file lnk_file } { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom relabelto };

### FIXMO <--> FIXMO
#neverallow Google CTS-android-5.0.2_r1 :allow fixmo_app self:{ tcp_socket udp_socket netlink_kobject_uevent_socket netlink_route_socket } create_socket_perms;
allow fixmo_app self:{ tcp_socket udp_socket netlink_route_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow fixmo_app fixmo_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow fixmo_app fixmo_app_data_file:{ file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow fixmo_app fixmo_app_data_file:file { getattr execute execute_no_trans };

### Platform Apps <--> FIXMO
allow bridged_platform_app fixmo_app:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bridged_platform_app fixmo_app:file { { getattr open read ioctl lock } { open append write } };
allow bridged_platform_app fixmo_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bridged_platform_app fixmo_app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow fixmo_app platform_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow fixmo_app platform_app_data_file:file { { getattr open read ioctl lock } { open append write } };

### allow fixmo communicate with limited set of domains
allow fixmo_app { init surfaceflinger netd isolated_app }:unix_stream_socket { read write connectto getattr shutdown setopt getopt };
### When launched, the lib will be created
allow fixmo_app app_library_file:dir { { open getattr read search ioctl } execmod setattr };
allow fixmo_app app_library_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod setattr };

### Vold <--> FIXMO
allow vold fixmo_app:fd use;
allow vold fixmo_app_data_file:filesystem { relabelfrom relabelto mount unmount remount };
allow vold fixmo_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow vold fixmo_app_data_file:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

### Access internal storage
allow fixmo_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow fixmo_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow fixmo_app sdcard_internal:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow fixmo_app sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

### Labeled file system association
#neverallow Google CTS-android-5.0.2_r1 :allow fixmo_app labeledfs:filesystem { associate getattr };
allow fixmo_app labeledfs:filesystem getattr;
allow fixmo_app_data_file labeledfs:filesystem { associate getattr };

### allow fixmo react with some sid (TODO should be very specific)
allow fixmo_app kernel:system module_request;
allow fixmo_app node:{ tcp_socket udp_socket } { node_bind };
allow fixmo_app port:tcp_socket { name_bind name_connect };
allow fixmo_app port:udp_socket name_bind;

### Potential allow rules (TODO You MUST be very careful!!!)
allow bluetooth fixmo_app:file { getattr open read ioctl lock };
allow init_shell fixmo_app_data_file:dir { open getattr read search ioctl };
allow fixmo_app dnsproxyd_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow fixmo_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow fixmo_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow fixmo_app selinuxfs:filesystem getattr;
allow fixmo_app shell_data_file:dir search;
allow fixmo_app shell_data_file:file getattr;
allow fixmo_app qtaguid_proc:file { { getattr open read ioctl lock } { open append write } };
allow fixmo_app qtaguid_device:chr_file { getattr open read ioctl lock };
allow fixmo_app ashmem_device:chr_file execute;
allow debuggerd fixmo_app:lnk_file read;

# required for the "application not responding"
allow fixmo_app anr_data_file:dir search;
allow fixmo_app anr_data_file:file { open append getattr };
allow fixmo_app tombstone_data_file:dir search;
allow fixmo_app tombstone_data_file:file { open append getattr };

# Shell Exec
allow fixmo_app shell_exec:file { ioctl read getattr lock execute execute_no_trans open };

# PLM issue - P140611-00697
allow fixmo_app video_device:chr_file { { getattr open read ioctl lock } { open append write } };

# AWS
allow fixmo_app app_data_file:dir search;
allow fixmo_app gad_untrusted_app_data_file:dir search;
#line 146

# Support ART mode
allow fixmo_app dalvikcache_data_file:file execute;
allow fixmo_app dex2oat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow fixmo_app apk_data_file:dir { open getattr read search ioctl };
allow fixmo_app apk_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow fixmo_app graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow fixmo_app ump_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow fixmo_app ump_device:sock_file { getattr open read ioctl lock };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/knox_common/good.te"
#
# good_app
# Most GOOD related policies should be here.
#

############ knox_common #############
########## type and macro.

### Use Binder

#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow good_app servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager good_app:dir search;
#line 10
allow servicemanager good_app:file { read open };
#line 10
allow servicemanager good_app:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow good_app bluetooth:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow bluetooth good_app:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow good_app bluetooth:fd use;
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow good_app good_app:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow good_app good_app:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow good_app good_app:fd use;
#line 12


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow good_app gad_untrusted_app:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow gad_untrusted_app good_app:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow good_app gad_untrusted_app:fd use;
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow good_app keystore:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow keystore good_app:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow good_app keystore:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow good_app mediaserver:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow mediaserver good_app:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow good_app mediaserver:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow good_app nfc:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow nfc good_app:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow good_app nfc:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow good_app platform_app:binder { call transfer };
allow good_app s_platform_app:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow platform_app good_app:binder transfer;
allow s_platform_app good_app:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow good_app platform_app:fd use;
allow good_app s_platform_app:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow good_app radio:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow radio good_app:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow good_app radio:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow good_app surfaceflinger:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow surfaceflinger good_app:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow good_app surfaceflinger:fd use;
#line 19


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow good_app system_app:binder { call transfer };
allow good_app s_system_app:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow system_app good_app:binder transfer;
allow s_system_app good_app:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow good_app system_app:fd use;
allow good_app s_system_app:fd use;
#line 20


#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow good_app system:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow system good_app:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow good_app system:fd use;
#line 21


#line 22
# Call the server domain and optionally transfer references to it.
#line 22
allow good_app zygote:binder { call transfer };
#line 22
# Allow the serverdomain to transfer references to the client on the reply.
#line 22
allow zygote good_app:binder transfer;
#line 22
# Receive and use open files from the server.
#line 22
allow good_app zygote:fd use;
#line 22


#line 23
# Call the server domain and optionally transfer references to it.
#line 23
allow bluetooth good_app:binder { call transfer };
#line 23
# Allow the serverdomain to transfer references to the client on the reply.
#line 23
allow good_app bluetooth:binder transfer;
#line 23
# Receive and use open files from the server.
#line 23
allow bluetooth good_app:fd use;
#line 23


#line 24
# Call the server domain and optionally transfer references to it.
#line 24
allow gad_untrusted_app good_app:binder { call transfer };
#line 24
# Allow the serverdomain to transfer references to the client on the reply.
#line 24
allow good_app gad_untrusted_app:binder transfer;
#line 24
# Receive and use open files from the server.
#line 24
allow gad_untrusted_app good_app:fd use;
#line 24


#line 25
# Call the server domain and optionally transfer references to it.
#line 25
allow mediaserver good_app:binder { call transfer };
#line 25
# Allow the serverdomain to transfer references to the client on the reply.
#line 25
allow good_app mediaserver:binder transfer;
#line 25
# Receive and use open files from the server.
#line 25
allow mediaserver good_app:fd use;
#line 25


#line 26
# Call the server domain and optionally transfer references to it.
#line 26
allow nfc good_app:binder { call transfer };
#line 26
# Allow the serverdomain to transfer references to the client on the reply.
#line 26
allow good_app nfc:binder transfer;
#line 26
# Receive and use open files from the server.
#line 26
allow nfc good_app:fd use;
#line 26


#line 27
# Call the server domain and optionally transfer references to it.
#line 27
allow platform_app good_app:binder { call transfer };
allow s_platform_app good_app:binder { call transfer };
#line 27
# Allow the serverdomain to transfer references to the client on the reply.
#line 27
allow good_app platform_app:binder transfer;
allow good_app s_platform_app:binder transfer;
#line 27
# Receive and use open files from the server.
#line 27
allow platform_app good_app:fd use;
allow s_platform_app good_app:fd use;
#line 27


#line 28
# Call the server domain and optionally transfer references to it.
#line 28
allow radio good_app:binder { call transfer };
#line 28
# Allow the serverdomain to transfer references to the client on the reply.
#line 28
allow good_app radio:binder transfer;
#line 28
# Receive and use open files from the server.
#line 28
allow radio good_app:fd use;
#line 28


#line 29
# Call the server domain and optionally transfer references to it.
#line 29
allow surfaceflinger good_app:binder { call transfer };
#line 29
# Allow the serverdomain to transfer references to the client on the reply.
#line 29
allow good_app surfaceflinger:binder transfer;
#line 29
# Receive and use open files from the server.
#line 29
allow surfaceflinger good_app:fd use;
#line 29


#line 30
# Call the server domain and optionally transfer references to it.
#line 30
allow system good_app:binder { call transfer };
#line 30
# Allow the serverdomain to transfer references to the client on the reply.
#line 30
allow good_app system:binder transfer;
#line 30
# Receive and use open files from the server.
#line 30
allow system good_app:fd use;
#line 30


#line 31
# Call the server domain and optionally transfer references to it.
#line 31
allow system_app good_app:binder { call transfer };
allow s_system_app good_app:binder { call transfer };
#line 31
# Allow the serverdomain to transfer references to the client on the reply.
#line 31
allow good_app system_app:binder transfer;
allow good_app s_system_app:binder transfer;
#line 31
# Receive and use open files from the server.
#line 31
allow system_app good_app:fd use;
allow s_system_app good_app:fd use;
#line 31


#line 32
# Call the server domain and optionally transfer references to it.
#line 32
allow zygote good_app:binder { call transfer };
#line 32
# Allow the serverdomain to transfer references to the client on the reply.
#line 32
allow good_app zygote:binder transfer;
#line 32
# Receive and use open files from the server.
#line 32
allow zygote good_app:fd use;
#line 32


########## self and domain_type
########## fs_type
allow good_app devpts:chr_file getattr;

########## dev_type
allow good_app kgsl_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow good_app tombstone_data_file:dir search;
allow good_app tombstone_data_file:file { open append getattr };

########## etc_type
########## known issue.
### Zygote <--> GOOD
allow zygote good_app:process *;
allow good_app zygote:process sigchld;
allow zygote good_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow zygote good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow good_app zygote:unix_stream_socket { getopt getattr };
allow good_app zygote_tmpfs:file { getattr open read ioctl lock };
allow good_app zygote_exec:lnk_file read;
allow good_app zygote_exec:file getattr;

### System <--> GOOD
allow system good_app:process *;
allow { system system_app s_system_app } good_app:dir { open getattr read search ioctl };
allow { system system_app s_system_app } good_app:{ file lnk_file fifo_file } { { getattr open read ioctl lock } { open append write } };
allow { system system_app s_system_app } good_app:{ tcp_socket udp_socket unix_stream_socket } { setopt read write getopt };
allow { system system_app s_system_app } good_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom relabelto };
allow { system system_app s_system_app } good_app_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom relabelto };
allow good_app { system system_app s_system_app }:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 :allow good_app { system system_app }:{ file lnk_file fifo_file } rw_file_perms;
allow good_app { system_app s_system_app }:{ file lnk_file fifo_file } { { getattr open read ioctl lock } { open append write } };

allow good_app { system system_app s_system_app }:{ tcp_socket udp_socket unix_stream_socket } { setopt read write getopt };
allow good_app system_file:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 :allow good_app system_file:{ file lnk_file } rw_file_perms;
allow good_app system_file:{ file lnk_file } { getattr open read ioctl lock };

allow good_app system_app_data_file:dir search;

### The rule "allow good_app system_file:file execute_no_trans" is required for Good Access to run /system/bin/dexopt to run jar file when starting
### 07-24 17:12:55.988 E/dalvikvm(24936): execv '/system/bin/dexopt' failed: Permission denied
### 07-24 17:12:57.998 I/knox    ( 4441): type=1400 msg=audit(1406247175.988:757): avc:  denied  { execute_no_trans } for  pid=24936 comm="com.good.gdgma" path="/system/bin/dexopt" dev="mmcblk0p23" 
### ino=315 scontext=u:r:good_app:s0 tcontext=u:object_r:system_file:s0 tclass=file SEPF_SM-G900F_4.4.2_0018
allow good_app system_file:file { execute_no_trans };
allow good_app system_data_file:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 :allow good_app system_file:{ file lnk_file } rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 :allow good_app system_data_file:{ file lnk_file } rw_file_perms;
allow good_app system_data_file:{ file lnk_file } { getattr open read ioctl lock };

### Installd <--> GOOD
allow installd good_app:fd use;
allow installd good_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom relabelto };
allow installd good_app_data_file:{ file lnk_file } { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom relabelto };
allow good_app installd:fd use;

### GOOD <--> GOOD/GAD
#neverallow Google CTS-android-5.0.2_r1 :allow good_app self:{ tcp_socket udp_socket netlink_kobject_uevent_socket netlink_route_socket } create_socket_perms;
allow good_app self:{ tcp_socket udp_socket netlink_route_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow good_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow good_app good_app_data_file:{ file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow good_app good_app_data_file:file execute;

#allow good_app gad_untrusted_app:{ tcp_socket udp_socket netlink_kobject_uevent_socket netlink_route_socket } create_socket_perms;
#L MR1 Neverallow rule, so removed netlink_kobject_uevent_socket. 
allow good_app gad_untrusted_app:{ tcp_socket udp_socket netlink_route_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow good_app gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow good_app gad_untrusted_app_data_file:{ file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#allow gad_untrusted_app good_app:{ tcp_socket udp_socket netlink_kobject_uevent_socket netlink_route_socket } create_socket_perms;
#L MR1 Neverallow rule, so removed netlink_kobject_uevent_socket. 
allow gad_untrusted_app good_app:{ tcp_socket udp_socket netlink_route_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow gad_untrusted_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow gad_untrusted_app good_app_data_file:{ file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

### Platform Apps <--> GOOD
allow bridged_platform_app good_app:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bridged_platform_app good_app:file { { getattr open read ioctl lock } { open append write } };
allow bridged_platform_app good_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bridged_platform_app good_app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow good_app platform_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow good_app platform_app_data_file:file { { getattr open read ioctl lock } { open append write } };

### allow good communicate with limited set of domains
allow good_app { init surfaceflinger netd isolated_app }:unix_stream_socket { read write connectto getattr shutdown setopt getopt };

### When launched, the lib will be created
allow good_app app_library_file:dir { { open getattr read search ioctl } execmod setattr };
allow good_app app_library_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod setattr };

### Vold <--> GOOD
allow vold good_app:fd use;
allow vold good_app_data_file:filesystem { relabelfrom relabelto mount unmount remount };
allow vold good_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow vold good_app_data_file:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

### Access internal storage
allow good_app media_rw_data_file:dir { open getattr read search ioctl };
allow good_app media_rw_data_file:file { getattr open read ioctl lock };
allow good_app sdcard_internal:dir { open getattr read search ioctl };
allow good_app sdcard_internal:file { getattr open read ioctl lock };

### Labeled file system association
#neverallow Google CTS-android-5.0.2_r1 :allow good_app labeledfs:filesystem { associate getattr };
allow good_app labeledfs:filesystem getattr;
allow good_app_data_file labeledfs:filesystem { associate getattr };

### allow good react with some sid (TODO should be very specific)
allow good_app kernel:system module_request;
allow good_app node:{ tcp_socket udp_socket } { node_bind };
allow good_app port:tcp_socket { name_bind name_connect };
allow good_app port:udp_socket name_bind;

### Potential allow rules (TODO You MUST be very careful!!!)
#allow bluetooth good_app:file r_file_perms;
allow init_shell good_app_data_file:dir { open getattr read search ioctl };
allow good_app dnsproxyd_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow good_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow good_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow good_app selinuxfs:filesystem getattr;
allow good_app shell_data_file:dir search;
allow good_app shell_data_file:file getattr;
allow good_app qtaguid_proc:file { { getattr open read ioctl lock } { open append write } };
allow good_app ashmem_device:chr_file execute;
allow debuggerd good_app:lnk_file read;

# required for the "application not responding"
allow good_app anr_data_file:dir search;
allow good_app anr_data_file:file { open append getattr };

### good app to access mobicore daemon and devices
allow good_app mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow good_app mobicoredaemon:unix_stream_socket connectto;

# PLM issue - P140611-00697
allow good_app video_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Support ART mode
allow good_app dalvikcache_data_file:file execute;
allow good_app dex2oat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow good_app apk_data_file:dir { open getattr read search ioctl };
allow good_app apk_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };

# Allow good app to write fwmarkd socket file.
allow good_app fwmarkd_socket:sock_file write;

# Allow good app to access shared RELRO.
allow good_app shared_relro_file:dir search;
allow good_app shared_relro_file:file { read getattr open };

# Allow good app to access keychain data file
allow good_app keychain_data_file:file { read getattr open };
allow good_app keychain_data_file:dir search;

# Allow good app to search misc_user_data_file dir.
allow good_app misc_user_data_file:dir search;

### netd <--> GOOD
allow netd good_app:fd use; 
allow netd good_app:tcp_socket { read write setopt getopt };
allow netd good_app:udp_socket { read write setopt getopt };

#### dontaudit rules for good_app
dontaudit good_app app_data_file:file getattr;
dontaudit good_app gad_untrusted_app_data_file:file getattr;
#line 202
dontaudit good_app app_data_file:dir search;
dontaudit good_app gad_untrusted_app_data_file:dir search;
#line 203
dontaudit good_app knox_untrusted_app:binder call;
dontaudit knox_untrusted_app good_app:binder { transfer call };
dontaudit good_app untrusted_app:binder { transfer call };
dontaudit good_app umcagent_app:binder { transfer call };
dontaudit good_app vpn_untrusted_app:binder { transfer call };
dontaudit good_app trustonicpartner_app:binder { transfer call };
dontaudit good_app llk_untrusted_app:binder { transfer call };
dontaudit good_app filtered_untrusted_app:binder { transfer call };
dontaudit good_app filtered_google_app:binder { transfer call };
dontaudit good_app knox_untrusted_app:binder { transfer call };
dontaudit good_app irm_app:binder { transfer call };
dontaudit good_app gad_untrusted_app:binder { transfer call };
dontaudit good_app carrier_app:binder { transfer call };
#line 206
dontaudit good_app untrusted_app:fd use;
dontaudit good_app umcagent_app:fd use;
dontaudit good_app vpn_untrusted_app:fd use;
dontaudit good_app trustonicpartner_app:fd use;
dontaudit good_app llk_untrusted_app:fd use;
dontaudit good_app filtered_untrusted_app:fd use;
dontaudit good_app filtered_google_app:fd use;
dontaudit good_app knox_untrusted_app:fd use;
dontaudit good_app irm_app:fd use;
dontaudit good_app gad_untrusted_app:fd use;
dontaudit good_app carrier_app:fd use;
#line 207
dontaudit untrusted_app good_app:binder { call };
dontaudit umcagent_app good_app:binder { call };
dontaudit vpn_untrusted_app good_app:binder { call };
dontaudit trustonicpartner_app good_app:binder { call };
dontaudit llk_untrusted_app good_app:binder { call };
dontaudit filtered_untrusted_app good_app:binder { call };
dontaudit filtered_google_app good_app:binder { call };
dontaudit knox_untrusted_app good_app:binder { call };
dontaudit irm_app good_app:binder { call };
dontaudit gad_untrusted_app good_app:binder { call };
dontaudit carrier_app good_app:binder { call };
#line 208
dontaudit untrusted_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit umcagent_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit vpn_untrusted_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit trustonicpartner_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit llk_untrusted_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit filtered_untrusted_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit filtered_google_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit knox_untrusted_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit irm_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit gad_untrusted_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit carrier_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 209
dontaudit untrusted_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit umcagent_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit vpn_untrusted_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit trustonicpartner_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit llk_untrusted_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit filtered_untrusted_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit filtered_google_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit knox_untrusted_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit irm_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit gad_untrusted_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit carrier_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 210
dontaudit untrusted_app good_app:dir search;
dontaudit umcagent_app good_app:dir search;
dontaudit vpn_untrusted_app good_app:dir search;
dontaudit trustonicpartner_app good_app:dir search;
dontaudit llk_untrusted_app good_app:dir search;
dontaudit filtered_untrusted_app good_app:dir search;
dontaudit filtered_google_app good_app:dir search;
dontaudit knox_untrusted_app good_app:dir search;
dontaudit irm_app good_app:dir search;
dontaudit gad_untrusted_app good_app:dir search;
dontaudit carrier_app good_app:dir search;
#line 211
dontaudit untrusted_app good_app:file { read getattr open };
dontaudit umcagent_app good_app:file { read getattr open };
dontaudit vpn_untrusted_app good_app:file { read getattr open };
dontaudit trustonicpartner_app good_app:file { read getattr open };
dontaudit llk_untrusted_app good_app:file { read getattr open };
dontaudit filtered_untrusted_app good_app:file { read getattr open };
dontaudit filtered_google_app good_app:file { read getattr open };
dontaudit knox_untrusted_app good_app:file { read getattr open };
dontaudit irm_app good_app:file { read getattr open };
dontaudit gad_untrusted_app good_app:file { read getattr open };
dontaudit carrier_app good_app:file { read getattr open };
#line 212
dontaudit good_app shell_exec:file getattr;
dontaudit good_app shell_data_file:file write;
dontaudit trustonicpartner_app good_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
dontaudit trustonicpartner_app good_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

# From John White's emails "denials are related to some of the GD SDK device integrity detection / root detection code." and "its not something Im worried about for our current Good Agent"
# This is not need for first version of Good-knox integration. 
# Can revisit later in second version
dontaudit good_app domain:dir { open getattr read search ioctl };
dontaudit good_app domain:file { getattr open read ioctl lock };


############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow good_app graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow good_app ump_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# allow good_app download_file:file {read getattr};
#type=1400 msg=audit(1404260475.480:236): avc:  denied  { read } for  pid=17373 comm="Binder_5" path="/data/data/com.android.providers.downloads/cache/downloadfile-1.mp4" dev="mmcblk0p26" ino=525294 #scontext=u:r:good_app:s0 tcontext=u:object_r:download_file:s0 tclass=file SEPF_SM-G900F_4.4.4_0018
#type=1300 msg=audit(1404260475.480:236): arch=40000028 syscall=54 per=a00000 success=yes exit=0 a0=9 a1=c0186201 a2=7a044b98 a3=7a044b90 items=0 ppid=273 pid=17373 auid=4294967295 uid=10048 gid=10048 #euid=10048 suid=10048 fsuid=10048 egid=10048 sgid=10048 fsgid=10048 tty=(none) ses=4294967295 comm="Binder_5" exe="/system/bin/app_process" subj=u:r:media_app:s0 key=(null)
#type=1320 msg=audit(1404260475.480:236):
#type=1400 msg=audit(1404260475.510:237): avc:  denied  { getattr } for  pid=9660 comm="completeDownloa" path="/data/data/com.android.providers.downloads/cache/downloadfile-1.mp4" dev="mmcblk0p26" #ino=525294 scontext=u:r:good_app:s0 tcontext=u:object_r:download_file:s0 tclass=file SEPF_SM-G900F_4.4.4_0018
#type=1300 msg=audit(1404260475.510:237): arch=40000028 syscall=54 per=a00000 success=yes exit=0 a0=92 a1=541b a2=8338eac4 a3=8338eab8 items=0 ppid=273 pid=9660 auid=4294967295 uid=10207 gid=10207 #euid=10207 suid=10207 fsuid=10207 egid=10207 sgid=10207 fsgid=10207 tty=(none) ses=4294967295 comm="completeDownloa" exe="/system/bin/app_process" subj=u:r:good_app:s0 key=(null)
#type=1320 msg=audit(1404260475.510:237):
# allow good_app devpts:chr_file getattr;
#type=1400 msg=audit(1406595294.530:238): avc:  denied  { getattr } for  pid=15679 comm="Binder_4" path="/dev/pts/2" dev="devpts" ino=5 scontext=u:r:good_app:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file SEPF_SM-N910F_4.4.4_A019
#type=1300 msg=audit(1406595294.530:238): arch=40000028 syscall=197 per=a00000 success=yes exit=0 a0=44 a1=796f8898 a2=400ad394 a3=79369cf0 items=0 ppid=358 pid=15679 auid=4294967295 uid=10215 gid=10215 euid=10215 suid=10215 fsuid=10215 egid=10215 sgid=10215 fsgid=10215 ses=4294967295 tty=(none) comm="Binder_4" exe="/system/bin/app_process" subj=u:r:good_app:s0 key=(null)


#line 1 "vendor/samsung/common/sepolicy/knox_common/irm_app.te"
############ knox_common #############

########## type and macro.
type irm_media_data_file, file_type, data_file_type, newAttr24, newAttr56, newAttr57, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;

typeattribute irm_media_data_file domain_no_read_file;
typeattribute irm_media_data_file domain_no_write_file;

#app_domain(irm_app)
#net_domain(irm_app)
#permissive irm_app;

########## self and domain_type
allow irm_app self:{ tcp_socket udp_socket netlink_route_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

########## fs_type
########## dev_type
########## file_type
allow irm_app irm_media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow irm_app irm_media_data_file:{ file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#allow irm_app irm_media_data_file:file x_file_perms;

########## etc_type
########## known issue.
dontaudit domain irm_media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
dontaudit domain irm_media_data_file:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


########## irm_platform_app ##########
type irm_platform_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;

#line 32
typeattribute irm_platform_app appdomain;
#line 32
# Label ashmem objects with our own unique type.
#line 32

#line 32
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 32
type irm_platform_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 32
type_transition irm_platform_app tmpfs:file irm_platform_app_tmpfs;
#line 32
allow irm_platform_app irm_platform_app_tmpfs:file { read write };
#line 32

#line 32
# Map with PROT_EXEC.
#line 32
allow irm_platform_app irm_platform_app_tmpfs:file execute;
#line 32

# Access the network.

#line 34
typeattribute irm_platform_app netdomain;
#line 34

# Access bluetooth.

#line 36
typeattribute irm_platform_app bluetoothdomain;
#line 36



#line 38
typeattribute irm_platform_app platformappdomain;
#line 38
typeattribute irm_platform_app mlstrustedsubject;
#line 38

typeattribute irm_platform_app trusteddomain;
typeattribute irm_platform_app trusted_app_domain;
typeattribute irm_platform_app commonplatformappdomain;

# Read from /data/local/tmp or /data/data/com.android.shell.
allow irm_platform_app shell_data_file:dir search;
allow irm_platform_app shell_data_file:file { open getattr read };

# Access to /data/media.
allow irm_platform_app media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow irm_platform_app media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow irm_platform_app container_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow irm_platform_app bbccontainer_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 51
allow irm_platform_app container_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow irm_platform_app bbccontainer_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 52

# Write to /cache.
allow irm_platform_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow irm_platform_app cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#process
allow { irm_platform_app platform_app s_platform_app } { irm_platform_app platform_app s_platform_app }:process *;

allow platform_app irm_platform_app_tmpfs:file write;
allow s_platform_app irm_platform_app_tmpfs:file write;
#line 61
allow irm_platform_app platform_app_tmpfs:file write;
allow irm_platform_app irm_platform_app_tmpfs:file write;

allow irm_platform_app platform_app_service:service_manager add;
allow irm_platform_app app_data_file:file execmod;
allow irm_platform_app gad_untrusted_app_data_file:file execmod;
#line 66

allow irm_platform_app irm_media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow irm_platform_app irm_media_data_file:{ file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ avc_log #############
#line 1 "vendor/samsung/common/sepolicy/knox_common/kapd.te"
#
# Rules for kap related domain and files
#
############ knox_common #############
########## type and macro.
type kapd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type kapd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 9
# Old domain may exec the file and transition to the new domain.
#line 9
allow init rootfs:file { getattr open read execute };
#line 9
allow init kapd:process transition;
#line 9
# New domain is entered by executing the file.
#line 9
allow kapd rootfs:file { entrypoint open read execute getattr };
#line 9
# New domain can send SIGCHLD to its caller.
#line 9
allow kapd init:process sigchld;
#line 9
# Enable AT_SECURE, i.e. libc secure mode.
#line 9
dontaudit init kapd:process noatsecure;
#line 9
# XXX dontaudit candidate but requires further study.
#line 9
allow init kapd:process { siginh rlimitinh };
#line 9


########## self and domain_type
allow kapd kernel:system syslog_read;
allow kapd self:capability dac_override;

########## fs_type
########## dev_type
allow kapd block_device:dir { open getattr read search ioctl };
allow kapd emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow kapd kmsg_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow kapd knox_kap_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow kapd mmcblk0_device:blk_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ avc_log #############
# avc:  denied  { syslog_read } for  pid=12166 comm="knox_changer" scontext=u:r:kapd:s0 tcontext=u:r:kernel:s0 tclass=system permissive=1
# avc:  denied  { read write } for  pid=14147 comm="knox_changer" name="kmsg" dev="tmpfs" ino=11377 scontext=u:r:kapd:s0 tcontext=u:object_r:kmsg_device:s0 tclass=chr_file per missive=1
# avc:  denied  { read write } for  pid=12166 comm="knox_changer" name="mmcblk0" dev="tmpfs" ino=11596 scontext=u:r:kapd:s0 tcontext=u:object_r:emmcblk_device:s0 tclass=blk_file permissive=1
# avc:  denied  { open } for  pid=12166 comm="knox_changer" path="/dev/block/mmcblk0" dev="tmpfs" ino=11596 scontext=u:r:kapd:s0 tcontext=u:object_r:emmcblk_device:s0 tclass=blk_file permissive=1
# item=0 name="/dev/block/mmcblk0" inode=11596 dev=00:0c mode=060600 ouid=0 ogid=0 rdev=b3:00 
# avc:  denied  { dac_override } for  pid=12166 comm="knox_changer" capability=1  scontext=u:r:kapd:s0 tcontext=u:r:kapd:s0 tclass=capability permissive=1
# avc:  denied  { read } for  pid=12166 comm="knox_changer" name="knox_kap" dev="tmpfs" ino=11381 scontext=u:r:kapd:s0 tcontext=u:object_r:knox_kap_device:s0 tclass=chr_file
# avc:  denied  { dac_override } for  pid=14147 comm="knox_changer" capability=1  scontext=u:r:kapd:s0 tcontext=u:r:kapd:s0 tclass=capability permissive=1
# TR LTE avc:  denied  { read write } for  pid=10499 comm="knox_changer" name="mmcblk0" dev="tmpfs" ino=12619 scontext=u:r:kapd:s0 tcontext=u:object_r:mmc_block_device:s0 tclass=blk_file permissive=0 SEPF_SM-N910F_5.0.1_0002
# item=0 name="/dev/block/mmcblk0" inode=12619 dev=00:0c mode=060600 ouid=0 ogid=0 rdev=b3:00 obj=u:object_r:mmc_block_device:s0 nametype=NORMAL


#line 1 "vendor/samsung/common/sepolicy/knox_common/knox_system_app.te"
#
# knox_system app
#

############ knox_common #############
########## type and macro.
type knox_system_app, commonplatformappdomain, domain, newAttr1, newAttr8, newAttr7, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr94;
# for B2C users
typeattribute knox_system_app trusteddomain;
typeattribute knox_system_app trusted_app_domain;
# temporary permissive to gather the log.
# permissive knox_system_app;


#line 14
typeattribute knox_system_app appdomain;
#line 14
# Label ashmem objects with our own unique type.
#line 14

#line 14
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 14
type knox_system_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 14
type_transition knox_system_app tmpfs:file knox_system_app_tmpfs;
#line 14
allow knox_system_app knox_system_app_tmpfs:file { read write };
#line 14

#line 14
# Map with PROT_EXEC.
#line 14
allow knox_system_app knox_system_app_tmpfs:file execute;
#line 14


#line 15
typeattribute knox_system_app netdomain;
#line 15


#line 16
typeattribute knox_system_app platformappdomain;
#line 16
typeattribute knox_system_app mlstrustedsubject;
#line 16


########## self and domain_type
allow knox_system_app at_distributor:unix_stream_socket connectto;
allow knox_system_app netd:unix_stream_socket connectto;

########## fs_type
allow knox_system_app debugfs:dir { open getattr read search ioctl };
allow knox_system_app debugfs:file { getattr open read ioctl lock };

########## dev_type
#neverallow Google CTS-android-5.0.2_r1 : allow knox_system_app efsblk_device:blk_file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow knox_system_app emmcblk_device:blk_file rw_file_perms;

########## file_type
allow knox_system_app anr_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app backup_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app backup_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app container_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app bbccontainer_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 38
allow knox_system_app container_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app bbccontainer_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 39
allow knox_system_app container_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app container_app_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } execute };
allow knox_system_app container_app_data_file:lnk_file { getattr open read ioctl lock };
allow knox_system_app container_app_sdcard_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app container_app_sdcard_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app container_system_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app container_system_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app dalvikcache_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app dalvikcache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app dnsproxyd_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#neverallow Google CTS-android-5.0.2_r1 : allow knox_system_app efs_file:file { w_file_perms setattr };

#neverallow Google CTS-android-5.0.2_r1 : allow knox_system_app shell_data_file:dir create_dir_perms;
allow knox_system_app shell_data_file:dir { { open getattr read search ioctl } write };
#neverallow Google CTS-android-5.0.2_r1 : allow knox_system_app shell_data_file:file create_file_perms;
allow knox_system_app shell_data_file:file { { getattr open read ioctl lock } write };
allow knox_system_app users_system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app users_system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#neverallow Google CTS-android-5.0.2_r1 : allow knox_system_app wifi_data_file:dir rw_dir_perms;
allow knox_system_app wifi_data_file:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 : allow knox_system_app wifi_data_file:file create_file_perms;
allow knox_system_app wifi_data_file:file { getattr open read ioctl lock };

########## etc_type
allow knox_system_app port:tcp_socket name_connect;
#neverallow Google CTS-android-5.0.2_r1 : allow knox_system_app system_prop:property_service set;

########## known issue.
# Read and write /data/data subdirectory.
allow knox_system_app system_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_system_app system_app_data_file:{ file fifo_file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_system_app system_app_data_file:file { getattr execute execute_no_trans };


############ avc_log #############
#  avc:  denied  { write } for  pid=11710 comm="pool-5-thread-1" name="accounts.db" dev="mmcblk0p26" ino=916038 scontext=u:r:knox_system_app:s0 tcontext=u:object_r:users_system_data_file:s0 tclass=file
# item=0 name="/data/system/users/100/accounts.db" inode=916038 dev=b3:1a mode=0100660 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:users_system_data_file:s0

#line 1 "vendor/samsung/common/sepolicy/knox_common/knox_untrusted_app.te"
#
# knox_untrusted_app
#

############ knox_common #############
########## type and macro.
# This type CAN binder between container world and outside
typeattribute knox_untrusted_app mlstrustedsubject;

# Allow  binder into the container
# and vice versa

#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow knox_untrusted_app servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager knox_untrusted_app:dir search;
#line 13
allow servicemanager knox_untrusted_app:file { read open };
#line 13
allow servicemanager knox_untrusted_app:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13

# From outside to inside

#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow knox_untrusted_app container_app:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow container_app knox_untrusted_app:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow knox_untrusted_app container_app:fd use;
#line 15


#untrustedapp_domain(knox_untrusted_app, app_data_file)

#line 18
allow knox_untrusted_app dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 18
allow knox_untrusted_app dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18
allow knox_untrusted_app dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18
allow knox_untrusted_app bugreport_exec:file { execute execute_no_trans };
#line 18
allow knox_untrusted_app dumpstate_exec:file { execute execute_no_trans };
#line 18
allow knox_untrusted_app dumpsys_exec:file { execute execute_no_trans };
#line 18


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow knox_untrusted_app system_file:file execute_no_trans;

########## etc_type
########## known issue.
# The following rule is already covered by app.te: "allow appdomain init:binder { call transfer };"
#allow knox_untrusted_app init:binder { transfer call };
allow knox_untrusted_app init_tmpfs:file read;

# VMware
#neverallow Google CTS-android-5.0.2_r1 : allow knox_untrusted_app vmware_app:binder *;
allow knox_untrusted_app vmware_app:binder *;

# AWS
allow knox_untrusted_app app_data_file:file execmod;
allow knox_untrusted_app gad_untrusted_app_data_file:file execmod;
#line 38

#CAC support
#neverallow Google CTS-android-5.0.2_r1 : allow knox_untrusted_app system_data_file:dir write;
allow knox_untrusted_app smartcard_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_untrusted_app smartcard_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_untrusted_app smartcard_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# socket connection with untrusted_app
allow untrusteddomain knox_untrusted_app:unix_stream_socket connectto;
allow knox_untrusted_app newAttr95:unix_stream_socket connectto;

# release_app needs to access knox_clipboard_file  P150207-04404 
allow knox_untrusted_app knox_clipboard_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow knox_untrusted_app knox_clipboard_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# VZW requirement of LLK feature, com.verizon.llkagent can set store demo mode to control the battery.
allow knox_untrusted_app sysfs_battery_supply:file { { getattr open read ioctl lock } { open append write } };

############ avc_log #############
#avc:  denied  { search } for  pid=16912 comm=4173796E635461736B202338 name="clipboard101" dev="sda18" ino=65542 scontext=u:r:untrusted_app:s0:c3 tcontext=u:object_r:knox_clipboard_file:s0:c3 tclass=dir permissive=0
# P150219-00560 com.verizon.llkagent has shared key, avc:  denied  { write } for  pid=7711 comm="erizon.llkagent" name="store_mode" dev="sysfs" ino=27435 scontext=u:r:knox_untrusted_app:s0 tcontext=u:object_r:sysfs_battery_supply:s0 tclass=file permissive=0


#line 1 "vendor/samsung/common/sepolicy/knox_common/policyloader_app.te"
#
# policyloader_app
#

############ knox_common #############
########## type and macro.
type policyloader_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type policyloader_app_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;


#line 10
typeattribute policyloader_app appdomain;
#line 10
# Label ashmem objects with our own unique type.
#line 10

#line 10
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 10
type policyloader_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 10
type_transition policyloader_app tmpfs:file policyloader_app_tmpfs;
#line 10
allow policyloader_app policyloader_app_tmpfs:file { read write };
#line 10

#line 10
# Map with PROT_EXEC.
#line 10
allow policyloader_app policyloader_app_tmpfs:file execute;
#line 10

# Access the network.

#line 12
typeattribute policyloader_app netdomain;
#line 12

# Access bluetooth.

#line 14
typeattribute policyloader_app bluetoothdomain;
#line 14


#line 15
typeattribute policyloader_app platformappdomain;
#line 15
typeattribute policyloader_app mlstrustedsubject;
#line 15

# SEC policy client can manage se policy
#neverallow Google CTS-android-5.0.2_r1 : mmac_manage_policy(policyloader_app)

#line 18
allow policyloader_app security_file:dir { open getattr read search ioctl };
allow policyloader_app security_spota_file:dir { open getattr read search ioctl };
#line 18
allow policyloader_app security_file:file { getattr open read ioctl lock };
allow policyloader_app security_spota_file:file { getattr open read ioctl lock };
#line 18


########## self and domain_type
allow policyloader_app secure_storage:unix_stream_socket connectto;
allow policyloader_app trusteddomain:fd use;

########## fs_type
########## dev_type
allow policyloader_app secure_storage_device:sock_file write;

########## file_type
allow policyloader_app app_data_file:file { getattr open read ioctl lock };
allow policyloader_app gad_untrusted_app_data_file:file { getattr open read ioctl lock };
#line 30
allow policyloader_app app_data_file:dir { open getattr read search ioctl };
allow policyloader_app gad_untrusted_app_data_file:dir { open getattr read search ioctl };
#line 31
allow policyloader_app dalvikcache_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow policyloader_app dalvikcache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow policyloader_app shell_data_file:file { getattr open read ioctl lock };
allow policyloader_app shell_data_file:dir { open getattr read search ioctl };

########## etc_type
# [ZERO Refined Policy] Security policy updates > Check for updates > denial from curent policy loader 
dontaudit policyloader_app property_socket:sock_file write;

########## known issue.
# Read and write data files and load library for new label.
allow policyloader_app policyloader_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow policyloader_app policyloader_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow policyloader_app policyloader_app_data_file:file { getattr execute execute_no_trans };

# Read and write data files and load library for old label.
#neverallow Google CTS-android-5.0.2_r1 : allow policyloader_app system_data_file:dir create_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow policyloader_app system_data_file:notdevfile_class_set create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow policyloader_app system_data_file:file x_file_perms;

# to support security_spota_file
allow policyloader_app security_spota_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow policyloader_app security_spota_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow policyloader_app security_spota_file:lnk_file { create rename unlink };

############ avc_log #############
# avc:  denied  { write } for  pid=28989 comm="Thread-303" name="property_service" dev="tmpfs" ino=3433 scontext=u:r:policyloader_app:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file permissive=0


#line 1 "vendor/samsung/common/sepolicy/knox_common/sdp_cryptod.te"
#
# sdp_cryptod
#

############ knox_common #############
########## type and macro.
type sdp_cryptod, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
#permissive sdp_cryptod;
type sdp_cryptod_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 11

#line 11
# Allow the necessary permissions.
#line 11

#line 11
# Old domain may exec the file and transition to the new domain.
#line 11
allow init sdp_cryptod_exec:file { getattr open read execute };
#line 11
allow init sdp_cryptod:process transition;
#line 11
# New domain is entered by executing the file.
#line 11
allow sdp_cryptod sdp_cryptod_exec:file { entrypoint open read execute getattr };
#line 11
# New domain can send SIGCHLD to its caller.
#line 11
allow sdp_cryptod init:process sigchld;
#line 11
# Enable AT_SECURE, i.e. libc secure mode.
#line 11
dontaudit init sdp_cryptod:process noatsecure;
#line 11
# XXX dontaudit candidate but requires further study.
#line 11
allow init sdp_cryptod:process { siginh rlimitinh };
#line 11

#line 11
# Make the transition occur by default.
#line 11
type_transition init sdp_cryptod_exec:process sdp_cryptod;
#line 11

#line 11

#line 11
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 11
type sdp_cryptod_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 11
type_transition sdp_cryptod tmpfs:file sdp_cryptod_tmpfs;
#line 11
allow sdp_cryptod sdp_cryptod_tmpfs:file { read write };
#line 11

#line 11


########## self and domain_type
allow sdp_cryptod self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow sdp_cryptod kernel:system module_request;

# P150617-07942 : requested by heeseung.yoo
allow sdp_cryptod mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow sdp_cryptod mobicoredaemon:unix_stream_socket connectto;
allow sdp_cryptod users_system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow sdp_cryptod users_system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## fs_type
########## dev_type
allow sdp_cryptod qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { module_request } for  pid=404 comm="sdp_cryptod" kmod="net-pf-16-proto-29" scontext=u:r:sdp_cryptod:s0 tcontext=u:r:kernel:s0 tclass=system permissive=0
# arch=40000028 syscall=281 per=800000 success=no exit=-93 a0=10 a1=3 a2=1d a3=b6c9b070 items=0 ppid=1 pid=404 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 ses=4294967295 tty=(none) comm="sdp_cryptod" exe="/system/bin/sdp_cryptod" subj=u:r:sdp_cryptod:s0 key=(null)
# avc:  denied  { write } for  pid=3315 comm="sdp_cryptod" name="101" dev="sda17" ino=327038 scontext=u:r:sdp_cryptod:s0 tcontext=u:object_r:users_system_data_file:s0 tclass=dir permissive=1
# avc:  denied  { connectto } for  pid=3315 comm="sdp_cryptod" path=006D636461656D6F6E scontext=u:r:sdp_cryptod:s0 tcontext=u:r:mobicoredaemon:s0 tclass=unix_stream_socket permissive=1
# avc:  denied  { read write } for  pid=3308 comm="sdp_cryptod" name="mobicore-user" dev="tmpfs" ino=17709 scontext=u:r:sdp_cryptod:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file permissive=1
# avc:  denied  { getattr } for  pid=3308 comm="sdp_cryptod" path="/data/system/users/0/KEK_MDM" dev="sda17" ino=326498 scontext=u:r:sdp_cryptod:s0 tcontext=u:object_r:users_system_data_file:s0 tclass=file permissive=1
# avc:  denied  { read write } for  pid=531 comm="sdp_cryptod" name="qseecom" dev="tmpfs" ino=9589 scontext=u:r:sdp_cryptod:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file
# item=0 name="/dev/qseecom" inode=9589 dev=00:0b mode=020660 ouid=1000 ogid=1026 rdev=f0:00 obj=u:object_r:qseecom_device:s0item=0 name="/dev/qseecom" inode=9589 dev=00:0b mode=020660 ouid=1000 ogid=1026 rdev=f0:00 obj=u:object_r:qseecom_device:s0
#line 1 "vendor/samsung/common/sepolicy/knox_common/store_app.te"
#
# Store app - for access to Knox store
#

############ knox_common #############
########## type and macro.
type store_app, commonplatformappdomain, domain, newAttr1, newAttr5, newAttr8, newAttr4, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr13, newAttr12, newAttr14, newAttr10, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;
# for B2C users
typeattribute store_app trusteddomain;
typeattribute store_app trusted_app_domain;


#line 12
typeattribute store_app appdomain;
#line 12
# Label ashmem objects with our own unique type.
#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type store_app_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition store_app tmpfs:file store_app_tmpfs;
#line 12
allow store_app store_app_tmpfs:file { read write };
#line 12

#line 12
# Map with PROT_EXEC.
#line 12
allow store_app store_app_tmpfs:file execute;
#line 12


#line 13
typeattribute store_app platformappdomain;
#line 13
typeattribute store_app mlstrustedsubject;
#line 13


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow store_app store_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow store_app store_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/qcom_common/adsprpcd.te"
# adsprpcd

# rules
allow adsprpcd adsprpc_device:chr_file { getattr open read ioctl lock };

allow adsprpcd adsprpcd_service:service_manager add;


#line 1 "vendor/samsung/common/sepolicy/qcom_common/ATFWD-daemon.te"
# ATFWD-daemon

typealias atfwd alias ATFWD-daemon;
typealias atfwd_exec alias  ATFWD-daemon_exec;
#type ATFWD-daemon, domain;
#type ATFWD-daemon_exec, exec_type, file_type;

#init_daemon_domain(ATFWD-daemon)

#line 9
# Call the servicemanager and transfer references to it.
#line 9
allow ATFWD-daemon servicemanager:binder { call transfer };
#line 9
# servicemanager performs getpidcon on clients.
#line 9
allow servicemanager ATFWD-daemon:dir search;
#line 9
allow servicemanager ATFWD-daemon:file { read open };
#line 9
allow servicemanager ATFWD-daemon:process getattr;
#line 9
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 9
# all domains in domain.te.
#line 9


allow ATFWD-daemon init:unix_stream_socket connectto;
allow ATFWD-daemon qmuxd:unix_stream_socket connectto;

allow ATFWD-daemon ctl_default_prop:property_service set;
allow ATFWD-daemon property_socket:sock_file { open append write };
allow ATFWD-daemon qmux_radio_socket:dir { open search write add_name remove_name };
allow ATFWD-daemon qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute ATFWD-daemon trusteddomain;
typeattribute ATFWD-daemon device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/audiod.te"
# audiod

#type audiod, domain;
#type audiod_exec, exec_type, file_type;

#init_daemon_domain(audiod)

# rules

#line 9
allow audiod property_socket:sock_file write;
#line 9
allow audiod init:unix_stream_socket connectto;
#line 9


# for B2C users
typeattribute audiod trusteddomain;
typeattribute audiod device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/charger_monitor.te"
# charger_monitor

# rules
allow charger_monitor sysfs:file { open append write };
allow charger_monitor sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow charger_monitor self:capability net_admin;


#line 1 "vendor/samsung/common/sepolicy/qcom_common/cnd.te"
#
# cnd
#
#type cnd_exec, exec_type, file_type;
#type cnd, domain;

#init_daemon_domain(cnd)


#line 9
allow cnd property_socket:sock_file write;
#line 9
allow cnd init:unix_stream_socket connectto;
#line 9


allow cnd self:capability { setuid setgid fsetid dac_override net_admin net_raw };
allow cnd sysfs:file { open append write };
allow cnd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cnd system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow cnd system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cnd self:netlink_tcpdiag_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow cnd self:netlink_route_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow cnd qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cnd qmux_radio_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow cnd qmuxd:unix_stream_socket connectto;
allow cnd init:unix_stream_socket connectto;
allow cnd diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow cnd device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute cnd trusteddomain;
typeattribute cnd device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/diag_uart_log.te"
# diag_uart_log

typealias diag alias diag_uart_log;
typealias diag_exec alias diag_uart_log_exec;


#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init diag_uart_log_exec:file { getattr open read execute };
#line 6
allow init diag_uart_log:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow diag_uart_log diag_uart_log_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow diag_uart_log init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init diag_uart_log:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init diag_uart_log:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init diag_uart_log_exec:process diag_uart_log;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type diag_uart_log_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition diag_uart_log tmpfs:file diag_uart_log_tmpfs;
#line 6
allow diag_uart_log diag_uart_log_tmpfs:file { read write };
#line 6

#line 6


allow diag_uart_log at_distributor:unix_stream_socket connectto;
allow diag_uart_log cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow diag_uart_log diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow diag_uart_log init:unix_stream_socket connectto;
allow diag_uart_log radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow diag_uart_log self:capability { setuid dac_override };
allow diag_uart_log sysfs:file { open append write };
allow diag_uart_log sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };


#line 1 "vendor/samsung/common/sepolicy/qcom_common/dpmd.te"
#
# dpmd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute dpmd trusteddomain;
typeattribute dpmd device_domain;


#line 11
allow dpmd property_socket:sock_file write;
#line 11
allow dpmd init:unix_stream_socket connectto;
#line 11
;
########## self and domain_type
allow dpmd self:capability { net_admin net_raw dac_read_search dac_override setgid setuid fsetid };

########## fs_type
########## dev_type
########## file_type
allow dpmd qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.
############ avc_log #############


########## self and domain_type
#audit(1388477353.789:121): avc:  denied  { connectto } for  pid=329 comm="dpmd" path="/dev/socket/property_service" scontext=u:r:dpmd:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket
#audit(1388477353.789:121): arch=40000028 syscall=283 per=800000 success=yes exit=0 a0=11 a1=be84b4f4 a2=1f a3=b6f97ab0 items=1 ppid=1 pid=329 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="dpmd" exe="/system/bin/dpmd" subj=u:r:dpmd:s0 key=(null)
#audit(1388477353.789:121): saddr=01002F6465762F736F636B65742F70726F70657274795F7365727669636500
#audit(1388477353.789:121): item=0 name=(null) inode=11116 dev=00:0b mode=0140666 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:property_socket:s0


#line 1 "vendor/samsung/common/sepolicy/qcom_common/efsks.te"
# efsks
type efsks, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type efsks_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init efsks_exec:file { getattr open read execute };
#line 4
allow init efsks:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow efsks efsks_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow efsks init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init efsks:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init efsks:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init efsks_exec:process efsks;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type efsks_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition efsks tmpfs:file efsks_tmpfs;
#line 4
allow efsks efsks_tmpfs:file { read write };
#line 4

#line 4



#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow efsks ks_exec:file { getattr open read execute };
#line 6
allow efsks ks:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow ks ks_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow ks efsks:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit efsks ks:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow efsks ks:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition efsks ks_exec:process ks;
#line 6


# Allow rules
allow efsks block_device:dir { { open getattr read search ioctl } add_name write };
allow efsks dw_mmc_device:dir { { open getattr read search ioctl } add_name write };
allow efsks dw_mmc_device:lnk_file { getattr open read ioctl lock };
allow efsks ks_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow efsks m9kefsblk_device:blk_file { open append write };
allow efsks emmcblk_device:blk_file { open append write };
allow efsks modem_device:dir search;
allow efsks modem_device:lnk_file { getattr open read ioctl lock };
allow efsks qcks:fd use;
allow efsks radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow efsks self:capability dac_override;
allow efsks shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow efsks sysfs:file { open append write };
allow efsks system_file:file execute_no_trans;
allow efsks tombstone_data_file:dir { open getattr read search ioctl };
allow efsks tombstones_data_file:dir { open getattr read search ioctl };
allow efsks usb_device:chr_file { { { getattr open read ioctl lock } { open append write } } { getattr execute execute_no_trans } };

# for B2C users
typeattribute efsks trusteddomain;
typeattribute efsks device_domain;

############ slsi_common #############
allow efsks mdm_device:chr_file { getattr open read ioctl lock };

#line 1 "vendor/samsung/common/sepolicy/qcom_common/energy-awareness.te"
#
# energy-awareness
# /etc/init.qcom.post_boot.sh execute /system/bin/energy-awareness
#

# conflict with Qcom BSP, type energy-awareness, domain;
# conflict with Qcom BSP, type energy-awareness_exec, exec_type, file_type;

############ qcom_common #############
########## type and macro.

#line 11
# Allow the necessary permissions.
#line 11

#line 11
# Old domain may exec the file and transition to the new domain.
#line 11
allow init_shell energy-awareness_exec:file { getattr open read execute };
#line 11
allow init_shell energy-awareness:process transition;
#line 11
# New domain is entered by executing the file.
#line 11
allow energy-awareness energy-awareness_exec:file { entrypoint open read execute getattr };
#line 11
# New domain can send SIGCHLD to its caller.
#line 11
allow energy-awareness init_shell:process sigchld;
#line 11
# Enable AT_SECURE, i.e. libc secure mode.
#line 11
dontaudit init_shell energy-awareness:process noatsecure;
#line 11
# XXX dontaudit candidate but requires further study.
#line 11
allow init_shell energy-awareness:process { siginh rlimitinh };
#line 11

#line 11
# Make the transition occur by default.
#line 11
type_transition init_shell energy-awareness_exec:process energy-awareness;
#line 11


########## self and domain_type
allow energy-awareness init_shell:fd use;
allow energy-awareness self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow energy-awareness self:capability net_admin;
#neverallow Google CTS-android-5.0.2_r1 : allow energy-awareness self:capability sys_rawio;

########## fs_type
########## dev_type
allow energy-awareness pta_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow energy-awareness uio_device:chr_file { { getattr open read ioctl lock } { open append write } };
#neverallow Google CTS-android-5.0.2_r1 : allow energy-awareness kmem_device:chr_file r_file_perms;


########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { read write } for  pid=7590 comm="energy-awarenes" name="pta" dev="tmpfs" ino=6716 scontext=u:r:init_shell:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# avc:  denied  { open } for  pid=7590 comm="energy-awarenes" path="/dev/pta" dev="tmpfs" ino=6716 scontext=u:r:init_shell:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
# avc:  denied  { read } for  pid=7590 comm="energy-awarenes" name="mem" dev="tmpfs" ino=6679 scontext=u:r:init_shell:s0 tcontext=u:object_r:kmem_device:s0 tclass=chr_file permissive=1
# avc:  denied  { open } for  pid=7590 comm="energy-awarenes" path="/dev/mem" dev="tmpfs" ino=6679 scontext=u:r:init_shell:s0 tcontext=u:object_r:kmem_device:s0 tclass=chr_file permissive=1
# avc:  denied  { sys_rawio } for  pid=7590 comm="energy-awarenes" capability=17  scontext=u:r:init_shell:s0 tcontext=u:r:init_shell:s0 tclass=capability permissive=1
# avc:  denied  { use } for  pid=3069 comm="energy-awarenes" path="/dev/null" dev="tmpfs" ino=11962 scontext=u:r:energy-awareness:s0 tcontext=u:r:init_shell:s0 tclass=fd permissive=1
# avc:  denied  { read write } for  pid=3196 comm="energy-awarenes" name="uio4" dev="tmpfs" ino=11865 scontext=u:r:energy-awareness:s0 tcontext=u:object_r:uio_device:s0 tclass=chr_file permissive=0 SEPF_SM-N916S_5.0.2_0002
#line 1 "vendor/samsung/common/sepolicy/qcom_common/geomagneticd.te"
# geomagneticd

type geomagneticd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type geomagneticd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init geomagneticd_exec:file { getattr open read execute };
#line 6
allow init geomagneticd:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow geomagneticd geomagneticd_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow geomagneticd init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init geomagneticd:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init geomagneticd:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init geomagneticd_exec:process geomagneticd;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type geomagneticd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr90, newAttr89;
#line 6
type_transition geomagneticd tmpfs:file geomagneticd_tmpfs;
#line 6
allow geomagneticd geomagneticd_tmpfs:file { read write };
#line 6

#line 6


#line 7
allow geomagneticd property_socket:sock_file write;
#line 7
allow geomagneticd init:unix_stream_socket connectto;
#line 7


# rules
allow geomagneticd input_device:chr_file { getattr open read ioctl lock };
allow geomagneticd input_device:dir { open getattr read search ioctl };
allow geomagneticd sysfs:file { open append write };
allow geomagneticd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow geomagneticd system_data_file:dir { open search write add_name remove_name };
allow geomagneticd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute geomagneticd trusteddomain;
typeattribute geomagneticd device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/gpsone_daemon.te"
# gpsone_daemon


allow gpsone_daemon qmuxd:unix_stream_socket connectto;
allow gpsone_daemon qmux_gps_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow gpsone_daemon self:socket *;

allow gpsone_daemon gps_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow gpsone_daemon gps_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gpsone_daemon qmux_gps_socket:dir { open search write add_name remove_name };
allow gpsone_daemon system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow gpsone_daemon system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute gpsone_daemon trusteddomain;
typeattribute gpsone_daemon device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/gpu_snapshotd.te"
# gpu_snapshotd
type gpu_snapshotd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type gpu_snapshotd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init gpu_snapshotd_exec:file { getattr open read execute };
#line 4
allow init gpu_snapshotd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow gpu_snapshotd gpu_snapshotd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow gpu_snapshotd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init gpu_snapshotd:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init gpu_snapshotd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init gpu_snapshotd_exec:process gpu_snapshotd;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type gpu_snapshotd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition gpu_snapshotd tmpfs:file gpu_snapshotd_tmpfs;
#line 4
allow gpu_snapshotd gpu_snapshotd_tmpfs:file { read write };
#line 4

#line 4


# for B2C users
typeattribute gpu_snapshotd trusteddomain;
typeattribute gpu_snapshotd system_domain;

# temporary permissive to gather the log.
# permissive gpu_snapshotd;

#line 1 "vendor/samsung/common/sepolicy/qcom_common/gsiff_daemon.te"
# gsiff_daemon



#line 4
# Call the servicemanager and transfer references to it.
#line 4
allow gsiff_daemon servicemanager:binder { call transfer };
#line 4
# servicemanager performs getpidcon on clients.
#line 4
allow servicemanager gsiff_daemon:dir search;
#line 4
allow servicemanager gsiff_daemon:file { read open };
#line 4
allow servicemanager gsiff_daemon:process getattr;
#line 4
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 4
# all domains in domain.te.
#line 4


#line 5
# Call the server domain and optionally transfer references to it.
#line 5
allow gsiff_daemon system:binder { call transfer };
#line 5
# Allow the serverdomain to transfer references to the client on the reply.
#line 5
allow system gsiff_daemon:binder transfer;
#line 5
# Receive and use open files from the server.
#line 5
allow gsiff_daemon system:fd use;
#line 5


#line 6
# Call the server domain and optionally transfer references to it.
#line 6
allow gsiff_daemon servicemanager:binder { call transfer };
#line 6
# Allow the serverdomain to transfer references to the client on the reply.
#line 6
allow servicemanager gsiff_daemon:binder transfer;
#line 6
# Receive and use open files from the server.
#line 6
allow gsiff_daemon servicemanager:fd use;
#line 6


allow gsiff_daemon kernel:system module_request;
allow gsiff_daemon qmuxd:unix_stream_socket connectto;
allow gsiff_daemon qmux_gps_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gsiff_daemon qmux_gps_socket:dir { open search write add_name remove_name };
allow gsiff_daemon self:socket *;
allow gsiff_daemon system:unix_stream_socket { read write setopt };
allow gsiff_daemon system_data_file:dir { open search write add_name remove_name };
allow gsiff_daemon system_data_file:file { getattr open read ioctl lock };
allow gsiff_daemon system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gsiff_daemon system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };



#line 1 "vendor/samsung/common/sepolicy/qcom_common/imsqmidaemon.te"
# imsqmidaemon

allow imsqmidaemon diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow imsqmidaemon init:unix_stream_socket connectto;
allow imsqmidaemon property_socket:sock_file { open append write };
allow imsqmidaemon system_data_file:dir { open search write add_name remove_name };
allow imsqmidaemon system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow imsqmidaemon system_prop:property_service set;

#line 1 "vendor/samsung/common/sepolicy/qcom_common/ks.te"
# ks

#line 2
allow ks property_socket:sock_file write;
#line 2
allow ks init:unix_stream_socket connectto;
#line 2


allow ks dw_mmc_device:dir { { open getattr read search ioctl } add_name write };
allow ks dw_mmc_device:lnk_file { getattr open read ioctl lock };
allow ks efsks:fd use;
allow ks firmware:file { getattr open read ioctl lock };
allow ks init:unix_stream_socket connectto;
allow ks m9kefsblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow ks emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow ks modem_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow ks modem_device:lnk_file { getattr open read ioctl lock };
allow ks modemstblk_device:blk_file { open append write };
allow ks property_socket:sock_file { open append write };
allow ks qcks:fd use;
allow ks radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ks rild_prop:property_service set;
allow ks sdcard_type:file { getattr open read ioctl lock };
allow ks self:capability { dac_override chown sys_boot };
allow ks self:capability2 block_suspend;
allow ks system_file:file { getattr execute execute_no_trans };
allow ks system_data_file:file { { getattr open read ioctl lock } { open append write } };
allow ks sysfs:file { { getattr open read ioctl lock } { open append write } };
allow ks sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow ks shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ks tombstones_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ks tombstones_data_file:dir { { open getattr read search ioctl } add_name write };
allow ks tombstone_data_file:dir { open getattr read search ioctl };
allow ks usb_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Qualcomm's kickstart search block device dir
# below rules shoud be allowed to boot up modem successfully.
allow ks block_device:dir { { open getattr read search ioctl } add_name write };
allow ks block_device:lnk_file { getattr open read ioctl lock };
#neverallow Google CTS-android-5.0.2_r1 : allow ks block_device:blk_file w_file_perms;

# for B2C users
typeattribute ks trusteddomain;
typeattribute ks device_domain;

## J GED
allow ks sysfs_wake_lock:file { { getattr open read ioctl lock } append };

############ qcmdm #############
allow ks radio_device:chr_file { getattr open read ioctl lock };

# avc:  denied  { sys_boot } for  pid=3425 comm="ks" capability=22  scontext=u:r:mdm_helper:s0 tcontext=u:r:mdm_helper:s0 tclass=capability permissive=0
# syscall=142 success=no exit=-1 a0=fee1dead a1=28121969 a2=a1b2c3d4 a3=555d15bbf0 items=0 ppid=3066 ppcomm=mdm_helper pid=3425 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="ks" exe="/system/bin/ks" subj=u:r:mdm_helper:s0 key=(null)

#line 1 "vendor/samsung/common/sepolicy/qcom_common/location_app.te"
allow location_app system_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow location_app system_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# avc:  denied  { write } for  pid=1892 comm="rvices.location" name="com.qualcomm.msapm" dev="mmcblk0p25" ino=524545 scontext=u:r:location_app:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=dir
#line 1 "vendor/samsung/common/sepolicy/qcom_common/location-mq.te"
# location-mq

allow location-mq system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow location-mq system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow location-mq gps_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow location-mq gps_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute location-mq trusteddomain;
typeattribute location-mq device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/lowi-server.te"
# lowi-server

allow lowi-server gps_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow lowi-server location-mq:unix_stream_socket connectto;

# for B2C users
typeattribute lowi-server trusteddomain;
typeattribute lowi-server device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/macloader.te"
#
# macloader
#

type macloader, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type macloader_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 7

#line 7
# Allow the necessary permissions.
#line 7

#line 7
# Old domain may exec the file and transition to the new domain.
#line 7
allow init macloader_exec:file { getattr open read execute };
#line 7
allow init macloader:process transition;
#line 7
# New domain is entered by executing the file.
#line 7
allow macloader macloader_exec:file { entrypoint open read execute getattr };
#line 7
# New domain can send SIGCHLD to its caller.
#line 7
allow macloader init:process sigchld;
#line 7
# Enable AT_SECURE, i.e. libc secure mode.
#line 7
dontaudit init macloader:process noatsecure;
#line 7
# XXX dontaudit candidate but requires further study.
#line 7
allow init macloader:process { siginh rlimitinh };
#line 7

#line 7
# Make the transition occur by default.
#line 7
type_transition init macloader_exec:process macloader;
#line 7

#line 7

#line 7
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 7
type macloader_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 7
type_transition macloader tmpfs:file macloader_tmpfs;
#line 7
allow macloader macloader_tmpfs:file { read write };
#line 7

#line 7



# Allow rules
allow macloader self:capability { net_admin net_raw dac_read_search dac_override sys_module chown };


# for B2C users
typeattribute macloader trusteddomain;
typeattribute macloader device_domain;


## from J GED
allow macloader wifi_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow macloader wifi_efs_file:file { { getattr open read ioctl lock } { open append write } };
allow macloader system_data_file:file { getattr open read ioctl lock };

#booting denial
allow macloader sysfs:file { { getattr open read ioctl lock } { open append write } };
allow macloader sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow macloader kernel:system module_request;


## avc_msg
# avc:  denied  { dac_read_search } for  pid=17319 comm="macloader" capability=2  scontext=u:r:macloader:s0 tcontext=u:r:macloader:s0 tclass=capability No Property
# item=0 name="/efs/wifi/.mac.info" inode=37 dev=b3:0c mode=0100660 ouid=1000 ogid=1010 rdev=00:00 obj=u:object_r:wifi_efs_file:s0

# avc:  denied  { dac_override } for  pid=17319 comm="macloader" capability=1  scontext=u:r:macloader:s0 tcontext=u:r:macloader:s0 tclass=capability No Property
# item=0 name="/efs/wifi" inode=26 dev=b3:0c mode=040775 ouid=1001 ogid=1000 rdev=00:00 obj=u:object_r:wifi_efs_file:s0
# avc:  denied  { net_admin } for  pid=17319 comm="macloader" capability=12  scontext=u:r:macloader:s0 tcontext=u:r:macloader:s0 tclass=capability No Property
# avc:  denied  { net_admin } for  pid=336 comm="macloader" capability=12  scontext=u:r:macloader:s0 tcontext=u:r:macloader:s0 tclass=capability No Property

# audit(46768.524:8): avc:  denied  { read write } for  pid=213 comm="macloader" name="wifi" dev="mmcblk0p10" ino=12 scontext=u:r:macloader:s0 tcontext=u:object_r:efs_file:s0 tclass=dir
# audit(46768.574:9): avc:  denied  { read } for  pid=213 comm="macloader" name=".mac.info" dev="mmcblk0p10" ino=13 scontext=u:r:macloader:s0 tcontext=u:object_r:efs_file:s0 tclass=file
# audit(46768.574:9): avc:  denied  { open } for  pid=213 comm="macloader" name=".mac.info" dev="mmcblk0p10" ino=13 scontext=u:r:macloader:s0 tcontext=u:object_r:efs_file:s0 tclass=file
# audit(46768.574:9): item=0 name="/efs/wifi/.mac.info" inode=13 dev=b3:0a mode=0100664 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:efs_file:s0
# audit(46768.584:10): avc:  denied  { open } for  pid=213 comm="macloader" name=".cid.info" dev="mmcblk0p28" ino=15 scontext=u:r:macloader:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# audit(46768.584:10): item=0 name="/data/.cid.info" inode=15 dev=b3:1c mode=0100664 ouid=1000 ogid=0 rdev=00:00 obj=u:object_r:system_data_file:s0
#audit(1388534402.580:64): avc:  denied  { write } for  pid=314 comm="macloader" name="firmware_path" dev="sysfs" ino=6483 scontext=u:r:macloader:s0 tcontext=u:object_r:sysfs:s0 tclass=file
#audit(1388534402.580:64): arch=40000028 syscall=322 per=800000 success=yes exit=7 a0=ffffff9c a1=b6f55fce a2=20001 a3=0 items=1 ppid=1 pid=314 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="macloader" exe="/system/bin/macloader" subj=u:r:macloader:s0 key=(null)
#audit(1388534402.580:64):  cwd="/"
#audit(1388534402.580:64): item=0 name="/sys/module/dhd/parameters/firmware_path" inode=6483 dev=00:0c mode=0100660 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs:s0
#audit(1357140505.620:14): avc:  denied  { sys_module } for  pid=2544 comm="macloader" capability=16  scontext=u:r:macloader:s0 tcontext=u:r:macloader:s0 tclass=capability
# avc:  denied  { chown } for  pid=320 comm="macloader" capability=0  scontext=u:r:macloader:s0 tcontext=u:r:macloader:s0 tclass=capability permissive=0 SEPF_SM-P355_5.0.2_0003
# avc:  denied  { module_request } for  pid=307 comm="macloader" kmod="netdev-wlan0" scontext=u:r:macloader:s0 tcontext=u:r:kernel:s0 tclass=system permissive=0
#line 1 "vendor/samsung/common/sepolicy/qcom_common/mdm_helper_proxy.te"
# mdm_helper_proxy

allow mdm_helper_proxy self:capability { dac_read_search dac_override };


# temporary permissive to gather the log.
# permissive mdm_helper_proxy;

#line 1 "vendor/samsung/common/sepolicy/qcom_common/mdm_helper.te"
# mdm_helper

allow mdm_helper self:capability { dac_read_search dac_override chown fowner fsetid sys_resource net_raw };


# temporary permissive to gather the log.
# permissive mdm_helper;

# CP Crash with encrypted device(jm0302.sung)
allow mdm_helper tmpfs:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mdm_helper tmpfs:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mdm_helper mdm_helper_tmpfs:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mdm_helper mdm_helper_tmpfs:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

allow mdm_helper sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

############ avc_log #############
# avc:  denied  { sys_resource } for  pid=1244 comm="lsof" capability=24  scontext=u:r:mdm_helper:s0 tcontext=u:r:mdm_helper:s0 tclass=capability permissive=0
# avc:  denied  { net_raw } for  pid=4054 comm="ip" capability=13  scontext=u:r:mdm_helper:s0 tcontext=u:r:mdm_helper:s0 tclass=capability permissive=0

#line 1 "vendor/samsung/common/sepolicy/qcom_common/mfgloader.te"
#
# wlandutservice
#


########## type and macro.
type mfgloader, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mfgloader_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute mfgloader trusteddomain;
typeattribute mfgloader device_domain;


#line 12

#line 12
# Allow the necessary permissions.
#line 12

#line 12
# Old domain may exec the file and transition to the new domain.
#line 12
allow init mfgloader_exec:file { getattr open read execute };
#line 12
allow init mfgloader:process transition;
#line 12
# New domain is entered by executing the file.
#line 12
allow mfgloader mfgloader_exec:file { entrypoint open read execute getattr };
#line 12
# New domain can send SIGCHLD to its caller.
#line 12
allow mfgloader init:process sigchld;
#line 12
# Enable AT_SECURE, i.e. libc secure mode.
#line 12
dontaudit init mfgloader:process noatsecure;
#line 12
# XXX dontaudit candidate but requires further study.
#line 12
allow init mfgloader:process { siginh rlimitinh };
#line 12

#line 12
# Make the transition occur by default.
#line 12
type_transition init mfgloader_exec:process mfgloader;
#line 12

#line 12

#line 12
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 12
type mfgloader_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 12
type_transition mfgloader tmpfs:file mfgloader_tmpfs;
#line 12
allow mfgloader mfgloader_tmpfs:file { read write };
#line 12

#line 12


#line 13
allow mfgloader property_socket:sock_file write;
#line 13
allow mfgloader init:unix_stream_socket connectto;
#line 13


############ aosp and sec_common #############
allow mfgloader kernel:key search;

########## self and domain_type
allow mfgloader self:capability { net_admin net_raw dac_override sys_module };

########## fs_type
# For /sys//module/dhd/parameters
allow mfgloader sysfs:file write;

########## dev_type
########## file_type
allow mfgloader system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mfgloader system_data_file:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow mfgloader system_prop:property_service set;
allow mfgloader wifi_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mfgloader wifi_efs_file:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { write } for  pid=9777 comm="mfgloader" name="firmware_path" dev="sysfs" ino=6483 scontext=u:r:mfgloader:s0 tcontext=u:object_r:sysfs:s0 tclass=file
#avc:  denied  { write } for  pid=9777 comm="mfgloader" name="firmware_path" dev="sysfs" ino=6483 scontext=u:r:mfgloader:s0 tcontext=u:object_r:sysfs:s0 tclass=file
#audit(1415154619.554:222): avc:  denied  { open } for  pid=9777 comm="mfgloader" name=".cid.info" dev="mmcblk0p26" ino=23 scontext=u:r:mfgloader:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
#audit(1415154620.554:223): avc:  denied  { net_raw } for  pid=9777 comm="mfgloader" capability=13  scontext=u:r:mfgloader:s0 tcontext=u:r:mfgloader:s0 tclass=capability
#audit(1415154620.564:224): avc:  denied  { net_admin } for  pid=9777 comm="mfgloader" capability=12  scontext=u:r:mfgloader:s0 tcontext=u:r:mfgloader:s0 tclass=capability
#audit(1415154620.564:224): avc:  denied  { write } for  pid=9777 comm="mfgloader" name=".cid.info" dev="mmcblk0p26" ino=23 scontext=u:r:mfgloader:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
#item=0 name="/data/.cid.info" inode=23 dev=b3:1a mode=0100664 ouid=1000 ogid=0 rdev=00:00 obj=u:object_r:system_data_file:s0
#audit(1415154620.564:224): avc:  denied  { search } for  pid=9777 comm="mfgloader" name="wifi" dev="mmcblk0p12" ino=20 scontext=u:r:mfgloader:s0 tcontext=u:object_r:wifi_efs_file:s0 tclass=dir
#audit(1415154620.564:224): avc:  denied  { dac_override } for  pid=9777 comm="mfgloader" capability=1  scontext=u:r:mfgloader:s0 tcontext=u:r:mfgloader:s0 tclass=capability
#audit(1415154620.564:224): avc:  denied  { read } for  pid=9777 comm="mfgloader" name=".mac.info" dev="mmcblk0p12" ino=36 scontext=u:r:mfgloader:s0 tcontext=u:object_r:wifi_efs_file:s0 tclass=file
#audit(1415154620.564:224): avc:  denied  { open } for  pid=9777 comm="mfgloader" name=".mac.info" dev="mmcblk0p12" ino=36 scontext=u:r:mfgloader:s0 tcontext=u:object_r:wifi_efs_file:s0 tclass=file
# avc:  denied  { set } for property=wlan.driver.status scontext=u:r:mfgloader:s0 tcontext=u:object_r:system_prop:s0 tclass=property_service
# avc:  denied  { sys_module } for  pid=5922 comm="mfgloader" capability=16  scontext=u:r:mfgloader:s0 tcontext=u:r:mfgloader:s0 tclass=capability
#audit(1388534441.029:193): avc:  denied  { search } for  pid=3605 comm="mfgloader" scontext=u:r:mfgloader:s0 tcontext=u:r:kernel:s0 tclass=key permissive=0



#line 1 "vendor/samsung/common/sepolicy/qcom_common/mm-pp-daemon.te"
# mm-pp-daemon


#line 3
allow mm-pp-daemon property_socket:sock_file write;
#line 3
allow mm-pp-daemon init:unix_stream_socket connectto;
#line 3


allow mm-pp-daemon diag_device:chr_file { getattr open read ioctl lock };
allow mm-pp-daemon graphics_device:dir { open getattr read search ioctl };
allow mm-pp-daemon graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mm-pp-daemon servicemanager:binder call;
allow mm-pp-daemon sysfs:file write;
allow mm-pp-daemon sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow mm-pp-daemon system_prop:property_service set;

# for B2C users
typeattribute mm-pp-daemon trusteddomain;
typeattribute mm-pp-daemon device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/mm-qcamera-daemon.te"
# mm-qcamera-daemon


allow mm-qcamera-daemon mediaserver:fd use;
allow mm-qcamera-daemon surfaceflinger:fd use;

allow mm-qcamera-daemon adsprpc_device:chr_file { getattr open read ioctl lock };
allow mm-qcamera-daemon camera_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mm-qcamera-daemon camera_device:dir { open getattr read search ioctl };
allow mm-qcamera-daemon genlock_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mm-qcamera-daemon graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mm-qcamera-daemon graphics_device:dir { open getattr read search ioctl };
allow mm-qcamera-daemon input_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mm-qcamera-daemon input_device:dir { open getattr read search ioctl };
allow mm-qcamera-daemon media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

#neverallow Google CTS-android-5.0.2_r1 : allow mm-qcamera-daemon media_rw_data_file:file { create_file_perms x_file_perms };
allow mm-qcamera-daemon media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow mm-qcamera-daemon kgsl_device:chr_file { { { getattr open read ioctl lock } { open append write } } execute };
allow mm-qcamera-daemon mpdecision:unix_stream_socket connectto;
allow mm-qcamera-daemon sdcard_internal:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

#neverallow Google CTS-android-5.0.2_r1 : allow mm-qcamera-daemon sdcard_internal:file { create_file_perms x_file_perms };
allow mm-qcamera-daemon sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow mm-qcamera-daemon shell_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mm-qcamera-daemon socket_device:sock_file { open append write };
allow mm-qcamera-daemon sysfs:file { { getattr open read ioctl lock } { open append write } };
allow mm-qcamera-daemon sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow mm-qcamera-daemon system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
# Remove execute permission to satisfy assertion that domains can not execute any type it can write(except kernel, init, and su)

#neverallow Google CTS-android-5.0.2_r1 : allow mm-qcamera-daemon system_data_file:file { create_file_perms x_file_perms };
allow mm-qcamera-daemon system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow mm-qcamera-daemon system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mm-qcamera-daemon video_device:chr_file { { getattr open read ioctl lock } { open append write } };

# for B2C users
typeattribute mm-qcamera-daemon trusteddomain;
typeattribute mm-qcamera-daemon device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/mpdecision.te"
# mpdecision


allow mpdecision self:capability { net_admin chown fsetid dac_override };
allow mpdecision self:netlink_kobject_uevent_socket { read bind create setopt };

allow mpdecision device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mpdecision cpu_dma_latency_device:chr_file { open append write };
allow mpdecision device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mpdecision kernel:process setsched;
allow mpdecision mediaserver:file { { getattr open read ioctl lock } { open append write } };
allow mpdecision mediaserver:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mpdecision mpdecision_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mpdecision mpdecision_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mpdecision socket_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mpdecision socket_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mpdecision sysfs:file { { getattr open read ioctl lock } { open append write } };
allow mpdecision sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow mpdecision system:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mpdecision system:file { { getattr open read ioctl lock } { open append write } };
allow mpdecision system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mpdecision system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mpdecision system_app:dir { open getattr read search ioctl };
allow mpdecision s_system_app:dir { open getattr read search ioctl };
#line 24
allow mpdecision thermald:unix_stream_socket connectto;
allow mpdecision labeledfs:dir { open getattr read search ioctl };
allow mpdecision mediaserver:dir { open getattr read search ioctl };

# Allow to access the dev="proc" from nsa 4.4 policy update
allow mpdecision system:dir { open getattr read search ioctl };
allow mpdecision system:file { getattr open read ioctl lock };

# for B2C users
typeattribute mpdecision trusteddomain;
typeattribute mpdecision device_domain;


## from J GED
allow mpdecision sysfs_mpdecision:file { getattr open read ioctl lock };
allow mpdecision sysfs_rqstats:dir search;
allow mpdecision sysfs_thermal:dir search;


#audit(46844.142:59): avc:  denied  { search } for  pid=2083 comm="mpdecision" name="rq-stats" dev="sysfs" ino=20304 scontext=u:r:mpdecision:s0 tcontext=u:object_r:sysfs_rqstats:s0 tclass=dir
#audit(46844.142:60): avc:  denied  { search } for  pid=2120 comm="mpdecision" name="msm_thermal" dev="sysfs" ino=5187 scontext=u:r:mpdecision:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=dir
#audit(46844.142:60): avc:  denied  { read } for  pid=2120 comm="mpdecision" name="cpus_offlined" dev="sysfs" ino=15957 scontext=u:r:mpdecision:s0 tcontext=u:object_r:sysfs_mpdecision:s0 tclass=file
#audit(46844.142:60): avc:  denied  { open } for  pid=2120 comm="mpdecision" name="cpus_offlined" dev="sysfs" ino=15957 scontext=u:r:mpdecision:s0 tcontext=u:object_r:sysfs_mpdecision:s0 tclass=file

#line 1 "vendor/samsung/common/sepolicy/qcom_common/netmgrd.te"
#
# netmgrd.te
#

############ aosp and sec_common #############
########## type and macro.
#type netmgrd, domain;
#type netmgrd_exec, exec_type, file_type;

#init_daemon_domain(netmgrd)

#line 11
allow netmgrd property_socket:sock_file write;
#line 11
allow netmgrd init:unix_stream_socket connectto;
#line 11

########## self and domain_type
allow netmgrd kernel:system module_request;
allow netmgrd qmuxd:unix_stream_socket connectto;
allow netmgrd self:capability { sys_module setuid fsetid setgid net_raw net_admin dac_override chown setpcap };
allow netmgrd self:rawip_socket create; 
allow netmgrd self:{ udp_socket packet_socket netlink_socket netlink_route_socket rawip_socket } *;

########## fs_type
allow netmgrd proc:file { open append write };
allow netmgrd proc:dir { open search write add_name remove_name };
allow netmgrd proc_net:file { open append write };
allow netmgrd proc_net:dir { open search write add_name remove_name };
########## dev_type
########## file_type
allow netmgrd app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow netmgrd gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 27
allow netmgrd app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netmgrd gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 28
allow netmgrd property_socket:sock_file { open append write };
allow netmgrd qmux_radio_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow netmgrd qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netmgrd radio_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow netmgrd radio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netmgrd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow netmgrd system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow netmgrd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netmgrd system_file:file { getattr execute execute_no_trans };

########## etc_type
allow netmgrd radio_prop:property_service set;
allow netmgrd system_prop:property_service set;

########## known issue.
# from carrier_kor_slsi\common_lgt\netmgrd.te
allow netmgrd radio_prop:property_service set;



############ avc_log #############
# avc:  denied  { write } for  pid=795 comm="sh" name="accept_ra" dev="proc" ino=5971 scontext=u:r:netmgrd:s0 tcontext=u:object_r:proc_net:s0 tclass=file
# item=0 name="/proc/sys/net/ipv6/conf/rmnet_usb0/accept_ra" inode=5971 dev=00:03 mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:proc_net:s0
# avc:  denied  { setpcap } for  pid=659 comm="netmgrd" capability=8  scontext=u:r:netmgrd:s0 tcontext=u:r:netmgrd:s0 tclass=capability permissive=0
# arch=40000028 syscall=172 per=800000 success=no exit=-1 a0=18 a1=0 a2=0 a3=0 items=0 ppid=1 pid=659 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="netmgrd" exe="/system/bin/netmgrd" subj=u:r:netmgrd:s0 key=(null)

#line 1 "vendor/samsung/common/sepolicy/qcom_common/peripheral_manager.te"
#Policy for peripheral_manager
#per_mgr - peripheral_manager domain

############ qcom_common #############
########## type and macro.

#line 6
# Call the server domain and optionally transfer references to it.
#line 6
allow per_mgr system_server:binder { call transfer };
#line 6
# Allow the serverdomain to transfer references to the client on the reply.
#line 6
allow system_server per_mgr:binder transfer;
#line 6
# Receive and use open files from the server.
#line 6
allow per_mgr system_server:fd use;
#line 6


########## self and domain_type
allow per_mgr self:binder { transfer call };

########## fs_type
########## dev_type
########## file_type
allow per_mgr dumplog_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow per_mgr dumplog_data_file:file { { getattr open read ioctl lock } { open append write } };

########## etc_type
########## known issue.


############ avc_log #############
# type=1400 msg=audit(1388543866.839:413): avc:  denied  { write } for  pid=7441 comm="dumpsys" path="/data/log/dump.log" dev="sda16" ino=132256 scontext=u:r:per_mgr:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file permissive=0 SEPF_SM-G920V_5.0.1_0002
# avc:  denied  { call } for  pid=553 comm="pm-service" scontext=u:r:per_mgr:s0 tcontext=u:r:system_server:s0 tclass=binder permissive=0
# MSM8992, philippelte avc:  denied  { call } for  pid=449 comm="pm-proxy" scontext=u:r:per_mgr:s0 tcontext=u:r:per_mgr:s0 tclass=binder permissive=1
# avc:  denied  { transfer } for  pid=449 comm="pm-proxy" scontext=u:r:per_mgr:s0 tcontext=u:r:per_mgr:s0 tclass=binder permissive=1
#line 1 "vendor/samsung/common/sepolicy/qcom_common/playready.te"
# playready

type playready, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type playready_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init playready_exec:file { getattr open read execute };
#line 6
allow init playready:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow playready playready_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow playready init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit init playready:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow init playready:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init playready_exec:process playready;
#line 6

#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type playready_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 6
type_transition playready tmpfs:file playready_tmpfs;
#line 6
allow playready playready_tmpfs:file { read write };
#line 6

#line 6


allow playready self:capability { dac_override chown };

allow playready tmpfs:chr_file { { getattr open read ioctl lock } { open append write } };
allow playready system_file:file { getattr execute execute_no_trans };
allow playready shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow playready qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow playready firmware:file { getattr open read ioctl lock };
allow playready firmware:dir { open getattr read search ioctl };
allow playready efs_file:file { open append write };
allow playready efs_file:dir { open getattr read search ioctl };
allow playready drm_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow playready drm_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

# for B2C users
typeattribute playready trusteddomain;
typeattribute playready device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/ptt_socket_app.te"
# ptt_socket_app
# This file implements the Netlink Proxy Server. It listens for MAC SW
# messages generated from a test script(Perl/Python) at a remote host,
# over a TCP/IP connection and translates them into the corresponding
# Netlink messages to be sent to the HDD/MAC SW.

type ptt_socket_app, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type ptt_socket_app_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 9

#line 9
# Allow the necessary permissions.
#line 9

#line 9
# Old domain may exec the file and transition to the new domain.
#line 9
allow init ptt_socket_app_exec:file { getattr open read execute };
#line 9
allow init ptt_socket_app:process transition;
#line 9
# New domain is entered by executing the file.
#line 9
allow ptt_socket_app ptt_socket_app_exec:file { entrypoint open read execute getattr };
#line 9
# New domain can send SIGCHLD to its caller.
#line 9
allow ptt_socket_app init:process sigchld;
#line 9
# Enable AT_SECURE, i.e. libc secure mode.
#line 9
dontaudit init ptt_socket_app:process noatsecure;
#line 9
# XXX dontaudit candidate but requires further study.
#line 9
allow init ptt_socket_app:process { siginh rlimitinh };
#line 9

#line 9
# Make the transition occur by default.
#line 9
type_transition init ptt_socket_app_exec:process ptt_socket_app;
#line 9

#line 9

#line 9
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 9
type ptt_socket_app_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 9
type_transition ptt_socket_app tmpfs:file ptt_socket_app_tmpfs;
#line 9
allow ptt_socket_app ptt_socket_app_tmpfs:file { read write };
#line 9

#line 9


allow ptt_socket_app self:capability { setgid setuid net_admin net_raw dac_override dac_read_search };

# Diag_LSM_Init
allow ptt_socket_app diag_device:chr_file { getattr open read ioctl lock };

# retrieve_nv_file and open as rw mode
# /persist/WCN1314_qcom_wlan_nv.bin, /etc/firmware/wlan/qcom_wlan_nv.bin
allow ptt_socket_app rootfs:lnk_file { getattr open read ioctl lock };
allow ptt_socket_app persist_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ptt_socket_app persist_data_file:file { { getattr open read ioctl lock } { open append write } };

#neverallow Google CTS-android-5.0.2_r1 : allow ptt_socket_app system_file:dir rw_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow ptt_socket_app system_file:file rw_file_perms;
allow ptt_socket_app system_file:dir { open getattr read search ioctl };
allow ptt_socket_app system_file:file { getattr open read ioctl lock };

# for B2C users
typeattribute ptt_socket_app trusteddomain;
typeattribute ptt_socket_app system_domain;

# temporary permissive to gather the log.
# permissive ptt_socket_app;


## avc_log
# avc:  denied  { dac_override } for  pid=11467 comm="ptt_socket_app" capability=1  scontext=u:r:ptt_socket_app:s0 tcontext=u:r:ptt_socket_app:s0 tclass=capability SEPF_SM-T365_4.4.4_0026
# avc:  denied  { net_raw } for  pid=11467 comm="ptt_socket_app" capability=13  scontext=u:r:ptt_socket_app:s0 tcontext=u:r:ptt_socket_app:s0 tclass=capability SEPF_SM-T365_4.4.4_0026


#line 1 "vendor/samsung/common/sepolicy/qcom_common/qcks.te"
# qcks
type qcks, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type qcks_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init qcks_exec:file { getattr open read execute };
#line 4
allow init qcks:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow qcks qcks_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow qcks init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init qcks:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init qcks:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init qcks_exec:process qcks;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type qcks_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition qcks tmpfs:file qcks_tmpfs;
#line 4
allow qcks qcks_tmpfs:file { read write };
#line 4

#line 4



#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow qcks efsks_exec:file { getattr open read execute };
#line 6
allow qcks efsks:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow efsks efsks_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow efsks qcks:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
dontaudit qcks efsks:process noatsecure;
#line 6
# XXX dontaudit candidate but requires further study.
#line 6
allow qcks efsks:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition qcks efsks_exec:process efsks;
#line 6


# Allow rules
allow qcks block_device:dir { open getattr read search ioctl };
allow qcks block_device:lnk_file { getattr open read ioctl lock };
allow qcks dw_mmc_device:dir { { open getattr read search ioctl } add_name write };
allow qcks dw_mmc_device:lnk_file { getattr open read ioctl lock };
allow qcks efsks:process signal;
allow qcks efsks_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow qcks firmware:file { getattr open read ioctl lock };
allow qcks firmware:dir { open getattr read search ioctl };
allow qcks init:unix_stream_socket connectto;
allow qcks ks_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow qcks m9kefsblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow qcks emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow qcks modem_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow qcks modem_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow qcks modem_device:lnk_file { { getattr open read ioctl lock } { open append write } };
allow qcks property_socket:sock_file write;
allow qcks rild_prop:property_service set;
allow qcks sdcard_external:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qcks sdcard_external:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qcks sdcard_type:dir { open getattr read search ioctl };
allow qcks sdcard_type:file { getattr open read ioctl lock };
allow qcks self:capability { fsetid dac_override setuid };
allow qcks shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow qcks sysfs:file { open append write };
allow qcks system_file:file { getattr execute execute_no_trans };
allow qcks system_data_file:dir { open search write add_name remove_name };
allow qcks system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qcks tombstones_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qcks tombstones_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qcks tombstone_data_file:dir { open getattr read search ioctl };
allow qcks tombstone_data_file:dir add_name;
allow qcks radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qcks usb_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qcks modemstblk_device:blk_file { { getattr open read ioctl lock } { open append write } };


# for B2C users
typeattribute qcks trusteddomain;
typeattribute qcks device_domain;

## from J GED
allow qcks sysfs_wake_lock:file { { getattr open read ioctl lock } append };

# audit(46770.560:31): avc:  denied  { getattr } for  pid=196 comm="qcks" path="/dev/block/mmcblk0p13" dev="tmpfs" ino=6155 scontext=u:r:qcks:s0 tcontext=u:object_r:block_device:s0 tclass=blk_file
# audit(46770.560:31): arch=40000028 syscall=327 per=800000 success=yes exit=0 a0=ffffff9c a1=b6f754a8 a2=bed7e7d8 a3=0 items=1 ppid=1 pid=196 auid=4294967295 uid=1000 gid=1001 euid=1000 suid=1000 fsuid=1000 egid=1001 sgid=1001 fsgid=1001 tty=(none) ses=429audit(46770.560:31):  cwd="/"
# audit(46770.560:31): item=0 name="/dev/block/platform/msm_sdcc.1/by-name/m9kefs1" inode=6155 dev=00:0b mode=060660 ouid=1000 ogid=1001 rdev=b3:0d obj=u:object_r:block_device:s0
# audit(46770.560:32): avc:  denied  { read } for  pid=196 comm="qcks" name="mmcblk0p13" dev="tmpfs" ino=6155 scontext=u:r:qcks:s0 tcontext=u:object_r:block_device:s0 tclass=blk_file
# audit(46770.560:32): avc:  denied  { open } for  pid=196 comm="qcks" name="mmcblk0p13" dev="tmpfs" ino=6155 scontext=u:r:qcks:s0 tcontext=u:object_r:block_device:s0 tclass=blk_file
# audit(46770.560:32): arch=40000028 syscall=322 per=800000 success=yes exit=5 a0=ffffff9c a1=b6f754a8 a2=20000 a3=0 items=1 ppid=1 pid=196 auid=4294967295 uid=1000 gid=1001 euid=1000 suid=1000 fsuid=1000 egid=1001 sgid=1001 fsgid=1001 tty=(none) ses=429496audit(46770.560:32):  cwd="/"
# audit(46770.560:32): item=0 name="/dev/block/platform/msm_sdcc.1/by-name/m9kefs1" inode=6155 dev=00:0b mode=060660 ouid=1000 ogid=1001 rdev=b3:0d obj=u:object_r:block_device:s0


############ qcmdm #############
allow qcks radio_device:chr_file { getattr open read ioctl lock };
allow qcks property_socket:sock_file { open append write };
allow qcks usbfs:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 : allow qcks usbfs:filesystem mount;


#line 1 "vendor/samsung/common/sepolicy/qcom_common/qcom-system-daemon.te"
# qcom-system-daemon


# rules
allow qcom-system-daemon diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qcom-system-daemon self:capability dac_override;


#line 1 "vendor/samsung/common/sepolicy/qcom_common/qmiproxy.te"
# qmiproxy
type qmiproxy, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type qmiproxy_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init qmiproxy_exec:file { getattr open read execute };
#line 4
allow init qmiproxy:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow qmiproxy qmiproxy_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow qmiproxy init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init qmiproxy:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init qmiproxy:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init qmiproxy_exec:process qmiproxy;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type qmiproxy_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition qmiproxy tmpfs:file qmiproxy_tmpfs;
#line 4
allow qmiproxy qmiproxy_tmpfs:file { read write };
#line 4

#line 4


allow qmiproxy diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qmiproxy init:unix_stream_socket connectto;
allow qmiproxy property_socket:sock_file { open append write };
allow qmiproxy qmux_radio_socket:dir { open search write add_name remove_name };
allow qmiproxy qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qmiproxy radio_prop:property_service set;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/qmuxd.te"
# qmuxd
#type qmuxd, domain;
#type qmuxd_exec, exec_type, file_type;


#line 5
allow qmuxd dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 5
allow qmuxd dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 5
allow qmuxd dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 5
allow qmuxd bugreport_exec:file { execute execute_no_trans };
#line 5
allow qmuxd dumpstate_exec:file { execute execute_no_trans };
#line 5
allow qmuxd dumpsys_exec:file { execute execute_no_trans };
#line 5

#init_daemon_domain(qmuxd)

# allow rules
allow qmuxd cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qmuxd qmux_audio_socket:dir { open search write add_name remove_name };
allow qmuxd qmux_audio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qmuxd qmux_bluetooth_socket:dir { open search write add_name remove_name };
allow qmuxd qmux_bluetooth_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qmuxd qmux_gps_socket:dir { open search write add_name remove_name };
allow qmuxd qmux_gps_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qmuxd qmux_radio_socket:dir { open search write add_name remove_name };
allow qmuxd qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qmuxd init:unix_stream_socket connectto;
allow qmuxd property_socket:sock_file write;
allow qmuxd qmuxd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qmuxd radio_prop:property_service set;
allow qmuxd rild_prop:property_service set;
allow qmuxd self:capability { setuid dac_override setpcap };
allow qmuxd self:capability2 block_suspend;
allow qmuxd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow qmuxd smd_cntl_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qmuxd sysfs:file { open append write };
allow qmuxd system_file:file { getattr execute execute_no_trans };
allow qmuxd tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Allow /sys/power/wake_lock from nsa 4.4 policy update
allow qmuxd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

#audit(1388534485.419:15): avc:  denied  { setpcap } for  pid=566 comm="qmuxd" capability=8  scontext=u:r:qmuxd:s0 tcontext=u:r:qmuxd:s0 tclass=capability
#audit(1388534485.419:15): arch=40000028 syscall=172 per=800000 success=yes exit=0 a0=18 a1=0 a2=0 a3=0 items=0 ppid=1 pid=566 auid=4294967295 uid=0 gid=1001 euid=0 suid=0 #fsuid=0 egid=1001 sgid=1001 fsgid=1001 ses=4294967295 tty=(none) comm="qmuxd" exe="/audit(1388534485.439:16): table=filter family=2 entries=4
allow qmuxd self:capability setpcap;

# for B2C users
typeattribute qmuxd trusteddomain;
typeattribute qmuxd device_domain;

## from J GED
allow qmuxd sysfs_hsic_modem_wait:file { open append write };


# audit(46771.121:34): avc:  denied  { write } for  pid=194 comm="qmuxd" name="modem_wait" dev="sysfs" ino=21201 scontext=u:r:qmuxd:s0 tcontext=u:object_r:sysfs_hsic_modem_wait:s0 tclass=file
# audit(46771.121:34): avc:  denied  { open } for  pid=194 comm="qmuxd" name="modem_wait" dev="sysfs" ino=21201 scontext=u:r:qmuxd:s0 tcontext=u:object_r:sysfs_hsic_modem_wait:s0 tclass=file
# audit(46771.121:34): arch=40000028 syscall=322 per=800000 success=yes exit=6 a0=ffffff9c a1=b6f1b6df a2=20001 a3=0 items=1 ppid=1 pid=194 auid=4294967295 uid=1001 gid=1001 euid=1001 suid=1001 fsuid=1001 egid=1001 sgid=1001 fsgid=1001 tty=(none) ses=429496audit(46771.121:34):  cwd="/"
# audit(46771.121:34): item=0 name="/sys/devices/virtual/hsicctl/hsicctl0/modem_wait" inode=21201 dev=00:0c mode=0100664 ouid=1001 ogid=1001 rdev=00:00 obj=u:object_r:sysfs_hsic_modem_wait:s0

############ qcmdm_common #############
allow qmuxd hsic_device:chr_file { { getattr open read ioctl lock } { open append write } };

#line 1 "vendor/samsung/common/sepolicy/qcom_common/qosmgr.te"
# qosmgr

type qosmgr, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type qosmgr_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init qosmgr_exec:file { getattr open read execute };
#line 5
allow init qosmgr:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow qosmgr qosmgr_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow qosmgr init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init qosmgr:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init qosmgr:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init qosmgr_exec:process qosmgr;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type qosmgr_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition qosmgr tmpfs:file qosmgr_tmpfs;
#line 5
allow qosmgr qosmgr_tmpfs:file { read write };
#line 5

#line 5


# rulese
allow qosmgr sysfs:file write;

# for B2C users
typeattribute qosmgr trusteddomain;
typeattribute qosmgr device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/qrngd.te"
# qrngd

type qrngd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type qrngd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init qrngd_exec:file { getattr open read execute };
#line 5
allow init qrngd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow qrngd qrngd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow qrngd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init qrngd:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init qrngd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init qrngd_exec:process qrngd;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type qrngd_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition qrngd tmpfs:file qrngd_tmpfs;
#line 5
allow qrngd qrngd_tmpfs:file { read write };
#line 5

#line 5


#neverallow Google CTS-android-5.0.2_r1 : allow qrngd hw_random_device:chr_file r_file_perms;
allow qrngd random_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qrngd self:capability { setuid setgid sys_admin };

# for B2C users
typeattribute qrngd trusteddomain;
typeattribute qrngd device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/qseecomd.te"
# qseecomd


allow qseecomd init:unix_stream_socket connectto;
allow qseecomd property_socket:sock_file { open append write };
allow qseecomd system_prop:property_service set;

allow qseecomd apk_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qseecomd apk_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qseecomd block_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow qseecomd mmcblk0rpmb_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow qseecomd drm_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qseecomd drm_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qseecomd efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qseecomd efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qseecomd qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qseecomd self:capability { chown setuid setgid sys_rawio dac_override sys_admin };
allow qseecomd sg_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qseecomd ssdblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow qseecomd emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow qseecomd shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qseecomd shell_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qseecomd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow qseecomd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow qseecomd efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute qseecomd trusteddomain;
typeattribute qseecomd device_domain;

## J GED
allow qseecomd qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow qseecomd device:dir { open getattr read search ioctl };


#audit(46768.854:17): avc:  denied  { read write } for  pid=245 comm="qseecomd" name="qseecom" dev="tmpfs" ino=4957 scontext=u:r:qseecomd:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file
#audit(46768.854:17): avc:  denied  { open } for  pid=245 comm="qseecomd" name="qseecom" dev="tmpfs" ino=4957 scontext=u:r:qseecomd:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file
#audit(46768.854:17): arch=40000028 syscall=322 per=800000 success=yes exit=4 a0=ffffff9c a1=b6eda688 a2=20002 a3=0 items=1 ppid=227 pid=245 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4294audit(46768.854:17):  cwd="/"
#audit(46768.854:17): item=0 name="/dev/qseecom" inode=4957 dev=00:0b mode=020660 ouid=1000 ogid=1026 rdev=f1:00 obj=u:object_r:qseecom_device:s0
#audit(46768.854:18): avc:  denied  { ioctl } for  pid=245 comm="qseecomd" path="/dev/qseecom" dev="tmpfs" ino=4957 scontext=u:r:qseecomd:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file
#audit(46768.854:18): arch=40000028 syscall=54 per=800000 success=yes exit=0 a0=4 a1=c004970a a2=bed17990 a3=bed17980 items=0 ppid=227 pid=245 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=42audit(46768.794:13): arch=40000028 syscall=327 per=800000 success=yes exit=0 a0=ffffff9c a1=b6fb4269 a2=bef45910 a3=0 items=1 ppid=1 pid=229 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=429audit(46768.794:13):  cwd="/"
#/dev/sg[0-9]* : add qseecom_device
#audit(1390662410.309:15): avc:  denied  { open } for  pid=464 comm="qseecomd" path="/dev/sg8" dev="tmpfs" ino=12021 scontext=u:r:tee:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
#audit(1390662410.309:16): avc:  denied  { ioctl } for  pid=464 comm="qseecomd" path="/dev/sg8" dev="tmpfs" ino=12021 scontext=u:r:tee:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
#audit(1390662410.309:17): avc:  denied  { write } for  pid=464 comm="qseecomd" name="sg2" dev="tmpfs" ino=11951 scontext=u:r:tee:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1
#audit(1390662410.309:12): avc:  denied  { read } for  pid=464 comm="qseecomd" name="/" dev="tmpfs" ino=2175 scontext=u:r:tee:s0 tcontext=u:object_r:device:s0 tclass=dir permissive=1
#audit(1390662410.309:13): avc:  denied  { open } for  pid=464 comm="qseecomd" path="/dev" dev="tmpfs" ino=2175 scontext=u:r:tee:s0 tcontext=u:object_r:device:s0 tclass=dir permissive=1
#audit(1390742692.249:20): avc:  denied  { sys_admin } for  pid=464 comm="qseecomd" capability=21  scontext=u:r:tee:s0 tcontext=u:r:tee:s0 tclass=capability permissive=0
#avc:  denied  { chown } for  pid=416 comm="qseecomd" capability=0  scontext=u:r:qseecomd:s0 tcontext=u:r:qseecomd:s0 tclass=capability permissive=0 SEPF_SM-N916S_5.0.2_0002
#line 1 "vendor/samsung/common/sepolicy/qcom_common/quipc_igsn.te"
# quipc_igsn
allow quipc_igsn system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow quipc_igsn system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute quipc_igsn trusteddomain;
typeattribute quipc_igsn device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/quipc_main.te"
# quipc_main

allow quipc_main gps_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow quipc_main gps_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow quipc_main system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow quipc_main system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow quipc_main system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute quipc_main trusteddomain;
typeattribute quipc_main device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/rfs_access.te"
allow rfs_access self:capability { setuid net_raw setgid setpcap };

# avc:  denied  { setpcap } for  pid=460 comm="rfs_access" capability=8  scontext=u:r:rfs_access:s0 tcontext=u:r:rfs_access:s0 tclass=capability permissive=1 SEPF_SM-G920V_5.0_0002
# avc:  denied  { setgid } for  pid=460 comm="rfs_access" capability=6  scontext=u:r:rfs_access:s0 tcontext=u:r:rfs_access:s0 tclass=capability permissive=1 SEPF_SM-G920V_5.0_0002
# avc:  denied  { setuid } for  pid=460 comm="rfs_access" capability=7  scontext=u:r:rfs_access:s0 tcontext=u:r:rfs_access:s0 tclass=capability permissive=1 SEPF_SM-G920V_5.0_0002
# avc:  denied  { net_raw } for  pid=460 comm="rfs_access" capability=13  scontext=u:r:rfs_access:s0 tcontext=u:r:rfs_access:s0 tclass=capability permissive=1 SEPF_SM-G920V_5.0_0002
#line 1 "vendor/samsung/common/sepolicy/qcom_common/rmt_storage.te"
# rmt_storage


# rules

#line 5
allow rmt_storage log_device:chr_file read;
#line 5
allow rmt_storage system_file:file { getattr execute execute_no_trans };
#line 5

#neverallow Google CTS-android-5.0.2_r1 : allow rmt_storage block_device:blk_file rw_file_perms;
allow rmt_storage self:socket { read write };
allow rmt_storage cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow rmt_storage kmem_device:chr_file w_file_perms;
allow rmt_storage block_device:dir { open getattr read search ioctl };
allow rmt_storage block_device:lnk_file { getattr open read ioctl lock };
allow rmt_storage fscblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow rmt_storage emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow rmt_storage emmcblk_device:lnk_file { getattr open read ioctl lock };
allow rmt_storage fsg_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow rmt_storage log_device:chr_file ioctl;
allow rmt_storage mmcblk0_device:blk_file { getattr open read ioctl lock };
allow rmt_storage modemstblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow rmt_storage fsg_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow rmt_storage ssdblk_device:blk_file { { getattr open read ioctl lock } { open append write } };

#neverallow Google CTS-android-5.0.2_r1 : remove sys_rawio, allow rmt_storage self:capability { net_raw setuid sys_rawio setgid dac_override sys_admin setpcap };
allow rmt_storage self:capability { net_raw setuid setgid dac_override sys_admin setpcap };

allow rmt_storage self:capability2 block_suspend;
allow rmt_storage self:socket { bind create ioctl setopt };
allow rmt_storage sysfs:file { open append write };
allow rmt_storage sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
#neverallow Google CTS-android-5.0.2_r1 : allow rmt_storage kmem_device:chr_file r_file_perms;
allow rmt_storage fsg_device:lnk_file { getattr open read ioctl lock };
allow rmt_storage modem_device:lnk_file { getattr open read ioctl lock };
allow rmt_storage ssdblk_device:lnk_file { getattr open read ioctl lock };

allow rmt_storage efsblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow rmt_storage paramblk_device:blk_file { { getattr open read ioctl lock } { open append write } };

# Allow /sys/power/wake_lock from nsa 4.4 policy update
allow rmt_storage sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

# for B2C users
typeattribute rmt_storage trusteddomain;
typeattribute rmt_storage device_domain;

## from J GED

#line 45
allow rmt_storage property_socket:sock_file write;
#line 45
allow rmt_storage init:unix_stream_socket connectto;
#line 45

allow rmt_storage smem_log_device:chr_file { { getattr open read ioctl lock } { open append write } };

# audit(46768.504:5): avc:  denied  { read write } for  pid=193 comm="rmt_storage" name="smem_log" dev="tmpfs" ino=4943 scontext=u:r:rmt_storage:s0 tcontext=u:object_r:smem_log_device:s0 tclass=chr_file
# audit(46768.504:5): avc:  denied  { open } for  pid=193 comm="rmt_storage" name="smem_log" dev="tmpfs" ino=4943 scontext=u:r:rmt_storage:s0 tcontext=u:object_r:smem_log_device:s0 tclass=chr_file
# audit(46768.504:5): arch=40000028 syscall=322 per=800000 success=yes exit=3 a0=ffffff9c a1=b6df1de4 a2=20002 a3=0 items=1 ppid=1 pid=193 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="rmt_storage" e
# audit(46768.504:5):  cwd="/"
# audit(46768.504:5): item=0 name="/dev/smem_log" inode=4943 dev=00:0b mode=020600 ouid=0 ogid=0 rdev=0a:3d obj=u:object_r:smem_log_device:s0
# audit(46768.504:6): avc:  denied  { ioctl } for  pid=193 comm="rmt_storage" path="/dev/smem_log" dev="tmpfs" ino=4943 scontext=u:r:rmt_storage:s0 tcontext=u:object_r:smem_log_device:s0 tclass=chr_file
# audit(46768.504:6): arch=40000028 syscall=54 per=800000 success=yes exit=0 a0=3 a1=40043001 a2=2 a3=beb5a7e8 items=0 ppid=1 pid=193 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="rmt_storage" exe="/
# audit(46768.504:7): avc:  denied  { write } for  pid=193 comm="rmt_storage" name="property_service" dev="tmpfs" ino=5596 scontext=u:r:rmt_storage:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file
# audit(46768.504:7): avc:  denied  { connectto } for  pid=193 comm="rmt_storage" path="/dev/socket/property_service" scontext=u:r:rmt_storage:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket
# audit(46768.504:7): arch=40000028 syscall=283 per=800000 success=yes exit=0 a0=5 a1=beb5a3c4 a2=1f a3=b6f20774 items=1 ppid=1 pid=193 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="rmt_storage" exe=
# audit(46768.504:7): saddr=01002F6465762F736F636B65742F70726F70657274795F7365727669636500
# audit(46768.504:7): item=0 name=(null) inode=5596 dev=00:0b mode=0140666 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:property_socket:s0



#line 1 "vendor/samsung/common/sepolicy/qcom_common/secstarter.te"
# secstarter

type secstarter, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr42, newAttr41, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type secstarter_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init secstarter_exec:file { getattr open read execute };
#line 5
allow init secstarter:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow secstarter secstarter_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow secstarter init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
dontaudit init secstarter:process noatsecure;
#line 5
# XXX dontaudit candidate but requires further study.
#line 5
allow init secstarter:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init secstarter_exec:process secstarter;
#line 5

#line 5

#line 5
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 5
type secstarter_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 5
type_transition secstarter tmpfs:file secstarter_tmpfs;
#line 5
allow secstarter secstarter_tmpfs:file { read write };
#line 5

#line 5



#line 7
allow secstarter property_socket:sock_file write;
#line 7
allow secstarter init:unix_stream_socket connectto;
#line 7


# allow rules
allow secstarter app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow secstarter gad_untrusted_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 11
allow secstarter app_data_file:file { getattr open read ioctl lock };
allow secstarter gad_untrusted_app_data_file:file { getattr open read ioctl lock };
#line 12
allow secstarter system_data_file:dir { open search write add_name remove_name };
allow secstarter system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow secstarter system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow secstarter system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow secstarter vpn_prop:property_service set;

# for B2C users
typeattribute secstarter trusteddomain;
typeattribute secstarter device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/ssr_diag.te"
# ssr_diag


# rules
allow ssr_diag self:netlink_kobject_uevent_socket read;
allow ssr_diag diag_device:chr_file read;
allow ssr_diag diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow ssr_diag self:netlink_kobject_uevent_socket { bind create setopt read };

# for B2C users
typeattribute ssr_diag trusteddomain;
typeattribute ssr_diag device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/thermald.te"
# thermald

typealias thermal-engine alias thermald;
typealias thermal-engine_exec alias thermald_exec;
#type thermald, domain;
#type thermald_exec, exec_type, file_type;

#init_daemon_domain(thermald)

#line 9
allow thermald property_socket:sock_file write;
#line 9
allow thermald init:unix_stream_socket connectto;
#line 9


# rules
allow thermald qmuxd:unix_stream_socket connectto;

allow thermald device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow thermald device:chr_file rw_file_perms;
allow thermald init:unix_stream_socket connectto;
allow thermald log_device:chr_file { getattr open read ioctl lock };
allow thermald mpdecision:unix_stream_socket connectto;
allow thermald qmux_radio_socket:dir { open search write add_name remove_name };
allow thermald qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow thermald socket_device:dir { open search write add_name remove_name };
allow thermald socket_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow thermald self:capability { net_admin fsetid dac_override chown };
allow thermald self:netlink_kobject_uevent_socket *;
allow thermald self:socket *;
allow thermald self:capability sys_boot;
allow thermald sysfs:file write;
allow thermald system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow thermald system_data_file:file { { getattr open read ioctl lock } { open append write } };

# for B2C users
typeattribute thermald trusteddomain;
typeattribute thermald device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/thermal-engine.te"
# thermal-engine

## J GED

#line 4
allow thermal-engine mpdecision_socket:sock_file write;
#line 4
allow thermal-engine mpdecision:unix_stream_socket connectto;
#line 4


allow thermal-engine self:capability { net_admin chown };
allow thermal-engine self:netlink_kobject_uevent_socket { read bind create setopt };
allow thermal-engine socket_device:dir { open search write add_name remove_name };
allow thermal-engine socket_device:sock_file { write create setattr };
allow thermal-engine sysfs:file { open append write };
allow thermal-engine sysfs_mpdecision:file { { getattr open read ioctl lock } { open append write } };
allow thermal-engine sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };


# for B2C users
typeattribute thermal-engine trusteddomain;
typeattribute thermal-engine device_domain;

## J GED denials
#audit(46844.102:52): avc:  denied  { create } for  pid=2086 comm="thermal-engine" scontext=u:r:thermal-engine:s0 tcontext=u:r:thermal-engine:s0 tclass=netlink_kobject_uevent_socket
#audit(46844.102:52): arch=40000028 syscall=281 per=800000 success=yes exit=6 a0=10 a1=2 a2=f a3=b6eaf5d8 items=0 ppid=1 pid=2086 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="thermal-engine" exe="/
#audit(46844.102:53): avc:  denied  { read } for  pid=2080 comm="thermal-engine" name="cpus_offlined" dev="sysfs" ino=15957 scontext=u:r:thermal-engine:s0 tcontext=u:object_r:sysfs_mpdecision:s0 tclass=file
#audit(46844.102:53): avc:  denied  { open } for  pid=2080 comm="thermal-engine" name="cpus_offlined" dev="sysfs" ino=15957 scontext=u:r:thermal-engine:s0 tcontext=u:object_r:sysfs_mpdecision:s0 tclass=file
#audit(46844.102:53): arch=40000028 syscall=322 per=800000 success=yes exit=5 a0=ffffff9c a1=b6f13c5c a2=20000 a3=0 items=1 ppid=1 pid=2080 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="thermal-engiaudit(46844.102:53):  cwd="/"
#audit(46844.102:53): item=0 name="/sys/module/msm_thermal/core_control/cpus_offlined" inode=15957 dev=00:0c mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs_mpdecision:s0
#audit(46844.102:54): avc:  denied  { getattr } for  pid=2080 comm="thermal-engine" path="/sys/module/msm_thermal/core_control/cpus_offlined" dev="sysfs" ino=15957 scontext=u:r:thermal-engine:s0 tcontext=u:object_r:sysfs_mpdecision:s0 tclass=file
#audit(46844.102:54): arch=40000028 syscall=197 per=800000 success=yes exit=0 a0=5 a1=be992880 a2=be9928fc a3=4 items=0 ppid=1 pid=2080 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="thermal-engine" 

#audit(46844.112:55): avc:  denied  { setopt } for  pid=2086 comm="thermal-engine" scontext=u:r:thermal-engine:s0 tcontext=u:r:thermal-engine:s0 tclass=netlink_kobject_uevent_socket
#audit(46844.112:55): avc:  denied  { net_admin } for  pid=2086 comm="thermal-engine" capability=12  scontext=u:r:thermal-engine:s0 tcontext=u:r:thermal-engine:s0 tclass=capability
#audit(46844.112:56): avc:  denied  { bind } for  pid=2086 comm="thermal-engine" scontext=u:r:thermal-engine:s0 tcontext=u:r:thermal-engine:s0 tclass=netlink_kobject_uevent_socket
#audit(46844.112:56): arch=40000028 syscall=282 per=800000 success=yes exit=0 a0=6 a1=b69ff684 a2=c a3=b69ff680 items=0 ppid=1 pid=2086 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="thermal-engine" 
#audit(46844.112:56): saddr=1000000020080000FFFFFFFF
#audit(46844.142:57): avc:  denied  { read } for  pid=2086 comm="thermal-engine" scontext=u:r:thermal-engine:s0 tcontext=u:r:thermal-engine:s0 tclass=netlink_kobject_uevent_socket
#audit(46844.142:57): arch=40000028 syscall=297 per=800000 success=yes exit=90 a0=6 a1=b69ff648 a2=0 a3=18 items=0 ppid=1 pid=2086 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="thermal-engine" exe="
#audit(46844.142:57): saddr=100000000000000001000000

#audit(46844.142:61): avc:  denied  { write } for  pid=2080 comm="thermal-engine" name="socket" dev="tmpfs" ino=5478 scontext=u:r:thermal-engine:s0 tcontext=u:object_r:socket_device:s0 tclass=dir
#audit(46844.142:61): avc:  denied  { add_name } for  pid=2080 comm="thermal-engine" name="thermal-send-client" scontext=u:r:thermal-engine:s0 tcontext=u:object_r:socket_device:s0 tclass=dir
#audit(46844.142:61): avc:  denied  { create } for  pid=2080 comm="thermal-engine" name="thermal-send-client" scontext=u:r:thermal-engine:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file
#audit(46844.142:61): arch=40000028 syscall=282 per=800000 success=yes exit=0 a0=30 a1=b6f2bc6c a2=6e a3=6e65696c items=3 ppid=1 pid=2080 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="thermal-engineaudit(46844.142:61): saddr=01002F6465762F736F636B65742F746865726D616C2D73656E642D636C69656E740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#audit(46844.142:61): item=0 name=(null) inode=5478 dev=00:0b mode=040755 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:socket_device:s0
#audit(46844.142:61): item=1 name=(null) inode=5478 dev=00:0b mode=040755 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:socket_device:s0
#audit(46844.142:61): item=2 name=(null) inode=12341 dev=00:0b mode=0140700 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:socket_device:s0

#audit(46844.142:62): avc:  denied  { setattr } for  pid=2080 comm="thermal-engine" name="thermal-send-client" dev="tmpfs" ino=12341 scontext=u:r:thermal-engine:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file
#audit(46844.142:62): avc:  denied  { chown } for  pid=2080 comm="thermal-engine" capability=0  scontext=u:r:thermal-engine:s0 tcontext=u:r:thermal-engine:s0 tclass=capability
#audit(46844.142:62): arch=40000028 syscall=325 per=800000 success=yes exit=0 a0=ffffff9c a1=b6f2bc6e a2=0 a3=3ee items=1 ppid=1 pid=2080 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="thermal-engineaudit(46844.142:62):  cwd="/"
#audit(46844.142:62): item=0 name="/dev/socket/thermal-send-client" inode=12341 dev=00:0b mode=0140700 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:socket_device:s0

#audit(46844.152:63): avc:  denied  { write } for  pid=2124 comm="thermal-engine" name="cpus_offlined" dev="sysfs" ino=15957 scontext=u:r:thermal-engine:s0 tcontext=u:object_r:sysfs_mpdecision:s0 tclass=file
#audit(46844.152:63): arch=40000028 syscall=322 per=800000 success=yes exit=52 a0=ffffff9c a1=b6f13c5c a2=20002 a3=0 items=1 ppid=1 pid=2124 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="thermal-engaudit(46844.152:63):  cwd="/"
#audit(46844.152:63): item=0 name="/sys/module/msm_thermal/core_control/cpus_offlined" inode=15957 dev=00:0c mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs_mpdecision:s0

#line 1 "vendor/samsung/common/sepolicy/qcom_common/time_daemon.te"
# time_daemon



#line 4
allow time_daemon log_device:chr_file read;
#line 4
allow time_daemon system_file:file { getattr execute execute_no_trans };
#line 4


allow time_daemon log_device:chr_file ioctl;
allow time_daemon clock_device:chr_file { getattr open read ioctl lock };
allow time_daemon time_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow time_daemon time_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow time_daemon self:socket *;
allow time_daemon alarm_device:chr_file { open append write };
allow time_daemon self:capability { setuid setgid };

allow time_daemon system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

# Allow to access the dev="proc" from nsa 4.4 policy update
allow time_daemon commonplatformappdomain:dir { open getattr read search ioctl };
allow time_daemon commonplatformappdomain:file { getattr open read ioctl lock };

# for B2C users
typeattribute time_daemon trusteddomain;
typeattribute time_daemon device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/wcnss_service.te"
#
# wcnss_service
#

############ aosp and sec_common #############
########## type and macro.

#line 7
allow wcnss_service property_socket:sock_file write;
#line 7
allow wcnss_service init:unix_stream_socket connectto;
#line 7


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow wcnss_service wifi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow wcnss_service wifi_data_file:file { { { getattr open read ioctl lock } { open append write } } setattr };
########## etc_type
########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
allow wcnss_service sysfs_msmuart_file:file write;

########## dev_type
allow wcnss_service wifi_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ avc_log #############
## J GED denials
#audit(46768.864:19): avc:  denied  { write } for  pid=229 comm="wcnss_service" name="WCNSS_qcom_cfg.ini" dev="mmcblk0p28" ino=342749 scontext=u:r:wcnss_service:s0 tcontext=u:object_r:wifi_data_file:s0 tclass=file
#audit(46768.864:19): avc:  denied  { open } for  pid=229 comm="wcnss_service" name="WCNSS_qcom_cfg.ini" dev="mmcblk0p28" ino=342749 scontext=u:r:wcnss_service:s0 tcontext=u:object_r:wifi_data_file:s0 tclass=file
#audit(46768.864:19): arch=40000028 syscall=322 per=800000 success=yes exit=4 a0=ffffff9c a1=b6fb4269 a2=20241 a3=1b0 items=1 ppid=1 pid=229 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4294audit(46768.864:19):  cwd="/"
#audit(46768.864:19): item=0 name="/data/misc/wifi/WCNSS_qcom_cfg.ini" inode=342749 dev=b3:1c mode=0100600 ouid=1000 ogid=1010 rdev=00:00 obj=u:object_r:wifi_data_file:s0
#audit(46768.874:20): avc:  denied  { setattr } for  pid=229 comm="wcnss_service" name="WCNSS_qcom_cfg.ini" dev="mmcblk0p28" ino=342749 scontext=u:r:wcnss_service:s0 tcontext=u:object_r:wifi_data_file:s0 tclass=file
#audit(46768.874:20): arch=40000028 syscall=348 per=800000 success=yes exit=0 a0=ffffff9c a1=b6fb4269 a2=bef458c8 a3=0 items=1 ppid=1 pid=229 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=429audit(46768.874:20):  cwd="/"
#audit(46768.874:20): item=0 name="/data/misc/wifi/WCNSS_qcom_cfg.ini" inode=342749 dev=b3:1c mode=0100600 ouid=1000 ogid=1010 rdev=00:00 obj=u:object_r:wifi_data_file:s0
#audit(46768.874:22): avc:  denied  { write } for  pid=229 comm="wcnss_service" name="property_service" dev="tmpfs" ino=5596 scontext=u:r:wcnss_service:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file
#audit(46768.874:22): avc:  denied  { connectto } for  pid=229 comm="wcnss_service" path="/dev/socket/property_service" scontext=u:r:wcnss_service:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket
#audit(46768.874:22): arch=40000028 syscall=283 per=800000 success=yes exit=0 a0=5 a1=bef457f4 a2=1f a3=b6f5e774 items=1 ppid=1 pid=229 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=429496729audit(46768.874:22): saddr=01002F6465762F736F636B65742F70726F70657274795F7365727669636500
#audit(46768.874:22): item=0 name=(null) inode=5596 dev=00:0b mode=0140666 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:property_socket:s0
# avc:  denied  { write } for  pid=312 comm="wcnss_service" name="wifi" dev="mmcblk0p26" ino=392464 scontext=u:r:wcnss_service:s0 tcontext=u:object_r:wifi_data_file:s0 tclass=dir SEPF_SM-G900F_5.0_0001
# MSM8992, philippelte avc:  denied  { write } for  pid=3112 comm="wcnss_filter" name="debug_mask" dev="sysfs" ino=6908 scontext=u:r:wcnss_service:s0 tcontext=u:object_r:sysfs_msmuart_file:s0 tclass=file permissive=1


#line 1 "vendor/samsung/common/sepolicy/qcom_common/wfd_app.te"
#
# wfd service run with the system UID, but needs special privilege.
# Define a new domain for wfd

type wfd_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr6, newAttr3, newAttr2, newAttr9, newAttr13, newAttr12, newAttr14, newAttr10, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
#permissive_or_unconfined(wfd_app)

#line 7
typeattribute wfd_app appdomain;
#line 7
# Label ashmem objects with our own unique type.
#line 7

#line 7
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 7
type wfd_app_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 7
type_transition wfd_app tmpfs:file wfd_app_tmpfs;
#line 7
allow wfd_app wfd_app_tmpfs:file { read write };
#line 7

#line 7
# Map with PROT_EXEC.
#line 7
allow wfd_app wfd_app_tmpfs:file execute;
#line 7

#line 1 "vendor/samsung/common/sepolicy/qcom_common/wiperiface.te"
# wiperiface
type wiperiface, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type wiperiface_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init wiperiface_exec:file { getattr open read execute };
#line 4
allow init wiperiface:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow wiperiface wiperiface_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow wiperiface init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init wiperiface:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init wiperiface:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init wiperiface_exec:process wiperiface;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type wiperiface_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 4
type_transition wiperiface tmpfs:file wiperiface_tmpfs;
#line 4
allow wiperiface wiperiface_tmpfs:file { read write };
#line 4

#line 4


allow wiperiface qmux_gps_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow wiperiface qmux_gps_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow wiperiface qmuxd:unix_stream_socket connectto;
allow wiperiface self:socket *;
allow wiperiface system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow wiperiface system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# for B2C users
typeattribute wiperiface trusteddomain;
typeattribute wiperiface device_domain;
#line 1 "vendor/samsung/common/sepolicy/qcom_common/wlandutservice.te"
#
# wlandutservice
#

############ aosp and sec_common #############
########## type and macro.
type wlandutservice, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type wlandutservice_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;
typeattribute wlandutservice trusteddomain;
typeattribute wlandutservice device_domain;


#line 12
# Call the servicemanager and transfer references to it.
#line 12
allow wlandutservice servicemanager:binder { call transfer };
#line 12
# servicemanager performs getpidcon on clients.
#line 12
allow servicemanager wlandutservice:dir search;
#line 12
allow servicemanager wlandutservice:file { read open };
#line 12
allow servicemanager wlandutservice:process getattr;
#line 12
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 12
# all domains in domain.te.
#line 12
;

#line 13

#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow init wlandutservice_exec:file { getattr open read execute };
#line 13
allow init wlandutservice:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow wlandutservice wlandutservice_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow wlandutservice init:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit init wlandutservice:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow init wlandutservice:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition init wlandutservice_exec:process wlandutservice;
#line 13

#line 13

#line 13
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 13
type wlandutservice_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 13
type_transition wlandutservice tmpfs:file wlandutservice_tmpfs;
#line 13
allow wlandutservice wlandutservice_tmpfs:file { read write };
#line 13

#line 13


#line 14
typeattribute wlandutservice netdomain;
#line 14


########## self and domain_type
allow wlandutservice init:unix_stream_socket connectto;
allow wlandutservice self:capability net_admin;

########## fs_type
########## dev_type
########## file_type
allow wlandutservice shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow wlandutservice system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow wlandutservice system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow wlandutservice system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow wlandutservice wlandutservice_service:service_manager add;

########## known issue.


############ avc_log #############
#audit(1388536637.019:197): avc:  denied  { call } for  pid=7515 comm="wlandutservice" scontext=u:r:wlandutservice:s0 tcontext=u:r:servicemanager:s0 tclass=binder
#audit(1388536637.019:198): avc:  denied  { transfer } for  pid=7515 comm="wlandutservice" scontext=u:r:wlandutservice:s0 tcontext=u:r:servicemanager:s0 tclass=binder
#avc:  denied  { add } for service=WlanDutService scontext=u:r:wlandutservice:s0 tcontext=u:object_r:system_app_service:s0 tclass=service_manager
#audit(1388541996.419:192): avc:  denied  { net_admin } for  pid=12480 comm="wlandutservice" capability=12  scontext=u:r:wlandutservice:s0 tcontext=u:r:wlandutservice:s0 tclass=capability
#audit(1388541996.419:192): arch=40000028 syscall=54 per=800000 success=yes exit=0 a0=c a1=89f0 a2=b6b50080 a3=bedd0030 items=0 ppid=1 pid=12480 auid=4294967295 uid=1000 gid=1010 euid=1000 suid=1000 fsuid=1000 egid=1010 sgid=1010 fsgid=1010 tty=(none) ses=4294967295 comm="wlandutservice" exe="/system/bin/wlandutservice" subj=u:r:wlandutservice:s0 key=(null)
#audit(1388542040.429:193): avc:  denied  { execute } for  pid=13056 comm="wlandutservice" name="sh" dev="mmcblk0p23" ino=737 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#audit(1388542040.429:193): avc:  denied  { read open } for  pid=13056 comm="wlandutservice" name="sh" dev="mmcblk0p23" ino=737 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#audit(1388542040.429:193): avc:  denied  { execute_no_trans } for  pid=13056 comm="wlandutservice" path="/system/bin/sh" dev="mmcblk0p23" ino=737 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#audit(1388542040.429:193): arch=40000028 syscall=11 per=800000 success=yes exit=0 a0=b6f4bdbf a1=bed90378 a2=bedd07dc a3=fffffe94 items=2 ppid=12480 pid=13056 auid=4294967295 uid=1000 gid=1010 euid=1000 suid=1000 fsuid=1000 egid=1010 sgid=1010 fsgid=1010 tty=(none) ses=4294967295 comm="sh" exe="/system/bin/sh" subj=u:r:wlandutservice:s0 key=(null)
#audit(1388542040.429:193): argc=3 a0="sh" a1="-c" a2=63686D6F6420373737202F646174612F6977
#audit(1388542040.429:193):  cwd="/"
#audit(1388542040.429:193): item=0 name="/system/bin/sh" inode=737 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:shell_exec:s0
#audit(1388542040.429:193): item=1 name=(null) inode=590 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:system_file:s0
#audit(1388542040.439:194): avc:  denied  { execute_no_trans } for  pid=13056 comm="sh" path="/system/bin/toolbox" dev="mmcblk0p23" ino=776 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:system_file:s0 tclass=file
#audit(1388542040.439:194): arch=40000028 syscall=11 per=800000 success=yes exit=0 a0=b6b1717c a1=b6b17150 a2=b6b4f104 a3=b6f2713c items=2 ppid=12480 pid=13056 auid=4294967295 uid=1000 gid=1010 euid=1000 suid=1000 fsuid=1000 egid=1010 sgid=1010 fsgid=1010 tty=(none) ses=4294967295 comm="chmod" exe="/system/bin/toolbox" subj=u:r:wlandutservice:s0 key=(null)
#audit(1388542040.439:194): argc=3 a0="chmod" a1="777" a2="/data/iw"
#audit(1388542040.439:194):  cwd="/"
#audit(1388542040.439:194): item=0 name="/system/bin/chmod" inode=776 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:system_file:s0
#audit(1388542040.439:194): item=1 name=(null) inode=590 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:system_file:s0
#audit(1388542040.469:195): avc:  denied  { open } for  pid=13056 comm="chmod" name="iw" dev="mmcblk0p26" ino=28 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
#audit(1388542040.469:195): arch=40000028 syscall=322 per=800000 success=yes exit=3 a0=ffffff9c a1=be9738cc a2=20000 a3=0 items=1 ppid=12480 pid=13056 auid=4294967295 uid=1000 gid=1010 euid=1000 suid=1000 fsuid=1000 egid=1010 sgid=1010 fsgid=1010 tty=(none) ses=4294967295 comm="chmod" exe="/system/bin/toolbox" subj=u:r:wlandutservice:s0 key=(null)
#audit(1388542040.469:195):  cwd="/"
#audit(1388542040.469:195): item=0 name="/data/iw" inode=28 dev=b3:1a mode=0100600 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:system_data_file:s0
#audit(1388542040.469:196): avc:  denied  { setattr } for  pid=13056 comm="chmod" name="iw" dev="mmcblk0p26" ino=28 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
#audit(1388542040.469:196): arch=40000028 syscall=94 per=800000 success=yes exit=0 a0=3 a1=1ff a2=20000 a3=0 items=1 ppid=12480 pid=13056 auid=4294967295 uid=1000 gid=1010 euid=1000 suid=1000 fsuid=1000 egid=1010 sgid=1010 fsgid=1010 tty=(none) ses=4294967295 comm="chmod" exe="/system/bin/toolbox" subj=u:r:wlandutservice:s0 key=(null)
#audit(1388542040.469:196): item=0 name=(null) inode=28 dev=b3:1a mode=0100600 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:system_data_file:s0
#audit(1388542046.199:197): avc:  denied  { execute } for  pid=13174 comm="Binder_3" name="sh" dev="mmcblk0p23" ino=737 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#audit(1388542046.199:197): avc:  denied  { read open } for  pid=13174 comm="Binder_3" name="sh" dev="mmcblk0p23" ino=737 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#audit(1388542046.199:197): avc:  denied  { execute_no_trans } for  pid=13174 comm="Binder_3" path="/system/bin/sh" dev="mmcblk0p23" ino=737 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:shell_exec:s0 tclass=file
#audit(1388542046.199:197): arch=40000028 syscall=11 per=800000 success=yes exit=0 a0=b6f4bdbf a1=b65bf950 a2=bedd07dc a3=fffffe94 items=2 ppid=12480 pid=13174 auid=4294967295 uid=1000 gid=1010 euid=1000 suid=1000 fsuid=1000 egid=1010 sgid=1010 fsgid=1010 tty=(none) ses=4294967295 comm="sh" exe="/system/bin/sh" subj=u:r:wlandutservice:s0 key=(null)
#audit(1388542046.199:197): argc=3 a0="sh" a1="-c" a2="netcfg"
#audit(1388542046.199:197):  cwd="/"
#audit(1388542046.199:197): item=0 name="/system/bin/sh" inode=737 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:shell_exec:s0
#audit(1388542046.199:197): item=1 name=(null) inode=590 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:system_file:s0
# avc:  denied  { write } for  pid=4942 comm="wlandutservice" name="fwmarkd" dev="tmpfs" ino=9065 scontext=u:r:wlandutservice:s0 tcontext=u:object_r:fwmarkd_socket:s0 tclass=sock_file
# avc:  denied  { connectto } for  pid=5127 comm="wlandutservice" path="/dev/socket/property_service" scontext=u:r:wlandutservice:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket permissive=1

#line 1 "vendor/samsung/common/sepolicy/slsi_common/argosd.te"
#
# argosd
#

############ aosp and sec_common #############
########## type and macro.

type argosd, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type argosd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 10

#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow init argosd_exec:file { getattr open read execute };
#line 10
allow init argosd:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow argosd argosd_exec:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow argosd init:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
dontaudit init argosd:process noatsecure;
#line 10
# XXX dontaudit candidate but requires further study.
#line 10
allow init argosd:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition init argosd_exec:process argosd;
#line 10

#line 10

#line 10
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 10
type argosd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 10
type_transition argosd tmpfs:file argosd_tmpfs;
#line 10
allow argosd argosd_tmpfs:file { read write };
#line 10

#line 10


typeattribute argosd mlstrustedsubject;
# for B2C users
typeattribute argosd trusteddomain;
# temporary permissive to gather the log.
# permissive argosd;

########## dev_type
allow argosd radio_device:chr_file { { getattr open read ioctl lock } { open append write } };

# avc:  denied  { read write } for  pid=2941 comm="argosd" name="network_throughput" dev="tmpfs" ino=8249 scontext=u:r:argosd:s0 tcontext=u:object_r:radio_device:s0 tclass=chr_file
# avc:  denied  { open } for  pid=2941 comm="argosd" path="/dev/network_throughput" dev="tmpfs" ino=8249 scontext=u:r:argosd:s0 tcontext=u:object_r:radio_device:s0 tclass=chr_file
#line 1 "vendor/samsung/common/sepolicy/slsi_common/brcm_patchram_plus.te"
# brcm_patchram_plus
type brcm_patchram_plus, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type brcm_patchram_plus_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init brcm_patchram_plus_exec:file { getattr open read execute };
#line 4
allow init brcm_patchram_plus:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow brcm_patchram_plus brcm_patchram_plus_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow brcm_patchram_plus init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init brcm_patchram_plus:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init brcm_patchram_plus:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init brcm_patchram_plus_exec:process brcm_patchram_plus;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type brcm_patchram_plus_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition brcm_patchram_plus tmpfs:file brcm_patchram_plus_tmpfs;
#line 4
allow brcm_patchram_plus brcm_patchram_plus_tmpfs:file { read write };
#line 4

#line 4


allow brcm_patchram_plus bluetooth_efs_file:dir { open getattr read search ioctl };
allow brcm_patchram_plus bluetooth_efs_file:file { getattr open read ioctl lock };
allow brcm_patchram_plus kernel:system module_request;
allow brcm_patchram_plus uart_device:chr_file { { getattr open read ioctl lock } { open append write } };

# for B2C users
typeattribute brcm_patchram_plus trusteddomain;
typeattribute brcm_patchram_plus device_domain;
#line 1 "vendor/samsung/common/sepolicy/slsi_common/cbd.te"
# cbd
type cbd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type cbd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init cbd_exec:file { getattr open read execute };
#line 4
allow init cbd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow cbd cbd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow cbd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init cbd:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init cbd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init cbd_exec:process cbd;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type cbd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition cbd tmpfs:file cbd_tmpfs;
#line 4
allow cbd cbd_tmpfs:file { read write };
#line 4

#line 4


type_transition cbd device:chr_file radio_device;

allow cbd bin_nv_data_efs_file:file { { getattr open read ioctl lock } { open append write } };
allow cbd block_device:dir { open getattr read search ioctl };
allow cbd cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow cbd device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow cbd efs_file:dir { open getattr read search ioctl };
allow cbd init:unix_stream_socket connectto;
allow cbd kernel:system syslog_read;
allow cbd log_device:chr_file { getattr open read ioctl lock };
allow cbd media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow cbd media_rw_data_file:dir { { open getattr read search ioctl } add_name write };
allow cbd media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cbd media_rw_data_file:file { { getattr open read ioctl lock } { open append write } };
allow cbd mif_device:chr_file { getattr open read ioctl lock };
allow cbd mif_device:chr_file { open append write };
allow cbd nv_core_efs_file:file { getattr open read ioctl lock };
allow cbd property_socket:sock_file { open append write };
allow cbd radio:file { getattr open read ioctl lock };
allow cbd radio_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cbd radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow cbd radioblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow cbd emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow cbd rild_prop:property_service set;
allow cbd rootfs:file entrypoint;
allow cbd sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow cbd sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cbd sdcard_type:file { open append write };
#neverallow Google CTS-android-5.0.2_r1 : remove mknod, allow cbd self:capability { setuid mknod dac_override };
allow cbd self:capability { setuid dac_override sys_boot };

allow cbd self:capability2 { syslog };
allow cbd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow cbd spi_boot_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow cbd sysfs:file { open append write };
allow cbd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow cbd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow cbd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow cbd system_file:file { getattr execute execute_no_trans };
allow cbd uart_device:chr_file { { getattr open read ioctl lock } { open append write } };
#neverallow Google CTS-android-5.0.2_r1 :allow cbd usbfs:filesystem mount;
allow cbd usbfs:dir { open getattr read search ioctl };


#line 49
allow cbd mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 49
allow cbd mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 49
# TODO: Figure out proper sockets
#line 49
allow cbd mobicoredaemon:unix_stream_socket connectto;
#line 49


# for B2C users
typeattribute cbd trusteddomain;
typeattribute cbd device_domain;

# modem secure check
# avc:  denied  { sys_boot } for  pid=3103 comm="cbd" capability=22  scontext=u:r:cbd:s0 tcontext=u:r:cbd:s0 tclass=capability permissive=1
#line 1 "vendor/samsung/common/sepolicy/slsi_common/debug_interface_proxy.te"
#
# debug_interface_proxy
#

############ aosp and sec_common #############
########## type and macro.

type debug_interface_proxy, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type debug_interface_proxy_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 10

#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow init debug_interface_proxy_exec:file { getattr open read execute };
#line 10
allow init debug_interface_proxy:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow debug_interface_proxy debug_interface_proxy_exec:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow debug_interface_proxy init:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
dontaudit init debug_interface_proxy:process noatsecure;
#line 10
# XXX dontaudit candidate but requires further study.
#line 10
allow init debug_interface_proxy:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition init debug_interface_proxy_exec:process debug_interface_proxy;
#line 10

#line 10

#line 10
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 10
type debug_interface_proxy_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 10
type_transition debug_interface_proxy tmpfs:file debug_interface_proxy_tmpfs;
#line 10
allow debug_interface_proxy debug_interface_proxy_tmpfs:file { read write };
#line 10

#line 10


#line 11
allow debug_interface_proxy property_socket:sock_file write;
#line 11
allow debug_interface_proxy init:unix_stream_socket connectto;
#line 11


# for B2C users
typeattribute debug_interface_proxy trusteddomain;
# temporary permissive to gather the log.
# permissive debug_interface_proxy;

########## self and domain_type
allow debug_interface_proxy newAttr33:dir { open getattr read search ioctl };
allow debug_interface_proxy newAttr33:{ file lnk_file } { getattr open read ioctl lock };

########## dev_type
allow debug_interface_proxy mif_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow debug_interface_proxy newAttr59:dir { open getattr read search ioctl };
allow debug_interface_proxy newAttr59:{ file lnk_file } { getattr open read ioctl lock };
allow debug_interface_proxy dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow debug_interface_proxy dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow debug_interface_proxy system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow debug_interface_proxy system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow debug_interface_proxy system_file:file execute_no_trans;
allow debug_interface_proxy msockets_socket:dir { open search write add_name remove_name };
allow debug_interface_proxy msockets_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow debug_interface_proxy sdcard_external:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow debug_interface_proxy sdcard_external:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow debug_interface_proxy system_prop:property_service set;

# avc:  denied  { set } for property=dev.silentlog.on scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=2946 comm="debug_interface" name="/" dev="mmcblk0p21" ino=2 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { add_name } for  pid=2946 comm="debug_interface" name="dipconfs" scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { create } for  pid=2946 comm="debug_interface" name="dipconfs" scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { setattr } for  pid=2946 comm="debug_interface" name="dipconfs" dev="mmcblk0p21" ino=130820 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { read } for  pid=2946 comm="debug_interface" name="dipconfs" dev="mmcblk0p21" ino=130820 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { open } for  pid=2946 comm="debug_interface" path="/data/dipconfs" dev="mmcblk0p21" ino=130820 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { create } for  pid=2946 comm="debug_interface" name="Default.conf" scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { write open } for  pid=2946 comm="debug_interface" path="/data/dipconfs/Default.conf" dev="mmcblk0p21" ino=130821 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { write } for  pid=2946 comm="debug_interface" name="property_service" dev="tmpfs" ino=6961 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file
# avc:  denied  { connectto } for  pid=2946 comm="debug_interface" path="/dev/socket/property_service" scontext=u:r:debug_interface_proxy:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket
# avc:  denied  { write } for  pid=2946 comm="debug_interface" name="msockets" dev="tmpfs" ino=6954 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:msockets_socket:s0 tclass=dir
# avc:  denied  { add_name } for  pid=2946 comm="debug_interface" name="dip_cmd" scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:msockets_socket:s0 tclass=dir
# avc:  denied  { create } for  pid=2946 comm="debug_interface" name="dip_cmd" scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:msockets_socket:s0 tclass=sock_file
# avc:  denied  { write } for  pid=2993 comm="debug_interface" name="modem_status" dev="tmpfs" ino=7020 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:msockets_socket:s0 tclass=sock_file
# avc:  denied  { write } for  pid=2946 comm="debug_interface" name="modem_AT_RMM" dev="tmpfs" ino=4651 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:msockets_socket:s0 tclass=sock_file
# avc:  denied  { connectto } for  pid=2946 comm="debug_interface" path="/dev/socket/msockets/modem_AT_RMM" scontext=u:r:debug_interface_proxy:s0 tcontext=u:r:mmd:s0 tclass=unix_stream_socket
# avc:  denied  { setattr } for  pid=2998 comm="mld" name="old" dev="mmcblk0p21" ino=392478 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=dir SEPF_SM-N910C_5.0_0001
# avc:  denied  { unlink } for  pid=3015 comm="rm" name="2014-11-27_20h42m43s_app.meta.mldlog.00000.mldz.log" dev="mmcblk0p21" ino=392480 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file SEPF_SM-N910C_5.0_0001
# avc:  denied  { rename } for  pid=3034 comm="mv" name="2014-11-27_20h44m31s_radio.meta.mldlog.00000.mldz.log" dev="mmcblk0p21" ino=392484 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file SEPF_SM-N910C_5.0_0001
# avc:  denied  { create } for  pid=2997 comm="mld" name="2014-11-27_20h45m44s_radio.meta.mldlog.00000.mldz.log" scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file SEPF_SM-N910C_5.0_0001
# avc:  denied  { unlink } for  pid=12207 comm="rm" name="2014-11-27_20h44m31s_app.meta.mldlog.00000.mldz.log" dev="mmcblk0p21" ino=392483 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file SEPF_SM-N910C_5.0_0001
# avc:  denied  { rename } for  pid=12218 comm="mv" name="2014-11-27_20h45m44s_app.meta.mldlog.00000.mldz.log" dev="mmcblk0p21" ino=392481 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file SEPF_SM-N910C_5.0_0001
# avc:  denied  { create } for  pid=29093 comm="mld" name="2014-11-27_20h44m31s_app.meta.mldlog.00000.mldz.log" scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:dumplog_data_file:s0 tclass=file SEPF_SM-N910C_5.0_0001
# avc:  denied  { execute_no_trans } for  pid=29092 comm="debug_interface" path="/system/bin/mld" dev="mmcblk0p18" ino=674 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_file:s0 tclass=file SEPF_SM-N910C_5.0_0001
# avc:  denied  { execute_no_trans } for  pid=2943 comm="sh" path="/system/bin/toolbox" dev="mmcblk0p18" ino=1109 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:system_file:s0 tclass=file
# avc:  denied  { write } for  pid=2872 comm="debug_interface" name="/" dev="sdcardfs" ino=1 scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:vfat:s0 tclass=dir
# avc:  denied  { create } for  pid=2889 comm="debug_interface" name="modem_trace" scontext=u:r:debug_interface_proxy:s0 tcontext=u:object_r:vfat:s0 tclass=dir 
#line 1 "vendor/samsung/common/sepolicy/slsi_common/diagexe.te"
# diagexe
type diagexe, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type diagexe_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init diagexe_exec:file { getattr open read execute };
#line 4
allow init diagexe:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow diagexe diagexe_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow diagexe init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init diagexe:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init diagexe:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init diagexe_exec:process diagexe;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type diagexe_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition diagexe tmpfs:file diagexe_tmpfs;
#line 4
allow diagexe diagexe_tmpfs:file { read write };
#line 4

#line 4


#neverallow Google CTS-android-5.0.2_r1 :allow diagexe device:chr_file rw_file_perms;
allow diagexe init:unix_stream_socket connectto;
allow diagexe media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow diagexe media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow diagexe mif_device:chr_file { read write open };
allow diagexe property_socket:sock_file write;
allow diagexe self:capability { setuid dac_override };
allow diagexe sysfs_sec:file { { getattr open read ioctl lock } { open append write } };
allow diagexe sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow diagexe shell_exec:file { read execute open execute_no_trans };
allow diagexe system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow diagexe system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow diagexe system_data_file:sock_file { create unlink };
allow diagexe system_file:file execute_no_trans;
allow diagexe system_prop:property_service set;
allow diagexe usb_serial_device:chr_file { read write ioctl open };

############ avc_log #############
# avc:  denied  { search } for  pid=10921 comm="diagexe" name="/" dev="sdcardfs" ino=262149 scontext=u:r:diagexe:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir permissive=1
#line 1 "vendor/samsung/common/sepolicy/slsi_common/exyrngd.te"
#
# exyrngd
#

############ aosp and sec_common #############
########## type and macro.

type exyrngd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type exyrngd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 10

#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow init exyrngd_exec:file { getattr open read execute };
#line 10
allow init exyrngd:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow exyrngd exyrngd_exec:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow exyrngd init:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
dontaudit init exyrngd:process noatsecure;
#line 10
# XXX dontaudit candidate but requires further study.
#line 10
allow init exyrngd:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition init exyrngd_exec:process exyrngd;
#line 10

#line 10

#line 10
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 10
type exyrngd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 10
type_transition exyrngd tmpfs:file exyrngd_tmpfs;
#line 10
allow exyrngd exyrngd_tmpfs:file { read write };
#line 10

#line 10


# for B2C users
typeattribute exyrngd trusteddomain;
# temporary permissive to gather the log.
# permissive exyrngd;

########## self and domain_type
allow exyrngd self:capability sys_admin;

########## fs_type
########## dev_type
#neverallow Google CTS-android-5.0.2_r1 :allow exyrngd hw_random_device:chr_file r_file_perms;

########## file_type
########## etc_type
########## known issue.

############ avc_log #############
#avc:  denied  { read } for  pid=3715 comm="exyrngd" name="hw_random" dev="tmpfs" ino=7494 scontext=u:r:exyrngd:s0 tcontext=u:object_r:hw_random_device:s0 tclass=chr_file SEPF_SM-G900H_5.0_0001
#avc:  denied  { open } for  pid=3715 comm="exyrngd" path="/dev/hw_random" dev="tmpfs" ino=7494 scontext=u:r:exyrngd:s0 tcontext=u:object_r:hw_random_device:s0 tclass=chr_file SEPF_SM-G900H_5.0_0001
#arch=40000028 syscall=322 per=800000 success=yes exit=3 a0=ffffff9c a1=be958750 a2=20000 a3=0 items=1 ppid=1 p
#id=3715 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="exyrngd" exe="/system/bin/exyrngd" sub
#j=u:r:exyrngd:s0 key=(null)
#cwd="/"
#item=0 name="/dev/hw_random" inode=7494 dev=00:0d mode=020440 ouid=0 ogid=1000 rdev=0a:b7 obj=u:object_r:hw_random_device:s0
#avc:  denied  { sys_admin } for  pid=3733 comm="exyrngd" capability=21  scontext=u:r:exyrngd:s0 tcontext=u:r:exyrngd:s0 tclass=capability SEPF_SM-G900H_5.0_0001
#arch=40000028 syscall=54 per=800000 success=yes exit=0 a0=4 a1=40085203 a2=b6c19020 a3=bed75338 items=0 ppid=1 pid=3733 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="exyrngd" exe="/system/bin/exyrngd"
#subj=u:r:exyrngd:s0 key=(null)

#line 1 "vendor/samsung/common/sepolicy/slsi_common/lhd.te"
#
# lhd
#

############ aosp and sec_common #############
########## type and macro.

type lhd, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr92, newAttr93, newAttr94;
type lhd_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 10

#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow init lhd_exec:file { getattr open read execute };
#line 10
allow init lhd:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow lhd lhd_exec:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow lhd init:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
dontaudit init lhd:process noatsecure;
#line 10
# XXX dontaudit candidate but requires further study.
#line 10
allow init lhd:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition init lhd_exec:process lhd;
#line 10

#line 10

#line 10
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 10
type lhd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 10
type_transition lhd tmpfs:file lhd_tmpfs;
#line 10
allow lhd lhd_tmpfs:file { read write };
#line 10

#line 10


#line 11
typeattribute lhd netdomain;
#line 11


# for B2C users
typeattribute lhd trusteddomain;
# temporary permissive to gather the log.
# permissive lhd;

########## self and domain_type
########## fs_type
allow lhd sysfs:file { { getattr open read ioctl lock } { open append write } };
allow lhd sysfs_sec:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow lhd sysfs_sec:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow lhd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow lhd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow lhd bbd_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow lhd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow lhd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow lhd system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow lhd port:tcp_socket name_bind;
allow lhd node:tcp_socket node_bind;

########## known issue.

############ avc_log #############
# avc:  denied  { read write } for  pid=2947 comm="lhd" name="ttyBCM0" dev="tmpfs" ino=4042 scontext=u:r:lhd:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# avc:  denied  { open } for  pid=2947 comm="lhd" path="/dev/ttyBCM0" dev="tmpfs" ino=4042 scontext=u:r:lhd:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# avc:  denied  { read write } for  pid=2947 comm="lhd" name="bbd_control" dev="tmpfs" ino=4069 scontext=u:r:lhd:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# avc:  denied  { open } for  pid=2947 comm="lhd" path="/dev/bbd_control" dev="tmpfs" ino=4069 scontext=u:r:lhd:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# avc:  denied  { write } for  pid=2947 comm="lhd" name="gps" dev="mmcblk0p21" ino=654082 scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { add_name } for  pid=2947 comm="lhd" name=".lhd.lock" scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
# avc:  denied  { create } for  pid=2947 comm="lhd" name=".lhd.lock" scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { write open } for  pid=2947 comm="lhd" path="/data/system/gps/.lhd.lock" dev="mmcblk0p21" ino=654086 scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { lock } for  pid=2947 comm="lhd" path="/data/system/gps/.lhd.lock" dev="mmcblk0p21" ino=654086 scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { create } for  pid=2947 comm="lhd" name="LheConsole.toAsic" scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=fifo_file
# avc:  denied  { read } for  pid=2947 comm="lhd" name="LheConsole.toAsic" dev="mmcblk0p21" ino=654091 scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=fifo_file
# avc:  denied  { open } for  pid=2947 comm="lhd" path="/data/system/gps/LheConsole.toAsic" dev="mmcblk0p21" ino=654091 scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=fifo_file
# avc:  denied  { write } for  pid=2947 comm="lhd" name="LheConsole.fromAsic" dev="mmcblk0p21" ino=654092 scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=fifo_file
# avc:  denied  { setattr } for  pid=3265 comm="lhd" name=".pipe.gpsd_to_lhd.to_client" dev="mmcblk0p21" ino=654093 scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=fifo_file
# avc:  denied  { getattr } for  pid=2947 comm="lhd" path="/data/system/gps/LheConsole.fromAsic" dev="mmcblk0p21" ino=654092 scontext=u:r:lhd:s0 tcontext=u:object_r:system_data_file:s0 tclass=fifo_file
# avc:  denied  { name_bind } for  pid=2947 comm="lhd" src=6477 scontext=u:r:lhd:s0 tcontext=u:object_r:port:s0 tclass=tcp_socket
# avc:  denied  { node_bind } for  pid=2947 comm="lhd" src=6477 scontext=u:r:lhd:s0 tcontext=u:object_r:node:s0 tclass=tcp_socket
# avc:  denied  { name_connect } for  pid=2934 comm="lhd" dest=6477 scontext=u:r:lhd:s0 tcontext=u:object_r:port:s0 tclass=tcp_socket permissive=1
# avc:  denied  { connectto } for  pid=2934 comm="lhd" path="/dev/socket/fwmarkd" scontext=u:r:lhd:s0 tcontext=u:r:netd:s0 tclass=unix_stream_socket permissive=1
# avc:  denied  { write } for  pid=2934 comm="lhd" name="fwmarkd" dev="tmpfs" ino=5539 scontext=u:r:lhd:s0 tcontext=u:object_r:fwmarkd_socket:s0 tclass=sock_file permissive=1


#line 1 "vendor/samsung/common/sepolicy/slsi_common/mlexe.te"
# mlexe
type mlexe, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type mlexe_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init mlexe_exec:file { getattr open read execute };
#line 4
allow init mlexe:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow mlexe mlexe_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow mlexe init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
dontaudit init mlexe:process noatsecure;
#line 4
# XXX dontaudit candidate but requires further study.
#line 4
allow init mlexe:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init mlexe_exec:process mlexe;
#line 4

#line 4

#line 4
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 4
type mlexe_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 4
type_transition mlexe tmpfs:file mlexe_tmpfs;
#line 4
allow mlexe mlexe_tmpfs:file { read write };
#line 4

#line 4


allow mlexe media_rw_data_file:dir { open getattr read search ioctl };
allow mlexe mif_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mlexe rild:unix_stream_socket connectto;
allow mlexe sdcard_type:dir { open getattr read search ioctl };
allow mlexe self:capability dac_override;
allow mlexe self:capability setuid;
allow mlexe shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow mlexe sysfs:file { open append write };
allow mlexe sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow mlexe system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mlexe system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# system_file is /system which is mounted read only
# thus create or write perms make no sense
allow mlexe system_file:file { getattr open read ioctl lock };
allow mlexe system_file:file { getattr execute execute_no_trans };

# for B2C users
typeattribute mlexe trusteddomain;
typeattribute mlexe device_domain;
#line 1 "vendor/samsung/common/sepolicy/vmware/device.te"
type vmware_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
#line 1 "vendor/samsung/common/sepolicy/vmware/file.te"
# VMWare
type sysfs_vmware_writable, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;

#line 1 "vendor/samsung/common/sepolicy/vmware/vmware_app.te"

# domain for vmware_app
type vmware_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr13, newAttr12, newAttr14, newAttr10, newAttr15, newAttr11, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;

# domain for vmware_app

#line 6
typeattribute vmware_app appdomain;
#line 6
# Label ashmem objects with our own unique type.
#line 6

#line 6
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 6
type vmware_app_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 6
type_transition vmware_app tmpfs:file vmware_app_tmpfs;
#line 6
allow vmware_app vmware_app_tmpfs:file { read write };
#line 6

#line 6
# Map with PROT_EXEC.
#line 6
allow vmware_app vmware_app_tmpfs:file execute;
#line 6

allow vmware_app kernel:unix_dgram_socket sendto;
allow vmware_app self:netlink_route_socket *;
allow vmware_app self:socket *;
allow vmware_app self:tcp_socket *;
allow vmware_app self:udp_socket *;
#neverallow Google CTS-android-5.0.2_r1 : allow vmware_app self:binder *;
#neverallow Google CTS-android-5.0.2_r1 : allow vmware_app sysfs:file rw_file_perms;
allow vmware_app vmwared:unix_stream_socket connectto;

allow vmware_app app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vmware_app gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 17
allow vmware_app app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vmware_app gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18
allow vmware_app app_library_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vmware_app ashmem_device:chr_file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow vmware_app devpts:chr_file { getattr open read ioctl lock };
allow vmware_app dnsproxyd_socket:sock_file write;
allow vmware_app init:unix_stream_socket connectto;
#neverallow Google CTS-android-5.0.2_r1 : allow vmware_app kernel:system syslog_read;
allow vmware_app kgsl_device:chr_file { { { getattr open read ioctl lock } { open append write } } execute };
allow vmware_app knox_untrusted_app:binder call;
allow vmware_app netd:unix_stream_socket connectto;
allow vmware_app node:tcp_socket node_bind;
allow vmware_app node:udp_socket node_bind;
allow vmware_app port:tcp_socket *;
allow vmware_app port:udp_socket *;
#neverallow Google CTS-android-5.0.2_r1 : allow vmware_app property_socket:sock_file write;
allow vmware_app sdcard_internal:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vmware_app sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vmware_app secure_storage:dir { open getattr read search ioctl };
allow vmware_app secure_storage:file { getattr open read ioctl lock };
allow vmware_app surfaceflinger:unix_stream_socket *;
allow vmware_app system:unix_stream_socket *;
#neverallow Google CTS-android-5.0.2_r1 : allow vmware_app system_domain: binder *;
allow vmware_app system_file:file { getattr execute execute_no_trans };
allow vmware_app zygote:fd use;
allow vmware_app zygote:process sigchld;
allow vmware_app zygote_exec:file execute;
allow vmware_app zygote_tmpfs:file read;

# for B2C users
typeattribute vmware_app trusteddomain;
typeattribute vmware_app trusted_app_domain;
#line 1 "vendor/samsung/common/sepolicy/vmware/vmwared.te"
type vmwared, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr48, newAttr49, newAttr50, newAttr86, newAttr87, newAttr92, newAttr93, newAttr94;
type vmwared_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init vmwared_exec:file { getattr open read execute };
#line 3
allow init vmwared:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow vmwared vmwared_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow vmwared init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
dontaudit init vmwared:process noatsecure;
#line 3
# XXX dontaudit candidate but requires further study.
#line 3
allow init vmwared:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init vmwared_exec:process vmwared;
#line 3

#line 3

#line 3
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 3
type vmwared_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;
#line 3
type_transition vmwared tmpfs:file vmwared_tmpfs;
#line 3
allow vmwared vmwared_tmpfs:file { read write };
#line 3

#line 3


allow vmwared domain:dir { open getattr read search ioctl };
allow vmwared domain:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow vmwared domain:lnk_file { getattr open read ioctl lock };
allow vmwared domain:unix_stream_socket getattr;
allow vmwared domain:netlink_kobject_uevent_socket getattr;
allow vmwared domain:fifo_file getattr;
allow vmwared domain:file getattr;
allow vmwared exec_type:file { getattr execute execute_no_trans };

# allow vmwared self:capability { setuid sys_module chown setgid net_raw net_admin dac_read_search sys_ptrace };
# allow vmwared self:netlink_route_socket { write getattr setopt bind create nlmsg_read read };

#neverallow Google CTS-android-5.0.2_r1 : allow vmwared self:capability *;
allow vmwared self:netlink_route_socket *;

allow vmwared exec_type:unix_stream_socket getattr;
allow vmwared exec_type:fifo_file getattr;
allow vmwared exec_type:socket getattr;
#neverallow Google CTS-android-5.0.2_r1 : allow vmwared { dev_type - hw_random_device }:chr_file getattr;
allow vmwared newAttr29:chr_file getattr;
#neverallow Google CTS-android-5.0.2_r1 : allow vmwared file_type:file getattr;
allow vmwared newAttr63:file getattr;

allow vmwared adbd:tcp_socket getattr;
allow vmwared mpdecision:netlink_kobject_uevent_socket getattr;
allow vmwared mpdecision:unix_stream_socket getattr;
allow vmwared netd:netlink_kobject_uevent_socket getattr;
allow vmwared netd:netlink_nflog_socket getattr;
allow vmwared netd:netlink_route_socket getattr;
allow vmwared netd:udp_socket getattr;
#allow vmwared thermald:netlink_kobject_uevent_socket getattr;

#allow vmwared thermald:unix_stream_socket getattr;
allow vmwared ueventd:netlink_kobject_uevent_socket getattr;
allow vmwared vold:netlink_kobject_uevent_socket getattr;
allow vmwared zygote:netlink_selinux_socket getattr;

allow vmwared adb_device:chr_file getattr;
allow vmwared audio_data_file:dir { open getattr read search ioctl };
allow vmwared audio_data_file:file getattr;
allow vmwared firmware:dir { open getattr read search ioctl };
allow vmwared firmware:file getattr;
allow vmwared netd:fifo_file getattr;
#allow vmwared thermald:fifo_file getattr;

allow vmwared app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vmwared gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 51
allow vmwared app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vmwared gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 52
allow vmwared app_library_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vmwared app_library_file:file { read getattr open };
allow vmwared cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vmwared cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vmwared dhcp_system_file:dir { open getattr read search ioctl };
allow vmwared dhcp_system_file:file getattr;
allow vmwared ppp_system_file:dir { open getattr read search ioctl };
allow vmwared ppp_system_file:file getattr;
allow vmwared runas_exec:file getattr;
allow vmwared shell_exec:file getattr;
allow vmwared sysfs:file write;
allow vmwared system_file:lnk_file getattr;
allow vmwared vmware_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow vmwared init:unix_stream_socket connectto;
allow vmwared property_socket:sock_file write;
allow vmwared selinuxfs:file getattr;
allow vmwared domain:socket getattr;

# for B2C users
typeattribute vmwared trusteddomain;
#neverallow Google CTS-android-5.0.2_r1 :typeattribute vmwared trusted_app_domain;
typeattribute vmwared system_domain;

#line 1 "vendor/samsung/common/sepolicy/adbd.te"
#
# adbd
#

############ aosp and sec_common #############
########## type and macro.
#neverallow by Google: binder_call(adbd, init)

#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow adbd system:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow system adbd:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow adbd system:fd use;
#line 8


#line 9
allow adbd dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 9
allow adbd dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 9
allow adbd dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 9
allow adbd bugreport_exec:file { execute execute_no_trans };
#line 9
allow adbd dumpstate_exec:file { execute execute_no_trans };
#line 9
allow adbd dumpsys_exec:file { execute execute_no_trans };
#line 9



########## self and domain_type
allow adbd init:process sigchld;
allow adbd kernel:process setsched;
allow adbd self:capability { net_raw fowner dac_override sys_boot sys_admin };
allow adbd self:tcp_socket *;
allow adbd self:unix_stream_socket *;

########## fs_type
allow adbd cgroup:dir { write add_name create };
allow adbd functionfs:file { read write ioctl open };
allow adbd rootfs:file { getattr open read ioctl lock };
allow adbd sysrq_proc:file { open append write };
#neverallow by Google: allow adbd tmpfs:file execute;

########## dev_type
allow adbd graphics_device:dir search;
allow adbd graphics_device:chr_file { getattr open read ioctl lock };

########## file_type
allow adbd adb_keys_file:dir { open getattr read search ioctl };
allow adbd app_data_file:file { getattr open read ioctl lock };
allow adbd gad_untrusted_app_data_file:file { getattr open read ioctl lock };
#line 33
allow adbd app_data_file:lnk_file { getattr open read ioctl lock };
allow adbd gad_untrusted_app_data_file:lnk_file { getattr open read ioctl lock };
#line 34
allow adbd app_library_file:file { getattr open read ioctl lock };
allow adbd at_distributor_exec:file getattr;
allow adbd bintvoutservice_exec:file getattr;
allow adbd cache_file:dir { open search write add_name remove_name };
allow adbd cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow adbd carrier_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow adbd carrier_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } }; 
allow adbd dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow adbd dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow adbd media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow adbd media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow adbd media_rw_data_file:file { { getattr open read ioctl lock } { open append write } };
allow adbd platform_app_data_file:dir { open getattr read search ioctl };
allow adbd platform_app_data_file:file { getattr open read ioctl lock };
allow adbd radio_data_file:dir { open getattr read search ioctl };
allow adbd radio_data_file:file { getattr open read ioctl lock };
allow adbd runas_exec:file { getattr open read ioctl lock };
allow adbd shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow adbd shell_data_file:lnk_file { getattr open read ioctl lock };
allow adbd system_data_file:dir { open getattr read search ioctl };
allow adbd system_data_file:file { open append write };
allow adbd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow adbd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow adbd zygote_exec:file { getattr execute execute_no_trans };


########## etc_type
allow adbd node:tcp_socket node_bind;
allow adbd port:tcp_socket name_bind;
allow adbd port:tcp_socket name_connect;

########## known issue.
#ddms
allow adbd self:capability2 syslog;

# Remove adbd write permission to system_file; NSA version already has read permission for file.
allow adbd system_file:lnk_file getattr;

# Dont audit adb pull on audit logs
dontaudit adbd audit_log:file *;
dontaudit adbd audit_log:dir *;

#property service
allow adbd system_prop:property_service set;

# for secure_adb
allow adbd init:unix_stream_socket { accept listen read write };

# for CTS
allow adbd powervr_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow adbd ump_device:chr_file { { getattr open read ioctl lock } { open append write } };

# MobileCare Log
allow adbd obb_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow adbd obb_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Reads /proc/pid entries to check that no unexpected root
# processes are running.
allow adbd newAttr33:dir { open getattr read search ioctl };
allow adbd newAttr33:{ file lnk_file } { getattr open read ioctl lock };

# Walk the file tree, stat any file.
allow adbd newAttr54:dir { open getattr read search ioctl };
allow adbd newAttr74:dir { open getattr read search ioctl };
allow adbd dev_type:dir { open getattr read search ioctl };
allow adbd newAttr54:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } getattr;
allow adbd newAttr30:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } getattr;
allow adbd newAttr74:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } getattr;
allow adbd dev_type:lnk_file read;

# S Pen issue from MSC
allow adbd input_device:chr_file { read write open };


############ qcom_common #############
########## type and macro.

########## self and domain_type

########## fs_type

########## dev_type

########## file_type
allow adbd ATFWD-daemon_exec:file getattr;


########## etc_type

########## known issue.


############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402361615.501:234): avc:  denied  { write open } for  pid=7367 comm="adbd" name="tmp2765018157626002689.txt" dev="mmcblk0p25" ino=522447 #scontext=u:r:adbd:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402361615.541:235): avc:  denied  { setattr } for  pid=7367 comm="adbd" name="tmp2765018157626002689.txt" dev="mmcblk0p25" ino=522447 #scontext=u:r:adbd:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402361615.811:236): avc:  denied  { read } for  pid=7383 comm="adbd" name="tmp_testPushPull.txt" dev="mmcblk0p25" ino=522448 scontext=u:r:adbd:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402361617.421:238): avc:  denied  { remove_name } for  pid=7455 comm="adbd" name="tmp4473150672272320086.txt" dev="mmcblk0p25" ino=522449 #scontext=u:r:adbd:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402361617.421:238): avc:  denied  { unlink } for  pid=7455 comm="adbd" name="tmp4473150672272320086.txt" dev="mmcblk0p25" ino=522449 #scontext=u:r:adbd:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402361618.621:241): avc:  denied  { create } for  pid=7503 comm="adbd" name="testDir" scontext=u:r:adbd:s0 tcontext=u:object_r:media_rw_data_file:s0 #tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016



#line 1 "vendor/samsung/common/sepolicy/app.te"
#
# appdomain
#

############ aosp and sec_common #############
########## type and macro.
########## self and domain_type
allow appdomain bluetooth:unix_stream_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow appdomain newAttr33:dir { open read search getattr };
allow appdomain newAttr33:{ file lnk_file } { open read getattr };

#neverallow by Google:(domain init:binder call;) 
#neverallow Google CTS : allow { appdomain -cts_appdomain } init:binder { call transfer };

#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -cts_appdomain }  init:unix_stream_socket { connectto getattr getopt read write };
allow appdomain init:unix_stream_socket { getattr getopt read write };

#Conflict with Good requirements
allow newAttr1 rild:unix_stream_socket connectto;

#neverallow by Google: (neverallow { appdomain -bluetooth } self:capability2 *;)
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -untrusteddomain -cts_appdomain }  self:capability2 syslog;
#neverallow by Google: allow appdomain self:netlink_socket create;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -cts_appdomain } self:netlink_socket create;
allow appdomain self:packet_socket create;
#Conflict with Good requirements
allow newAttr1 untrusteddomain:process ptrace;

allow domain self:{ sem msgq shm ipc } *;
allow domain self:msg *;
allow domain self:key *;
#neverallow by Google:  allow domain self:socket_class_set *;
allow domain self:{ socket rawip_socket packet_socket key_socket appletalk_socket tun_socket { tcp_socket udp_socket unix_stream_socket unix_dgram_socket } netlink_route_socket netlink_selinux_socket } *;

#neverallow by Google: (neverallow self ptrace, init, keystore, netd, app to noneapp, noatsecure for lmkd )
allow newAttr42 self:process *;
allow { keystore netd logd } self:process ~ptrace;
allow init self:process ~{ ptrace transition dyntransition };
allow lmkd self:process ~noatsecure;

########## fs_type
allow appdomain sysfs_app_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow appdomain dev_type:lnk_file read;
allow appdomain dev_type:dir { open getattr read search ioctl };
allow appdomain genlock_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow appdomain input_device:chr_file { { getattr open read ioctl lock } { open append write } };
#neverallow by Google:  allow appdomain socket_device:sock_file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -cts_appdomain } socket_device:sock_file rw_file_perms;
allow appdomain tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow appdomain usbaccessory_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow appdomain usb_bus_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow appdomain usb_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow appdomain zero_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow appdomain anr_data_file:file { getattr open read ioctl lock };
allow appdomain anr_data_file:dir { { open getattr read search ioctl } add_name write };
allow appdomain apk_data_file:lnk_file read;
#Conflict with Good requirements
allow newAttr1 app_data_file:file execute;
allow newAttr1 gad_untrusted_app_data_file:file execute;
#line 63
allow appdomain app_efs_file:dir { open getattr read search ioctl };
allow appdomain app_efs_file:file { getattr open read ioctl lock };
allow appdomain app_library_file:dir { execmod setattr { open getattr read search ioctl } };
allow appdomain app_library_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod setattr };
allow appdomain app_library_file:lnk_file read;
#Conflict with good requirements
allow newAttr1 app_public_data_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 app_public_data_type:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#Conflict with good requirements
allow newAttr1 asec_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 asec_apk_file:file { execmod { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } { getattr execute execute_no_trans } };
allow newAttr1 asec_public_file:file { execute execmod };

allow appdomain cache_backup_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow appdomain cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow appdomain cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow appdomain dalvikcache_data_file:dir { open getattr read search ioctl };
allow appdomain dalvikcache_data_file:lnk_file read;
#Conflict with good requirements
allow newAttr15 sec_efs_file:dir { open getattr read search ioctl };
allow newAttr15 sec_efs_file:file { getattr open read ioctl lock };

#neverallow by Google: allow appdomain efs_file:dir r_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -cts_appdomain } efs_file:dir r_dir_perms;
#Conflict with good requirements
allow newAttr1 efs_file:dir { open getattr search ioctl };

#neverallow by Google: allow appdomain efs_file:file r_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -cts_appdomain } efs_file:file r_file_perms;
#Conflict with good requirements
allow newAttr1 efs_file:file { getattr open ioctl lock };

allow appdomain exec_type:file { getattr open read ioctl lock };
#Conflict with good requirements
allow newAttr1 imei_efs_file:file { getattr open read ioctl lock };
allow newAttr1 imei_efs_file:dir { open getattr read search ioctl };

allow appdomain init_tmpfs:file read;
allow appdomain lptcp_data_file:sock_file { { getattr open read ioctl lock } { open append write } };
allow newAttr1 media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 media_rw_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } execute };
#Conflict with good requirements
allow newAttr1 obb_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 obb_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow newAttr1 radio_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow newAttr1 radio_data_file:file { { getattr open read ioctl lock } { open append write } };

#neverallow by Google: allow appdomain shell_data_file:dir create_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -cts_appdomain } shell_data_file:dir create_dir_perms;
#Conflict with good requirements
allow newAttr1 shell_data_file:dir { { open getattr read search ioctl } rmdir write add_name remove_name };

#neverallow by Google: allow appdomain shell_data_file:lnk_file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -cts_appdomain } shell_data_file:lnk_file create_file_perms;
#Conflict with good requirements
allow newAttr1 shell_data_file:lnk_file { { getattr open read ioctl lock } write };

allow appdomain system_app_data_file:file { getattr open read ioctl lock };
allow appdomain system_library_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow appdomain tmpfs_file_type:file { read write };
allow appdomain tombstone_data_file:dir { open getattr read search ioctl };
allow appdomain tombstone_data_file:file { getattr open read ioctl lock };

########## etc_type
allow appdomain node:{ udp_socket tcp_socket rawip_socket } node_bind;
#neverallow by Google: allow newAttr14 csc_prop:property_service set;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -untrusteddomain -shell -cts_appdomain } csc_prop:property_service set;


########## known issue.

# read access
#Conflict with good requirements
allow newAttr2 newAttr54:dir { open getattr read search ioctl };
allow newAttr1 newAttr54:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } getattr;
allow newAttr1 newAttr75:dir { open getattr read search ioctl };
allow newAttr1 newAttr75:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } getattr;

# Remove execute permission to untrusteddomain to satisfy assertion that domain cannot execute type it can write
#neverallow by Google: allow appdomain shell_data_file:file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -cts_appdomain } shell_data_file:file create_file_perms;
#Conflict with good requirements
allow newAttr1 shell_data_file:file { { getattr open read ioctl lock } write };
allow newAttr13 shell_data_file:file { getattr execute execute_no_trans };

# more perms
#neverallow by Google: allow { appdomain -untrustedappdomain -shell } self:netlink_kobject_uevent_socket *;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -untrusteddomain -shell -cts_appdomain } self:netlink_kobject_uevent_socket *;
allow newAttr14 system:tcp_socket { getattr read write };
#neverallow by Google: allow { appdomain -untrustedappdomain -shell } system_data_file:dir create_dir_perms;
#neverallow by Google: allow { appdomain -untrustedappdomain -shell } system_data_file:file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -untrusteddomain -shell -cts_appdomain } system_data_file:dir create_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -untrusteddomain -shell -cts_appdomain } system_data_file:file create_file_perms;
allow newAttr14 video_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Access SDcard.
allow newAttr1 sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Needed to close the zygote socket, which involves getopt / getattr 
# This should be deleted after b/12061011 is fixed
allow appdomain zygote:unix_stream_socket { getopt getattr }; 

#personal_page_app
#Conflict with good requirements
allow newAttr1 personal_page_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 personal_page_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#For samsung account
allow appdomain powervr_device:chr_file { { getattr open read ioctl lock } { open append write } };

# sysfs control for music.. used by google
allow appdomain sysfs_music_power_writable:file { { getattr open read ioctl lock } { open append write } };
# XXX need to find out sysfs labeling problem
#neverallow by Google: allow { appdomain -untrustedappdomain -shell }  sysfs:file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -untrustedappdomain -shell -cts_appdomain }  sysfs:file rw_file_perms;

### from NSA
# Communicate with system.
allow appdomain system:fifo_file { { getattr open read ioctl lock } { open append write } };
allow appdomain system:unix_stream_socket { read write setopt };

#line 185
# Call the server domain and optionally transfer references to it.
#line 185
allow appdomain system:binder { call transfer };
#line 185
# Allow the serverdomain to transfer references to the client on the reply.
#line 185
allow system appdomain:binder transfer;
#line 185
# Receive and use open files from the server.
#line 185
allow appdomain system:fd use;
#line 185

# Communicate with surfaceflinger.
allow appdomain surfaceflinger:unix_stream_socket { read write setopt };

#line 188
# Call the server domain and optionally transfer references to it.
#line 188
allow appdomain surfaceflinger:binder { call transfer };
#line 188
# Allow the serverdomain to transfer references to the client on the reply.
#line 188
allow surfaceflinger appdomain:binder transfer;
#line 188
# Receive and use open files from the server.
#line 188
allow appdomain surfaceflinger:fd use;
#line 188

# Read/write data files created by the platform apps if they
# were passed to the app via binder or local IPC.  Do not allow open.
allow appdomain platform_app_data_file:file { getattr read write };

# Appdomain interaction with isolated apps
#Conflict with good requirements

#line 195
allow newAttr1 isolated_app:dir { open getattr read search ioctl };
#line 195
allow newAttr1 isolated_app:{ file lnk_file } { getattr open read ioctl lock };
#line 195


#line 196
allow appdomain dnsproxyd_socket:sock_file write;
#line 196
allow appdomain netd:unix_stream_socket connectto;
#line 196

# Allow applications to communicate with drmserver over binder
#Conflict with good requirements

#line 199
# Call the server domain and optionally transfer references to it.
#line 199
allow newAttr1 drmserver:binder { call transfer };
#line 199
# Allow the serverdomain to transfer references to the client on the reply.
#line 199
allow drmserver newAttr1:binder transfer;
#line 199
# Receive and use open files from the server.
#line 199
allow newAttr1 drmserver:fd use;
#line 199


# Allow applications to communicate with mediaserver over binder

#line 202
# Call the server domain and optionally transfer references to it.
#line 202
allow appdomain mediaserver:binder { call transfer };
#line 202
# Allow the serverdomain to transfer references to the client on the reply.
#line 202
allow mediaserver appdomain:binder transfer;
#line 202
# Receive and use open files from the server.
#line 202
allow appdomain mediaserver:fd use;
#line 202


# Allow applications to make outbound tcp connections to any port
allow appdomain port_type:tcp_socket name_connect;


# Allow apps to see changes to the routing table.
allow appdomain self:netlink_route_socket { read bind create nlmsg_read ioctl getattr setattr getopt setopt shutdown };
#line 221

# Allow apps to use rawip sockets. This is needed for apps which execute
# /system/bin/ping, for example.
allow appdomain self:rawip_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# shell/system_app and dumpResetReason in android_os_Debug, /system/bin/resetreason
allow appdomain reset_reason_service_file:file { { getattr open read ioctl lock } { open append write } };

# untrusted_app : com.sec.musicstudio, com.sonosaurus, com.rhism.guitarism
# platform_app : com.samsung.android.sdk.professionalaudio.sample.simpleclient
allow appdomain jack_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow appdomain jack_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow appdomain { apaservice jackservice }:unix_dgram_socket sendto;

#line 234
allow appdomain jack_socket:sock_file write;
#line 234
allow appdomain jackservice:unix_stream_socket connectto;
#line 234


#SEC_SEforAndroid start : Conflict with good requirements
# import from /sepolicy/aosp/app.te
# App sandbox file accesses.
allow newAttr1 app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 240
allow newAttr1 app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow newAttr1 gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 241

# Access SDcard via the fuse mount.
allow newAttr1 fuse:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 fuse:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Access OBBs (vfat images) mounted by vold (b/17633509)
allow newAttr1 vfat:dir { open getattr read search ioctl };
allow newAttr1 vfat:file { getattr open read ioctl lock };

# Communication with other apps via fifos
allow newAttr1 newAttr1:fifo_file { { getattr open read ioctl lock } { open append write } };

# Execute the shell or other system executables.
allow newAttr1 shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

allow newAttr1 shell_data_file:file { write getattr };

# Use the Binder.
#Conflict with good requirements

#line 260
# Call the servicemanager and transfer references to it.
#line 260
allow newAttr1 servicemanager:binder { call transfer };
#line 260
# servicemanager performs getpidcon on clients.
#line 260
allow servicemanager newAttr1:dir search;
#line 260
allow servicemanager newAttr1:file { read open };
#line 260
allow servicemanager newAttr1:process getattr;
#line 260
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 260
# all domains in domain.te.
#line 260

# Perform binder IPC to binder services.

#line 262
# Call the server domain and optionally transfer references to it.
#line 262
allow newAttr1 binderservicedomain:binder { call transfer };
#line 262
# Allow the serverdomain to transfer references to the client on the reply.
#line 262
allow binderservicedomain newAttr1:binder transfer;
#line 262
# Receive and use open files from the server.
#line 262
allow newAttr1 binderservicedomain:fd use;
#line 262

# Perform binder IPC to other apps.

#line 264
# Call the server domain and optionally transfer references to it.
#line 264
allow newAttr1 newAttr1:binder { call transfer };
#line 264
# Allow the serverdomain to transfer references to the client on the reply.
#line 264
allow newAttr1 newAttr1:binder transfer;
#line 264
# Receive and use open files from the server.
#line 264
allow newAttr1 newAttr1:fd use;
#line 264


# Already connected, unnamed sockets being passed over some other IPC
# hence no sock_file or connectto permission. This appears to be how
# Chrome works, may need to be updated as more apps using isolated services
# are examined.
allow newAttr1 newAttr1:unix_stream_socket { getopt getattr read write shutdown };
#SEC_SEforAndroid end : Conflict with good requirements

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
#Conflict with good requirements
allow newAttr1 container_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr1 bbccontainer_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 281
allow newAttr1 container_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow newAttr1 bbccontainer_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 282

########## etc_type
########## known issue.

# fix build error - nsa 4.4 upgrade
# allow appdomain dev_type:dir_file_class_set getattr;
allow appdomain newAttr30:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } getattr;
allow newAttr7 newAttr33:dir { open getattr read search ioctl };
allow knox_untrusted_app newAttr34:dir { open getattr read search ioctl };
allow gad_untrusted_app newAttr39:dir { open getattr read search ioctl };
allow newAttr7 newAttr33:{ file lnk_file } { getattr open read ioctl lock };
allow knox_untrusted_app newAttr34:{ file lnk_file } { getattr open read ioctl lock };
allow gad_untrusted_app newAttr39:{ file lnk_file } { getattr open read ioctl lock };

### from NSA
# Use the Binder.
allow newAttr6 newAttr4:binder { call transfer };
allow newAttr6 newAttr4:binder transfer;
allow newAttr6 newAttr4:fd use;
allow knox_untrusted_app newAttr3:binder { call transfer };
allow knox_untrusted_app newAttr3:binder transfer;
allow knox_untrusted_app newAttr3:fd use;
allow gad_untrusted_app newAttr5:binder { call transfer };
allow gad_untrusted_app newAttr5:binder transfer;
allow gad_untrusted_app newAttr5:fd use;
allow knox_system_app newAttr11:binder { call transfer };
allow newAttr11 knox_system_app:binder transfer;
allow knox_system_app newAttr11:fd use;
allow newAttr11 knox_system_app:binder { call transfer };
allow knox_system_app newAttr11:binder transfer;
allow newAttr11 knox_system_app:fd use;

############ qcom_common #############
########## type and macro.

#line 316
allow system_app firmware:dir { open getattr read search ioctl };
allow s_system_app firmware:dir { open getattr read search ioctl };
#line 316
allow system_app firmware:{ file lnk_file } { getattr open read ioctl lock };
allow s_system_app firmware:{ file lnk_file } { getattr open read ioctl lock };
#line 316


########## self and domain_type
allow appdomain mpdecision:unix_stream_socket connectto;

########## fs_type
########## dev_type
allow appdomain kgsl_device:chr_file { { { getattr open read ioctl lock } { open append write } } execute };

########## file_type
#Conflict with good requirements
allow newAttr1 carrier_file:file { getattr open read ioctl lock };
allow newAttr1 carrier_file:dir { open getattr read search ioctl };

########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
#neverallow by Google: allow { appdomain -shell } graphics_device:chr_file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { appdomain -shell -cts_appdomain } graphics_device:chr_file rw_file_perms;
#Conflict with good requirements
allow newAttr8 m2m1shot_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow newAttr13 ump_device:sock_file { getattr open read ioctl lock };
allow appdomain ump_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402396726.237:214): avc:  denied  { add_name } for  pid=2567 comm="BluetoothAdapte" name="btsnoop_hci.log.old" dev="mmcblk0p25" ino=522263 #scontext=u:r:bluetooth:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396726.237:214): avc:  denied  { remove_name } for  pid=2567 comm="BluetoothAdapte" name="btsnoop_hci.log" dev="mmcblk0p25" ino=522299 #scontext=u:r:bluetooth:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396726.237:214): avc:  denied  { rename } for  pid=2567 comm="BluetoothAdapte" name="btsnoop_hci.log" dev="mmcblk0p25" ino=522299 #scontext=u:r:bluetooth:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396726.237:214): avc:  denied  { unlink } for  pid=2567 comm="BluetoothAdapte" name="btsnoop_hci.log.old" dev="mmcblk0p25" ino=522263 #scontext=u:r:bluetooth:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396726.237:214): avc:  denied  { write } for  pid=2567 comm="BluetoothAdapte" name="data" dev="mmcblk0p25" ino=522243 scontext=u:r:bluetooth:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396726.247:215): avc:  denied  { create } for  pid=2567 comm="BluetoothAdapte" name="btsnoop_hci.log" scontext=u:r:bluetooth:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396726.247:215): avc:  denied  { write open } for  pid=2567 comm="BluetoothAdapte" name="btsnoop_hci.log" dev="mmcblk0p25" ino=522259 #scontext=u:r:bluetooth:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#from CTS testing
#type=1400 msg=audit(1402394448.121:264): avc:  denied  { create } for  pid=26494 comm="sh" name="1402394443719" scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402394448.121:264): avc:  denied  { write } for  pid=26494 comm="sh" name="0" dev="mmcblk0p25" ino=522241 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402394448.211:265): avc:  denied  { remove_name } for  pid=26501 comm="rm" name="1402394443719" dev="mmcblk0p25" ino=522300 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402394448.211:265): avc:  denied  { unlink } for  pid=26501 comm="rm" name="1402394443719" dev="mmcblk0p25" ino=522300 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.357:211): avc:  denied  { add_name } for  pid=2378 comm="sh" name="1402396718760" scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.357:211): avc:  denied  { create } for  pid=2378 comm="sh" name="1402396718760" scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.357:211): avc:  denied  { write } for  pid=2378 comm="sh" name="0" dev="mmcblk0p25" ino=522241 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.357:211): avc:  denied  { write } for  pid=2378 comm="sh" name="1402396718760" dev="mmcblk0p25" ino=522259 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402396723.577:212): avc:  denied  { remove_name } for  pid=2405 comm="rm" name="1402396718760" dev="mmcblk0p25" ino=522259 scontext=u:r:shell:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { write } for  pid=5391 comm="ndroid.settings" name="react_lock" dev="mmcblk0p12" ino=80 scontext=u:r:knox_system_app:s0:c2 #tcontext=u:object_r:efs_file:s0 tclass=file
# avc:  denied  { setattr } for  pid=5391 comm="ndroid.settings" name="react_lock" dev="mmcblk0p12" ino=80 scontext=u:r:knox_system_app:s0:c2 #tcontext=u:object_r:efs_file:s0 tclass=file
# avc:  denied  { write } for  pid=2576 comm="resetreason" name="RR.p" dev="mmcblk0p21" ino=262241 scontext=u:r:shell:s0 tcontext=u:object_r:system_data_file:s0 tclass=file SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { execute } for  pid=26543 comm=4173796E635461736B202331 path="/data/data/com.visionobjects.resourcemanager/VODB/5.1.0.62/lib/libvoim.so" dev="mmcblk0p25" ino=792944 scontext=u:r:platform_app:s0 tcontext=u:object_r:app_data_file:s0 tclass=file VE=SEPF_SM-N900S_4.4.2_0007_M

## lpTcpController
# avc:  denied  { write } for  pid=15359 comm="Thread-1647" name="lptcpSocket" dev="mmcblk0p27" ino=524296 scontext=u:r:platform_app:s0 tcontext=u:object_r:lptcp_data_file:s0 tclass=sock_file SEPF_SM-N910F_4.4.4_A019
# avc:  denied  { write } for  pid=16082 comm="Chrome_DevTools" name="lptcpSocket" dev="mmcblk0p27" ino=524296 scontext=u:r:release_app:s0 tcontext=u:object_r:lptcp_data_file:s0 tclass=sock_file SEPF_SM-N910F_4.4.4_A019
# avc:  denied  { write } for  pid=17078 comm="Thread-1888" name="lptcpSocket" dev="mmcblk0p27" ino=524296 scontext=u:r:policyloader_app:s0 tcontext=u:object_r:lptcp_data_file:s0 tclass=sock_file SEPF_SM-N910F_4.4.4_A019
# avc:  denied  { write } for  pid=17495 comm="Thread-1939" name="lptcpSocket" dev="mmcblk0p27" ino=524296 scontext=u:r:system_app:s0 tcontext=u:object_r:lptcp_data_file:s0 tclass=sock_file SEPF_SM-N910F_4.4.4_A019

#from Kids Mode
# avc:  denied  { set } for property=csc.country_code scontext=u:r:radio:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service
# avc:  denied  { set } for property=csc.countryiso_code scontext=u:r:radio:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service
# avc:  denied  { set } for property=csc.sales_code scontext=u:r:radio:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service

# jack_socket related perms
# avc:  denied  { write } for  pid=10217 comm="le.simpleclient" name="jack" dev="tmpfs" ino=5399 scontext=u:r:platform_app:s0 tcontext=u:object_r:jack_socket:s0 tclass=dir permissive=1
# avc:  denied  { add_name } for  pid=10217 comm="le.simpleclient" name="jack_com.samsung.android.sdk.professionalaudio.sample.simpleclient_1_1038_0" scontext=u:r:platform_app:s0 tcontext=u:object_r:jack_socket:s0 tclass=dir permissive=1
# avc:  denied  { remove_name } for  pid=10600 comm="le.simpleclient" name="jack_com.samsung.android.sdk.professionalaudio.sample.simpleclient_1_1038_0" dev="tmpfs" ino=49408 scontext=u:r:platform_app:s0 tcontext=u:object_r:jack_socket:s0 tclass=dir permissive=1
# avc:  denied  { connectto } for  pid=10087 comm="rhism.guitarism" path="/dev/socket/jack/jack_default_1038_0" scontext=u:r:untrusted_app:s0 tcontext=u:r:jackservice:s0 tclass=unix_stream_socket permissive=1
# avc:  denied  { connectto } for  pid=10256 comm="com.sonosaurus" path="/dev/socket/jack/jack_default_1038_0" scontext=u:r:untrusted_app:s0 tcontext=u:r:jackservice:s0 tclass=unix_stream_socket permissive=1
# avc:  denied  { create } for  pid=9329 comm="le.simpleclient" name="jack_com.samsung.android.sdk.professionalaudio.sample.simpleclient_1_1038_0" scontext=u:r:platform_app:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file permissive=1
# avc:  denied  { create } for  pid=10087 comm="rhism.guitarism" name="jack_com.rhism.guitarism_1_1038_0" scontext=u:r:untrusted_app:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file permissive=1


#line 1 "vendor/samsung/common/sepolicy/assert.te"
# Asserions that should always hold

##### Not include the container neverallow rules ####
# Never allow shell or untrusteddomain to access container files
#neverallow untrusteddomain { container_file_type -container_app_data_backend }:file_class_set ~getattr;

# Never allow shell or untrusteddomain to binder/ipc to container_app
#neverallow untrusteddomain container_app:ipc_class_set *;
#neverallow { untrusteddomain - knox_untrusted_app } container_app:binder *;

# Never allow container_app to binder/ipc to container_app
#neverallow container_app untrusteddomain:ipc_class_set *;
#neverallow container_app { untrusteddomain - knox_untrusted_app }:binder *;

# Never container_app to access the data created by untrusted file
#neverallow containerdomain { untrusteddomain - knox_untrusted_app }:file_class_set *;

# Container apps should have only sys_nice capabilities
#neverallow container_app self:capability ~{ sys_nice net_admin };
#neverallow container_app self:capability2 ~block_suspend;

# XXX This is for containerized media serverice
# we need to split the domain to a container service
# and container app domain.
#neverallow container_app kernel:system ~module_request;

# container apps and untrusted apps should
# never change the mac controls
#AOSP rule allow appdomain kernel:security compute_av violate the following policy 
#neverallow { container_app untrusteddomain } kernel:security *;

# things tagged with container_service_secure_type should
# only be accessable by that service
#neverallow { domain - container_service -unconfineddomain -recovery } container_service_secure_type:file_class_set ~getattr;

# Never allow appdomain access of container
#neverallow { appdomain -bridged_platform_app -knox_system_app -syscope_app } { container_file_type container_service_secure_type -container_app_data_backend }:file_class_set ~getattr;
##### Not include the container neverallow rules ####

#Need to re-enable it later
#neverallow  appdomain dev_type:{ dir notdevfile_class_set chr_file } mounton;

# Prevent Rooting via Motochopper [13 Apr 2013, updated by haeil.hyun]
neverallow shell graphics_device:chr_file { read write open };
neverallow shell kernel:process setsched;
neverallow shell labeledfs:filesystem remount;
neverallow shell system_file:dir { write remove_name add_name };
neverallow shell system_file:file { write create setattr unlink };
neverallow shell system_file:lnk_file create;
neverallow shell self:capability { sys_admin };

#line 93



#line 1 "vendor/samsung/common/sepolicy/binderservicedomain.te"
#
# Rules common to all binder service domains
#

############ aosp and sec_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.
# Allow dumpstate to collect information from binder services
allow binderservicedomain dumpstate:fd use;
allow binderservicedomain dumpstate:unix_stream_socket { read write getopt getattr };
allow binderservicedomain shell_data_file:file { getattr write };

# Allow dumpsys to work from adb shell
allow binderservicedomain devpts:chr_file { { getattr open read ioctl lock } { open append write } };

# Receive and write to a pipe received over Binder from an app.
allow binderservicedomain appdomain:fd use;
allow binderservicedomain appdomain:fifo_file write;



############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/bluetooth.te"
#
# Bluetooth Daemon
#

############ aosp and sec_common #############
########## type and macro.

#line 7
allow bluetooth dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 7
allow bluetooth dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 7
allow bluetooth dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 7
allow bluetooth bugreport_exec:file { execute execute_no_trans };
#line 7
allow bluetooth dumpstate_exec:file { execute execute_no_trans };
#line 7
allow bluetooth dumpsys_exec:file { execute execute_no_trans };
#line 7


#line 8
allow bluetooth init:unix_stream_socket connectto;
#line 8
allow bluetooth init:unix_stream_socket { read write };
#line 8

# Container new feature related to Bluetooth.
typeattribute bluetooth mlstrustedsubject;
# for B2C users
typeattribute bluetooth trusteddomain;
#typeattribute bluetooth trusted_app_domain;

########## self and domain_type
allow bluetooth appdomain:fifo_file { getattr open read ioctl lock };

#allow bluetooth init:binder { transfer call };
#violate neverallow rule. change to:
#neverallow Google CTS : allow bluetooth init:binder transfer;

allow bluetooth rild:unix_stream_socket connectto;
allow bluetooth self:capability net_admin;
allow bluetooth self:udp_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow bluetooth system_app:fifo_file { open append write };
allow bluetooth s_system_app:fifo_file { open append write };
#line 26

########## fs_type
allow bluetooth sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bluetooth sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow bluetooth sysfs:file { { getattr open read ioctl lock } { open append write } };
allow bluetooth sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow bluetooth sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow bluetooth devpts:chr_file { read write };
allow bluetooth input_device:chr_file { getattr open read ioctl lock };

########## file_type
allow bluetooth anr_data_file:dir { open search write add_name remove_name };
allow bluetooth init_tmpfs:file read;
allow bluetooth platform_app_data_file:file { getattr open read ioctl lock };
allow bluetooth system_data_file:dir { open getattr read search ioctl };
#allow bluetooth system_data_file:file rw_file_perms;
#violate neverallow rule. change to:
allow bluetooth system_data_file:file { getattr open read ioctl lock };


########## etc_type
#neverallow Google CTS-android-5.0.2_r1 : allow bluetooth default_prop:property_service set;
allow bluetooth system_prop:property_service set;

#from NSA
# bluetooth file transfers
allow bluetooth sdcard_internal:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bluetooth sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## known issue.
#packages/apps/Bluetooth/jni/com_broadcom_fm_service.cpp
#define GPIO_TDMB_FM_SEL "/sys/class/sec/sec_keypad/expander_gpio"
allow bluetooth sysfs_sec:file { { getattr open read ioctl lock } { open append write } };


############ qcom_common #############
########## type and macro.
########## self and domain_type
allow bluetooth rild:unix_stream_socket connectto;

########## fs_type
#allow bluetooth proc:file w_file_perms;
#violate neverallow rule. change to:
allow bluetooth proc:file { open append };

########## dev_type
allow bluetooth bluetooth_serial_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bluetooth hci_attach_dev:chr_file { { getattr open read ioctl lock } { open append write } };
allow bluetooth input_device:chr_file { getattr open read ioctl lock };
allow bluetooth smd_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow bluetooth dalvikcache_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bluetooth dalvikcache_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow bluetooth bluetooth_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bluetooth tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bluetooth uart_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow bluetooth app_efs_file:dir { open getattr read search ioctl };
allow bluetooth app_efs_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.


############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402663943.291:184): avc:  denied  { read write } for  #pid=965 comm="android.io" path="/sys/power/wake_lock" dev="sysfs" ino=61 #scontext=u:r:bluetooth:s0 tcontext=u:object_r:sysfs_wake_lock:s0 #tclass=file SEPF_SAMSUNG-SM-N900A_4.4.3_0016
# /sys/class/sec/sec_keypad/expander_gpio avc:  denied  { write } for  pid=27387 comm="droid.bluetooth" name="expander_gpio" dev="sysfs" ino=13291 scontext=u:r:bluetooth:s0 tcontext=u:object_r:sysfs_sec:s0 tclass=file


#line 1 "vendor/samsung/common/sepolicy/bootanim.te"
#
# bootanim
#

############ aosp and sec_common #############
########## type and macro.
#init_daemon_domain(bootanim)

#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow bootanim surfaceflinger:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow surfaceflinger bootanim:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow bootanim surfaceflinger:fd use;
#line 8


#line 9
# Call the server domain and optionally transfer references to it.
#line 9
allow bootanim servicemanager:binder { call transfer };
#line 9
# Allow the serverdomain to transfer references to the client on the reply.
#line 9
allow servicemanager bootanim:binder transfer;
#line 9
# Receive and use open files from the server.
#line 9
allow bootanim servicemanager:fd use;
#line 9


#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow bootanim servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager bootanim:dir search;
#line 10
allow servicemanager bootanim:file { read open };
#line 10
allow servicemanager bootanim:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


#line 11
allow bootanim property_socket:sock_file write;
#line 11
allow bootanim init:unix_stream_socket connectto;
#line 11


# for B2C users
typeattribute bootanim trusteddomain;
#typeattribute bootanim system_domain;
# temporary permissive to gather the log.
# permissive bootanim;

########## self and domain_type
allow bootanim surfaceflinger:fd use;

########## fs_type
allow bootanim sysfs:file write;
allow bootanim sysfs_sec:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bootanim sysfs_sec:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow bootanim sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
########## file_type
allow bootanim carrier_efs_file:dir { open getattr read search ioctl };
allow bootanim carrier_efs_file:file { getattr open read ioctl lock };
allow bootanim efs_file:dir { open getattr read search ioctl };
allow bootanim efs_file:file { getattr open read ioctl lock };
allow bootanim imei_efs_file:dir { open getattr read search ioctl };
allow bootanim imei_efs_file:file { getattr open read ioctl lock };

########## etc_type
allow bootanim audio_prop:property_service set;
allow bootanim boot_prop:property_service set;
allow bootanim system_prop:property_service set;

########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow bootanim pvrsync_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bootanim ump_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow bootanim ump_device:sock_file { getattr open read ioctl lock };
allow bootanim graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { set } for property=persist.audio.allsoundmute scontext=u:r:bootanim:s0 tcontext=u:object_r:audio_prop:s0 tclass=property_service

#line 1 "vendor/samsung/common/sepolicy/clatd.te"
#
# clatd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute clatd trusteddomain;
#typeattribute clatd system_domain;
# temporary permissive to gather the log.
# permissive clatd;

#from NSA

#line 14

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Old domain may exec the file and transition to the new domain.
#line 14
allow init clatd_exec:file { getattr open read execute };
#line 14
allow init clatd:process transition;
#line 14
# New domain is entered by executing the file.
#line 14
allow clatd clatd_exec:file { entrypoint open read execute getattr };
#line 14
# New domain can send SIGCHLD to its caller.
#line 14
allow clatd init:process sigchld;
#line 14
# Enable AT_SECURE, i.e. libc secure mode.
#line 14
dontaudit init clatd:process noatsecure;
#line 14
# XXX dontaudit candidate but requires further study.
#line 14
allow init clatd:process { siginh rlimitinh };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition init clatd_exec:process clatd;
#line 14

#line 14

#line 14
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 14
type clatd_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 14
type_transition clatd tmpfs:file clatd_tmpfs;
#line 14
allow clatd clatd_tmpfs:file { read write };
#line 14

#line 14


########## self and domain_type
allow clatd kernel:system module_request;
allow clatd self:capability { net_admin setgid setuid dac_override };


########## fs_type
allow clatd cgroup:dir { create add_name };
allow clatd proc:file { { getattr open read ioctl lock } { open append write } };
allow clatd proc:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow clatd proc_net:file { open append write };

########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { module_request } for  pid=1476 comm="clatd" kmod="netdev-null" scontext=u:r:clatd:s0 tcontext=u:r:kernel:s0 tclass=system



#line 1 "vendor/samsung/common/sepolicy/debuggerd.te"
#
# Debuggerd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute debuggerd trusteddomain;
#typeattribute debuggerd system_domain;
# temporary permissive to gather the log.
# permissive debuggerd;


#line 13
allow debuggerd kernel:system syslog_read;
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow debuggerd system_server:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow system_server debuggerd:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow debuggerd system_server:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow debuggerd servicemanager:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow servicemanager debuggerd:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow debuggerd servicemanager:fd use;
#line 15


#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Old domain may exec the file and transition to the new domain.
#line 16
allow debuggerd dumpstate_exec:file { getattr open read execute };
#line 16
allow debuggerd dumpstate:process transition;
#line 16
# New domain is entered by executing the file.
#line 16
allow dumpstate dumpstate_exec:file { entrypoint open read execute getattr };
#line 16
# New domain can send SIGCHLD to its caller.
#line 16
allow dumpstate debuggerd:process sigchld;
#line 16
# Enable AT_SECURE, i.e. libc secure mode.
#line 16
dontaudit debuggerd dumpstate:process noatsecure;
#line 16
# XXX dontaudit candidate but requires further study.
#line 16
allow debuggerd dumpstate:process { siginh rlimitinh };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition debuggerd dumpstate_exec:process dumpstate;
#line 16


#line 17
allow debuggerd dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 17
allow debuggerd dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 17
allow debuggerd dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 17
allow debuggerd bugreport_exec:file { execute execute_no_trans };
#line 17
allow debuggerd dumpstate_exec:file { execute execute_no_trans };
#line 17
allow debuggerd dumpsys_exec:file { execute execute_no_trans };
#line 17


#line 18
allow debuggerd vold_socket:sock_file write;
#line 18
allow debuggerd vold:unix_stream_socket connectto;
#line 18



########## self and domain_type
allow debuggerd newAttr33:lnk_file { getattr open read ioctl lock };
allow debuggerd domain:process getattr;
allow debuggerd init:unix_stream_socket connectto;
allow debuggerd kernel:system module_request;
allow debuggerd logwrapper:unix_dgram_socket sendto;
allow debuggerd self:capability { fsetid setuid net_raw sys_resource setgid net_admin sys_module };
allow debuggerd self:netlink_route_socket { write getattr setopt read bind create nlmsg_read };
allow debuggerd self:rawip_socket *;
allow debuggerd self:udp_socket *;
allow debuggerd system:unix_stream_socket connectto;
allow debuggerd wpa:unix_dgram_socket sendto;

########## fs_type
allow debuggerd cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow debuggerd debugfs:file { getattr open read ioctl lock };
allow debuggerd debugfs:dir { open getattr read search ioctl };
allow debuggerd firmware:dir { open getattr read search ioctl };
allow debuggerd firmware:file { getattr open read ioctl lock };
allow debuggerd proc:file write;
allow debuggerd qtaguid_proc:file { getattr open read ioctl lock };
allow debuggerd sdcard_external:dir { open getattr read search ioctl };
allow debuggerd sdcard_external:file { getattr open read ioctl lock };
allow debuggerd sdcard_internal:dir { open getattr read search ioctl };
allow debuggerd sdcard_internal:file { getattr open read ioctl lock };
allow debuggerd selinuxfs:dir { read search } ;
allow debuggerd selinuxfs:file { getattr open read };
allow debuggerd sysfs:file { open append write };
allow debuggerd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow debuggerd reset_reason_service_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow debuggerd tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow debuggerd usb_device:dir { open getattr read search ioctl };

########## file_type
allow debuggerd app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow debuggerd gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 58
allow debuggerd app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow debuggerd gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 59
allow debuggerd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow debuggerd system_app_data_file:file { { open append write } setattr };
allow debuggerd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow debuggerd system_data_file:sock_file { open append write };
allow debuggerd system_file:file { getattr execute execute_no_trans };
allow debuggerd tima_dump_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow debuggerd vdc_exec:file { getattr execute execute_no_trans };
allow debuggerd wifi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow debuggerd wifi_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow debuggerd wpa_socket:dir { open search write add_name remove_name };
allow debuggerd wpa_socket:sock_file { open append write };
allow debuggerd wpa_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow debuggerd node:rawip_socket node_bind;

########## known issue.

#dontaudit
dontaudit debuggerd init:process ptrace;
dontaudit debuggerd keystore:process ptrace;

#r_dir_file(debuggerd, file_type)
# replacing r_dir_file macro and removing container related access
allow debuggerd newAttr59:dir { open getattr read search ioctl };
allow debuggerd newAttr59:{ file lnk_file } { getattr open read ioctl lock };


############ knox_common #############
########## type and macro.
########## self and domain_type
allow debuggerd container_app:lnk_file read;
allow debuggerd container_app:process getattr;

########## fs_type
########## dev_type
########## file_type
allow debuggerd container_app_data_backend:dir search;
allow debuggerd bbccontainer_app_data_backend:dir search;
#line 97

########## etc_type
########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
allow debuggerd kernel:system module_request;

########## fs_type
########## dev_type
allow debuggerd qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

# For dumpstate tima_dump_log
allow dumpstate qseecom_device:chr_file { read write ioctl open };


############ slsi_common #############
########## type and macro.
########## self and domain_type
allow debuggerd wpa:lnk_file read;

########## fs_type
allow debuggerd cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

########## dev_type
########## file_type
#neverallow Google CTS-android-5.0.2_r1 : allow debuggerd app_library_file:file rx_file_perms;
allow debuggerd su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow debuggerd system_file:file { getattr execute execute_no_trans };

########## etc_type
########## known issue.


############ avc_log #############
#from CTS testing
# avc:  denied  { setattr } for  pid=21927 comm="resetreason" name="RR.p" dev="mmcblk0p26" ino=913992 scontext=u:r:debuggerd:s0 tcontext=u:object_r:reset_reason_service_file:s0 tclass=file SEPF_SAMSUNG-SM-N910A_4.4.4_0018
# avc:  denied  { getattr } for  pid=31315 comm="ps" scontext=u:r:debuggerd:s0 tcontext=u:r:shell:s0 tclass=process SEPF_SAMSUNG-SM-#N900A_4.4.2_0016
# avc:  denied  { call } for  pid=31372 comm="tima_dump_log" scontext=u:r:debuggerd:s0 tcontext=u:r:servicemanager:s0 tclass=binder #SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { call } for  pid=31372 comm="tima_dump_log" scontext=u:r:debuggerd:s0 tcontext=u:r:system_server:s0 tclass=binder #SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { add_name } for  pid=31400 comm="wpa_cli" name="wpa_ctrl_31400-1" scontext=u:r:debuggerd:s0 #tcontext=u:object_r:wpa_socket:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { create } for  pid=31400 comm="wpa_cli" name="wpa_ctrl_31400-1" scontext=u:r:debuggerd:s0 #tcontext=u:object_r:wpa_socket:s0 tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { setattr } for  pid=31400 comm="wpa_cli" name="wpa_ctrl_31400-1" dev="mmcblk0p25" ino=261177 #scontext=u:r:debuggerd:s0 tcontext=u:object_r:wpa_socket:s0 tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { remove_name } for  pid=31400 comm="wpa_cli" name="wpa_ctrl_31400-1" dev="mmcblk0p25" ino=261177 #scontext=u:r:debuggerd:s0 tcontext=u:object_r:wpa_socket:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { unlink } for  pid=31400 comm="wpa_cli" name="wpa_ctrl_31400-1" dev="mmcblk0p25" ino=261177 scontext=u:r:debuggerd:s0 tcontext=u:object_r:wpa_socket:s0 tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { search } for  pid=7916 comm="df" name="usb-ffs" dev="tmpfs" ino=9100 scontext=u:r:debuggerd:s0 tcontext=u:object_r:usb_device:s0 tclass=dir SEPF_SAMSUNG-SM-N910A_4.4.4_0018
# avc:  denied  { use } for  pid=23860 comm="dumpstate" path=2F6465762F6173686D656D202864656C6574656429 dev="tmpfs" ino=381497 scontext=u:r:debuggerd:s0 tcontext=u:r:platform_app:s0 tclass=fd SEPF_SM-N910T_4.4.4_A018
# avc:  denied  { write } for  pid=23860 comm="dumpstate" path=2F6465762F6173686D656D202864656C6574656429 dev="tmpfs" ino=381497 scontext=u:r:debuggerd:s0 tcontext=u:object_r:platform_app_tmpfs:s0 tclass=file SEPF_SM-N910T_4.4.4_A018
# avc:  denied  { use } for  pid=23860 comm="dumpstate" path=2F6465762F6173686D656D202864656C6574656429 dev="tmpfs" ino=384744 scontext=u:r:debuggerd:s0 tcontext=u:r:untrusted_app:s0 tclass=fd SEPF_SM-N910T_4.4.4_A018
# avc:  denied  { write } for  pid=23860 comm="dumpstate" path=2F6465762F6173686D656D202864656C6574656429 dev="tmpfs" ino=384744 scontext=u:r:debuggerd:s0 tcontext=u:object_r:untrusted_app_tmpfs:s0 tclass=file SEPF_SM-N910T_4.4.4_A018
# avc:  denied  { write } for  pid=23860 comm="dumpstate" path=2F6465762F6173686D656D2F4469736361726461626C654D656D6F7279416C6C6F6361746F72202864656C6574656429 dev="tmpfs" ino=433870 scontext=u:r:debuggerd:s0 tcontext=u:object_r:isolated_app_tmpfs:s0 tclass=file SEPF_SM-N910T_4.4.4_A018
# avc:  denied  { ptrace } for  pid=327 comm="debuggerd" scontext=u:r:debuggerd:s0 tcontext=u:r:init:s0 tclass=process
# avc:  denied  { ptrace } for  pid=467 comm="debuggerd64" scontext=u:r:debuggerd:s0 tcontext=u:r:keystore:s0 tclass=process permissive=0 SEPF_SM-N916S_5.0.1_0002


#line 1 "vendor/samsung/common/sepolicy/device.te"
#
# device
#

############ aosp and sec_common #############
type cacheblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type carrierblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type dun_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type dw_mmc_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type efsblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type emmcblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type genlock_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type hiddenblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type hpd_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type i2c_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type icd_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type io_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ir_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# conflict with Qcom BSP, type kgsl_device, dev_type, mlstrustedobject;
type m9kefsblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type mmb_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type mobicore_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type mobicore-user_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type modem_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ovr_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type paramblk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type persdatablk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type prop_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type recoveryblk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type secure_storage_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type sem_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type sensor_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type swap_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# system_fifo is under /dev/pipes/, and it is not a device type
# currently we don't have upper type to include system_fifo. only dev_type can include it.
type system_fifo, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type systemblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type timerirq_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type tz_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ump_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type url_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type usb_bus_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# conflict with Qcom BSP, type usb_serial_device, dev_type;
type userdatablk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type validity_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type vibrator_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

## for fingerprint(dev/esfp0, dev/vfsspi)
type vfsspi_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
typealias vfsspi_device alias fp_sensor_device;

typealias gpu_device alias powervr_device;
typealias tz_device alias tzic_device;

typeattribute device rw_fs_type;
typeattribute graphics_device mlstrustedobject;
typeattribute qtaguid_device mlstrustedobject;
typeattribute urandom_device mlstrustedobject;
typeattribute video_device mlstrustedobject;
typeattribute zero_device mlstrustedobject;

############ knox_common #############
## Knox Sensitive data protection, DEK engine driver access
type knox_dar_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type knox_dar_shared_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type knox_kap_device, dev_type, newAttr31, newAttr69;

############ Mobile Payments #############
type mst_ctrl_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

############ qcom_common #############
type adnc_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type apnhlosblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type backupblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type clock_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ciqbridge_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type dvb_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
##conflict with Qcom BSP, type coresight_device, dev_type;
typealias qdss_device alias coresight_device;
type fscblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# conflict with Qcom BSP, type fsg_device, dev_type;
# conflict with Qcom BSP, type fsgblk_device, dev_type;
type mdmblk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# conflict with Qcom BSP, type mmcblk0_device, dev_type;
# conflict with Qcom BSP, type mmcblk0rpmb_device, dev_type;
# conflict with Qcom BSP, type modemstblk_device, dev_type;
type padblk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type persistblk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type pta_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# conflict with Qcom BSP, type qmuxd_device, dev_type;
type sg_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type smd_cntl_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type smd_cxm_qmi_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# conflict with Qcom BSP, type ssdblk_device, dev_type;
type usf_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type vpn_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# conflict with Qcom BSP, type wifi_device, dev_type;

typealias device_latency alias cpu_dma_latency_device;
typealias qdsp_device alias adsprpc_device;
typealias serial_device alias bluetooth_serial_device;
# conflict with Qcom BSP, typealias subsys_esoc0_device alias esoc_device;

typeattribute smd_device mlstrustedobject;
typeattribute bluetooth_serial_device mlstrustedobject;


############ slsi_common #############

type akm8963_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ap_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type bbd_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type bluetooth_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type bootblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type botablk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type ecryptfs_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type fimg2d_video_device, dev_type, mlstrustedobject, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type keychord_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
# exynos5433 libhw1shotjpeg  and libscaler
type m2m1shot_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type mbin_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type mdns_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type multipdp_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr30, newAttr29, newAttr31, newAttr69;
type otablk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type psaux_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type pts_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type pvrsync_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type radioblk_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type report_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type s5p_smem_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type seiren_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type seonsorhub_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type spi_boot_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type srp_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type sync_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type tdatablk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type tombstoneblk_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type tui_device, dev_type, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
type uart_device, dev_type, mlstrustedobject, newAttr27, newAttr26, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;

typealias radio_device alias mdm_device;
type ssipc_device, dev_type, newAttr26, newAttr27, newAttr28, newAttr29, newAttr30, newAttr31, newAttr69;
typealias ssipc_device alias mif_device;

############ appdomain_no_read_chr_device #############
typeattribute audio_device appdomain_no_read_chr_device;
typeattribute camera_device appdomain_no_read_chr_device;
typeattribute dm_device appdomain_no_read_chr_device;
typeattribute gps_device appdomain_no_read_chr_device;
typeattribute hci_attach_dev appdomain_no_read_chr_device;
typeattribute nfc_device appdomain_no_read_chr_device;
typeattribute radio_device appdomain_no_read_chr_device;
typeattribute rpmsg_device appdomain_no_read_chr_device;
typeattribute tee_device appdomain_no_read_chr_device;
############ appdomain_no_write_chr_device #############
typeattribute audio_device appdomain_no_write_chr_device;
typeattribute camera_device appdomain_no_write_chr_device;
typeattribute dm_device appdomain_no_write_chr_device;
typeattribute gps_device appdomain_no_write_chr_device;
typeattribute hci_attach_dev appdomain_no_write_chr_device;
typeattribute nfc_device appdomain_no_write_chr_device;
typeattribute radio_device appdomain_no_write_chr_device;
typeattribute rpmsg_device appdomain_no_write_chr_device;
typeattribute socket_device appdomain_no_write_chr_device;
typeattribute tee_device appdomain_no_write_chr_device;


############ domain_no_readwrite_chr_device #############
typeattribute device domain_no_readwrite_chr_device;
typeattribute hw_random_device domain_no_readwrite_chr_device;
typeattribute kmem_device domain_no_readwrite_chr_device;
typeattribute knox_kap_device domain_no_readwrite_chr_device;
#typeattribute mobicore_device domain_no_readwrite_chr_device;
#typeattribute mobicore-user_device domain_no_readwrite_chr_device;


############ domain_no_readwrite_blk_device #############
typeattribute block_device domain_no_readwrite_blk_device;
typeattribute frp_block_device domain_no_readwrite_blk_device;

#typeattribute efsblk_device domain_no_readwrite_blk_device;
#typeattribute emmcblk_device domain_no_readwrite_blk_device;
#typeattribute hiddenblk_device domain_no_readwrite_blk_device;
#typeattribute modemstblk_device domain_no_readwrite_blk_device;
#typeattribute modem_device domain_no_readwrite_blk_device;
#typeattribute paramblk_device domain_no_readwrite_blk_device;
#typeattribute recoveryblk_device domain_no_readwrite_blk_device;
#typeattribute ssdblk_device domain_no_readwrite_blk_device;
#typeattribute systemblk_device domain_no_readwrite_blk_device;
#typeattribute userdatablk_device domain_no_readwrite_blk_device;

############ untrustedapp_no_readwrite_device #############
typeattribute graphics_device untrustedapp_no_readwrite_device;
typeattribute diag_device untrustedapp_no_readwrite_device;

#line 1 "vendor/samsung/common/sepolicy/dex2oat.te"
#
# dex2oat
# 

############ aosp and sec_common #############
########## type and macro.
typeattribute dex2oat trusteddomain;
typeattribute dex2oat system_domain;

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
#neverallow Google CTS-android-5.0.2_r1 : allow dex2oat system_library_file:file execute;

########## etc_type
########## known issue.
## connection with secure_storage
allow dex2oat secure_storage:unix_stream_socket connectto;
allow dex2oat secure_storage_device:sock_file write;


############ avc_log #############
# avc:  denied  { execute } for  pid=856 comm="dex2oat" path="/system/lib/libsigchain.so" dev="mmcblk0p16" ino=1371 scontext=u:r:dex2oat:s0 tcontext=u:object_r:system_library_file:s0 tclass=file
# avc:  denied  { write } for  pid=1565 comm="main" name="ssd_socket" dev="tmpfs" ino=7376 scontext=u:r:dex2oat:s0 tcontext=u:object_r:secure_storage_device:s0 tclass=sock_file
# avc:  denied  { connectto } for  pid=1565 comm="main" path="/dev/.secure_storage/ssd_socket" scontext=u:r:dex2oat:s0 tcontext=u:r:secure_storage:s0 tclass=unix_stream_socket SEPF_SM-G900F_L_A001


#line 1 "vendor/samsung/common/sepolicy/dhcp.te"
#
# dhcp
#

############ aosp and sec_common #############
########## type and macro.
#neverallow Google CTS : type dhcp_system_file, file_type, data_file_type;
#type dhcp_system_file, file_type;

# for B2C users
typeattribute dhcp trusteddomain;
#typeattribute dhcp system_domain;
# temporary permissive to gather the log.
# permissive dhcp;

########## self and domain_type
########## fs_type
allow dhcp proc:file write;

########## dev_type
allow dhcp device:file { getattr open read ioctl lock };
allow dhcp tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow dhcp dhcp_system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow dhcp dhcp_system_file:dir { open getattr read search ioctl };

########## etc_type
allow dhcp port:udp_socket name_bind;

########## known issue.
# netdev-bt-pan driver loading
allow dhcp kernel:system module_request;

# DHCP server should have full control of the udp sockets
allow dhcp { self port node }:udp_socket *;
allow dhcp { self port node }:tcp_socket *;

# Some versions may need to be able to insmod
allow dhcp kernel:system module_request;
allow dhcp sysrq_proc:file write;

# CTS
allow dhcp self:rawip_socket { write create setopt read };

#from NSA
allow dhcp self:netlink_route_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/dnsmasq.te"
#
# dnsmasq
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute dnsmasq trusteddomain;
#typeattribute dnsmasq system_domain;
# temporary permissive to gather the log.
# permissive dnsmasq;

########## self and domain_type
allow dnsmasq kernel:system module_request;
allow dnsmasq netd:fifo_file { { getattr open read ioctl lock } { open append write } };
allow dnsmasq netd: { netlink_kobject_uevent_socket netlink_nflog_socket netlink_route_socket tcp_socket udp_socket } { read write };
allow dnsmasq netd:unix_stream_socket { connectto };
allow dnsmasq netd:unix_dgram_socket { sendto };
allow dnsmasq self:capability { chown fsetid setgid fowner sys_module };
allow dnsmasq self: { netlink_route_socket rawip_socket udp_socket packet_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow dnsmasq self:netlink_route_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write } ;
allow dnsmasq self:tcp_socket { listen setopt create bind };

########## fs_type
########## dev_type
########## file_type
allow dnsmasq netd_socket:sock_file { open append write };
allow dnsmasq shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow dnsmasq system_file:file { getattr execute execute_no_trans };

########## etc_type
allow dnsmasq node:udp_socket node_bind;
allow dnsmasq port:tcp_socket { name_connect name_bind };
allow dnsmasq node:tcp_socket node_bind;

########## known issue.


############ avc_log #############
# audit(1419261369.339:301): avc:  denied  { create } for  pid=18925 comm="dnsmasq" scontext=u:r:dnsmasq:s0 tcontext=u:r:dnsmasq:s0 tclass=packet_socket permissive=0
# audit(1419686759.779:390): avc:  denied  { nlmsg_write } for  pid=27559 comm="ip" scontext=u:r:dnsmasq:s0 tcontext=u:r:dnsmasq:s0 tclass=netlink_route_socket permissive=0

#line 1 "vendor/samsung/common/sepolicy/domain.te"
#
# all domain
# 

############ aosp and sec_common #############
########## type and macro.
########## self and domain_type
allow domain at_distributor:fd use;
allow newAttr33 appdomain:fifo_file { { getattr open read ioctl lock } { open append write } };
allow domain dumpstate:fifo_file { write getattr };
#neverallow by Google: allow domain self:capability sys_nice;
#neverallow Google CTS-android-5.0.2_r1 : allow { domain -cts_domain } self:capability sys_nice;
allow domain self:process execmem;

########## fs_type

#line 16
allow domain newAttr72:dir { open getattr read search ioctl };
#line 16
allow domain newAttr72:{ file lnk_file } { getattr open read ioctl lock };
#line 16

allow newAttr49 devpts:chr_file { read write };
#neverallow by Google: allow domain tmpfs:file execute;
#neverallow Google CTS-android-5.0.2_r1 : allow { domain -cts_domain } tmpfs:file execute;

########## dev_type
allow domain log_device:chr_file { getattr open read ioctl lock };
allow domain powervr_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow domain prop_device:file { getattr open read ioctl lock };
allow newAttr32 tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
#neverallow Google CTS-android-5.0.2_r1 : allow { domain -fixmo_app -good_app } shell_data_file:file write;
allow newAttr40 shell_data_file:file write;

allow domain system_fifo:fifo_file { { getattr open read ioctl lock } { open append write } };
allow domain system_library_file:dir { open getattr read search ioctl };
#neverallow by Google: (kernel { file_type fs_type -rootfs }:file { entrypoint execute_no_trans };)
#allow domain system_library_file:file { rx_file_perms execmod };
#neverallow Google CTS-android-5.0.2_r1 : allow { domain -kernel } system_library_file:file { rx_file_perms execmod };

allow domain system_library_file:lnk_file { getattr open read ioctl lock };

########## etc_type
########## known issue.
# Must allow existing rootfs DAC perms for everyone, including shell
# Since this is a ramdisk/mounted ro, it should be read-only
allow domain rootfs:file { getattr open read ioctl lock };

# Su is not on user builds
dontaudit domain su_exec:file *;

# Box app (knox untrusted app) need access to random devices as well
allow domain { random_device urandom_device }:chr_file { { getattr open read ioctl lock } { open append write } };

# denials after domain transition of dumpstate
allow domain dumpstate:unix_stream_socket { ioctl read write getattr bind connect accept getopt setopt connectto };
allow domain dumpstate:fd use;

# System library file accesses from system_file aosp/domain.te
allow domain system_library_file:dir { open getattr read search ioctl };
allow domain system_library_file:file { getattr open read ioctl lock };
#neverallow Google CTS-android-5.0.2_r1 : allow domain system_library_file:file execute;
allow domain system_library_file:lnk_file { getattr open read ioctl lock };

############ knox_common #############
########## type and macro.
########## self and domain_type
allow containerdomain newAttr12:fifo_file { { getattr open read ioctl lock } { open append write } };

########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
allow domain time_daemon:unix_stream_socket connectto;

########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow domain debug_interface_proxy:unix_stream_socket connectto;
########## fs_type
########## dev_type
allow domain pvrsync_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.
# Allow video access for all domain 
allow domain fimg2d_video_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## neverallow
# Only init, ueventd and system should be able to access HW RNG
neverallow { domain -init -system -ueventd -unconfineddomain -qrngd -mmb_mw -mmb_apk -recovery -exyrngd } hw_random_device:chr_file ~getattr;

############ avc_log #############
#avc:  denied  { read } for  pid=3715 comm="exyrngd" name="hw_random" dev="tmpfs" ino=7494 scontext=u:r:exyrngd:s0 tcontext=u:object_r:hw_random_device:s0 #tclass=chr_file SEPF_SM-G900H_5.0_0001
#avc:  denied  { open } for  pid=3715 comm="exyrngd" path="/dev/hw_random" dev="tmpfs" ino=7494 scontext=u:r:exyrngd:s0 tcontext=u:object_r:hw_random_device:s0 #tclass=chr_file SEPF_SM-G900H_5.0_0001
#arch=40000028 syscall=322 per=800000 success=yes exit=3 a0=ffffff9c a1=be958750 a2=20000 a3=0 items=1 ppid=1 pid=3715 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 #egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) 
#comm="exyrngd" exe="/system/bin/exyrngd" subj=u:r:exyrngd:s0 key=(null)
#cwd="/"
#item=0 name="/dev/hw_random" inode=7494 dev=00:0d mode=020440 ouid=0 ogid=1000 rdev=0a:b7 obj=u:object_r:hw_random_device:s0
# avc:  denied  { connectto } for  pid=15055 comm=4173796E635461736B202331 path="/dev/socket/msockets/dip_cmd" scontext=u:r:s_untrusted_app:s0 tcontext=u:r:debug_interface_proxy:s0 tclass=unix_stream_socket
#line 1 "vendor/samsung/common/sepolicy/drmserver.te"
#
# drmserver
#

############ aosp and sec_common #############
########## type and macro.
typeattribute drmserver_socket socket_file_type;
# for B2C users
typeattribute drmserver trusteddomain;
#typeattribute drmserver system_domain;
# temporary permissive to gather the log.
# permissive drmserver;


#line 14
allow drmserver apk_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 14
allow drmserver apk_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 14
allow drmserver apk_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 14


#line 15
allow drmserver dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 15
allow drmserver dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow drmserver dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15
allow drmserver bugreport_exec:file { execute execute_no_trans };
#line 15
allow drmserver dumpstate_exec:file { execute execute_no_trans };
#line 15
allow drmserver dumpsys_exec:file { execute execute_no_trans };
#line 15


#line 16
allow drmserver mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 16
allow drmserver mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 16
# TODO: Figure out proper sockets
#line 16
allow drmserver mobicoredaemon:unix_stream_socket connectto;
#line 16


########## self and domain_type
allow drmserver bintvoutservice:binder call;
allow drmserver init:unix_stream_socket { connectto read write };
allow drmserver init_shell:unix_stream_socket connectto;
allow drmserver netd:unix_stream_socket connectto;

########## fs_type
allow drmserver sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
allow drmserver tty_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow drmserver app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 33
allow drmserver app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 34
allow drmserver asec_apk_file:file { read write getattr };
allow drmserver dnsproxyd_socket:sock_file { open append write };
allow drmserver drm_playready_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver drm_playready_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver media_rw_data_file:file { open append write };
allow drmserver personal_page_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver personal_page_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver radio_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver radio_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver shell_exec:file { getattr execute execute_no_trans };
allow drmserver system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
# Remove drmserver write permission to system_file
allow drmserver system_file:file { getattr open read ioctl lock };
allow drmserver system_file:file { getattr execute execute_no_trans };


########## etc_type
allow drmserver port:udp_socket name_bind;
allow drmserver node:udp_socket node_bind;
allow drmserver port:tcp_socket name_connect;

########## known issue.
#r_dir_file(drmserver, file_type)
# replacing r_dir_file macro and removing container related access
allow drmserver newAttr58:dir { open getattr read search ioctl };
allow drmserver newAttr58:{ file lnk_file } { getattr open read ioctl lock };

#from NSA
allow drmserver self:{ tcp_socket udp_socket } *;

############ knox_common #############
########## type and macro.
########## self and domain_type
allow drmserver container_app:binder call;
allow drmserver container_app:fd use;

########## fs_type
########## dev_type
########## file_type
allow drmserver container_app_data_backend:file { { getattr open read ioctl lock } { open append write } };
allow drmserver bbccontainer_app_data_backend:file { { getattr open read ioctl lock } { open append write } };
#line 81
allow drmserver container_app_data_backend:file setattr;
allow drmserver bbccontainer_app_data_backend:file setattr;
#line 82
allow drmserver container_app_data_backend:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow drmserver bbccontainer_app_data_backend:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 83
allow drmserver container_app_sdcard_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow drmserver container_app_sdcard_file:file { setattr { { getattr open read ioctl lock } { open append write } } };


########## etc_type
########## known issue.


############ qcom_common #############
########## type and macro.

#line 93
# Call the servicemanager and transfer references to it.
#line 93
allow drmserver servicemanager:binder { call transfer };
#line 93
# servicemanager performs getpidcon on clients.
#line 93
allow servicemanager drmserver:dir search;
#line 93
allow servicemanager drmserver:file { read open };
#line 93
allow servicemanager drmserver:process getattr;
#line 93
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 93
# all domains in domain.te.
#line 93


#neverallow by Google:(domain init:binder call;) 
#binder_call(drmserver, init)


#line 98
allow drmserver app_data_file:dir { open getattr read search ioctl };
allow drmserver gad_untrusted_app_data_file:dir { open getattr read search ioctl };
#line 98
allow drmserver app_data_file:{ file lnk_file } { getattr open read ioctl lock };
allow drmserver gad_untrusted_app_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 98


#line 99
allow drmserver efs_file:dir { open getattr read search ioctl };
#line 99
allow drmserver efs_file:{ file lnk_file } { getattr open read ioctl lock };
#line 99


#line 100
allow drmserver firmware:dir { open getattr read search ioctl };
#line 100
allow drmserver firmware:{ file lnk_file } { getattr open read ioctl lock };
#line 100


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow drmserver audio_data_file:file { getattr open read ioctl lock };
allow drmserver drm_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow drmserver drm_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow drmserver init_shell:unix_stream_socket connectto;
allow drmserver qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow drmserver shell_exec:file { getattr execute execute_no_trans };
allow drmserver system_file:file { getattr execute execute_no_trans };

########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.

#line 119
# Call the server domain and optionally transfer references to it.
#line 119
allow drmserver servicemanager:binder { call transfer };
#line 119
# Allow the serverdomain to transfer references to the client on the reply.
#line 119
allow servicemanager drmserver:binder transfer;
#line 119
# Receive and use open files from the server.
#line 119
allow drmserver servicemanager:fd use;
#line 119


########## self and domain_type
allow drmserver at_distributor:fd use;
allow drmserver system_app:fifo_file { open append write };
allow drmserver s_system_app:fifo_file { open append write };
#line 124

########## fs_type
########## dev_type
allow drmserver s5p_smem_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow drmserver drm_lib_system_file:dir { getattr open read ioctl lock };
#neverallow Google CTS-android-5.0.2_r1 : allow drmserver drm_lib_system_file:file x_file_perms;

########## etc_type
########## known issue.


############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402384437.330:264): avc:  denied  { write } for  pid=283 comm="drmserver"# #name="bbb_short.ffmpeg.1920x1080.mp4.libx264_5000kbps_30fps.libfaac_stereo_192kbps_48000Hz.mp4" dev="mmcblk0p25" ino=522340 scontext=u:r:drmserver:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { call } for  pid=9396 comm="Binder_3" scontext=u:r:drmserver:s0 tcontext=u:r:container_app:s0:c2 tclass=binder
# avc:  denied  { setattr } for  pid=9114 comm="Binder_2" name="20140717_162259.mp4" dev="ecryptfs" ino=132624 scontext=u:r:drmserver:s0 tcontext=u:object_r:container_app_data_backend:s0:c2 tclass=file SEPF_SM-N910F_4.4.4_A018

#line 1 "vendor/samsung/common/sepolicy/eng.te"
# special policy for eng build

#line 2

#line 2
#for Wolfserver.apk - Automation test in QA team
#line 2
#allow shell self:capability net_raw;
#line 2
#allow shell mobicore-user_device:chr_file rw_file_perms;
#line 2
#allow shell mobicoredaemon:unix_stream_socket connectto;
#line 2

#line 2
# FOR TESTING TZAPPS FROM SHELL (DO NOT MERGE TO PROD)
#line 2
#allow shell system_data_file:file { execute execute_no_trans };
#line 2

#line 2
allow init_shell self:capability { setuid setgid };
#line 2

#line 2
# Allow adb remount only for Eng binary
#line 2
#allow adbd labeledfs:filesystem remount;
#line 2
#allow kernel functionfs:filesystem mount;
#line 2

#line 2
# for Android 4.4
#line 2
#allow adbd systemblk_device:blk_file { read ioctl open };
#line 2
#allow adbd emmcblk_device:blk_file { read ioctl open };
#line 2

#line 2
# Ping test on ADB
#line 2
#allow shell self:rawip_socket create_socket_perms;
#line 2

#line 2
# screencap -p /data/log/img.png (SPR slate)
#line 2
#allow shell self:capability dac_override;
#line 2

#line 2
# for CHINA NAL SECURITY TEST
#line 2
#allow shell app_data_file:file execute;
#line 2

#line 2
# Monkey test for Eng
#line 2
allow selinux_net ashmem_device:chr_file execute;
#line 2
allow selinux_net csc_prop:property_service set;
#line 2
allow selinux_net dalvikcache_data_file:file { write setattr };
#line 2
allow selinux_net init:unix_stream_socket connectto;
#line 2
allow selinux_net input_device:chr_file { write getattr open };
#line 2
allow selinux_net property_socket:sock_file write;
#line 2
allow selinux_net self:capability { fowner fsetid dac_override };
#line 2
allow selinux_net selinux_net_exec:file open;
#line 2
allow selinux_net servicemanager:binder call;
#line 2
allow selinux_net setupwizard_prop:property_service set;
#line 2
allow selinux_net shell_exec:file { read execute open execute_no_trans };
#line 2
allow selinux_net system:binder { transfer call };
#line 2
allow selinux_net system_file:file execute_no_trans;
#line 2
allow selinux_net zygote_exec:file { read getattr open execute execute_no_trans };
#line 2

#line 2
############ qcom_common #############
#line 2
# FOR TESTING TZAPPS FROM SHELL (DO NOT MERGE TO PROD)
#line 2
#allow shell qseecom_device:chr_file rw_file_perms;
#line 2

#line 2
# TO SUPPORT FOTA VERIFICATION FOR DEVICE BLOCK
#line 2
#allow shell mdmblk_device:blk_file r_file_perms;
#line 2
#allow shell emmcblk_device:blk_file r_file_perms;
#line 2
#allow shell block_device:blk_file r_file_perms;
#line 2
#allow shell apnhlosblk_device:blk_file r_file_perms;
#line 2
#allow shell recoveryblk_device:blk_file r_file_perms;
#line 2

#line 2
#for Hasati App - VoLTE test app by ATT
#line 2

#line 2
allow untrusted_app system_app:unix_stream_socket connectto;
allow umcagent_app system_app:unix_stream_socket connectto;
allow vpn_untrusted_app system_app:unix_stream_socket connectto;
allow trustonicpartner_app system_app:unix_stream_socket connectto;
allow llk_untrusted_app system_app:unix_stream_socket connectto;
allow filtered_untrusted_app system_app:unix_stream_socket connectto;
allow filtered_google_app system_app:unix_stream_socket connectto;
allow knox_untrusted_app system_app:unix_stream_socket connectto;
allow irm_app system_app:unix_stream_socket connectto;
allow gad_untrusted_app system_app:unix_stream_socket connectto;
allow untrusted_app s_system_app:unix_stream_socket connectto;
allow umcagent_app s_system_app:unix_stream_socket connectto;
allow vpn_untrusted_app s_system_app:unix_stream_socket connectto;
allow trustonicpartner_app s_system_app:unix_stream_socket connectto;
allow llk_untrusted_app s_system_app:unix_stream_socket connectto;
allow filtered_untrusted_app s_system_app:unix_stream_socket connectto;
allow filtered_google_app s_system_app:unix_stream_socket connectto;
allow knox_untrusted_app s_system_app:unix_stream_socket connectto;
allow irm_app s_system_app:unix_stream_socket connectto;
allow gad_untrusted_app s_system_app:unix_stream_socket connectto;
allow carrier_app system_app:unix_stream_socket connectto;
allow carrier_app s_system_app:unix_stream_socket connectto;
#line 2
allow untrusted_app system_app:unix_stream_socket { read write };
allow umcagent_app system_app:unix_stream_socket { read write };
allow vpn_untrusted_app system_app:unix_stream_socket { read write };
allow trustonicpartner_app system_app:unix_stream_socket { read write };
allow llk_untrusted_app system_app:unix_stream_socket { read write };
allow filtered_untrusted_app system_app:unix_stream_socket { read write };
allow filtered_google_app system_app:unix_stream_socket { read write };
allow knox_untrusted_app system_app:unix_stream_socket { read write };
allow irm_app system_app:unix_stream_socket { read write };
allow gad_untrusted_app system_app:unix_stream_socket { read write };
allow untrusted_app s_system_app:unix_stream_socket { read write };
allow umcagent_app s_system_app:unix_stream_socket { read write };
allow vpn_untrusted_app s_system_app:unix_stream_socket { read write };
allow trustonicpartner_app s_system_app:unix_stream_socket { read write };
allow llk_untrusted_app s_system_app:unix_stream_socket { read write };
allow filtered_untrusted_app s_system_app:unix_stream_socket { read write };
allow filtered_google_app s_system_app:unix_stream_socket { read write };
allow knox_untrusted_app s_system_app:unix_stream_socket { read write };
allow irm_app s_system_app:unix_stream_socket { read write };
allow gad_untrusted_app s_system_app:unix_stream_socket { read write };
allow carrier_app system_app:unix_stream_socket { read write };
allow carrier_app s_system_app:unix_stream_socket { read write };
#line 2

#line 2
#allow system_app self:capability *;
#line 2
#allow untrusteddomain device:dir create_dir_perms;
#line 2
#allow untrusteddomain device:file create_file_perms;
#line 2
#allow untrusteddomain device:chr_file rw_file_perms;
#line 2
#allow untrusteddomain device:sock_file create_file_perms;
#line 2

#line 66


#line 1 "vendor/samsung/common/sepolicy/file.te"
#
# file
#

############ aosp and sec_common #############
# fs_type
type anon_inodefs, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr69, newAttr76;


# r_fs_type
typealias firmware_file alias firmware;

typeattribute firmware r_fs_type;
typeattribute inotify r_fs_type;
typeattribute mqueue r_fs_type;
typeattribute proc r_fs_type;
typeattribute proc_net r_fs_type;


# rw_fs_type
type ecryptfs, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type proc_spd, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type pstore, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;
type sysfs_app_writable, rw_fs_type, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_camera_writable, sysfs_type, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_exynos_writable, rw_fs_type, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_lcd_writable, rw_fs_type, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_mdnie_writable, sysfs_type, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_mst_writable, sysfs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr85, newAttr69;
type sysfs_music_power_writable, rw_fs_type, fs_type, sysfs_type, mlstrustedobject, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_sensor_writable, rw_fs_type, fs_type, sysfs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
## sysfs for sec
type sysfs_sec, sysfs_type, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr85, newAttr83, newAttr69;
type sysfs_ss_writable, sysfs_type, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr85, newAttr69;
type sysfs_tcon_writable, sysfs_type, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr85, newAttr69;

typealias proc_sysrq alias sysrq_proc;

typeattribute cgroup rw_fs_type;
typeattribute devpts rw_fs_type;
typeattribute pipefs rw_fs_type;
typeattribute proc_bluetooth_writable rw_fs_type;
typeattribute qtaguid_proc rw_fs_type;
typeattribute sdcard_internal rw_fs_type;
typeattribute sdcard_external rw_fs_type;
typeattribute selinuxfs rw_fs_type;
typeattribute shm rw_fs_type;
typeattribute sockfs rw_fs_type;
typeattribute sysfs rw_fs_type;
typeattribute sysfs_writable rw_fs_type;
typeattribute sysfs_battery_supply rw_fs_type;
typeattribute sysfs_bluetooth_writable rw_fs_type;
typeattribute sysfs_graphics rw_fs_type;
typeattribute sysfs_nfc_power_writable rw_fs_type;
typeattribute sysfs_wake_lock rw_fs_type;
typeattribute sysfs_devices_system_cpu rw_fs_type;
typeattribute sysrq_proc rw_fs_type;
typeattribute tmpfs rx_fs_type;
typeattribute debugfs rw_fs_type;

# rx_fs_type
typeattribute rootfs rx_fs_type;

# mlstrustedobject of fs
typeattribute proc_bluetooth_writable mlstrustedobject;

# File type
type knox_clipboard_file, file_type, newAttr56, newAttr57, newAttr58, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
typealias lptcp_socket alias lptcp_data_file;

typealias tombstone_data_file alias tombstones_data_file;

# app_public_data_type
typeattribute app_data_file app_public_data_type;
typeattribute gad_untrusted_app_data_file app_public_data_type;
#line 75

# cache_file_type
typeattribute cache_file cache_file_type;
typeattribute cache_backup_file cache_file_type;

# data_file_type
type abt_pers_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type drm_playready_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type dumplog_data_file, file_type, data_file_type, mlstrustedobject, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type jack_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr24, newAttr17, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type obb_apk_file, file_type, data_file_type, mlstrustedobject, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type persdata_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type platform_media_app_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type reset_reason_service_file, data_file_type, file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type system_sysscope_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type personal_page_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
# For DCM
type dcm_data_file, file_type, data_file_type, newAttr24, newAttr56, newAttr57, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

# CAC support
type smartcard_data_file, file_type, data_file_type, mlstrustedobject, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
type store_app_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type users_system_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69;
type vpnclientd_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr90, newAttr69;

typealias dumplog_data_file alias dump_log_data_file;
typealias persist_file alias persist_data_file;

typeattribute persist_data_file data_file_type;
typeattribute wallpaper_file data_file_type;

# efs_type
type app_efs_file, efs_type, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type carrier_efs_file, efs_type, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
#contents protection key
type cpk_efs_file, efs_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type drm_efs_file, efs_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type efs_gsm_file, efs_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type imei_efs_file, efs_type, file_type,mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type iss_efs_file, efs_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type nv_core_efs_file, efs_type, file_type, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type otadm_efs_file, efs_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type prov_efs_file, efs_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type sec_efs_file, efs_type, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr17, newAttr19, newAttr51, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type wifi_efs_file, efs_type, file_type,mlstrustedobject, newAttr16, newAttr18, newAttr17, newAttr19, newAttr51, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
# For payment efs file
type pfw_efs_file, efs_type, file_type, newAttr51, newAttr56, newAttr57, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

typeattribute bluetooth_efs_file efs_type;
typeattribute efs_file efs_type;

# exec_type
type tima_dump_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# library_file_type
type app_library_file, library_file_type, file_type, mlstrustedobject, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr78, newAttr69;
#type system_library_file, library_file_type, file_type, mlstrustedobject;
type downfilters_lib_file, library_file_type, file_type, mlstrustedobject, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr78, newAttr69;

# log_file_type
type audit_log, log_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type tima_log, log_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

# misc_rw_file_type
type device_firmware_file, file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type carrier_file, misc_rw_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type sbfs_file, misc_rw_file_type, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type hidden_file, misc_rw_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

# mlstrustedobject of file
typeattribute asec_apk_file mlstrustedobject;
typeattribute bluetooth_data_file mlstrustedobject;
typeattribute bluetooth_efs_file mlstrustedobject;
typeattribute efs_file mlstrustedobject;
typeattribute kernel mlstrustedobject;
typeattribute media_rw_data_file mlstrustedobject;
typeattribute property_socket mlstrustedobject;
typeattribute system_data_file mlstrustedobject;
typeattribute system_file mlstrustedobject;
typeattribute tombstone_data_file mlstrustedobject;
typeattribute usbaccessory_device mlstrustedobject;

#line 156
typeattribute shell mlstrustedsubject;
#line 156
typeattribute adbd mlstrustedsubject;
#line 159


# socket_file_type
type audio_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type cs_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type charon_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type frigate_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type ipsec_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type jack_socket, socket_file_type, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type msockets_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type mtp_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type radio_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type ss_conn_daemon_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type ss_kbservice_daemon_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type tz_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type uibc_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;
type vpnclientd_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

typeattribute adbd_socket socket_file_type;
typeattribute bluetooth_socket socket_file_type;
typeattribute dnsproxyd_socket socket_file_type;
typeattribute gps_socket socket_file_type;
typeattribute installd_socket socket_file_type;
typeattribute mdns_socket socket_file_type;
typeattribute netd_socket socket_file_type;
typeattribute property_socket socket_file_type;
typeattribute racoon_socket socket_file_type;
typeattribute rild_socket socket_file_type;
typeattribute rild_debug_socket socket_file_type;
typeattribute system_wpa_socket socket_file_type;
typeattribute system_ndebug_socket socket_file_type;
typeattribute vold_socket socket_file_type;
typeattribute wpa_socket socket_file_type;
typeattribute zygote_socket socket_file_type;
typeattribute gps_control misc_rw_file_type;
typeattribute dumpstate_socket socket_file_type;

# security_file_type
type tima_keystore_file, security_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

# untrusted_type
typeattribute app_data_file untrusted_type;
typeattribute gad_untrusted_app_data_file untrusted_type;
#line 201
typeattribute shell_data_file untrusted_type;

#Rule
allow file_type ecryptfs:filesystem associate;
allow dev_type ecryptfs:filesystem associate;
allow sdcard_external labeledfs:filesystem associate;
allow rootfs sysfs:filesystem associate;
allow sysfs tmpfs:filesystem associate;
allow system_fifo tmpfs:filesystem associate;


############ knox_common #############
# rw_fs_type
## proc_avc_msg
type proc_avc_msg, rw_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr82, newAttr83, newAttr69;

# container_file_type
type container_app_data_backend, container_file_type, file_type, newAttr58, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type bbccontainer_app_data_backend, container_file_type, file_type, newAttr58, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
#line 219
type container_app_data_file, container_file_type, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr24, newAttr58, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type container_app_sdcard_file, container_file_type, file_type, newAttr58, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type container_system_file, container_file_type, file_type, newAttr58, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
typeattribute bbccontainer_app_data_backend mlstrustedobject;

# socket_file_type
type drsd_socket, socket_file_type, file_type, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type epm_socket, socket_file_type, file_type, mlstrustedobject, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;


# Support knox migration from knox 1.0 to knox 2.0
allow container_app_data_file self:filesystem associate;
allow container_app_sdcard_file self:filesystem associate;
# Filesystem accesses.
allow domain container_app_data_file:filesystem getattr;
allow domain container_app_sdcard_file:filesystem getattr;

############ qcom_common #############
# data_file_type
type time_data_file, data_file_type, file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr19, newAttr17, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69, newAttr90;

# socket_file_type
# conflict with Qcom BSP, type mpctl_socket, socket_file_type, file_type;
type mpdecision_socket, socket_file_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
# conflict with Qcom BSP, type pps_socket, socket_file_type, file_type;
#type qmux_audio_socket, socket_file_type, file_type;
#type qmux_bluetooth_socket, socket_file_type, file_type;
#type qmux_gps_socket, socket_file_type, file_type;
#type qmux_radio_socket, socket_file_type, file_type;



############ slsi_common #############
type drm_security_system_file, file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type drm_lib_system_file, file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type setup_ymc_etc_system_file, file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;


# data_file_type

# efs_type
type bin_nv_data_efs_file, efs_type, file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr51, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type sensor_efs_file, efs_type, file_type, newAttr16, newAttr18, newAttr17, newAttr19, newAttr51, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

#Rule
allow file_type usbfs:filesystem associate;
allow dev_type usbfs:filesystem associate;
allow pts_device devpts:filesystem associate;


############ bcom_common #############
# r_fs_type
typealias firmware_file alias modem_firmware;
type security_firmware, r_fs_type, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr81, newAttr77, newAttr76, newAttr69;

##Rule
allow modem_firmware labeledfs:filesystem associate;
allow security_firmware labeledfs:filesystem associate;
allow file_type modem_firmware:filesystem associate;
allow dev_type modem_firmware:filesystem associate;
allow file_type security_firmware:filesystem associate;
allow dev_type security_firmware:filesystem associate;

############ carrier #############
# for JPN model
type felica_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr19, newAttr17, newAttr24, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;

#/data/mmb/MmbCaCasDrmMw
type mmb_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type oneseg_data_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr18, newAttr24, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;

# for Sprint model
type sprintitson_file, file_type, data_file_type, newAttr20, newAttr23, newAttr22, newAttr21, newAttr16, newAttr24, newAttr18, newAttr17, newAttr19, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr60, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr69;


############ aosp and sec_common #############
#### All app private data directories : 
# app_data_type : only used for the domain which have mlstrustedsubject and privilege, because it includes container app data
# aosp common
typeattribute app_data_file app_data_type;
typeattribute gad_untrusted_app_data_file app_data_type;
#line 299
typeattribute bluetooth_data_file app_data_type;
typeattribute nfc_data_file app_data_type;
typeattribute platform_app_data_file app_data_type;
typeattribute platform_media_app_data_file app_data_type;
typeattribute policyloader_app_data_file app_data_type;
typeattribute radio_data_file app_data_type;
typeattribute shell_data_file app_data_type;
typeattribute shell_data_file app_data_type;
typeattribute system_app_data_file app_data_type;
# knox
typeattribute container_app_data_file app_data_type;
typeattribute fixmo_app_data_file app_data_type;
typeattribute store_app_data_file app_data_type;
# carrier
typeattribute felica_data_file app_data_type;
typeattribute mmb_data_file app_data_type;
typeattribute oneseg_data_file app_data_type;
typeattribute sprintitson_file app_data_type;

############ appdomain_no_read_file #############
typeattribute efs_file appdomain_no_read_file;

############ appdomain_no_write_file #############
typeattribute adbd_socket appdomain_no_write_file;
typeattribute apk_data_file appdomain_no_write_file;
typeattribute apk_private_data_file appdomain_no_write_file;
typeattribute apk_private_tmp_file appdomain_no_write_file;
typeattribute apk_tmp_file appdomain_no_write_file;
typeattribute bluetooth_data_file appdomain_no_write_file;
typeattribute dhcp_data_file appdomain_no_write_file;
typeattribute drm_data_file appdomain_no_write_file;
typeattribute efs_file appdomain_no_write_file;
typeattribute gps_data_file appdomain_no_write_file;
typeattribute installd_socket appdomain_no_write_file;
typeattribute property_socket appdomain_no_write_file;
typeattribute rild_socket appdomain_no_write_file;
typeattribute shell_data_file appdomain_no_write_file;
typeattribute socket_device appdomain_no_write_file;
typeattribute systemkeys_data_file appdomain_no_write_file;
typeattribute system_data_file appdomain_no_write_file;
typeattribute vold_socket appdomain_no_write_file;
typeattribute wifi_data_file appdomain_no_write_file;
typeattribute zygote_socket appdomain_no_write_file;

############ domain_no_read_file #############
typeattribute runas_exec domain_no_read_file;
typeattribute keystore_data_file domain_no_read_file;
typeattribute unlabeled domain_no_read_file;
# For DCM
typeattribute dcm_data_file domain_no_read_file;
# For SamsungPay FW
typeattribute pfw_efs_file domain_no_read_file;

############ domain_no_read_knoxfile #############
typeattribute container_app_data_backend domain_no_read_knoxfile;
typeattribute bbccontainer_app_data_backend domain_no_read_knoxfile;
#line 354
typeattribute container_app_data_file domain_no_read_knoxfile;
typeattribute container_app_sdcard_file domain_no_read_knoxfile;
typeattribute container_system_file domain_no_read_knoxfile;
typeattribute fixmo_app_data_file domain_no_read_knoxfile;
typeattribute gad_untrusted_app_data_file domain_no_read_knoxfile;
typeattribute good_app_data_file domain_no_read_knoxfile;
typeattribute knox_clipboard_file domain_no_read_knoxfile;


############ domain_no_write_file #############
typeattribute dalvikcache_data_file domain_no_write_file;
typeattribute keystore_data_file domain_no_write_file;
typeattribute property_data_file domain_no_write_file;
typeattribute runas_exec domain_no_write_file;
typeattribute security_file domain_no_write_file;
typeattribute security_spota_file domain_no_write_file;
#line 369
typeattribute system_file domain_no_write_file;
typeattribute unlabeled domain_no_write_file;
# For DCM
typeattribute dcm_data_file domain_no_write_file;
# For SamsungPay FW
typeattribute pfw_efs_file domain_no_write_file;
# Access restriction of nv_data, reqested from CP system(js074.lee)
typeattribute nv_core_efs_file domain_no_write_file;

############ domain_no_write_knoxfile #############
typeattribute container_app_data_backend domain_no_write_knoxfile;
typeattribute bbccontainer_app_data_backend domain_no_write_knoxfile;
#line 380
typeattribute container_app_data_file domain_no_write_knoxfile;
typeattribute container_app_sdcard_file domain_no_write_knoxfile;
typeattribute container_system_file domain_no_write_knoxfile;
typeattribute drsd_socket domain_no_write_knoxfile;
typeattribute fixmo_app_data_file domain_no_write_knoxfile;
typeattribute gad_untrusted_app_data_file domain_no_write_knoxfile;
typeattribute good_app_data_file domain_no_write_knoxfile;
typeattribute knox_clipboard_file domain_no_write_knoxfile;

############ domain_no_read_fs #############
typeattribute debugfs domain_no_read_fs;
typeattribute device domain_no_read_fs;

############ domain_no_read_knoxfs #############
#typeattribute container_app_data_backend domain_no_read_knoxfs;
#typeattribute container_app_data_file domain_no_read_knoxfs;
#typeattribute container_app_sdcard_file domain_no_read_knoxfs;

############ domain_no_write_fs #############
typeattribute device domain_no_write_fs;
typeattribute usermodehelper domain_no_write_fs;
typeattribute proc_security domain_no_write_fs;
typeattribute rootfs domain_no_write_fs;
typeattribute selinuxfs domain_no_write_fs;
typeattribute sysfs domain_no_write_fs;

############ domain_no_write_knoxfs #############
#typeattribute container_app_data_backend domain_no_write_knoxfs;
#typeattribute container_app_data_file domain_no_write_knoxfs;
#typeattribute container_app_sdcard_file domain_no_write_knoxfs;

############ cts_trusted_domain #############
typeattribute bluetooth cts_trusted_domain;
typeattribute bootanim cts_trusted_domain;
typeattribute clatd cts_trusted_domain;
typeattribute debuggerd cts_trusted_domain;
typeattribute dex2oat cts_trusted_domain;
typeattribute dhcp cts_trusted_domain;
typeattribute dnsmasq cts_trusted_domain;
typeattribute drmserver cts_trusted_domain;
typeattribute dumpstate cts_trusted_domain;
typeattribute gpsd cts_trusted_domain;
typeattribute healthd cts_trusted_domain;
typeattribute hostapd cts_trusted_domain;
typeattribute init_shell cts_trusted_domain;
typeattribute installd cts_trusted_domain;
typeattribute keystore cts_trusted_domain;
typeattribute lmkd cts_trusted_domain;
typeattribute mdnsd cts_trusted_domain;
typeattribute mediaserver cts_trusted_domain;
typeattribute mtp cts_trusted_domain;
typeattribute netd cts_trusted_domain;
typeattribute nfc cts_trusted_domain;
typeattribute platform_app cts_trusted_domain;
typeattribute ppp cts_trusted_domain;
typeattribute racoon cts_trusted_domain;
typeattribute radio cts_trusted_domain;
typeattribute rild cts_trusted_domain;
typeattribute sdcardd cts_trusted_domain;
typeattribute servicemanager cts_trusted_domain;
typeattribute surfaceflinger cts_trusted_domain;
typeattribute system_app cts_trusted_domain;
typeattribute system_server cts_trusted_domain;
typeattribute tee cts_trusted_domain;
typeattribute ueventd cts_trusted_domain;
typeattribute vdc cts_trusted_domain;
typeattribute vold cts_trusted_domain;
typeattribute watchdogd cts_trusted_domain;
typeattribute wpa cts_trusted_domain;
typeattribute zygote cts_trusted_domain;


#cts_domain (52 types)
typeattribute adbd cts_domain;
typeattribute bluetooth cts_domain;
typeattribute bootanim cts_domain;
typeattribute clatd cts_domain;
typeattribute debuggerd cts_domain;
typeattribute dex2oat cts_domain;
typeattribute dhcp cts_domain;
typeattribute dnsmasq cts_domain;
typeattribute drmserver cts_domain;
typeattribute dumpstate cts_domain;
typeattribute gpsd cts_domain;
typeattribute hci_attach cts_domain;
typeattribute healthd cts_domain;
typeattribute hostapd cts_domain;
typeattribute init cts_domain;
typeattribute init_shell cts_domain;
typeattribute inputflinger cts_domain;
typeattribute install_recovery cts_domain;
typeattribute installd cts_domain;
typeattribute isolated_app cts_domain;
typeattribute kernel cts_domain;
typeattribute keystore cts_domain;
typeattribute lmkd cts_domain;
typeattribute logd cts_domain;
typeattribute mdnsd cts_domain;
typeattribute mediaserver cts_domain;
typeattribute mtp cts_domain;
typeattribute netd cts_domain;
typeattribute nfc cts_domain;
typeattribute platform_app cts_domain;
typeattribute ppp cts_domain;
typeattribute racoon cts_domain;
typeattribute radio cts_domain;
typeattribute recovery cts_domain;
typeattribute rild cts_domain;
typeattribute runas cts_domain;
typeattribute sdcardd cts_domain;
typeattribute servicemanager cts_domain;
typeattribute shared_relro cts_domain;
typeattribute shell cts_domain;
typeattribute surfaceflinger cts_domain;
typeattribute system_app cts_domain;
typeattribute system_server cts_domain;
typeattribute tee cts_domain;
typeattribute ueventd cts_domain;
typeattribute uncrypt cts_domain;
typeattribute untrusted_app cts_domain;
typeattribute vdc cts_domain;
typeattribute vold cts_domain;
typeattribute watchdogd cts_domain;
typeattribute wpa cts_domain;
typeattribute zygote cts_domain;

#cts_appdomain (9 types)
typeattribute bluetooth cts_appdomain;
typeattribute isolated_app cts_appdomain;
typeattribute nfc cts_appdomain;
typeattribute platform_app cts_appdomain;
typeattribute radio cts_appdomain;
typeattribute shared_relro cts_appdomain;
typeattribute shell cts_appdomain;
typeattribute system_app cts_appdomain;
typeattribute untrusted_app cts_appdomain;

############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402361415.541:223): avc:  denied  { associate } for  pid=4646 comm="Thread-45" name="libAppDataSearchExt_armeabi_v7a.v3.so" #scontext=u:object_r:download_file:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1398853018.040:21): avc:  denied  { associate } for  pid=345 comm="immvibed" name="tspreq" scontext=u:object_r:system_fifo:s0 #tcontext=u:object_r:tmpfs:s0 tclass=filesystem SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#audit(1403166192.686:249): avc:  denied  { associate } for  pid=25110 comm="roid.music:main" name="c6bce66c-4ba7-4409-8aee-f82.tmp" scontext=u:object_r:sdcard_external:s0 #tcontext=u:object_r:labeledfs:s0 tclass=filesystem
# Support knox migration from knox 1.0 to knox 2.0
# avc:  denied  { associate } for  pid=561 comm="epmd" scontext=u:object_r:container_app_data_file:s0:c1 tcontext=u:object_r:container_app_data_file:s0:c1 tclass=filesystem
# item=0 name="/knox_data/appdata" inode=6806 dev=00:01 mode=040775 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:rootfs:s0
# avc:  denied  { associate } for  pid=561 comm="epmd" scontext=u:object_r:container_app_sdcard_file:s0:c1 tcontext=u:object_r:container_app_sdcard_file:s0:c1 tclass=filesystem
# item=0 name="/knox_data/userdata" inode=6805 dev=00:01 mode=040775 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:rootfs:s0


#line 1 "vendor/samsung/common/sepolicy/gpsd.te"
#
# gpsd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute gpsd trusteddomain;
typeattribute gpsd system_domain;

# use property

#line 12
allow gpsd property_socket:sock_file write;
#line 12
allow gpsd init:unix_stream_socket connectto;
#line 12


# connectto rild

#line 15
allow gpsd rild_socket:sock_file write;
#line 15
allow gpsd rild:unix_stream_socket connectto;
#line 15


# allow binder IPC and binder call system service

#line 18
# Call the servicemanager and transfer references to it.
#line 18
allow gpsd servicemanager:binder { call transfer };
#line 18
# servicemanager performs getpidcon on clients.
#line 18
allow servicemanager gpsd:dir search;
#line 18
allow servicemanager gpsd:file { read open };
#line 18
allow servicemanager gpsd:process getattr;
#line 18
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 18
# all domains in domain.te.
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow gpsd system_server:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow system_server gpsd:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow gpsd system_server:fd use;
#line 19


########## self and domain_type
# to open raw socket and bind to rmnet1.
allow gpsd self:capability { net_admin net_raw };

allow gpsd system:unix_stream_socket { read write setopt };

########## fs_type
allow gpsd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow gpsd uart_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow gpsd app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow gpsd gad_untrusted_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 35
allow gpsd app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gpsd gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 36
allow gpsd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow gpsd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow gpsd system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow gpsd system_data_file:fifo_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gpsd system_data_file:fifo_file { { getattr open read ioctl lock } { open append write } };
allow gpsd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gpsd system_data_file:file { { getattr open read ioctl lock } { open append write } };
allow gpsd system_file:file { getattr execute execute_no_trans };

########## etc_type
########## known issue.

############ avc_log #############
## open rawsocket and binding rmnet1
# avc:  denied  { net_raw } for  pid=3126 comm="gpsd" capability=13  scontext=u:r:gpsd:s0 tcontext=u:r:gpsd:s0 tclass=capability permissive=1
# avc:  denied  { net_admin } for  pid=3125 comm="gpsd" capability=12  scontext=u:r:gpsd:s0 tcontext=u:r:gpsd:s0 tclass=capability permissive=0

#line 1 "vendor/samsung/common/sepolicy/healthd.te"
#
# healthd
#

############ aosp and sec_common #############
########## type and macro.

typeattribute healthd trusteddomain;
#typeattribute healthd system_domain;
# temporary permissive to gather the log.
# permissive healthd;

########## self and domain_type
allow healthd init:unix_stream_socket { read write };
allow healthd self:capability { dac_read_search dac_override fowner fsetid };
allow healthd system_app:fd use;
allow healthd s_system_app:fd use;
#line 17

########## fs_type
allow healthd sysfs_battery_supply:file write;
allow healthd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };


########## dev_type
########## file_type
allow healthd app_data_file:file { open append write };
allow healthd gad_untrusted_app_data_file:file { open append write };
#line 26
allow healthd app_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow healthd app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow healthd newAttr51:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow healthd newAttr51:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow healthd platform_app_data_file:file { open append write };

########## etc_type
########## known issue.

# support cryptfs_do_dumpstate
allow healthd cache_file:file write;


############ avc_log #############
#from CTS testing
# avc:  denied  { search } for  pid=259 comm="healthd" name="/" dev="mmcblk0p11" ino=2 scontext=u:r:healthd:s0 tcontext=u:object_r:efs_file:s0 tclass=dir
# avc:  denied  { write } for  pid=18336 comm="onCtsTestRunner" path="/data/data/com.android.cts.stub/cache/CTS_DUMP" dev="mmcblk0p25" #ino=915007 scontext=u:r:healthd:s0 tcontext=u:object_r:platform_app_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { write } for  pid=31471 comm="onCtsTestRunner" path="/data/data/com.android.cts.stub/cache/CTS_DUMP" dev="mmcblk0p21" ino=1049584 scontext=u:r:healthd:s0 tcontext=u:object_r:app_data_file:s0 tclass=file SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { create setattr write } for  pid=419 comm="healthd" name="efs/FactoryApp/batt_cable_count" scontext=u:r:healthd:s0 tcontext=u:object_r:efs_file:s0 tclass=file SEPF_SAMSUNG-SM-N910A_4.4.4_A018
# avc:  denied  { write add_name } for  pid=419 comm="healthd" name="FactoryApp" dev="mmcblk0p13" ino=24 scontext=u:r:healthd:s0 tcontext=u:object_r:efs_file:s0 tclass=dir SEPF_SAMSUNG-SM-N910A_4.4.4_A018
# ZERO EUR avc:  denied  { write } for  pid=2874 comm="healthd" name="batt_capacity_max" dev="sysfs" ino=26989 scontext=u:r:healthd:s0 tcontext=u:object_r:sysfs_battery_supply:s0 tclass=file permissive=0 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { write } for  pid=7899 comm="dumpsys" path="/cache/recovery/last_ode_dumpstate_error_unencrypted.log" dev="mmcblk0p24" ino=16002 scontext=u:r:healthd:s0 tcontext=u:object_r:cache_file:s0 tclass=file SEPF_SAMSUNG-SM-T537A_5.0.2_0009
#line 1 "vendor/samsung/common/sepolicy/hostapd.te"
#
# hostapd
# 

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute hostapd trusteddomain;
#typeattribute hostapd system_domain;
# temporary permissive to gather the log.
# permissive hostapd;

########## self and domain_type
allow hostapd kernel:system module_request;
allow hostapd netd:unix_dgram_socket sendto;

########## fs_type
allow hostapd cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow hostapd cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
########## file_type
allow hostapd efs_file:dir { open getattr read search ioctl };
allow hostapd efs_file:file { getattr open read ioctl lock };
allow hostapd system_data_file:file { { getattr open read ioctl lock } { open append write } };
allow hostapd system_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow hostapd wifi_efs_file:dir { open getattr read search ioctl };
allow hostapd wifi_efs_file:file { getattr open read ioctl lock };


########## etc_type
########## known issue.
#from NSA
allow hostapd self:netlink_route_socket { bind create };
allow hostapd self:udp_socket { create ioctl };
allow hostapd wifi_data_file:sock_file { create setattr write unlink };
allow hostapd netd:fifo_file { read write };


############ avc_log #############
## avc_log
# avc:  denied  { module_request } for  pid=30915 comm="hostapd" kmod="netdev-wlan0" scontext=u:r:hostapd:s0 tcontext=u:r:kernel:s0 tclass=system

#line 1 "vendor/samsung/common/sepolicy/init.te"
#
# init
#

############ aosp and sec_common #############
########## type and macro.
# temporary permissive to gather the log.
# permissive init;

########## self and domain_type
allow init kernel:system syslog_mod;
allow init prepare_param:process transition;
allow init self:capability sys_module;

########## fs_type
#neverallow by Google: allow init {fs_type dev_type file_type }:dir_file_class_set relabelto;
allow init newAttr69:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } relabelto;
allow init firmware:filesystem relabelto;
allow init functionfs:filesystem mount;
allow init pstore:filesystem mount;

########## dev_type
allow init block_device:blk_file relabelfrom;
allow init efsblk_device:blk_file setattr;
allow init emmcblk_device:blk_file { relabelfrom setattr };

########## file_type
#neverallow by Google: (keystore_data_file:dir *;)
#allow init data_file_type:dir create_dir_perms;
allow init newAttr24:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init energy-awareness_exec:file execute_no_trans;

#neverallow by Google: neverallow { domain -system_server } security_file:dir { rename write add_name remove_name rmdir };
allow init security_file:dir ~{ rename write add_name remove_name rmdir };
allow init security_spota_file:dir ~{ rename write add_name remove_name rmdir };
#line 35
allow init system_fifo:dir { relabelfrom relabelto { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } };
allow init system_file:dir mounton;

########## etc_type
allow init port:tcp_socket name_connect;
allow init port:{ tcp_socket udp_socket } name_bind;
allow init node:{ tcp_socket udp_socket } node_bind;

########## known issue.
# VPN issue
allow init node:rawip_socket node_bind;

# init process: debug_interface, mld
# will be removed after generate specific domain.
allow init sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow init sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Transitions to seclabel processes in init.rc
allow init flash_recovery:process transition;

# not transited process, lpm  
allow init ashmem_device:chr_file execute;

# emmc_quickverify in recovery mode /sbin/emmc_quickverify u:object_r:rootfs:s0 emmc_quickverify
allow init kernel:system syslog_read;
#neverallow by Google: neverallow domain rootfs:file { create write setattr relabelto append unlink link rename };

# init should delete SPD policy when the verification is fail, "Function: selinux_android_load_priority , spota verifySig or checkHash fails."
#neverallow by Google: neverallow { domain -system_server } security_file:file { create setattr write append unlink link rename };
# allow init security_file:file unlink;

#  /data/system/container was security_file at Kitkat, but now it is container_system_file
allow init security_file:dir relabelfrom ;
allow init security_spota_file:dir relabelfrom ;
#line 68
allow init security_file:file relabelfrom;
allow init security_spota_file:file relabelfrom;
#line 69


############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1398853016.740:14): avc:  denied  { read } for  pid=1 comm="init" name="pipes" dev="tmpfs" ino=10176 scontext=u:r:init:s0 #tcontext=u:object_r:system_fifo:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1398853016.740:15): avc:  denied  { open } for  pid=1 comm="init" name="pipes" dev="tmpfs" ino=10176 scontext=u:r:init:s0 #tcontext=u:object_r:system_fifo:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1398853016.740:16): avc:  denied  { setattr } for  pid=1 comm="init" name="pipes" dev="tmpfs" ino=10176 scontext=u:r:init:s0 #tcontext=u:object_r:system_fifo:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1398853016.740:17): avc:  denied  { getattr } for  pid=1 comm="init" path="/dev/pipes" dev="tmpfs" ino=10176 scontext=u:r:init:s0 #tcontext=u:object_r:system_fifo:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1398853016.740:18): avc:  denied  { relabelfrom } for  pid=1 comm="init" name="pipes" dev="tmpfs" ino=10176 scontext=u:r:init:s0 #tcontext=u:object_r:system_fifo:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1398853016.740:19): avc:  denied  { relabelto } for  pid=1 comm="init" name="pipes" dev="tmpfs" ino=10176 scontext=u:r:init:s0 #tcontext=u:object_r:system_fifo:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#audit(1388891429.010:20): avc:  denied  { setattr } for  pid=1 comm="init" name="mmcblk0p12" dev="tmpfs" ino=10117 scontext=u:r:init:s0 tcontext=u:object_r:efsblk_device:s0 #tclass=blk_file
#audit(1388891428.390:12): avc:  denied  { relabelfrom } for  pid=219 comm="init" name="mmcblk0p23" dev="tmpfs" ino=10161 scontext=u:r:init:s0 tcontext=u:object_r:emmcblk_device:s0 tclass=blk_file
#audit(1388891428.460:13): avc:  denied  { syslog_mod } for  pid=1 comm="init" scontext=u:r:init:s0 tcontext=u:r:kernel:s0 tclass=system
#audit(1388891429.060:21): avc:  denied  { transition } for  pid=270 comm="init" path="/system/bin/prepare_param.sh" dev="mmcblk0p23" ino=452 scontext=u:r:init:s0 #tcontext=u:r:prepare_param:s0 tclass=process
#audit(1388891428.570:17): avc:  denied  { setattr } for  pid=1 comm="init" name="container" dev="mmcblk0p26" ino=261638 scontext=u:r:init:s0 #tcontext=u:object_r:security_file:s0 tclass=dir
#audit(1388891428.580:18): avc:  denied  { relabelfrom } for  pid=1 comm="init" name="container" dev="mmcblk0p26" ino=261638 scontext=u:r:init:s0 #tcontext=u:object_r:security_file:s0 tclass=dir
#audit(1388891428.580:19): avc:  denied  { relabelfrom } for  pid=1 comm="init" name="enterprisedata.xml" dev="mmcblk0p26" ino=261692 scontext=u:r:init:s0 #tcontext=u:object_r:security_file:s0 tclass=file
#type=1400 msg=audit(1403717016.756:367): avc:  denied  { dyntransition } for  pid=9478 comm="zygote" scontext=u:r:init:s0 tcontext=u:r:platform_app:s0 tclass=process #SEPF_SAMSUNG-SM-N900A_4.4.3_0018
#type=1400 msg=audit(1403717018.696:370): avc:  denied  { dyntransition } for  pid=9616 comm="zygote" scontext=u:r:init:s0 tcontext=u:r:untrusted_app:s0 tclass=process #SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# zygote context error issue, not necessary for init.
#allow init domain:process { dyntransition transition };
#type=1400 msg=audit(1390261549.330:22): avc:  denied  { add_name } for  pid=1 comm="init" name=".playready" scontext=u:r:init:s0 tcontext=u:object_r:app_data_file:s0 #tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.3_0018
#type=1400 msg=audit(1390261549.210:15): avc:  denied  { relabelto } for  pid=1 comm="init" scontext=u:r:init:s0 tcontext=u:object_r:firmware:s0 tclass=filesystem SEPF_SAMSUNG-#SM-N900A_4.4.3_0018
#type=1400 msg=audit(1390261549.880:23): avc:  denied  { relabelto } for  pid=1 comm="init" name=".secure_storage" dev="tmpfs" ino=9360 scontext=u:r:init:s0 #tcontext=u:object_r:secure_storage_device:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.3_0018
#type=1400 msg=audit(1403717021.536:371): avc:  denied  { setattr } for  pid=9700 comm="zygote" name="0" dev="sdcardfs" ino=522241 scontext=u:r:init:s0 #tcontext=u:object_r:sdcard_internal:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# zygote context error issue, not necessary for init.
#allow init sdcard_internal:dir { create_dir_perms mounton };
#audit(1389734574.840:12): avc:  denied  { relabelto } for  pid=1 comm="init" scontext=u:r:init:s0 tcontext=u:object_r:firmware:s0 tclass=filesystem
# avc:  denied  { name_connect } for  pid=2713 comm="lhd" dest=6477 scontext=u:r:init:s0 tcontext=u:object_r:port:s0 tclass=tcp_socket
# avc:  denied  { name_bind } for  pid=20499 comm="olsrd" src=1978 scontext=u:r:init:s0 tcontext=u:object_r:port:s0 tclass=tcp_socket SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { name_bind } for  pid=20499 comm="olsrd" src=698 scontext=u:r:init:s0 tcontext=u:object_r:port:s0 tclass=udp_socket SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { node_bind } for  pid=20499 comm="olsrd" src=1978 scontext=u:r:init:s0 tcontext=u:object_r:node:s0 tclass=tcp_socket SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { node_bind } for  pid=20499 comm="olsrd" src=60699 scontext=u:r:init:s0 tcontext=u:object_r:node:s0 tclass=udp_socket SEPF_SM-N910F_4.4.4_0018
#audit(1388577642.275:13): avc:  denied  { sys_module } for  pid=2696 comm="macloader" capability=16  scontext=u:r:init:s0 tcontext=u:r:init:s0 tclass=capability
#type=1300 audit(1388577643.425:57): arch=40000028 syscall=294 per=800000 success=yes exit=0 a0=3 a1=0 a2=40 a3=b89afaf8 items=0 ppid=2660 pid=2970 auid=4294967295 uid=0 gid=0 #euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="iptatype=1400 audit(1388577643.430:58): avc:  denied  { sys_module } for  pid=2696 #comm="macloader" capability=16  scontext=u:r:init:s0 tcontext=u:r:init:s0 tclass=capability
# P140707-00011 : avc:  denied  { transition } for  pid=428 comm="init" path="/system/etc/install-recovery.sh" dev="mmcblk0p24" ino=3776 scontext=u:r:init:s0 tcontext=u:r:flash_recovery:s0 tclass=process
# P140707-02021 : avc:  denied  { execute } for  pid=2787 comm="lpm" path="/dev/ashmem" dev="tmpfs" ino=8208 scontext=u:r:init:s0 tcontext=u:object_r:ashmem_device:s0 tclass=chr_file
# avc:  denied  { create } for  pid=281 comm="emmc_quickverif" name="emmc_checksum.log" scontext=u:r:init:s0 tcontext=u:object_r:rootfs:s0 tclass=file
# avc:  denied  { append } for  pid=281 comm="emmc_quickverif" path="/tmp/emmc_checksum.log" dev="rootfs" ino=11272 scontext=u:r:init:s0 tcontext=u:object_r:rootfs:s0 tclass=file
# avc:  denied  { syslog_read } for  pid=281 comm="emmc_quickverif" scontext=u:r:init:s0 tcontext=u:r:kernel:s0 tclass=system
# avc:  denied  { mounton } for  pid=404 comm="update_binary" path="/system" dev="mmcblk0p24" ino=2 scontext=u:r:recovery:s0 tcontext=u:object_r:system_file:s0 tclass=dir
# avc:  denied  { unlink } for  pid=1 comm="init" name="sepolicy" dev="mmcblk0p26" ino=130572 scontext=u:r:init:s0 tcontext=u:object_r:security_file:s0 tclass=file
# P140818-00020 avc:  denied  { relabelfrom } for  pid=266 comm="init" name="dm-0" dev="tmpfs" ino=9925 scontext=u:r:init:s0 tcontext=u:object_r:block_device:s0 tclass=blk_file SEPF_SM-N910T_4.4.4_A019
# avc:  denied  { rlimitinh } for  pid=297 comm="prepare_param.s" scontext=u:r:init:s0 tcontext=u:r:prepare_param:s0 tclass=process
# avc:  denied  { siginh } for  pid=297 comm="prepare_param.s" scontext=u:r:init:s0 tcontext=u:r:prepare_param:s0 tclass=process
# arch=40000028 syscall=11 per=800000 success=yes exit=0 a0=b6d7e8d1 a1=b6d7305c a2=60884 a3=1000000 items=3 ppid=1 pid=297 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="preaudit(1388928367.200:12): argc=3 a0="/system/bin/sh" a1="/system/bin/prepare_param.sh" a2="/dev/block/platform/msm_sdcc.1/by-name/param"
# argc=2 a0="/system/bin/sh" a1="/system/bin/prepare_param.sh"
# cwd="/"
# item=0 name="/system/bin/prepare_param.sh" inode=612 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:prepare_param_sh_file:s0
# item=1 name=(null) inode=688 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:shell_exec:s0
# item=2 name=(null) inode=543 dev=b3:17 mode=0100755 ouid=0 ogid=2000 rdev=00:00 obj=u:object_r:system_file:s0
# avc:  denied  { setattr } for  pid=1 comm="init" name="mmcblk0p12" dev="tmpfs" ino=7541 scontext=u:r:init:s0 tcontext=u:object_r:emmcblk_device:s0 tclass=blk_file
# avc:  denied  { execute_no_trans } for  pid=507 comm="init" path="/system/bin/energy-awareness" dev="sda13" ino=666 scontext=u:r:init:s0 tcontext=u:object_r:energy-awareness_exec:s0 tclass=file permissive=0 SEPF_SM-N916S_5.0.2_0002
# avc:  denied  { mounton } for  pid=2924 comm="init" path="/.system" dev="sda15" ino=2 scontext=u:r:init:s0 tcontext=u:object_r:system_file:s0 tclass=dir permissive=0

#line 1 "vendor/samsung/common/sepolicy/installd.te"
#
# installd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute installd trusteddomain;
typeattribute installd system_domain;


#line 11
allow installd property_socket:sock_file write;
#line 11
allow installd init:unix_stream_socket connectto;
#line 11


########## self and domain_type
allow installd kernel:system module_request;
allow installd self:capability sys_admin;

########## fs_type
allow installd sdcard_external:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd sdcard_external:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type

########## file_type
allow installd apk_data_file:lnk_file create;
allow installd app_data_file:dir relabelto;
allow installd gad_untrusted_app_data_file:dir relabelto;
#line 26
allow installd app_data_file:file write;
allow installd gad_untrusted_app_data_file:file write;
#line 27
allow installd app_library_file:dir { { open getattr read search ioctl } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow installd app_library_file:file { rx_file_perms link_file_perms };
allow installd app_library_file:file { { getattr open read ioctl lock } { getattr link unlink rename } };
allow installd dalvikcache_data_file:dir relabelfrom;
allow installd dalvikcache_profiles_data_file:dir relabelto;
allow installd media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd obb_apk_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto };
allow installd obb_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd store_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto };
allow installd store_app_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd store_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd system_data_file:fifo_file { getattr open read ioctl lock };
allow installd system_data_file:sock_file { { getattr open read ioctl lock } { getattr link unlink rename } };

########## etc_type
allow installd property_socket:sock_file { open append write };
allow installd sdcard_prop:property_service set;

########## known issue.
# paid app problem.
allow installd unlabeled:file { getattr open read ioctl lock };

#from NSA
allow installd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow by Google: 
allow installd newAttr20:dir { open getattr read search ioctl };
allow installd newAttr20:{ file lnk_file } { getattr open read ioctl lock };
allow installd newAttr22:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow installd newAttr22:dir { relabelfrom relabelto };
allow installd newAttr23:{ { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } { getattr unlink };
allow installd unlabeled:{ { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } { getattr read open unlink };
allow installd platform_app_data_file:lnk_file { create setattr };
allow installd app_data_file:lnk_file { create setattr };
allow installd gad_untrusted_app_data_file:lnk_file { create setattr };
#line 63

#from AOSP
allow installd { app_data_type system_data_file }:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom relabelto };
allow installd { app_data_type system_data_file }:lnk_file { create setattr getattr unlink rename relabelfrom relabelto };
allow installd { app_data_type system_data_file }:{ file sock_file fifo_file } { getattr unlink rename relabelfrom relabelto setattr };

# Create symlinks in /data/dalvik-cache
allow installd dalvikcache_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ knox_common #############
########## type and macro.
########## self and domain_type
allow installd container_app:fd use;

########## fs_type
########## dev_type
########## file_type
allow installd container_app_data_backend:dir { relabelto relabelfrom { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } };
allow installd bbccontainer_app_data_backend:dir { relabelto relabelfrom { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } };
#line 81
allow installd container_app_data_backend:file { relabelto relabelfrom { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } };
allow installd bbccontainer_app_data_backend:file { relabelto relabelfrom { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } };
#line 82
allow installd container_app_data_backend:lnk_file { relabelto relabelfrom { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } };
allow installd bbccontainer_app_data_backend:lnk_file { relabelto relabelfrom { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } };
#line 83
allow installd container_app_data_file:dir { relabelto { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } };
allow installd container_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd container_app_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow installd self:capability sys_admin;

########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402398506.115:358): avc:  denied  { relabelto } for  pid=293 comm="installd" name="com.android.cts.monkey2" dev="mmcblk0p25" ino=915146 #scontext=u:r:installd:s0 tcontext=u:object_r:platform_app_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1398892509.830:23): avc:  denied  { relabelto } for  pid=290 comm="installd" name="obb" dev="mmcblk0p25" ino=913925 scontext=u:r:installd:s0 #tcontext=u:object_r:obb_apk_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { relabelfrom } for  pid=360 comm="installd" name="lib" dev="ecryptfs" ino=1175531 scontext=u:r:installd:s0 tcontext=u:object_r:container_app_data_backend:s0 tclass=lnk_file SEPF_SAMSUNG-SM-N910A_4.4.4_A019
# avc:  denied  { relabelto } for  pid=360 comm="installd" name="lib" dev="ecryptfs" ino=1176073 scontext=u:r:installd:s0 tcontext=u:object_r:policyloader_app_data_file:s0:c4 tclass=lnk_file SEPF_SAMSUNG-SM-N910A_4.4.4_A019
# avc:  denied  { write } for  pid=277 comm="installd" path="/data/knox/data/101/EN.FXYzqDUDHDgsW-ZuPTue4-qBeT3Ii9T6ljrXdmKIBSgdWTw6drbwht6l7hA0AEIzQt6nEiuITUDljnY-/EN.FWYzqDUDHDgsW-ZuPTue4-qBeT3Ii9T6ljrXpdBjgxHQW3MzI5gA.Bwb----/EN.FYYzqDUDHDgsW-ZuPTue4-qBeT3Ii9T6ljrXIEewbsdglXutHMqjBf5mEK35g6jsgEGijgyB.WkgUefyEH9jjAB1dA9P3Fn7KrPW" dev="mmcblk0p27" ino=1802 scontext=u:r:installd:s0 tcontext=u:object_r:app_data_file:s0:c3 tclass=file permissive=0 SEPF_SM-G530T_5.1_0011



#line 1 "vendor/samsung/common/sepolicy/install_recovery.te"
#
# install_recovery(flash_recovery)
#

############ aosp and sec_common #############
########## type and macro.
typealias install_recovery alias flash_recovery; 
typealias install_recovery_exec alias flash_recovery_sh_file;


#line 10
allow flash_recovery dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 10
allow flash_recovery dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 10
allow flash_recovery dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 10
allow flash_recovery bugreport_exec:file { execute execute_no_trans };
#line 10
allow flash_recovery dumpstate_exec:file { execute execute_no_trans };
#line 10
allow flash_recovery dumpsys_exec:file { execute execute_no_trans };
#line 10


########## self and domain_type
allow flash_recovery self:capability { chown dac_override fowner fsetid };

########## fs_type
########## dev_type
allow flash_recovery block_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow flash_recovery block_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow flash_recovery block_device:file { { getattr open read ioctl lock } { open append write } };
allow flash_recovery dw_mmc_device:dir { { open getattr read search ioctl } add_name write };
allow flash_recovery dw_mmc_device:lnk_file { getattr open read ioctl lock };
allow flash_recovery emmcblk_device:blk_file { { { getattr open read ioctl lock } { open append write } } setattr };
allow flash_recovery recoveryblk_device:blk_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow flash_recovery cache_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow flash_recovery cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow flash_recovery flash_recovery_sh_file:file { entrypoint { getattr open read ioctl lock } };
allow flash_recovery shell_data_file:file { create unlink };
allow flash_recovery shell_data_file:dir remove_name;
allow flash_recovery shell_exec:file { getattr open read ioctl lock };
allow flash_recovery system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow flash_recovery system_data_file:file unlink;
allow flash_recovery system_file:file { getattr execute execute_no_trans };

########## etc_type
########## known issue.
# FOTA from KK binary test
allow flash_recovery media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow flash_recovery media_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
# DMVerity FOTA Self-verification test
allow flash_recovery media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow flash_recovery media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow flash_recovery bootblk_device:blk_file { getattr open read ioctl lock };
allow flash_recovery emmcblk_device:blk_file { getattr open read ioctl lock };
########## file_type

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { search } for  pid=3512 comm="rm" name="/" dev="sdcardfs" ino=1179652 scontext=u:r:flash_recovery:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
# avc:  denied  { getattr } for  pid=4093 comm="rm" path="/data/media/0/ENG_G900H_OXY_NG3_ENG_to_NK5V_ENG_Update_FWD.zip" dev="mmcblk0p21" ino=129880 scontext=u:r:install_recovery:s0 tcontext=u:object_r:media_data_file:s0 tclass=file
# avc:  denied  { write } for  pid=4093 comm="rm" name="0" dev="mmcblk0p21" ino=129793 scontext=u:r:install_recovery:s0 tcontext=u:object_r:media_data_file:s0 tclass=dir
# avc:  denied  { remove_name } for  pid=4093 comm="rm" name="ENG_G900H_OXY_NG3_ENG_to_NK5V_ENG_Update_FWD.zip" dev="mmcblk0p21" ino=129880 scontext=u:r:install_recovery:s0 tcontext=u:object_r:media_data_file:s0 tclass=dir
# avc:  denied  { unlink } for  pid=4093 comm="rm" name="ENG_G900H_OXY_NG3_ENG_to_NK5V_ENG_Update_FWD.zip" dev="mmcblk0p21" ino=129880 scontext=u:r:install_recovery:s0 tcontext=u:object_r:media_data_file:s0 tclass=file
#line 1 "vendor/samsung/common/sepolicy/isolated_app.te"
#
# isolated_app
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
# isolated_app is not trusted - review by SC team
# typeattribute isolated_app trusteddomain;
# typeattribute isolated_app trusted_app_domain;

########## self and domain_type
#neverallow by Google:(domain init:binder call;)  allow isolated_app init:binder call;
#allow isolated_app init:binder call;
#violate neverallow rule

allow isolated_app init:unix_stream_socket { read write getattr getopt };
allow isolated_app untrusteddomain:unix_stream_socket shutdown;
allow isolated_app vold:fd use;
allow isolated_app zygote:unix_stream_socket getattr; 

########## fs_type
allow isolated_app sdcard_internal:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
########## file_type
allow isolated_app appdomain:unix_stream_socket { getattr getopt };
allow isolated_app dalvikcache_data_file:file execute;
allow isolated_app init_tmpfs:file read;
allow isolated_app isolated_app_tmpfs:file write;
allow isolated_app platform_app_data_file:dir { open getattr read search ioctl }; 
allow isolated_app platform_app_data_file:file { getattr open read ioctl lock };
#neverallow by Google: allow isolated_app property_socket:sock_file w_file_perms;
#allow isolated_app property_socket:sock_file w_file_perms;
allow isolated_app tombstone_data_file:dir { open getattr read search ioctl }; 
allow isolated_app tombstone_data_file:file { getattr open read ioctl lock }; 

########## etc_type

########## known issue.
#from NSA
allow isolated_app appdomain:unix_stream_socket { read write };
allow isolated_app apk_data_file:dir getattr;
allow isolated_app init:unix_stream_socket { read write getattr getopt };
allow isolated_app init_tmpfs:file read;

# AWS
allow isolated_app system_file:file execmod;
allow isolated_app app_data_file:file execute;
allow isolated_app gad_untrusted_app_data_file:file execute;
#line 50


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/kernel.te"
#
# kernel
#

############ aosp and sec_common #############
########## type and macro.
# temporary permissive to gather the log.
# permissive kernel;

#line 9
# Allow the necessary permissions.
#line 9

#line 9
# Old domain may exec the file and transition to the new domain.
#line 9
allow kernel shell_exec:file { getattr open read execute };
#line 9
allow kernel shell:process transition;
#line 9
# New domain is entered by executing the file.
#line 9
allow shell shell_exec:file { entrypoint open read execute getattr };
#line 9
# New domain can send SIGCHLD to its caller.
#line 9
allow shell kernel:process sigchld;
#line 9
# Enable AT_SECURE, i.e. libc secure mode.
#line 9
dontaudit kernel shell:process noatsecure;
#line 9
# XXX dontaudit candidate but requires further study.
#line 9
allow kernel shell:process { siginh rlimitinh };
#line 9

#line 9
# Make the transition occur by default.
#line 9
type_transition kernel shell_exec:process shell;
#line 9


#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow kernel corehelper_sh_file:file { getattr open read execute };
#line 10
allow kernel corehelper:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow corehelper corehelper_sh_file:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow corehelper kernel:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
dontaudit kernel corehelper:process noatsecure;
#line 10
# XXX dontaudit candidate but requires further study.
#line 10
allow kernel corehelper:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition kernel corehelper_sh_file:process corehelper;
#line 10


########## self and domain_type
#neverallow by Google: not allow sys_ptrace allow kernel self:capability { mknod sys_module sys_ptrace };
allow kernel self:capability { mknod sys_module };
allow kernel self:system syslog_read;

#neverallow by Google: neverallow domain kernel:process { transition dyntransition };
allow kernel self:process ~{ transition dyntransition };

########## fs_type
allow kernel labeledfs:filesystem { mount unmount };
allow kernel sdcard_external:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow kernel sdcard_external:file { { getattr open read ioctl lock } { open append write } };
allow kernel sdcard_internal:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow kernel sdcard_internal:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow kernel ashmem_device:chr_file { getattr execute execute_no_trans };
allow kernel block_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow kernel device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow kernel emmcblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#neverallow by Google: (kmem_device:chr_file ~{ create relabelto unlink setattr };)
#allow kernel kmem_device:file_class_set create_file_perms;
#allow kernel kmem_device:dir create_dir_perms;
allow kernel kmem_device:chr_file { create unlink setattr relabelto };
allow kernel loop_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow kernel ram_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow kernel swap_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## file_type
## relabelto was recovery denials. Refer to the avc_log part.
#neverallow by Google: allow kernel file_type:dir relabelto;
#neverallow by Google: allow kernel file_type:file relabelto;
allow kernel property_data_file:dir { open getattr read search ioctl };
allow kernel property_data_file:file { getattr open read ioctl lock };

## root cause: Domain transition issue of Recovery.
#neverallow by Google: allow kernel system_file:dir create_dir_perms;
#neverallow by Google: allow kernel system_file:file { create_file_perms x_file_perms };
#neverallow by Google: allow kernel system_file:lnk_file create_file_perms;

########## etc_type
allow kernel node:tcp_socket node_bind;
allow kernel port:tcp_socket name_bind;
allow kernel powerctl_prop:property_service set;

########## known issue.
# recovery kernel log
#neverallow Google CTS-android-5.0.2_r1 : allow kernel default_prop:property_service set;
allow kernel system_prop:property_service set;

# recovery kernel : emmc_quickverify of recovery
#neverallow by Google: allow kernel rootfs:file create_file_perms;

# cts testMountAndUnmountObbNormal for app_data_file and allow read for app data.
allow kernel app_data_file:file { getattr open read ioctl lock };
allow kernel gad_untrusted_app_data_file:file { getattr open read ioctl lock };
#line 68


############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
# Multi Security Contexts
allow kernel app_data_type:file { open append write };

########## known issue.


############ avc_log #############
# avc:  denied  { relabelto } for  pid=2627 comm="recovery" name="media" dev="mmcblk0p21" ino=523265 scontext=u:r:kernel:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
# avc:  denied  { relabelto } for  pid=2627 comm="recovery" name="Over_the_horizon.mp3" dev="mmcblk0p21" ino=523268 scontext=u:r:kernel:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file
# avc:  denied  { execute } for  pid=2627 comm="recovery" path="/dev/ashmem" dev="tmpfs" ino=2446 scontext=u:r:kernel:s0 #tcontext=u:object_r:ashmem_device:s0 tclass=chr_file
# avc:  denied  { setattr } for  pid=1764 comm="ueventd" name="mmcblk0rpmb" dev="tmpfs" ino=3306 scontext=u:r:kernel:s0 #tcontext=u:object_r:block_device:s0 tclass=blk_fil
# avc:  denied  { create } for  pid=1764 comm="ueventd" name="mmcblk0" scontext=u:r:kernel:s0 tcontext=u:object_r:emmcblk_device:s0 tclass=blk_file
# avc:  denied  { mount } for  pid=2627 comm="recovery" name="/" dev="mmcblk0p19" ino=2 scontext=u:r:kernel:s0 #tcontext=u:object_r:labeledfs:s0 tclass=filesystem
# avc:  denied  { unmount } for  pid=2627 comm="recovery" scontext=u:r:kernel:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem
# avc:  denied  { read write open } for  pid=85 comm="ecryptfs-kthrea" name="/" dev="mmcblk1p1" ino=1 scontext=u:r:kernel:s0 tcontext=u:object_r:sdcard_external:s0 tclass=dir SEPF_SM-G900F_4.4.3_0018
# avc:  denied  { read } for  pid=5834 comm="loop0" path="/mnt/secure/asec/com.nhn.android.search-1.asec" dev="mmcblk1p1" ino=4285 #scontext=u:r:kernel:s0 tcontext=u:object_r:sdcard_external:s0 tclass=file
# avc:  denied  { write } for  pid=85 comm="ecryptfs-kthrea" name="SM-G900F_sleep_observer_20140701_095629.log.txt" dev="mmcblk1p1" ino=334 scontext=u:r:kernel:s0 tcontext=u:object_r:sdcard_external:s0 tclass=file SEPF_SM-G900F_4.4.3_0018
# avc:  denied  { read write open } for  pid=85 comm="ecryptfs-kthrea" name="/" dev="sdcardfs" ino=1 scontext=u:r:kernel:s0 tcontext=u:object_r:sdcard_internal:s0 tclass=dir SEPF_SM-G900F_4.4.3_0018
# avc:  denied  { mknod } for  pid=48 comm="kdevtmpfs" capability=27  scontext=u:r:kernel:s0 tcontext=u:r:kernel:s0 tclass=capability
# avc:  denied  { syslog_read } for  pid=2626 comm="emmc_quickverif" scontext=u:r:kernel:s0 tcontext=u:r:kernel:s0 tclass=system
# avc:  denied  { setattr } for  pid=1764 comm="ueventd" name="vnswap0" dev="tmpfs" ino=2493 scontext=u:r:kernel:s0 tcontext=u:object_r:swap_device:s0 #tclass=blk_file
# avc:  denied  { unlink } for  pid=2715 comm="recovery" name="csc_contents" dev="mmcblk0p18" ino=3477 scontext=u:r:kernel:s0 tcontext=u:object_r:system_file:s0 tclass=lnk_file
# avc:  denied  { set } for property=security.recovery scontext=u:r:kernel:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { set } for property=sys.qseecomd.enable scontext=u:r:kernel:s0 tcontext=u:object_r:system_prop:s0 tclass=property_service
# avc:  denied  { create } for  pid=2626 comm="emmc_quickverif" name="emmc_checksum.log" scontext=u:r:kernel:s0 tcontext=u:object_r:rootfs:s0 tclass=file
# avc:  denied  { append } for  pid=2626 comm="emmc_quickverif" path="/tmp/emmc_checksum.log" dev="rootfs" ino=3363 scontext=u:r:kernel:s0 tcontext=u:object_r:rootfs:s0 tclass=file
# avc:  denied  { write } for  pid=2627 comm="recovery" path="/tmp/recovery_backup.txt" dev="rootfs" ino=3366 scontext=u:r:kernel:s0 tcontext=u:object_r:rootfs:s0 tclass=file
# avc:  denied  { create } for  pid=48 comm="kdevtmpfs" name="mmcblk1" scontext=u:r:kernel:s0 tcontext=u:object_r:device:s0 tclass=blk_file
# avc:  denied  { setattr } for  pid=48 comm="kdevtmpfs" name="mmcblk1" dev="devtmpfs" ino=134812 scontext=u:r:kernel:s0 tcontext=u:object_r:device:s0 tclass=blk_file
# avc:  denied  { getattr } for  pid=48 comm="kdevtmpfs" path="/dm-0" dev="devtmpfs" ino=199539 scontext=u:r:kernel:s0 tcontext=u:object_r:device:s0 tclass=blk_file
# avc:  denied  { unlink } for  pid=48 comm="kdevtmpfs" name="dm-0" dev="devtmpfs" ino=199539 scontext=u:r:kernel:s0 tcontext=u:object_r:device:s0 tclass=blk_file
# avc:  denied  { read } for  pid=8994 comm="loop0" path="/data/data/com.android.cts.stub/files/test2.obb" dev="mmcblk0p26" ino=914863 scontext=u:r:kernel:s0 tcontext=u:object_r:app_data_file:s0 tclass=file
# avc:  denied  { write } for  pid=11527 comm="kworker/u8:3" path="/data/knox/data/100/EN.FXZq8FN9I1k0wkbXhqqsia3l2r.." dev="mmcblk0p27" ino=1269 scontext=u:r:kernel:s0 tcontext=u:object_r:app_data_file:s0:c2 tclass=file SEPF_SM-N910F_4.4.4_A018
# Ramdump Denials avc:  denied  { sys_ptrace } for  pid=529 comm="kworker/0:1" capability=19  scontext=u:r:kernel:s0 tcontext=u:r:kernel:s0 tclass=capability

#line 1 "vendor/samsung/common/sepolicy/keystore.te"
#
# keystore
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute keystore trusteddomain;
#typeattribute keystore system_domain;
# temporary permissive to gather the log.
# permissive keystore;


#line 13
allow keystore mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 13
allow keystore mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 13
# TODO: Figure out proper sockets
#line 13
allow keystore mobicoredaemon:unix_stream_socket connectto;
#line 13


########## self and domain_type
allow keystore domain:fd use;
allow keystore init:unix_stream_socket { read write connectto };

########## fs_type
allow keystore firmware:dir { open getattr read search ioctl };
#neverallow by Google: allow keystore firmware:file create_file_perms; : firmware is ro mount
allow keystore firmware:file { getattr open read ioctl lock };
allow keystore sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow keystore sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## dev_type
allow keystore block_device:dir { open getattr read search ioctl };
allow keystore emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow keystore tz_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow keystore app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow keystore gad_untrusted_app_data_file:file { { getattr open read ioctl lock } { open append write } };
#line 33
allow keystore platform_app_data_file:file { open append write };
allow keystore property_socket:sock_file { { getattr open read ioctl lock } { open append write } };

########## etc_type
#neverallow Google CTS-android-5.0.2_r1 : allow keystore default_prop:property_service set;
allow keystore system_prop:property_service set;
allow keystore denial_prop:property_service set;

########## known issue.

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
allow keystore proc_avc_msg:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
########## file_type
allow keystore audit_log:file { { getattr open read ioctl lock } { open append write } };

########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow keystore qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
########## known issue.

############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402376306.539:276): avc:  denied  { relabelto } for  pid=289 comm="installd" name="com.android.cts.keystore" dev="mmcblk0p25" ino=785525 #scontext=u:r:installd:s0 tcontext=u:object_r:platform_app_data_file:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { write } for  pid=300 comm="keystore" name="avc_msg" dev="proc" ino=4026533954 scontext=u:r:keystore:s0 tcontext=u:object_r:proc_avc_msg:s0 tclass=file Enterprise Policy
# avc:  denied  { set } for property=security.mdpp scontext=u:r:keystore:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=2527 comm="keystore" name="tzdd" dev="tmpfs" ino=1637 scontext=u:r:keystore:s0 tcontext=u:object_r:tz_device:s0 tclass=chr_file permissive=1


#line 1 "vendor/samsung/common/sepolicy/lmkd.te"
# 
# lmkd

############ aosp and sec_common #############
########## type and macro.
typeattribute lmkd trusteddomain;
typeattribute lmkd system_domain;
typeattribute lmkd mlstrustedsubject;

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
#neverallow Google CTS-android-5.0.2_r1 : allow lmkd system_library_file:file execute;

########## etc_type
# booting denial
allow lmkd sysfs:file write;
allow lmkd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## known issue.

############ knox_common #############
########## type and macro.
########## self and domain_type
allow lmkd { good_app fixmo_app }:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow lmkd { good_app fixmo_app }:file { { getattr open read ioctl lock } { open append write } };

########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc: denied { write } for name="minfree" dev="sysfs" ino=5256 scontext=u:r:lmkd:s0 tcontext=u:object_r:sysfs:s0 tclass=file
# item=0 name="/sys/module/lowmemorykiller/parameters/minfree" inode=5256 dev=00:0c mode=0100220 ouid=0 ogid=1000 rdev=00:00 obj=u:object_r:sysfs:s0
# avc:  denied  { execute } for  pid=176 comm="lmkd" path="/system/lib/libsigchain.so" dev="mmcblk0p16" ino=1371 scontext=u:r:lmkd:s0 tcontext=u:object_r:system_library_file:s0 tclass=file
# avc:  denied  { search } for  pid=248 comm="lmkd" name="4191" dev="proc" ino=42363 scontext=u:r:lmkd:s0 tcontext=u:r:fixmo_app:s0 tclass=dir
# avc:  denied  { write } for  pid=248 comm="lmkd" name="oom_score_adj" dev="proc" ino=41730 scontext=u:r:lmkd:s0 tcontext=u:r:fixmo_app:s0 tclass=file
# avc:  denied  { open } for  pid=248 comm="lmkd" name="oom_score_adj" dev="proc" ino=41730 scontext=u:r:lmkd:s0 tcontext=u:r:fixmo_app:s0 tclass=file


#line 1 "vendor/samsung/common/sepolicy/logd.te"
#
# logd
#

############ aosp and sec_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
#neverallow Google CTS-android-5.0.2_r1 :allow logd system_library_file:file execute;

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { execute } for  pid=174 comm="logd" path="/system/lib/libsigchain.so" dev="mmcblk0p16" ino=1371 scontext=u:r:logd:s0 tcontext=u:object_r:system_library_file:s0 tclass=file


#line 1 "vendor/samsung/common/sepolicy/mdnsd.te"
#
# mdnsd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute mdnsd trusteddomain;
#typeattribute mdnsd system_domain;
# temporary permissive to gather the log.
# permissive mdnsd;

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/mediaserver.te"
#
# mediaserver
#


############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute mediaserver trusteddomain;
typeattribute mediaserver system_domain;
# temporary permissive to gather the log.
# permissive mediaserver;


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow mediaserver nfc:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow nfc mediaserver:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow mediaserver nfc:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow mediaserver radio:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow radio mediaserver:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow mediaserver radio:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow mediaserver system:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow system mediaserver:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow mediaserver system:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow mediaserver containerdomain:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow containerdomain mediaserver:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow mediaserver containerdomain:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow mediaserver jackservice:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow jackservice mediaserver:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow mediaserver jackservice:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow mediaserver samsungpowersoundplay:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow samsungpowersoundplay mediaserver:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow mediaserver samsungpowersoundplay:fd use;
#line 19


#line 20
allow mediaserver dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 20
allow mediaserver dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 20
allow mediaserver dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 20
allow mediaserver bugreport_exec:file { execute execute_no_trans };
#line 20
allow mediaserver dumpstate_exec:file { execute execute_no_trans };
#line 20
allow mediaserver dumpsys_exec:file { execute execute_no_trans };
#line 20


#line 21
allow mediaserver mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 21
allow mediaserver mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 21
# TODO: Figure out proper sockets
#line 21
allow mediaserver mobicoredaemon:unix_stream_socket connectto;
#line 21


#line 22
allow mediaserver property_socket:sock_file write;
#line 22
allow mediaserver init:unix_stream_socket connectto;
#line 22


########## self and domain_type
allow mediaserver at_distributor:fd use;
allow mediaserver bluetooth:unix_stream_socket connectto;
allow mediaserver newAttr33:dir { open getattr read search ioctl };
allow mediaserver newAttr33:file { getattr open read ioctl lock };
allow mediaserver drmserver:unix_stream_socket connectto;
allow mediaserver init:unix_stream_socket { getattr read write };
allow mediaserver platform_app:dir { open getattr read search ioctl };
allow mediaserver s_platform_app:dir { open getattr read search ioctl };
#line 32
allow mediaserver platform_app:file { getattr open read ioctl lock };
allow mediaserver s_platform_app:file { getattr open read ioctl lock };
#line 33
allow mediaserver radio:dir { open getattr read search ioctl };
allow mediaserver radio:file { getattr open read ioctl lock };
allow mediaserver samsungpowersoundplay:file { getattr open read ioctl lock };
allow mediaserver self:socket *;
allow mediaserver self:capability { net_raw net_admin setuid setgid };
allow mediaserver system:dir { open getattr read search ioctl };
allow mediaserver system:file { getattr open read ioctl lock };
allow mediaserver system:unix_stream_socket { read write setopt };
allow mediaserver system_app:fifo_file { open append write };
allow mediaserver s_system_app:fifo_file { open append write };
#line 42
allow mediaserver untrusted_app_tmpfs:file write;
allow mediaserver untrusteddomain:dir { open getattr read search ioctl };
allow mediaserver untrusteddomain:file { getattr open read ioctl lock };
allow mediaserver untrusteddomain:process sigchld;
allow mediaserver untrusteddomain:unix_stream_socket { read write getattr connectto };

########## fs_type
allow mediaserver devpts:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver firmware:file { getattr open read ioctl lock };
allow mediaserver firmware:dir { open getattr read search ioctl };
allow mediaserver proc:file write;
allow mediaserver sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow mediaserver tmpfs:file write;

########## dev_type
allow mediaserver camera_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver camera_device:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver graphics_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mediaserver i2c_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver socket_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver video_device:lnk_file { getattr open read ioctl lock };
allow mediaserver video_device:dir search;
########## file_type

allow mediaserver secmm_prop:property_service set;
allow mediaserver system_prop:property_service set;
allow mediaserver camera_prop:property_service set;

allow mediaserver apk_data_file:sock_file { open append write };
allow mediaserver app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mediaserver gad_untrusted_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 75

#neverallow by Google: (newAttr66:file execute; )  allow mediaserver app_data_file:file { create_file_perms execute };
allow mediaserver app_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } };
allow mediaserver gad_untrusted_app_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } };
#line 78

allow mediaserver app_data_file:sock_file setattr;
allow mediaserver gad_untrusted_app_data_file:sock_file setattr;
#line 80
allow mediaserver app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver asec_apk_file:file { getattr open read ioctl lock };
allow mediaserver asec_apk_file:dir search;
allow mediaserver drm_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver drm_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver drmserver_socket:sock_file { open append write };
allow mediaserver dumplog_data_file:file { open append write };
#neverallow Google CTS-android-5.0.2_r1 : allow mediaserver dumplog_data_file:file x_file_perms;
allow mediaserver efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver isolated_app_tmpfs:file { { getattr open read ioctl lock } { open append write } };
allow mediaserver mediaserver_tmpfs:file write;
allow mediaserver obb_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver obb_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver personal_page_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mediaserver personal_page_file:file { { getattr open read ioctl lock } { open append write } };
allow mediaserver platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver radio_data_file:file { getattr open read ioctl lock };
allow mediaserver radio_data_file:dir search;
allow mediaserver sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver shell_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mediaserver shell_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver shell_data_file:file { { getattr open read ioctl lock } { open append write } }; 
allow mediaserver shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow mediaserver system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow by Google: allow mediaserver system_data_file:file x_file_perms;
allow mediaserver system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver system_fifo:dir { open getattr read search ioctl };
allow mediaserver system_file:file { getattr execute execute_no_trans };
allow mediaserver system_library_file:dir { open getattr read search ioctl };


########## etc_type
#neverallow Google CTS-android-5.0.2_r1 : allow mediaserver default_prop:property_service set;

########## known issue.

# Allow /sys/power/wake_lock from nsa 4.4 policy update
allow mediaserver sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write } };

#from CTS testing
allow mediaserver media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

## access app data file of system_app
allow mediaserver system_app_data_file:file { { { getattr open read ioctl lock } { open append write } } setattr };
allow mediaserver system_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

# Run /system/bin/app_process.
allow mediaserver zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
# Dalvik Compiler, shared memory and memory map of PROT_EXEC
allow mediaserver ashmem_device:chr_file execute;
#neverallow by Google: allow mediaserver mediaserver_tmpfs:file execute;

# load library downfilter library
allow mediaserver downfilters_lib_file:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 : allow mediaserver downfilters_lib_file:file rx_file_perms;
allow mediaserver downfilters_lib_file:file { getattr open read ioctl lock };

# support sec_uibc for com.sec.android.sidesync30
allow mediaserver uibc_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mediaserver uibc_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

# Media server is one of the few domains that should be able to
# access the container, for video playback, etc.

#line 158
typeattribute mediaserver mlstrustedsubject;
#line 158
allow mediaserver container_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 158
allow mediaserver container_app_sdcard_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 158
allow mediaserver container_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 158
allow mediaserver container_app_sdcard_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 158

#line 158
allow mediaserver container_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow mediaserver bbccontainer_app_data_backend:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 158
allow mediaserver container_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow mediaserver bbccontainer_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 158
allow mediaserver container_app:dir { open getattr read search ioctl };
#line 158
allow mediaserver container_app:file { getattr open read ioctl lock };
#line 158



############ qcom_common #############
########## type and macro.

########## self and domain_type
allow mediaserver mm-qcamera-daemon:unix_dgram_socket sendto;
allow mediaserver mpdecision:unix_stream_socket connectto;
allow mediaserver qmuxd:unix_stream_socket connectto;
allow mediaserver thermald:unix_stream_socket connectto;

########## fs_type

########## dev_type
allow mediaserver adnc_device:chr_file { { getattr open read ioctl lock } { open append write } }; 
allow mediaserver bluetooth_serial_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver fm_radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver kgsl_device:chr_file { { { getattr open read ioctl lock } { open append write } } execute };
allow mediaserver qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } }; 
########## file_type
allow mediaserver qmux_audio_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow mediaserver qmux_audio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow mediaserver adsprpcd_service:service_manager add;
########## known issue.


############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type

########## dev_type
allow mediaserver m2m1shot_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver pvrsync_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver s5p_smem_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver seiren_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver srp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver ump_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow mediaserver ump_device:sock_file { getattr open read ioctl lock };

########## file_type
allow mediaserver drm_security_system_file:dir search;
allow mediaserver drmserver_socket:sock_file { open append write };
allow mediaserver setup_ymc_etc_system_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { write } for  pid=284 comm="mediaserver" path="/data/media/0/temp0.3gp" dev="mmcblk0p25" ino=522480 #scontext=u:r:mediaserver:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { getattr } for  pid=27968 comm="AudioTrack" path="/data/data/com.android.settings/shared_prefs/#com.android.settings_tactileassist.xml" dev="mmcblk0p25" ino=785243 scontext=u:r:mediaserver:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file SEPF_SAMSUNG-SM-#N900A_4.4.3_0018
# avc:  denied  { execute } for  pid=15319 comm="Compiler" path="/dev/ashmem" dev="tmpfs" ino=10614 scontext=u:r:mediaserver:s0 tcontext=u:object_r:ashmem_device:s0 tclass=chr_file SEPF_SM-G900F_4.4.3_0018
# avc:  denied  { execute } for  pid=15319 comm="Compiler" path=2F6465762F6173686D656D2F64616C76696B2D6A69742D636F64652D6361636865202864656C6574656429 dev="tmpfs" ino=78528 scontext=u:r:mediaserver:s0 tcontext=u:object_r:mediaserver_tmpfs:s0 tclass=file SEPF_SM-G900F_4.4.3_0018
# avc:  denied  { search } for  pid=5064 comm="Binder_4" name="com.android.settings" dev="mmcblk0p21" ino=917673 scontext=u:r:mediaserver:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=dir SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { setattr } for  pid=10756 comm="mediaserver" name="settings.db-wal" dev="mmcblk0p21" ino=787208 scontext=u:r:mediaserver:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file SEPF_SM-N910S_4.4.4_A019
# avc:  denied  { write } for  pid=7819 comm="FastMixer" name="i2c-1" dev="tmpfs" ino=2579 scontext=u:r:mediaserver:s0 tcontext=u:object_r:i2c_device:s0 tclass=chr_file SEPF_SM-A500F_4.4.4_A019
# avc:  denied  { search } for  pid=850 comm="Binder_1" name="100" dev="sdcardfs" ino=131300 scontext=u:r:mediaserver:s0 tcontext=u:object_r:container_app_data_backend:s0:c2 tclass=dir SEPF_SM-N910F_4.4.4_A018
# avc:  denied  { read open getattr ioctl } for  pid=12839 comm="AudioIn_DD" path="/dev/adnc2" dev="tmpfs" ino=8802 scontext=u:r:mediaserver:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# avc:  denied  { read write } for  pid=20676 comm="PictureThread" name="m2m1shot_jpeg" dev="tmpfs" ino=5511 scontext=u:r:mediaserver:s0 tcontext=u:object_r:device:s0 tclass=chr_file SEPF_SM-N910C_4.4.3_0018
# avc:  denied  { open } for  pid=20676 comm="PictureThread" path="/dev/m2m1shot_jpeg" dev="tmpfs" ino=5511 scontext=u:r:mediaserver:s0 tcontext=u:object_r:device:s0 tclass=chr_file SEPF_SM-N910C_4.4.3_0018
# avc:  denied  { ioctl } for  pid=20677 comm="JpegMainEncodeT" path="/dev/m2m1shot_jpeg" dev="tmpfs" ino=5511 scontext=u:r:mediaserver:s0 tcontext=u:object_r:device:s0 tclass=chr_file SEPF_SM-N910C_4.4.3_0018
# avc:  denied  { add } for service=listen.service scontext=u:r:mediaserver:s0 tcontext=u:object_r:adsprpcd_service:s0 tclass=service_manager
# Downfilters for camera : avc:  denied  { execute } for  pid=4499 comm="Binder_3" path="/data/DownFilters/Lib/com.samsung.android.filter.effect.sunshine.libsunshine.so" dev="mmcblk0p26" ino=523317 scontext=u:r:mediaserver:s0 tcontext=u:object_r:system_data_file:s0 tclass=file


#line 1 "vendor/samsung/common/sepolicy/mtp.te"
#
# mdp
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute mtp trusteddomain;
#typeattribute mtp system_domain;
# temporary permissive to gather the log.
# permissive mtp;

########## self and domain_type
allow mtp kernel:system module_request;
allow mtp self:tcp_socket { create setopt connect write read };
allow mtp self:rawip_socket create;

########## fs_type
########## dev_type
########## file_type
########## etc_type
allow mtp port:tcp_socket name_connect;

########## known issue.


############ avc_log #############
# avc:  denied  { module_request } for  pid=5905 comm="mtpd" kmod="pppox-proto-4" scontext=u:r:mtp:s0 tcontext=u:r:kernel:s0 tclass=system permissive=0


#line 1 "vendor/samsung/common/sepolicy/netd.te"
#
# netd.te
#

############ aosp and sec_common #############
########## type and macro.
typeattribute netd mlstrustedsubject;
# for B2C users
typeattribute netd trusteddomain;
#typeattribute netd system_domain;
# temporary permissive to gather the log.
# permissive netd;


#line 14
allow netd dumplog_data_file:dir { open getattr read search ioctl };
#line 14
allow netd dumplog_data_file:file { getattr open read ioctl lock };
#line 14


#line 15
allow netd kernel:system syslog_read;
#line 15


########## self and domain_type
allow netd dnsmasq:process { sigkill };
allow netd hostapd:unix_dgram_socket sendto;
allow netd kernel:system module_request;
allow netd self:capability { setuid fsetid setgid net_bind_service sys_module net_admin net_raw };
allow netd self:{ packet_socket tcp_socket netlink_socket } *;
allow netd self:{ tcp_socket udp_socket } *;
allow netd self:tun_socket create;
allow netd init:tcp_socket { read write setopt getopt };

########## fs_type
allow netd cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow netd sdcard_type:dir { open getattr read search ioctl };
allow netd sdcard_type:file { getattr open read ioctl lock };
allow netd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow netd kmsg_device:chr_file { getattr open read ioctl lock };
allow netd tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow netd tun_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow netd app_data_file:file read;
allow netd gad_untrusted_app_data_file:file read;
#line 40
allow netd dhcp_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow netd dhcp_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netd dnsproxyd_socket:sock_file { open append write };
allow netd isolated_app_tmpfs:file { open append write };
allow netd media_rw_data_file:dir { open getattr read search ioctl };
allow netd media_rw_data_file:file { getattr open read ioctl lock };
allow netd netd_socket:sock_file { open append write };
#neverallow by Google: (netd { app_data_file system_data_file }:dir_file_class_set write;)
#allow netd system_data_file:file rw_file_perms;
allow netd system_data_file:file { getattr open read ioctl lock };
allow netd system_library_file:dir { open getattr read search ioctl };
allow netd wifi_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow netd wifi_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netd wpa_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow netd wpa_socket:dir { { getattr open read ioctl lock } { open append write } };
allow netd wpa_socket:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow netd wpa_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow netd node:{ tcp_socket udp_socket } node_bind;
allow netd port:{ tcp_socket udp_socket } name_bind;
allow netd port:tcp_socket { name_bind name_connect };

########## known issue.
#FROM NSA
allow netd self:netlink_route_socket *;
allow netd self:rawip_socket *;
allow netd self:unix_stream_socket *;

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
allow netd sysrq_proc:file write;

########## dev_type
########## file_type
########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.

#line 82
allow netd property_socket:sock_file write;
#line 82
allow netd init:unix_stream_socket connectto;
#line 82


########## self and domain_type
allow netd self:capability kill;

########## fs_type
########## dev_type
allow netd random_device:chr_file { getattr open read ioctl lock };

########## file_type
allow netd dhcp_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow netd dhcp_system_file:dir { open getattr read search ioctl };
#neverallow Google CTS-android-5.0.2_r1 : allow netd dhcp_system_file:file rx_file_perms;
allow netd dhcp_system_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.


############ avc_log #############
#from Monkey test
#type=1400 msg=audit(1402509333.576:541): avc:  denied  { unlink } for  pid=962 comm="netd" name="wpa_ctrl_274-1" dev="mmcblk0p25" ino=261194 scontext=u:r:netd:s0 #tcontext=u:object_r:wpa_socket:s0 tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402509340.516:542): avc:  denied  { create } for  pid=962 comm="netd" name="wpa_ctrl_274-2" scontext=u:r:netd:s0 tcontext=u:object_r:wpa_socket:s0 #tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402509340.526:543): avc:  denied  { setattr } for  pid=962 comm="netd" name="wpa_ctrl_274-2" dev="mmcblk0p25" ino=261194 scontext=u:r:netd:s0 #tcontext=u:object_r:wpa_socket:s0 tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#type=1400 msg=audit(1402509340.526:544): avc:  denied  { unlink } for  pid=962 comm="netd" name="wpa_ctrl_274-2" dev="mmcblk0p25" ino=261194 scontext=u:r:netd:s0 #tcontext=u:object_r:wpa_socket:s0 tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
#from wlan test (wlandutservice)
# avc:  denied  { getopt } for  pid=1048 comm="netd" laddr=127.0.0.1 lport=1528 faddr=127.0.0.1 fport=1529 scontext=u:r:netd:s0 tcontext=u:r:init:s0 tclass=tcp_socket permissive=1
# avc:  denied  { setopt } for  pid=1048 comm="netd" laddr=127.0.0.1 lport=1528 faddr=127.0.0.1 fport=1529 scontext=u:r:netd:s0 tcontext=u:r:init:s0 tclass=tcp_socket permissive=1
# avc:  denied  { read write } for  pid=1048 comm="netd" path="socket:[32613]" dev="sockfs" ino=32613 scontext=u:r:netd:s0 tcontext=u:r:init:s0 tclass=tcp_socket permissive=1


#line 1 "vendor/samsung/common/sepolicy/nfc.te"
#
# nfc
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute nfc trusteddomain;
#typeattribute nfc trusted_app_domain;
# temporary permissive to gather the log.
# permissive nfc;


#line 13
allow nfc dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 13
allow nfc dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 13
allow nfc dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 13
allow nfc bugreport_exec:file { execute execute_no_trans };
#line 13
allow nfc dumpstate_exec:file { execute execute_no_trans };
#line 13
allow nfc dumpsys_exec:file { execute execute_no_trans };
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow nfc zygote:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow zygote nfc:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow nfc zygote:fd use;
#line 14


#line 15
allow nfc init:unix_stream_socket connectto;
#line 15
allow nfc init:unix_stream_socket { read write };
#line 15


########## self and domain_type

#allow nfc init:binder { transfer call };
#violate neverallow rule. change to:
#neverallow Google CTS : allow nfc init:binder transfer;

allow nfc init:unix_stream_socket setopt;

########## fs_type
allow nfc sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow nfc sdcard_type:file { getattr link unlink rename };
allow nfc sdcard_type:file { open append write };
allow nfc sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
#allow nfc radio_device:chr_file rw_file_perms;
#violate neverallow rule. change to:
allow nfc radio_device:chr_file { { getattr open ioctl lock } { open append } };
allow nfc uart_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow nfc sem_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow nfc apk_data_file:lnk_file read;
allow nfc cache_file:file { open append write };
allow nfc init_tmpfs:file read;
allow nfc platform_app_data_file:file { open append write };
allow nfc property_socket:sock_file { open append write };
#allow nfc system_data_file:dir rw_dir_perms;
# violate never allow rule. change to
allow nfc system_data_file:dir { open getattr read search ioctl };
#allow nfc system_data_file:file create_file_perms;
# violate never allow rule. change to
allow nfc system_data_file:file { getattr open read ioctl lock };


########## etc_type
########## known issue.
#NFC firmware(requested by jhh.seo)
allow nfc sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow nfc sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


############ qcom_common #############
########## type and macro.

#line 61
# Call the servicemanager and transfer references to it.
#line 61
allow nfc servicemanager:binder { call transfer };
#line 61
# servicemanager performs getpidcon on clients.
#line 61
allow servicemanager nfc:dir search;
#line 61
allow servicemanager nfc:file { read open };
#line 61
allow servicemanager nfc:process getattr;
#line 61
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 61
# all domains in domain.te.
#line 61


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.

#line 72
# Call the server domain and optionally transfer references to it.
#line 72
allow nfc servicemanager:binder { call transfer };
#line 72
# Allow the serverdomain to transfer references to the client on the reply.
#line 72
allow servicemanager nfc:binder transfer;
#line 72
# Receive and use open files from the server.
#line 72
allow nfc servicemanager:fd use;
#line 72


########## self and domain_type
allow nfc system_app:fifo_file { open append write };
allow nfc s_system_app:fifo_file { open append write };
#line 76

########## fs_type
########## dev_type
########## file_type
allow nfc app_efs_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.


############ avc_log #############
#from CTS testing
#type=1400 msg=audit(1402391363.883:343): avc:  denied  { write } for  pid=18336 comm="onCtsTestRunner" path="/data/data/com.android.cts.stub/cache/CTS_DUMP" dev="mmcblk0p25" #ino=915007 scontext=u:r:nfc:s0 tcontext=u:object_r:platform_app_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { open read write ioctl } for  pid=1693 comm=4173796E635461736B202331 path="/dev/ttyHSL1" dev="tmpfs" ino=12329 scontext=u:r:nfc:s0 tcontext=u:object_r:radio_device:s0 tclass=chr_file
# avc:  denied  { read } for  pid=9422 comm=4173796E635461736B202333 name="factorymode" dev="mmcblk0p3" ino=42 scontext=u:r:nfc:s0 tcontext=u:object_r:factorymode_factoryapp_efs_file:s0 tclass=file SEPF_SM-G900H_4.4.3_0018
# avc:  denied  { open } for  pid=9422 comm=4173796E635461736B202333 path="/efs/FactoryApp/factorymode" dev="mmcblk0p3" ino=42 scontext=u:r:nfc:s0 tcontext=u:object_r:factorymode_factoryapp_efs_file:s0 tclass=file SEPF_SM-G900H_4.4.3_0018
# ZERO JPN avc:  denied  { write } for  pid=20826 comm=4173796E635461736B202331 name="ttySAC0" dev="tmpfs" ino=8601 scontext=u:r:nfc:s0 tcontext=u:object_r:uart_device:s0 tclass=chr_file permissive=0
# avc:  denied  { read write } for  pid=5598 comm="sem_daemon" name="pn547" dev="tmpfs" ino=3027 scontext=u:r:sem:s0 tcontext=u:object_r:nfc_device:s0 tclass=chr_file permissive=0 SEPF_SM-G9250_5.0.2_0007
# avc:  denied  { read write } for  pid=5598 comm="sem_daemon" name="pn547" dev="tmpfs" ino=3027 scontext=u:r:sem:s0 tcontext=u:object_r:nfc_device:s0 tclass=chr_file permissive=0 SEPF_SM-G9250_5.0.2_0007
#avc:  denied  { write } for  pid=9214 comm=4173796E635461736B202335 name="NFC_FW.bin" dev="sda3" ino=62 scontext=u:r:nfc:s0 tcontext=u:object_r:sec_efs_file:s0 tclass=file permissive=0 SEPF_SM-G9208_5.1.1_0015
#avc:  denied  { write } for  pid=5065 comm=4173796E635461736B202331 name="nfc" dev="sda3" ino=60 scontext=u:r:nfc:s0 tcontext=u:object_r:sec_efs_file:s0 tclass=dir permissive=0 SEPF_SM-G9208_5.1.1_0015
#line 1 "vendor/samsung/common/sepolicy/platform_app.te"
#
# Platform app
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute platform_app trusteddomain;
typeattribute s_platform_app trusteddomain;
#line 9
typeattribute platform_app trusted_app_domain;
typeattribute s_platform_app trusted_app_domain;
#line 10
# temporary permissive to gather the log.
# permissive platform_app;

typeattribute platform_app commonplatformappdomain;
typeattribute s_platform_app commonplatformappdomain;


#line 15
typeattribute platform_app platformappdomain;
typeattribute s_platform_app platformappdomain;
#line 15
typeattribute platform_app mlstrustedsubject;
typeattribute s_platform_app mlstrustedsubject;
#line 15


#line 16
allow commonplatformappdomain persdata_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 16
allow commonplatformappdomain persdata_data_file:file { { getattr open read ioctl lock } { open append write } };
#line 16


#line 17
allow commonplatformappdomain dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 17
allow commonplatformappdomain dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 17
allow commonplatformappdomain dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 17
allow commonplatformappdomain bugreport_exec:file { execute execute_no_trans };
#line 17
allow commonplatformappdomain dumpstate_exec:file { execute execute_no_trans };
#line 17
allow commonplatformappdomain dumpsys_exec:file { execute execute_no_trans };
#line 17


#line 18
allow commonplatformappdomain selinuxfs:dir { open getattr read search ioctl };
#line 18
allow commonplatformappdomain selinuxfs:file { getattr open read ioctl lock };
#line 18


#line 19
allow commonplatformappdomain epm_socket:sock_file write;
#line 19
allow commonplatformappdomain epmd:unix_stream_socket connectto;
#line 19

#neverallow by Google: unix_socket_connect(commonplatformappdomain, property, init)
#neverallow Google CTS-android-5.0.2_r1 : allow { commonplatformappdomain -platform_app } property_socket:sock_file write;
#neverallow Google CTS-android-5.0.2_r1 : allow { commonplatformappdomain -platform_app } init:unix_stream_socket connectto;
# PlatformApp interaction with apaservice

#line 24
# Call the server domain and optionally transfer references to it.
#line 24
allow appdomain apaservice:binder { call transfer };
#line 24
# Allow the serverdomain to transfer references to the client on the reply.
#line 24
allow apaservice appdomain:binder transfer;
#line 24
# Receive and use open files from the server.
#line 24
allow appdomain apaservice:fd use;
#line 24


########## self and domain_type
allow platform_app at_distributor:unix_stream_socket connectto;
allow s_platform_app at_distributor:unix_stream_socket connectto;
#line 28

########## fs_type
allow platformappdomain sysfs_battery_supply:file { { getattr open read ioctl lock } { open append write } };
allow platformappdomain sysfs_graphics:file { { getattr open read ioctl lock } { open append write } };
allow platformappdomain sysfs_mdnie_writable:file { { getattr open read ioctl lock } { open append write } };
allow platformappdomain sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow platformappdomain url_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow platform_app platform_app_tmpfs:file write;
allow s_platform_app platform_app_tmpfs:file write;
#line 40
allow platformappdomain sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow platformappdomain sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow platformappdomain tima_dump_exec:file { getattr execute execute_no_trans };

#allow platformappdomain init:binder { transfer call };
#violate neverallow rule. change to:
#neverallow Google CTS :allow platformappdomain init:binder transfer;

allow platformappdomain init:unix_stream_socket setopt;
allow platformappdomain init_tmpfs:file read;
allow platformappdomain unlabeled:dir search;

########## etc_type
allow platform_app ese_service:service_manager add;
allow s_platform_app ese_service:service_manager add;
#line 54
allow platform_app platform_app_service:service_manager add;
allow s_platform_app platform_app_service:service_manager add;
#line 55
allow platform_app writingbuddymanager_service:service_manager add;
allow s_platform_app writingbuddymanager_service:service_manager add;
#line 56

########## known issue.
#from NSA
allow platformappdomain platform_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow platformappdomain sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow platformappdomain sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# access to com.android.settings/shared_prefs.
allow platformappdomain system_app_data_file:file write;

# platform_app com.oculusvr.vrexperiment
allow platform_app ovr_device:chr_file { getattr open read ioctl lock };
allow s_platform_app ovr_device:chr_file { getattr open read ioctl lock };
#line 68

# com.samsung.accessory.saproviders
allow platformappdomain uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };

# AWS
allow platformappdomain dumpstate_socket:sock_file { open append write };
allow platform_app app_data_file:file execmod;
allow platform_app gad_untrusted_app_data_file:file execmod;
allow s_platform_app app_data_file:file execmod;
allow s_platform_app gad_untrusted_app_data_file:file execmod;
#line 75

# For Koolspan Test app

#line 77
allow platformappdomain mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 77
allow platformappdomain mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 77
# TODO: Figure out proper sockets
#line 77
allow platformappdomain mobicoredaemon:unix_stream_socket connectto;
#line 77


# Camera3 app: load library downfilter library
allow platform_app downfilters_lib_file:dir { open getattr read search ioctl };
allow s_platform_app downfilters_lib_file:dir { open getattr read search ioctl };
#line 81
allow platform_app downfilters_lib_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow s_platform_app downfilters_lib_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 82

# add more rules for its app data file and support LogManager execute libgawrapper.dex
allow platformappdomain platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow platformappdomain platform_app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };

#com.sec.android.sidesync30 connects to SideSync

#line 88
allow platform_app ss_conn_daemon_socket:sock_file write;
allow s_platform_app ss_conn_daemon_socket:sock_file write;
#line 88
allow platform_app ss_conn_daemon:unix_stream_socket connectto;
allow s_platform_app ss_conn_daemon:unix_stream_socket connectto;
#line 88


#line 89
allow platform_app ss_kbservice_daemon_socket:sock_file write;
allow s_platform_app ss_kbservice_daemon_socket:sock_file write;
#line 89
allow platform_app ss_kbservice_daemon:unix_stream_socket connectto;
allow s_platform_app ss_kbservice_daemon:unix_stream_socket connectto;
#line 89


#line 90
allow platform_app uibc_socket:sock_file write;
allow s_platform_app uibc_socket:sock_file write;
#line 90
allow platform_app mediaserver:unix_stream_socket connectto;
allow s_platform_app mediaserver:unix_stream_socket connectto;
#line 90


############ knox_common #############
########## type and macro.
# All platform_app requiring access to container types
# Special platform domain 
type bridged_platform_app, commonplatformappdomain, domain, newAttr1, newAttr4, newAttr7, newAttr5, newAttr8, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr91, newAttr92, newAttr93, newAttr94;
# for B2C users
typeattribute bridged_platform_app trusteddomain;
typeattribute bridged_platform_app trusted_app_domain;
# temporary permissive to gather the log.
# permissive bridged_platform_app;


#line 103
typeattribute bridged_platform_app appdomain;
#line 103
# Label ashmem objects with our own unique type.
#line 103

#line 103
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 103
type bridged_platform_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 103
type_transition bridged_platform_app tmpfs:file bridged_platform_app_tmpfs;
#line 103
allow bridged_platform_app bridged_platform_app_tmpfs:file { read write };
#line 103

#line 103
# Map with PROT_EXEC.
#line 103
allow bridged_platform_app bridged_platform_app_tmpfs:file execute;
#line 103


#line 104
typeattribute bridged_platform_app platformappdomain;
#line 104
typeattribute bridged_platform_app mlstrustedsubject;
#line 104


#line 105
typeattribute bridged_platform_app netdomain;
#line 105


#line 106
typeattribute bridged_platform_app bluetoothdomain;
#line 106


########## self and domain_type
allow commonplatformappdomain bluetooth:unix_stream_socket { read write getattr };
allow commonplatformappdomain rild:unix_stream_socket connectto;
allow commonplatformappdomain sec-ril:unix_stream_socket connectto;

#allow commonplatformappdomain self:capability { dac_read_search dac_override setuid net_raw setgid net_admin };
#violate neverallow rule. change to:
#neverallow Google CTS-android-5.0.2_r1 : allow { commonplatformappdomain -platform_app } self:capability { dac_read_search dac_override setuid net_raw setgid net_admin };

allow commonplatformappdomain self:netlink_kobject_uevent_socket { create read bind setopt };
allow commonplatformappdomain self:netlink_route_socket *;
allow commonplatformappdomain self:packet_socket { read create ioctl setopt };
allow commonplatformappdomain self:{ packet_socket udp_socket tcp_socket rawip_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow commonplatformappdomain system:tcp_socket { read write };
allow commonplatformappdomain system_app:tcp_socket getattr;
allow commonplatformappdomain s_system_app:tcp_socket getattr;
#line 123
allow commonplatformappdomain untrusteddomain:unix_stream_socket connectto;

########## fs_type
########## dev_type
allow commonplatformappdomain graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow commonplatformappdomain icd_device:file { { getattr open read ioctl lock } { open append write } };
allow commonplatformappdomain tzic_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow commonplatformappdomain usb_bus_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow commonplatformappdomain usb_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow commonplatformappdomain validity_device:fifo_file { { getattr open read ioctl lock } { open append write } };
allow commonplatformappdomain validity_device:file { { getattr open read ioctl lock } { open append write } };

########## file_type
#neverallow Google CTS-android-5.0.2_r1 : allow commonplatformappdomain apk_data_file:file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow commonplatformappdomain apk_data_file:lnk_file rw_file_perms;
allow commonplatformappdomain app_data_file:file { getattr execute execute_no_trans };
allow commonplatformappdomain gad_untrusted_app_data_file:file { getattr execute execute_no_trans };
#line 139
allow commonplatformappdomain at_distributor_exec:file { getattr open read ioctl lock };
allow commonplatformappdomain app_library_file:dir { open getattr read search ioctl };
allow commonplatformappdomain audit_log:dir { open getattr read search ioctl };
allow commonplatformappdomain audit_log:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow commonplatformappdomain bluetooth_data_file:dir { open getattr read search ioctl };
allow commonplatformappdomain cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow commonplatformappdomain newAttr33 :file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow commonplatformappdomain newAttr33 :dir { { open getattr read search ioctl } getattr };
allow commonplatformappdomain nfc_data_file:dir { open getattr read search ioctl };
allow commonplatformappdomain radio_data_file:file { getattr open read ioctl lock };
allow commonplatformappdomain security_file:file { getattr open read ioctl lock };
allow commonplatformappdomain security_spota_file:file { getattr open read ioctl lock };
#line 150
allow commonplatformappdomain store_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#neverallow by Google: allow commonplatformappdomain system_data_file:lnk_file link_file_perms;
#neverallow by Google: allow commonplatformappdomain system_data_file:sock_file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { commonplatformappdomain -platform_app } system_data_file:lnk_file link_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { commonplatformappdomain -platform_app } system_data_file:sock_file create_file_perms;
allow commonplatformappdomain system_file:file { getattr execute execute_no_trans };
allow commonplatformappdomain tima_log:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow commonplatformappdomain tima_log:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow commonplatformappdomain wifi_efs_file:dir { open getattr read search ioctl };
allow commonplatformappdomain wifi_efs_file:file { getattr open read ioctl lock };
allow commonplatformappdomain zygote_exec:file { getattr execute execute_no_trans };
allow platform_app container_app:dir search;
allow s_platform_app container_app:dir search;
#line 162

########## etc_type

########## known issue.
#Access container sdcard
allow bridged_platform_app container_app:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bridged_platform_app container_app:file { { getattr open read ioctl lock } { open append write } };
allow bridged_platform_app container_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bridged_platform_app container_app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow bridged_platform_app container_app_sdcard_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bridged_platform_app container_app_sdcard_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow bridged_platform_app container_app_data_backend:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow bridged_platform_app bbccontainer_app_data_backend:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 174
allow bridged_platform_app container_app_data_backend:file { { getattr open read ioctl lock } { open append write } };
allow bridged_platform_app bbccontainer_app_data_backend:file { { getattr open read ioctl lock } { open append write } };
#line 175
allow bridged_platform_app hidden_file:file { getattr open read ioctl lock };
allow bridged_platform_app hidden_file:dir { open getattr read search ioctl };

# ORIGINALLY FROM SEPOLICY/NSA OVERRIDING
# Write to /cache.
allow commonplatformappdomain cache_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow commonplatformappdomain cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Read from /data/local.
allow commonplatformappdomain shell_data_file:dir search;
allow commonplatformappdomain shell_data_file:file { open getattr read };
allow commonplatformappdomain shell_data_file:lnk_file read;

# Populate /data/app/vmdl*.tmp, /data/app-private/vmdl*.tmp files
# created by system server.
#neverallow Google CTS-android-5.0.2_r1 : allow commonplatformappdomain { apk_tmp_file apk_private_tmp_file }:file rw_file_perms;
allow commonplatformappdomain apk_private_data_file:dir search;

# ASEC
allow commonplatformappdomain asec_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow commonplatformappdomain asec_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Allow BackupManagerService to backup all app domains
allow commonplatformappdomain appdomain:fifo_file { { getattr open read ioctl lock } { open append write } };
# ORIGINALLY FROM SEPOLICY/NSA OVERRIDING END

# Remove execute permission for data_file_type tima_log to satisfy assertion that no domain can execute file type that it can write.
#allow commonplatformappdomain { file_type -container_file_type -container_service_secure_type -unlabeled -data_file_type -misc_rw_file_type -log_file_type -cache_file_type -security_file }:file execute;
allow commonplatformappdomain { system_file exec_type library_file_type }:file execute;

# for S Browser
#neverallow by Google:  allow commonplatformappdomain socket_device:sock_file write;
#neverallow Google CTS-android-5.0.2_r1 : allow { commonplatformappdomain -platform_app } socket_device:sock_file write;

allow commonplatformappdomain imei_efs_file:file { getattr open read ioctl lock };

# for Secure Storage
allow commonplatformappdomain secure_storage_device:dir { open getattr read search ioctl };
allow commonplatformappdomain secure_storage_device:file { getattr open read ioctl lock };
allow commonplatformappdomain secure_storage:unix_stream_socket connectto;
allow commonplatformappdomain secure_storage_device:sock_file { open append write };

# for SydeSync
allow commonplatformappdomain mediaserver:unix_stream_socket connectto;
allow commonplatformappdomain ss_conn_daemon:unix_stream_socket connectto;

# for com.sec.android.nearby.mediaserver, due to shared prefs
allow commonplatformappdomain platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

# Remove execute permission to satisfy the assertion that no domain can execute any type it can write - but H LTE KK model needs excute rule
allow commonplatformappdomain platform_app_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } { getattr execute execute_no_trans } };
allow commonplatformappdomain platform_media_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow commonplatformappdomain platform_media_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#XXX Why is a plat app shuting down the unix socket??
allow commonplatformappdomain bluetooth:unix_stream_socket shutdown;

#commonplatformappdomain CAC support
allow commonplatformappdomain smartcard_data_file:dir { { open getattr read search ioctl } relabelto };
allow commonplatformappdomain smartcard_data_file:dir { open getattr read search ioctl };
#neverallow by Google: allow commonplatformappdomain system_data_file:dir { relabelfrom relabelto };
#neverallow Google CTS-android-5.0.2_r1 : allow { commonplatformappdomain -platform_app } system_data_file:dir { relabelfrom relabelto };
allow commonplatformappdomain smartcard_data_file:sock_file write;

# sdptest
allow commonplatformappdomain knox_dar_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow commonplatformappdomain knox_dar_shared_device:chr_file { { getattr open read ioctl lock } { open append write } };

# efs relabeling for DRK and Contents Protection Key
allow platform_app prov_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_platform_app prov_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 245
allow platform_app prov_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_platform_app prov_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 246
allow platform_app cpk_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_platform_app cpk_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 247
allow platform_app cpk_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_platform_app cpk_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 248

# for DCM
allow platform_app dcm_data_file:dir { open getattr read search ioctl };
allow s_platform_app dcm_data_file:dir { open getattr read search ioctl };
#line 251
allow platform_app dcm_data_file:file { getattr open read ioctl lock };
allow s_platform_app dcm_data_file:file { getattr open read ioctl lock };
#line 252
# efs relabeling for payment pfw app
allow platform_app pfw_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_platform_app pfw_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 254
allow platform_app pfw_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_platform_app pfw_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 255
allow platform_app mst_ctrl_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_platform_app mst_ctrl_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 256

############ qcom_common #############
########## type and macro.

#line 259
# Call the server domain and optionally transfer references to it.
#line 259
allow commonplatformappdomain zygote:binder { call transfer };
#line 259
# Allow the serverdomain to transfer references to the client on the reply.
#line 259
allow zygote commonplatformappdomain:binder transfer;
#line 259
# Receive and use open files from the server.
#line 259
allow commonplatformappdomain zygote:fd use;
#line 259


########## self and domain_type
allow commonplatformappdomain jackservice:binder { transfer call };
allow commonplatformappdomain location-mq:unix_stream_socket connectto;
allow commonplatformappdomain mpdecision:unix_stream_socket connectto;
allow commonplatformappdomain qmuxd:unix_stream_socket connectto;

########## fs_type
########## dev_type
########## file_type
allow commonplatformappdomain newAttr54:file { getattr open read ioctl lock };
allow commonplatformappdomain qmux_gps_socket:dir { open search write add_name remove_name };
allow commonplatformappdomain qmux_gps_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow commonplatformappdomain knox_clipboard_file:dir { open getattr read search ioctl };
allow commonplatformappdomain knox_clipboard_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.



############ slsi_common #############
########## type and macro.
########## self and domain_type
allow commonplatformappdomain system_app:fifo_file { open append write };
allow commonplatformappdomain s_system_app:fifo_file { open append write };
#line 285

########## fs_type
########## dev_type
########## file_type
allow commonplatformappdomain app_efs_file:file { { getattr open read ioctl lock } { open append write } };

########## etc_type
########## known issue.


############ avc_log #############
# type=1400 msg=audit(1404770152.159:302): avc:  denied  { search } for  pid=5715 comm="app.taskmanager" name="20663" dev="proc" ino=277024 scontext=u:r:platform_app:s0 tcontext=u:r:container_app:s0:c2 tclass=dir SEPF_SM-G900F_4.4.4_0018
#type=1300 msg=audit(1404770152.159:302): arch=40000028 syscall=5 per=a00000 success=no exit=-13 a0=78c83d78 a1=20000 a2=0 a3=f080e0e4 items=1 ppid=275 pid=5715 auid=4294967295 uid=10186 gid=10186 euid=10186 suid=10186 fsuid=10186 egid=10186 sgid=10186 fsgid=10186 tty=(none) ses=4294967295 comm="app.taskmanager" exe="/system/bin/app_process" subj=u:r:platform_app:s0 key=(null)
#type=1307 msg=audit(1404770152.159:302):  cwd="/"
#type=1302 msg=audit(1404770152.159:302): item=0 name="/proc/20663/stat"
# avc:  denied  { ioctl open read } for  pid=9904 comm="libOVR" path="/dev/ovr0" dev="tmpfs" ino=55088 scontext=u:r:platform_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { read write ioctl open } for  pid=27996 comm="Thread-3153" path="/dev/uinput" dev="tmpfs" ino=11402 scontext=u:r:platform_app:s0 tcontext=u:object_r:uhid_device:s0 tclass=chr_file SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { write } for  pid=7694 comm="bugreport" name="dumpstate" dev="tmpfs" ino=263865 scontext=u:r:platform_app:s0 tcontext=u:object_r:dumpstate_socket:s0 tclass=sock_file SEPF_SM-N910C_4.4.4_0018
#avc:  denied  { write } for  pid=4405 comm=4173796E635461736B202332 name="dek_req" dev="tmpfs" ino=9169 scontext=u:r:platform_app:s0:c2 tcontext=u:object_r:knox_dar_device:s0 tclass=chr_file SEPF_SAMSUNG-SM-N910A_4.4.4_A018
# type=1400 msg=audit(1416006337.682:245): avc:  denied  { execute } for  pid=5247 comm="LogManager" path="/data/data/com.sec.android.app.shealth/app_outdex/libgawrapper.dex" dev="mmcblk0p26" ino=1049839 scontext=u:r:release_app:s0 tcontext=u:object_r:platform_app_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N910A_4.4.4_A019
# avc:  denied  { open } for  pid=13202 comm="icdverification" path="/dev/icd" dev="tmpfs" ino=6063 scontext=u:r:platform_app:s0 tcontext=u:object_r:icd_device:s0 tclass=file permissive=0 
# avc:  denied  { add } for service=ESEMDMService scontext=u:r:platform_app:s0 tcontext=u:object_r:system_server_service:s0 tclass=service_manager
# avc:  denied  { add } for service=SAGearPolicyManaagerService scontext=u:r:s_platform_app:s0 tcontext=u:object_r:default_android_service:s0 tclass=service_manager

#line 1 "vendor/samsung/common/sepolicy/ppp.te"
#
# ppp
#

############ aosp and sec_common #############
########## type and macro.
type ppp_system_file, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;

# for B2C users
typeattribute ppp trusteddomain;
#typeattribute ppp system_domain;
# temporary permissive to gather the log.
# permissive ppp;

#domain_auto_trans(init, ppp_exec, ppp)

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.
# ppp_system_file
allow ppp ppp_system_file:dir { open getattr read search ioctl };
allow ppp ppp_system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# # set_property
allow ppp init:unix_stream_socket connectto;
allow ppp property_socket:sock_file write;

# VPN
allow ppp dnsproxyd_socket:sock_file write;
allow ppp netd:unix_stream_socket connectto;

#from NSA
allow ppp self:udp_socket { create ioctl };

# PPPoE connection for CHINA CTC
allow ppp ashmem_device:chr_file execute;
allow ppp csc_prop:property_service set;
allow ppp dalvikcache_data_file:file setattr;
allow ppp devpts:chr_file { ioctl open setattr };
allow ppp net_radio_prop:property_service set;
allow ppp self:capability { setuid net_raw fsetid kill setgid fowner dac_override };
allow ppp setupwizard_prop:property_service set;


############ avc_log #############
#avc:  denied  { write } for  pid=12482 comm="pppd" name="property_service" dev="tmpfs" ino=9551 scontext=u:r:ppp:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file
#avc:  denied  { connectto } for  pid=12482 comm="pppd" path="/dev/socket/property_service" scontext=u:r:ppp:s0 tcontext=u:r:init:s0 tclass=unix_stream_socket
#avc:  denied  { getattr } for  pid=12482 comm="pppd" path="/system/etc/ppp/ip-up-vpn" dev="mmcblk0p24" ino=943 scontext=u:r:ppp:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=file
#avc:  denied  { execute } for  pid=12570 comm="pppd" name="ip-up-vpn" dev="mmcblk0p24" ino=943 scontext=u:r:ppp:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=file
#avc:  denied  { read open } for  pid=12570 comm="pppd" path="/system/etc/ppp/ip-up-vpn" dev="mmcblk0p24" ino=943 scontext=u:r:ppp:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=file
#avc:  denied  { execute_no_trans } for  pid=12570 comm="pppd" path="/system/etc/ppp/ip-up-vpn" dev="mmcblk0p24" ino=943 scontext=u:r:ppp:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=file
#avc:  denied  { dac_override } for  pid=11109 comm="pppd" capability=1  scontext=u:r:ppp:s0 tcontext=u:r:ppp:s0 tclass=capability
#avc:  denied  { net_raw } for  pid=11109 comm="pppd" capability=13  scontext=u:r:ppp:s0 tcontext=u:r:ppp:s0 tclass=capability
#avc:  denied  { setattr } for  pid=11109 comm="pppd" name="0" dev="devpts" ino=3 scontext=u:r:ppp:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file
#avc:  denied  { open } for  pid=11109 comm="pppd" path="/dev/pts/0" dev="devpts" ino=3 scontext=u:r:ppp:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file
#avc:  denied  { ioctl } for  pid=11109 comm="pppd" path="/dev/pts/0" dev="devpts" ino=3 scontext=u:r:ppp:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file
#avc:  denied  { setgid } for  pid=11114 comm="pppd" capability=6  scontext=u:r:ppp:s0 tcontext=u:r:ppp:s0 tclass=capability
#avc:  denied  { setuid } for  pid=11114 comm="pppd" capability=7  scontext=u:r:ppp:s0 tcontext=u:r:ppp:s0 tclass=capability
#avc:  denied  { set } for property=net.ppp3.dns1 scontext=u:r:ppp:s0 tcontext=u:object_r:net_radio_prop:s0 tclass=property_service
#avc:  denied  { fowner } for  pid=11182 comm="app_process" capability=3  scontext=u:r:ppp:s0 tcontext=u:r:ppp:s0 tclass=capability
#avc:  denied  { fsetid } for  pid=11182 comm="app_process" capability=4  scontext=u:r:ppp:s0 tcontext=u:r:ppp:s0 tclass=capability
#avc:  denied  { execute } for  pid=11261 comm="Compiler" path="/dev/ashmem" dev="tmpfs" ino=9491 scontext=u:r:ppp:s0 tcontext=u:object_r:ashmem_device:s0 tclass=chr_file
#avc:  denied  { kill } for  pid=11109 comm="pppd" capability=5  scontext=u:r:ppp:s0 tcontext=u:r:ppp:s0 tclass=capability
#avc:  denied  { setattr } for  pid=15197 comm="app_process" name="system@framework@am.jar@classes.dex" dev="mmcblk0p27" ino=131140 scontext=u:r:ppp:s0 tcontext=u:object_r:dalvikcache_data_file:s0 tclass=file
#avc:  denied  { set } for property=csc.country_code scontext=u:r:ppp:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service
#avc:  denied  { set } for property=setupwizard.mode scontext=u:r:ppp:s0 tcontext=u:object_r:setupwizard_prop:s0 tclass=property_service


#line 1 "vendor/samsung/common/sepolicy/property.te"
#
# property
#

############ aosp and sec_common #############
type boot_prop, property_type, newAttr79, newAttr80;
type bt_prop, property_type, newAttr79, newAttr80;
type camera_prop, property_type, newAttr79, newAttr80;
type csc_prop, property_type, newAttr79, newAttr80;

type kies_prop, property_type, newAttr79, newAttr80;
type km_fips_prop, property_type, newAttr79, newAttr80;
type log_prop, property_type, newAttr79, newAttr80;
type mobicore_prop, property_type, newAttr79, newAttr80;
type recovery_prop, property_type, newAttr79, newAttr80;
type sdcard_prop, property_type, newAttr79, newAttr80;
type seclevel_prop, property_type, newAttr79, newAttr80;
type secmm_prop, property_type, newAttr79, newAttr80;
type setupwizard_prop, property_type, newAttr79, newAttr80;
type tzdaemon_prop, property_type, newAttr80;
type user_prop, property_type, newAttr79, newAttr80;
type vpn_prop, property_type, newAttr79, newAttr80;

############ knox_common #############
type container_mgmt_prop, property_type, newAttr80;
type denial_prop, property_type, newAttr79, newAttr80;
type drs_date_prop, property_type, newAttr80;
type good_mgmt_prop, property_type, newAttr80;
type tlc_mgmt_prop, property_type, newAttr80;
type knox_kap_prop, property_type;
type policy_mgmt_prop, property_type, newAttr80;


typeattribute bluetooth_prop mlstrustedobject;

############ domain_no_set_prop #############
typeattribute container_mgmt_prop domain_no_set_prop;
typeattribute drs_date_prop domain_no_set_prop;
typeattribute good_mgmt_prop domain_no_set_prop;
typeattribute tlc_mgmt_prop domain_no_set_prop;
typeattribute knox_kap_prop domain_no_set_prop;
typeattribute policy_mgmt_prop domain_no_set_prop;
typeattribute security_prop domain_no_set_prop;
typeattribute tzdaemon_prop domain_no_set_prop;

############ qcom_common #############
type perf_prop, property_type, newAttr79, newAttr80;
type freq_prop, property_type, newAttr79, newAttr80;
type digitalpen_prop, property_type, newAttr79, newAttr80;

############ slsi_common #############

#line 1 "vendor/samsung/common/sepolicy/racoon.te"
#
# racoon
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute racoon trusteddomain;
typeattribute racoon system_domain;
# temporary permissive to gather the log.
# permissive racoon;

########## self and domain_type
allow racoon netd:unix_stream_socket connectto;
allow racoon keystore:unix_stream_socket connectto;

########## fs_type
########## dev_type
########## file_type
allow racoon dnsproxyd_socket:sock_file write;
allow racoon ppp_system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow racoon ppp_system_file:dir search;

########## etc_type
########## known issue.
#from NSA

#line 27
# Call the server domain and optionally transfer references to it.
#line 27
allow racoon servicemanager:binder { call transfer };
#line 27
# Allow the serverdomain to transfer references to the client on the reply.
#line 27
allow servicemanager racoon:binder transfer;
#line 27
# Receive and use open files from the server.
#line 27
allow racoon servicemanager:fd use;
#line 27

allow racoon port:udp_socket name_bind;
allow racoon node:udp_socket node_bind;
allow racoon self:udp_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/radio.te"
#
# radio
#

############ aosp and sec_common #############
########## type and macro.
typeattribute radio mlstrustedsubject;
# for B2C users
typeattribute radio trusteddomain;
#typeattribute radio trusted_app_domain;
# temporary permissive to gather the log.
# permissive radio;


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow radio apaservice:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow apaservice radio:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow radio apaservice:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow radio bintvoutservice:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow bintvoutservice radio:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow radio bintvoutservice:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow radio jackservice:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow jackservice radio:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow radio jackservice:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow radio sensorhubservice:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow sensorhubservice radio:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow radio sensorhubservice:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow radio servicemanager:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow servicemanager radio:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow radio servicemanager:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow radio healthd:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow healthd radio:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow radio healthd:fd use;
#line 19


#line 20
allow radio mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 20
allow radio mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 20
# TODO: Figure out proper sockets
#line 20
allow radio mobicoredaemon:unix_stream_socket connectto;
#line 20


#line 21
allow radio dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 21
allow radio dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 21
allow radio dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 21
allow radio bugreport_exec:file { execute execute_no_trans };
#line 21
allow radio dumpstate_exec:file { execute execute_no_trans };
#line 21
allow radio dumpsys_exec:file { execute execute_no_trans };
#line 21


########## self and domain_type
allow radio init:unix_stream_socket { read write setopt };
#allow radio init:binder { transfer call };
#violate neverallow rule. change to:
#neverallow Google CTS :allow radio init:binder transfer;

#allow radio self:capability net_raw;
#violate neverallow rule.

allow radio self:rawip_socket { create read };
allow radio system:tcp_socket { read write };
allow radio system:unix_stream_socket { setopt connectto };
allow radio untrusteddomain:process sigchld;

########## fs_type
allow radio sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow radio sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#allow radio sysfs:file w_file_perms;
#violate neverallow rule. change to:
allow radio sysfs:file { open append };
allow radio sysfs_sec:file { { getattr open read ioctl lock } { open append write } };
allow radio sysfs_sensor_writable:file { { getattr open read ioctl lock } { open append write } };
allow radio sysfs_battery_supply:file { { getattr open read ioctl lock } { open append write } };
allow radio sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow radio tmpfs:file { getattr open read ioctl lock };

########## dev_type
allow radio device:sock_file write;
allow radio devpts:chr_file { read write };
allow radio graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow radio log_device:chr_file { getattr open read ioctl lock };
allow radio tz_socket:sock_file write;

#allow radio socket_device:sock_file write;
# violate neverallow rule.

allow radio usb_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow radio app_data_file:dir { open getattr read search ioctl };
allow radio gad_untrusted_app_data_file:dir { open getattr read search ioctl };
#line 64
allow radio app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow radio gad_untrusted_app_data_file:file { { getattr open read ioctl lock } { open append write } };
#line 65
allow radio app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow radio app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow radio app_library_file:dir { open getattr read search ioctl };
allow radio bluetooth_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow radio bluetooth_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow radio system_app_data_file:file setattr;

#allow radio drm_data_file:dir create_dir_perms;
#violate neverallow rule. change to:
allow radio drm_data_file:dir { reparent rmdir { getattr open read ioctl lock } add_name remove_name getattr };

#allow radio drm_data_file:file create_file_perms;
#violate neverallow rule. change to:
allow radio drm_data_file:file { getattr open read ioctl lock };

#allow radio efs_file:dir create_dir_perms;
#violate neverallow rule. change to:
allow radio efs_file:dir { create reparent rmdir setattr open getattr search ioctl add_name remove_name link unlink rename } ;
	
#allow radio efs_file:file create_file_perms;
#violate neverallow rule. change to:
allow radio efs_file:file { create setattr getattr open ioctl lock link unlink rename };

allow radio imei_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow radio imei_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow radio init_tmpfs:file read;
allow radio insthk_exec:file { getattr execute execute_no_trans };
allow radio sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow radio sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow radio shell_data_file:dir { open getattr read search ioctl };
allow radio shell_data_file:file { getattr open read ioctl lock };
allow radio shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#allow radio system_data_file:dir create_dir_perms;
#violate neverallow rule. change to:
allow radio system_data_file:dir { open getattr read search ioctl };
#allow radio system_data_file:file create_file_perms;
#violate neverallow rule. change to:

allow radio system_data_file:file { getattr open read ioctl lock };
allow radio system_file:file execute_no_trans;
allow radio system_file:lnk_file getattr;
allow radio wifi_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow radio wifi_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
#neverallow Google CTS-android-5.0.2_r1 : allow radio default_prop:property_service set;
allow radio ims_service:service_manager add;
allow radio rild_prop:property_service set;
allow radio system_prop:property_service set;
allow radio telecom_service:service_manager add;
allow radio rild_socket:sock_file { open append write };

########## known issue.
## com.android.phone send a signal to rild
#allow radio rild:process signal;
#violate neverallow rule

# KNOX 2.0 CscUtil MUM issue
allow radio container_app_data_file:dir search;
allow radio container_app_data_backend:dir search;
allow radio bbccontainer_app_data_backend:dir search;
#line 126

# com.samsung.ssd.wolfserver issue
allow radio at_distributor:unix_stream_socket connectto;

# trigger bugreport, may need domain transition for it
allow radio dumpstate_socket:sock_file write;

# efs relabeling for Contents Protection Key
allow radio cpk_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow radio cpk_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


############ qcom_common #############
########## type and macro.

#line 140
# Call the servicemanager and transfer references to it.
#line 140
allow radio servicemanager:binder { call transfer };
#line 140
# servicemanager performs getpidcon on clients.
#line 140
allow servicemanager radio:dir search;
#line 140
allow servicemanager radio:file { read open };
#line 140
allow servicemanager radio:process getattr;
#line 140
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 140
# all domains in domain.te.
#line 140


#line 141
# Call the server domain and optionally transfer references to it.
#line 141
allow radio zygote:binder { call transfer };
#line 141
# Allow the serverdomain to transfer references to the client on the reply.
#line 141
allow zygote radio:binder transfer;
#line 141
# Receive and use open files from the server.
#line 141
allow radio zygote:fd use;
#line 141


########## self and domain_type
allow radio init_shell:unix_stream_socket connectto;

########## fs_type
########## dev_type
allow radio genlock_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow radio kgsl_device:chr_file { { { getattr open read ioctl lock } { open append write } } execute };

allow radio smd_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow radio carrier_file:file { getattr open read ioctl lock };
allow radio platform_app_data_file:file { open append write };
allow radio qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
#neverallow Google CTS-android-5.0.2_r1 : allow radio default_prop:property_service set;
allow radio radio_prop:property_service set;

########## known issue.
## com.android.phone send a signal to qmuxd
#neverallow Google CTS-android-5.0.2_r1 :allow radio qmuxd:process signal;

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow radio system:tcp_socket { read write };

########## fs_type
########## dev_type
allow radio mif_device:chr_file { { { getattr open read ioctl lock } { open append write } } { getattr execute execute_no_trans } };
allow radio ump_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow radio app_efs_file:file { getattr open read ioctl lock };
allow radio system_app:fifo_file { open append write };
allow radio s_system_app:fifo_file { open append write };
#line 179

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { signal } for  pid=7088 comm="kill" scontext=u:r:radio:s0 tcontext=u:r:rild:s0 tclass=process SEPF_SM-N910V_4.4.4_0018
# avc:  denied  { write } for  pid=13328 comm="bugreport" name="dumpstate" dev="tmpfs" ino=77266 scontext=u:r:radio:s0 tcontext=u:object_r:dumpstate_socket:s0 tclass=sock_file
# avc:  denied  { signal } for  pid=7095 comm="kill" scontext=u:r:radio:s0 tcontext=u:r:qmuxd:s0 tclass=process SEPF_SM-N910V_4.4.4_0018
# avc:  denied  { write } for  pid=11735 comm="Thread-123" name="data_call" dev="sysfs" ino=23136 scontext=u:r:radio:s0 tcontext=u:object_r:sysfs_battery_supply:s0 tclass=file
# item=0 name="/sys/class/power_supply/battery/" inode=23029 dev=00:0e mode=040755 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs:s0
# avc:  denied  { setattr } for  pid=13441 comm="Thread-264" name="com.sec.android.inputmethod_preferences.xml" dev="sda17" ino=591935 scontext=u:r:radio:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file permissive=0

#line 1 "vendor/samsung/common/sepolicy/recovery.te"
#
# recovery
#
#line 131


############ avc_log #############
# avc:  denied  { relabelto } for  pid=2627 comm="recovery" name="media" dev="mmcblk0p21" ino=523265 scontext=u:r:kernel:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
# avc:  denied  { relabelto } for  pid=2627 comm="recovery" name="Over_the_horizon.mp3" dev="mmcblk0p21" ino=523268 scontext=u:r:kernel:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file
# avc:  denied  { execute } for  pid=2627 comm="recovery" path="/dev/ashmem" dev="tmpfs" ino=2446 scontext=u:r:kernel:s0 #tcontext=u:object_r:ashmem_device:s0 tclass=chr_file
# avc:  denied  { mount } for  pid=2627 comm="recovery" name="/" dev="mmcblk0p19" ino=2 scontext=u:r:kernel:s0 #tcontext=u:object_r:labeledfs:s0 tclass=filesystem
# avc:  denied  { unmount } for  pid=2627 comm="recovery" scontext=u:r:kernel:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem
# avc:  denied  { set } for property=security.recovery scontext=u:r:kernel:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { set } for property=sys.qseecomd.enable scontext=u:r:kernel:s0 tcontext=u:object_r:system_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=2627 comm="recovery" path="/tmp/recovery_backup.txt" dev="rootfs" ino=3366 scontext=u:r:kernel:s0 tcontext=u:object_r:rootfs:s0 tclass=file
# avc:  denied  { mounton } for  pid=404 comm="update_binary" path="/system" dev="mmcblk0p24" ino=2 scontext=u:r:recovery:s0 tcontext=u:object_r:system_file:s0 tclass=dir 
# avc:  denied  { relabelto } for  pid=404 comm="update_binary" name="lib" dev="mmcblk0p24" ino=1507 scontext=u:r:recovery:s0 tcontext=u:object_r:system_library_file:s0  tclass=dir
# avc:  denied  { relabelto } for  pid=404 comm="update_binary" name="ppp" dev="mmcblk0p24" ino=931 scontext=u:r:recovery:s0 tcontext=u:object_r:ppp_system_file:s0 tclass=dir
# avc:  denied  { relabelto } for  pid=404 comm="update_binary" name="event-log-tags" dev="mmcblk0p24" ino=736 scontext=u:r:recovery:s0 tcontext=u:object_r:event_log_tags_file:s0 tclass=file
# avc:  denied  { syslog_read } for  pid=265 comm="recovery" scontext=u:r:recovery:s0 tcontext=u:r:kernel:s0 tclass=system
# avc:  denied  { relabelto } for  pid=318 comm="update_binary" name="boot" dev="tmpfs" ino=10808 scontext=u:r:recovery:s0 tcontext=u:object_r:block_device:s0 tclass=lnk_file
#  item=0 name="/dev/block/platform/msm_sdcc.1/by-name/boot" inode=10808 dev=00:0c mode=0120777 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:block_device:s0
# avc:  denied  { read } for  pid=285 comm="recovery" name="/" dev="mmcblk1p1" ino=1 scontext=u:r:recovery:s0 tcontext=u:object_r:sdcard_external:s0 tclass=dir
# avc:  denied  { open } for  pid=285 comm="recovery" path="/sdcard" dev="mmcblk1p1" ino=1 scontext=u:r:recovery:s0 tcontext=u:object_r:sdcard_external:s0 tclass=dir
# avc:  denied  { read } for  pid=285 comm="recovery" name="H-to-E0ANGHa.zip" dev="mmcblk1p1" ino=26 scontext=u:r:recovery:s0 tcontext=u:object_r:sdcard_external:s0 tclass=file
# avc:  denied  { open } for  pid=285 comm="recovery" path="/sdcard/H-to-E0ANGHa.zip" dev="mmcblk1p1" ino=26 scontext=u:r:recovery:s0 tcontext=u:object_r:sdcard_external:s0 tclass=file
# avc:  denied  { getattr } for  pid=285 comm="recovery" path="/sdcard/H-to-E0ANGHa.zip" dev="mmcblk1p1" ino=26 scontext=u:r:recovery:s0 tcontext=u:object_r:sdcard_external:s0 tclass=file
# avc:  denied  { sys_rawio } for  pid=317 comm="qseecomd" capability=17  scontext=u:r:recovery:s0 tcontext=u:r:recovery:s0 tclass=capability
# avc:  denied  { mknod } for  pid=311 comm="recovery" capability=27  scontext=u:r:recovery:s0 tcontext=u:r:recovery:s0 tclass=capability
# avc:  denied  { create } for  pid=311 comm="recovery" name="loop0" scontext=u:r:recovery:s0 tcontext=u:object_r:device:s0 tclass=blk_file
# avc:  denied  { unlink } for  pid=311 comm="recovery" name="loop0" dev="tmpfs" ino=10751 scontext=u:r:recovery:s0 tcontext=u:object_r:device:s0 tclass=blk_file
# avc:  denied  { sys_ptrace } for  pid=2784 comm="recovery" capability=19  scontext=u:r:recovery:s0 tcontext=u:r:recovery:s0 tclass=capability
# avc:  denied  { read } for  pid=228 comm="recovery" name="mps_code.dat" dev="mmcblk0p12" ino=28 scontext=u:r:recovery:s0 tcontext=u:object_r:imei_efs_file:s0 tclass=file
# avc:  denied  { read } for  pid=228 comm="recovery" name=4F7665722074686520486F72697A6F6E2E6D7033 dev="mmcblk0p25" ino=22 scontext=u:r:recovery:s0 tcontext=u:object_r:hidden_file:s0 tclass=file
# avc:  denied  { relabelto } for  pid=2818 comm="update_binary" name=".drm" dev="mmcblk0p18" ino=1032 scontext=u:r:recovery:s0 tcontext=u:object_r:drm_security_system_file:s0 tclass=dir
# avc:  denied  { execute_no_trans } for  pid=321 comm="recovery" path="/system/bin/qseecomd" dev="dm-0" ino=505 scontext=u:r:recovery:s0 tcontext=u:object_r:qseecomd_exec:s0 tclass=file
# avc:  denied  { read } for  pid=220 comm="recovery" name="INTERNAL_SDCARD" dev="mmcblk0p25" ino=19 scontext=u:r:recovery:s0 tcontext=u:object_r:hidden_file:s0 tclass=dir
# avc:  denied  { read } for  pid=220 comm="recovery" name=4F7665722074686520486F72697A6F6E2E6D7033 dev="mmcblk0p25" ino=22 scontext=u:r:recovery:s0 tcontext=u:object_r:hidden_file:s0 tclass=file
# avc:  denied  { create } for  pid=220 comm="recovery" name=4F7665722074686520486F72697A6F6E2E6D7033 scontext=u:r:recovery:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { write open } for  pid=220 comm="recovery" name=4F7665722074686520486F72697A6F6E2E6D7033 dev="mmcblk0p26" ino=130820 scontext=u:r:recovery:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { setattr } for  pid=220 comm="recovery" name=4F7665722074686520486F72697A6F6E2E6D7033 dev="mmcblk0p26" ino=130820 scontext=u:r:recovery:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { relabelfrom } for  pid=220 comm="recovery" name="media" dev="mmcblk0p26" ino=130817 scontext=u:r:recovery:s0 tcontext=u:object_r:system_data_file:s0 tclass=dir
## DMV
# avc:  denied  { read write } for  pid=2871 comm="recovery" name="device-mapper" dev="tmpfs" ino=8381 scontext=u:r:recovery:s0 tcontext=u:object_r:dm_device:s0 tclass=chr_file
# avc:  denied  { read write } for  pid=3662 comm="dm_verity_tz_cm" name="mobicore-user" dev="tmpfs" ino=7434 scontext=u:r:recovery:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file
# avc:  denied  { read write } for  pid=3651 comm="mcDriverDaemon_" name="mobicore" dev="tmpfs" ino=4438 scontext=u:r:recovery:s0 tcontext=u:object_r:mobicore_device:s0 tclass=chr_file
# avc:  denied  { create } for  pid=3656 comm="NetlinkServer" scontext=u:r:recovery:s0 tcontext=u:r:recovery:s0 tclass=netlink_socket
# avc:  denied  { bind } for  pid=3656 comm="NetlinkServer" scontext=u:r:recovery:s0 tcontext=u:r:recovery:s0 tclass=netlink_socket
# avc:  denied  { read } for  pid=3656 comm="NetlinkServer" scontext=u:r:recovery:s0 tcontext=u:r:recovery:s0 tclass=netlink_socket
# avc:  denied  { read write } for  pid=304 comm="qseecomfsd" name="qseecom" dev="tmpfs" ino=9836 scontext=u:r:recovery:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file permissive=1
# avc:  denied  { open } for  pid=304 comm="qseecomfsd" path="/dev/qseecom" dev="tmpfs" ino=9836 scontext=u:r:recovery:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file permissive=1
# arch=40000028 syscall=5 per=800000 success=yes exit=31 a0=19604 a1=20002 a2=0 a3=0 items=1 ppid=303 pid=304 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 ses=4294967295 tty=(none) comm="qseecomfsd" exe="/sbin/qseecomfsd" subj=u:r:recovery:s0 key=(null)
# cwd="/"
# item=0 name="/dev/qseecom" inode=9836 dev=00:0c mode=020660 ouid=1000 ogid=1026 rdev=f1:00 obj=u:object_r:qseecom_device:s0 nametype=NORMAL
# avc:  denied  { ioctl } for  pid=304 comm="qseecomfsd" path="/dev/qseecom" dev="tmpfs" ino=9836 scontext=u:r:recovery:s0 tcontext=u:object_r:qseecom_device:s0 tclass=chr_file permissive=1
# arch=40000028 syscall=54 per=800000 success=yes exit=0 a0=1f a1=c004970a a2=bea7dd70 a3=bea7dd60 items=0 ppid=303 pid=304 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 ses=4294967295 tty=(none) comm="qseecomfsd" exe="/sbin/qseecomfsd" subj=u:r:recovery:s0 key=(null)
# avc:  denied  { kill } for  pid=278 comm="recovery" capability=5  scontext=u:r:recovery:s0 tcontext=u:r:recovery:s0 tclass=capability permissive=1
# arch=40000028 syscall=37 per=800000 success=yes exit=0 a0=fffffed1 a1=f a2=1 a3=0 items=0 ppid=1 pid=278 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="recovery" exe="/sbin/recovery" subj=u:r:recovery:s0 key=(null) 
# avc:  denied  { set } for property=sys.mobicoredaemon.enable scontext=u:r:recovery:s0 tcontext=u:object_r:mobicore_prop:s0 tclass=property_service
# audit(1388544205.339:12): avc:  denied  { getattr } for  pid=279 comm="recovery" path="/d/tzdbg/log" dev="debugfs" ino=8515 scontext=u:r:recovery:s0 tcontext=u:object_r:debugfs:s0 tclass=file 
# audit(1388544205.339:12): item=0 name="/d/tzdbg/log" inode=8515 dev=00:05 mode=0100400 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:debugfs:s0 nametype=NORMAL
# audit(1388544205.339:13): avc:  denied  { read } for  pid=279 comm="recovery" name="log" dev="debugfs" ino=8515 scontext=u:r:recovery:s0 tcontext=u:object_r:debugfs:s0 tclass=file permissive=1
# audit(1388544205.339:13): item=0 name="/d/tzdbg/log" inode=8515 dev=00:05 mode=0100400 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:debugfs:s0 nametype=NORMAL
# knox kapd avc:  denied  { set } for property=security.knox_kap_mode scontext=u:r:recovery:s0 tcontext=u:object_r:knox_kap_prop:s0 tclass=property_service
# avc:  denied  { set } for property=recovery.dev.state scontext=u:r:recovery:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { getattr } for  pid=3016 comm="recovery" path="/tmp/emmc_checksum.log" dev="tmpfs" ino=2709 scontext=u:r:recovery:s0 tcontext=u:object_r:init_tmpfs:s0 tclass=file permissive=0 
# avc:  denied  { connectto } for  pid=2989 comm="dm_verity_tz_cm" path=006D636461656D6F6E scontext=u:r:recovery:s0 tcontext=u:r:mobicoredaemon:s0 tclass=unix_stream_socket permissive=1
# arch=c00000b7 syscall=203 success=yes exit=0 a0=2f a1=7f87825028 a2=b a3=468000 items=0 ppid=2959 ppcomm=recovery pid=2989 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="dm_verity_tz_cm" exe="/sbin/dm_verity_tz_cmd" subj=u:r:recovery:s0 key=(null)
# avc:  denied  { setattr } for  pid=230 comm="update_binary" name="rfs" dev="mmcblk0p25" ino=2507 scontext=u:r:recovery:s0 tcontext=u:object_r:rfs_system_file:s0 tclass=dir permissive=0
# avc:  denied  { add_name } for  pid=209 comm="recovery" name="misc" scontext=u:r:recovery:s0 tcontext=u:object_r:block_device:s0 tclass=dir permissive=0avc:  denied  { add_name } for  pid=209 comm="recovery" name="misc" scontext=u:r:recovery:s0 tcontext=u:object_r:block_device:s0 tclass=dir permissive=0
# avc:  denied  { search } for  pid=247 comm="recovery" name="usb-ffs" dev="tmpfs" ino=8664 scontext=u:r:recovery:s0 tcontext=u:object_r:usb_device:s0 tclass=dir permissive=0
# arch=40000028 syscall=334 per=800000 success=no exit=-13 a0=ffffff9c a1=7ed38 a2=0 a3=0 items=0 ppid=205 ppcomm=recovery pid=247
# Marvell  avc:  denied  { mounton } for  pid=2419 comm="recovery" path="/cache" dev="rootfs" ino=8203 scontext=u:r:recovery:s0 tcontext=u:object_r:cache_file:s0 tclass=dir permissive=1
# Marvell  avc:  denied  { mounton } for  pid=2419 comm="recovery" path="/efs" dev="rootfs" ino=8208 scontext=u:r:recovery:s0 tcontext=u:object_r:efs_file:s0 tclass=dir permissive=1
# Marvell  avc:  denied  { mounton } for  pid=2391 comm="recovery" path="/preload" dev="rootfs" ino=1503 scontext=u:r:recovery:s0 tcontext=u:object_r:hidden_file:s0 tclass=dir permissive=0
# MR1 TRLTE avc:  denied  { sigkill } for  pid=280 comm="recovery" scontext=u:r:recovery:s0 tcontext=u:r:time_daemon:s0 tclass=process permissive=0

#line 1 "vendor/samsung/common/sepolicy/rild.te"
#
# rild
#
############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute rild trusteddomain;
typeattribute rild mlstrustedsubject;
#typeattribute rild system_domain;
# temporary permissive to gather the log.
# permissive rild;


#line 13
allow rild dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 13
allow rild dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 13
allow rild dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 13
allow rild bugreport_exec:file { execute execute_no_trans };
#line 13
allow rild dumpstate_exec:file { execute execute_no_trans };
#line 13
allow rild dumpsys_exec:file { execute execute_no_trans };
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow rild system:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow system rild:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow rild system:fd use;
#line 14


#line 15
# Call the servicemanager and transfer references to it.
#line 15
allow rild servicemanager:binder { call transfer };
#line 15
# servicemanager performs getpidcon on clients.
#line 15
allow servicemanager rild:dir search;
#line 15
allow servicemanager rild:file { read open };
#line 15
allow servicemanager rild:process getattr;
#line 15
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 15
# all domains in domain.te.
#line 15


########## self and domain_type
allow rild bluetooth:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild bluetooth:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild cellgeofenced:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild cellgeofenced:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild init:dir { open getattr read search ioctl };
allow rild init:file { getattr open read ioctl lock };
allow rild init:tun_socket relabelfrom;
allow rild mediaserver:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild mediaserver:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild platform_app:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild s_platform_app:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 28
allow rild platform_app:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild s_platform_app:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 29
allow rild radio:dir { open getattr read search ioctl };
allow rild radio:file { getattr open read ioctl lock };
allow rild samsung_app:dir { open getattr read search ioctl };
allow rild samsung_app:file { getattr open read ioctl lock };
allow rild self:capability { chown dac_override dac_read_search };
allow rild self:{ netlink_socket packet_socket netlink_route_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow rild self:process execmem;
allow rild smdexe:dir { open getattr read search ioctl };
allow rild smdexe:file { getattr open read ioctl lock };
allow rild system_app:dir search;
allow rild s_system_app:dir search;
#line 39
allow rild system_app:file { getattr open read ioctl lock };
allow rild s_system_app:file { getattr open read ioctl lock };
#line 40
allow rild vpnclientd:tun_socket relabelfrom;
allow rild wpa:dir { open getattr read search ioctl };
allow rild wpa:file { getattr open read ioctl lock };

########## fs_type
allow rild proc:file { open append write };
allow rild proc_net:file { open append write };
allow rild sysfs:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild sysfs_sec:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rild sysfs_sec:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow rild sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow rild ashmem_device:chr_file execute;
allow rild emmcblk_device:blk_file { getattr open read ioctl lock };
allow rild esoc_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild recoveryblk_device:blk_file { getattr open read ioctl lock };
allow rild tun_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild usb_device:chr_file { open append write };

########## file_type
allow rild anr_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rild anr_data_file:file { { getattr open read ioctl lock } { open append write } };
allow rild app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 64
allow rild app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 65
allow rild app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild dumpstate_exec:file { getattr execute execute_no_trans };
allow rild dumpstate_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild imei_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild imei_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild radio_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild rild_tmpfs:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };

#allow rild rild_tmpfs:file { create_file_perms execute };
#violate neverallow rule. change to:
allow rild rild_tmpfs:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild system_app_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rild system_app_data_file:file { { { getattr open read ioctl lock } { open append write } } setattr };
allow rild system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild tombstone_data_file:dir { open getattr read search ioctl }; 
allow rild tombstone_data_file:file { getattr open read ioctl lock }; 
allow rild zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

########## etc_type
allow rild ctl_dumpstate_prop:property_service set;
allow rild setupwizard_prop:property_service set;
allow rild system_prop:property_service set;
allow rild rild_prop:property_service set;

########## known issue.
## create ril log to sdcard_internal
allow rild media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild sdcard_internal:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# AWS
#allow rild dalvikcache_data_file:file execute;
#violate neverallow rule

# I9502 efs_gsm and uart device# I9502 efs_gsm and uart device
allow rild efs_gsm_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow rild efs_gsm_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild uart_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Access restriction of nv_data, reqested from CP system(js074.lee)
allow rild nv_core_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
type_transition rild efs_file:file nv_core_efs_file ".nv_core.bak";
type_transition rild efs_file:file nv_core_efs_file ".nv_core.bak.md5";

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow rild knox_kap_device:chr_file { getattr open read ioctl lock };

########## file_type
########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
allow rild at_distributor:dir { open getattr read search ioctl };
allow rild at_distributor:file { getattr open read ioctl lock };
allow rild commonplatformappdomain:dir { open getattr read search ioctl };
allow rild commonplatformappdomain:file { getattr open read ioctl lock };
allow rild qmuxd:unix_stream_socket connectto;
allow rild self:capability dac_override;
allow rild self:packet_socket { read create ioctl };
########## fs_type
allow rild proc:file { open append write };
########## dev_type
allow rild device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rild device:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild smd_cxm_qmi_device:chr_file { open append write };

########## file_type
allow rild app_efs_file:file { getattr open read ioctl lock };
allow rild imei_efs_file:file { { getattr open read ioctl lock } { open append write } };
allow rild media_rw_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rild qmux_radio_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow rild qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow rild system_app:dir search; 
allow rild s_system_app:dir search; 
#line 151
allow rild system_app:file { getattr open read ioctl lock };
allow rild s_system_app:file { getattr open read ioctl lock };
#line 152

########## etc_type
#neverallow Google CTS-android-5.0.2_r1 : allow rild default_prop:property_service set;

########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow rild at_distributor:dir { open getattr read search ioctl };
allow rild at_distributor:file { getattr open read ioctl lock };
allow rild commonplatformappdomain:dir { open getattr read search ioctl };
allow rild commonplatformappdomain:file { getattr open read ioctl lock };
allow rild gpsd:dir { open getattr read search ioctl };
allow rild gpsd:file { getattr open read ioctl lock };
allow rild mediaserver:dir { open getattr read search ioctl };
allow rild mediaserver:file { getattr open read ioctl lock };
allow rild mlexe:dir { open getattr read search ioctl };
allow rild mlexe:file { getattr open read ioctl lock };
allow rild self:capability { chown dac_override };
allow rild self:netlink_kobject_uevent_socket read;
allow rild self:packet_socket { read create ioctl };

########## fs_type
########## dev_type
allow rild block_device:dir { open getattr read search ioctl };
allow rild diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow rild mbin_device:lnk_file { getattr open read ioctl lock };
allow rild mif_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild mif_device:lnk_file { open append write };
allow rild radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow rild radioblk_device:blk_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow rild bin_nv_data_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow rild dumplog_data_file:file x_file_perms;
allow rild imei_efs_file:dir { open getattr read search ioctl };
allow rild imei_efs_file:file { open append write };

#allow rild system_file:dir create_dir_perms;
#violate neverallow rule. change to:
allow rild system_file:dir { open getattr read search ioctl };


########## etc_type
allow rild ctl_rildaemon_prop:property_service set;

########## known issue.
#r_dir_file(rild, file_type)
# replacing r_dir_file macro and removing container related access
allow rild newAttr58:dir { open getattr read search ioctl };
allow rild newAttr58:{ file lnk_file } { getattr open read ioctl lock };

############ avc_log #############
# P140708-00188 : avc:  denied  { read } for  pid=2280 comm="rild" name="mdm_err.log" dev="mmcblk0p27" ino=393248 scontext=u:r:rild:s0 tcontext=u:object_r:tombstone_data_file:s0 tclass=file
# audit(1404748827.415:197): item=0 name="/tombstones/mdm/mdm_err.log" inode=393248 dev=b3:1b mode=0100660 ouid=1000 ogid=1001 rdev=00:00 obj=u:object_r:tombstone_data_file:s0
# P140708-00188 : avc:  denied  { search } for  pid=2280 comm="rild" name="tombstones" dev="mmcblk0p27" ino=393224 scontext=u:r:rild:s0 tcontext=u:object_r:tombstone_data_file:s0 tclass=dir
# avc:  denied  { execute } for  pid=2391 comm="Compiler" path=2F6465762F6173686D656D2F64616C76696B2D6A69742D636F64652D6361636865202864656C6574656429 dev="tmpfs" ino=18457 scontext=u:r:rild:s0 tcontext=u:object_r:rild_tmpfs:s0
# avc:  denied  { setattr } for  pid=1786 comm="rild" name="settings.db-wal" dev="mmcblk0p27" ino=785670 scontext=u:r:rild:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file
#from CTS testing
# avc:  denied  { open } for  pid=999 comm="rild" name="cmdline" dev="proc" ino=15637 scontext=u:r:rild:s0 tcontext=u:r:radio:s0 #tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { read } for  pid=999 comm="rild" name="cmdline" dev="proc" ino=15637 scontext=u:r:rild:s0 tcontext=u:r:radio:s0 #tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { search } for  pid=999 comm="rild" name="2251" dev="proc" ino=15631 scontext=u:r:rild:s0 tcontext=u:r:radio:s0 #tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { getattr } for  pid=999 comm="rild" path="/proc/2251/cmdline" dev="proc" ino=15637 scontext=u:r:rild:s0 #tcontext=u:r:radio:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { open } for  pid=1151 comm="rild" path="/data/data/com.android.providers.settings/databases/settings.db" dev="mmcblk0p27" ino=785683 scontext=u:r:rild:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file
# { write getattr setattr read lock open } for settigs.db 
# avc:  denied  { write } for  pid=462 comm="rild" #name="accept_ra_defrtr" dev="proc" ino=10454 scontext=u:r:rild:s0 tcontext=u:object_r:proc_net:s0 tclass=file
# avc:  denied  { open } for  pid=554 comm="rild" path="/dev/subsys_esoc0" dev="tmpfs" ino=10551 scontext=u:r:rild:s0 tcontext=u:object_r:device:s0 #tclass=chr_file
# avc:  denied  { read write } for  pid=554 comm="rild" name="esoc-0" dev="tmpfs" ino=10550 scontext=u:r:rild:s0 tcontext=u:object_r:device:s0 #tclass=chr_file
# avc:  denied  { read write } for  pid=598 comm="rild" name="tun" dev="tmpfs" ino=9417 scontext=u:r:rild:s0 tcontext=u:object_r:tun_device:s0 tclass=chr_file
# avc:  denied  { open ioctl } for  pid=598 comm="rild" path="/dev/tun" dev="tmpfs" ino=9417 scontext=u:r:rild:s0 tcontext=u:object_r:tun_device:s0 tclass=chr_file
# avc:  denied  { relabelfrom } for  pid=21111 comm="rild" scontext=u:r:rild:s0 tcontext=u:r:init:s0 tclass=tun_socket SEPF_SM-N910T_4.4.4_A018 # init is vpnclientpm or tsdaemon
# avc:  denied  { create } for  pid=2929 comm="rild" name="lli_20140714_113028.dump" scontext=u:r:rild:s0 tcontext=u:object_r:sdcard_internal:s0 tclass=file
# avc:  denied  { read append open } for  pid=2929 comm="rild" path="/mnt/shell/emulated/0/log/lli_20140714_113028.dump" dev="sdcardfs" ino=1572994 scontext=u:r:rild:s0 tcontext=u:object_r:sdcard_internal:s0 tclass=file
# avc:  denied  { create } for  pid=2929 comm="rild" name="lli_20140714_113028.dump" scontext=u:r:rild:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file
# avc:  denied  { write } for  pid=1136 comm="rild" name="hall_irq_ctrl" dev="sysfs" ino=29948 scontext=u:r:rild:s0 tcontext=u:object_r:sysfs_sec:s0 tclass=file SEPF_SM-G900F_L_A001
# item=0 name="/sys/class/sec/sec_key/hall_irq_ctrl" inode=29948 dev=00:0c mode=0100220 ouid=1000 ogid=1001 rdev=00:00 obj=u:object_r:sysfs_sec:s0
# avc:  denied  { search } for  pid=1075 comm="rild" name="6380" dev="proc" ino=49646 scontext=u:r:s_rild:s0 tcontext=u:r:s_system_app:s0:c2 tclass=dir
# I9502 efs_gsm and uart device
# audit(1356999244.795:208): avc:  denied  { write } for  pid=8169 comm="rild" name="ttySAC3" dev="tmpfs" ino=2400 scontext=u:r:s_rild:s0 tcontext=u:object_r:uart_device:s0 tclass=chr_file
# audit(1356999236.725:207): item=0 name="/dev/ttySAC3" inode=2400 dev=00:0c mode=020660 ouid=1000 ogid=1001 rdev=cc:43 obj=u:object_r:uart_device:s0
# avc:  denied  { write } for  pid=2597 comm="rild" name="nv_gsm_data.bin" dev="mmcblk0p23" ino=12 scontext=u:r:s_rild:s0 tcontext=u:object_r:unlabeled:s0 tclass=file
# item=0 name="/efs_gsm/nv_gsm_data.bin" inode=12 dev=103:0f mode=0100700 ouid=1001 ogid=1001 rdev=00:00 obj=u:object_r:unlabeled:s0
# JA3G_CTC avc:  denied  { write } for  pid=10790 comm="rild" name="ttyUSB0" dev="tmpfs" ino=58086 scontext=u:r:s_rild:s0 tcontext=u:object_r:usb_device:s0 tclass=chr_file
# JA3G_CTC avc:  denied  { write } for  pid=2530 comm="rild" name="cdma_ipc0" dev="tmpfs" ino=2245 scontext=u:r:s_rild:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# JA3G_CTC avc:  denied  { write } for  pid=2585 comm="rild" name="cdma_boot0" dev="tmpfs" ino=5265 scontext=u:r:s_rild:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# JA3G_CTC avc:  denied  { set } for property=ctl.dumpstate scontext=u:r:s_rild:s0 tcontext=u:object_r:ctl_dumpstate_prop:s0 tclass=property_service
# I9502ZNEHNL2 avc:  denied  { create } for  pid=2599 comm="rild" name=".nv_gsm_data.bak" scontext=u:r:s_rild:s0 tcontext=u:object_r:efs_gsm_file:s0 tclass=file
# I9502ZNEHNL2 avc:  denied  { setattr } for  pid=3260 comm="rild" path="/efs_gsm/nv_gsm_data.bin" dev="mmcblk0p23" ino=13 scontext=u:r:s_rild:s0 tcontext=u:object_r:efs_gsm_file:s0 tclass=file 
# avc:  denied  { set } for property=persist.data_netmgrd_mtu scontext=u:r:s_rild:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { set } for property=persist.ril.ims.eutranParam scontext=u:r:s_rild:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { set } for property=persist.ril.ims.utranParam scontext=u:r:s_rild:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=3138 comm="rild" name="/" dev="tmpfs" ino=15645 scontext=u:r:rild:s0 tcontext=u:object_r:device:s0 tclass=dir permissive=1
# avc:  denied  { create } for  pid=3138 comm="rild" name="qmi_dump" scontext=u:r:rild:s0 tcontext=u:object_r:device:s0 tclass=file permissive=1
# avc:  denied  { write open } for  pid=3138 comm="rild" path="/dev/qmi_dump" dev="tmpfs" ino=113053 scontext=u:r:rild:s0 tcontext=u:object_r:device:s0 tclass=file permissive=1
# avc:  denied  { set } for property=ctl.ril-daemon1 scontext=u:r:rild:s0 tcontext=u:object_r:ctl_rildaemon_prop:s0 tclass=property_service
# avc:  denied  { relabelfrom } for  pid=12226 comm="rild" scontext=u:r:rild:s0 tcontext=u:r:vpnclientd:s0 tclass=tun_socket permissive=0

#line 1 "vendor/samsung/common/sepolicy/runas.te"
#
# runas
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
#typeattribute runas trusteddomain;
#typeattribute runas system_domain;
# temporary permissive to gather the log.
# permissive runas;

########## self and domain_type
allow runas self:capability dac_read_search;

########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.
# ndk-gdb invokes adb shell ps to find the app PID.

#line 22
allow shell newAttr9:dir { open getattr read search ioctl };
#line 22
allow shell newAttr9:{ file lnk_file } { getattr open read ioctl lock };
#line 22

dontaudit shell domain:dir { open getattr read search ioctl };
dontaudit shell domain:file { getattr open read ioctl lock };

# ndk-gdb invokes adb shell ls to check the app data dir.
allow shell app_data_file:dir search;
allow shell gad_untrusted_app_data_file:dir search;
#line 28

# ndk-gdb invokes adb shell kill -9 to kill the gdbserver.
allow shell newAttr9:process sigkill;
dontaudit shell self:capability { sys_ptrace kill };

# run-as runs lib/gdbserver from the app data dir.
allow newAttr9 system_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# gdbserver reads the zygote.
allow newAttr9 zygote_exec:file { getattr open read ioctl lock };

# (grand)child death notification.
allow newAttr9 shell:process sigchld;
allow newAttr9 adbd:process sigchld;

# child shell or gdbserver pty access.
allow newAttr9 devpts:chr_file { getattr read write ioctl };

# gdbserver creates a socket in the app data dir.
allow newAttr9 app_data_file:sock_file { create unlink };
allow newAttr9 gad_untrusted_app_data_file:sock_file { create unlink };
#line 48

# ndk-gdb invokes adb forward to forward the gdbserver socket.
allow adbd app_data_file:dir search;
allow adbd gad_untrusted_app_data_file:dir search;
#line 51
allow adbd app_data_file:sock_file write;
allow adbd gad_untrusted_app_data_file:sock_file write;
#line 52
allow adbd newAttr9:unix_stream_socket connectto;

# ndk-gdb invokes adb pull of app_process, linker, and libc.so.
allow adbd zygote_exec:file { getattr open read ioctl lock };
allow adbd system_file:file { getattr open read ioctl lock };


############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/sdcardd.te"
#
# sdcardd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute sdcardd trusteddomain;
#typeattribute sdcardd system_domain;
# temporary permissive to gather the log.
# permissive sdcardd;


#line 13
allow sdcardd kernel:system syslog_mod;
#line 13
allow sdcardd klog_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 13

#set_prop(sdcardd)
#violate neverallow rule

########## self and domain_type
#allow sdcardd self:capability { mknod chown };
#violate neverallow rule. change to:
allow sdcardd self:capability { chown };

########## fs_type
allow sdcardd rootfs:file { getattr open read ioctl lock };
allow sdcardd sdcard_external:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sdcardd sdcard_external:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sdcardd sdcard_type:dir mounton;
allow sdcardd sdcard_type:filesystem unmount;

########## dev_type
allow sdcardd device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

########## file_type
allow sdcardd media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sdcardd media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sdcardd obb_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sdcardd obb_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sdcardd security_file:file { getattr open read ioctl lock };
allow sdcardd security_spota_file:file { getattr open read ioctl lock };
#line 38

########## etc_type
########## known issue.
#From NSA
allow sdcardd system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sdcardd system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow sdcardd container_app_data_backend:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow sdcardd bbccontainer_app_data_backend:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
#line 52
allow sdcardd container_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sdcardd bbccontainer_app_data_backend:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 53

########## etc_type
########## known issue.
# Multi Security Contexts
#apply CTS test waive. It is extended feature
#neverallow by Google allow sdcardd labeledfs:filesystem { mount unmount };
allow sdcardd labeledfs:filesystem unmount;

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow sdcardd media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow sdcardd media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow sdcardd obb_apk_file:dir { open getattr read search ioctl };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { unmount } for  pid=5832 comm="sdcard" scontext=u:r:sdcardd:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem SEPF_SM-N915T_4.4.4_A019
# arch=40000028 syscall=52 per=800000 success=no exit=-13 a0=beb769a7 a1=2 a2=1c a3=234142d6 items=1 ppid=1 pid=5832 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="sdcard" exe="/system/bin/sdcard" subj=u:r:sdcardd:s0 key=(null)
# cwd="/" item=0 name="/storage/extSdCard" inode=10379 dev=00:17 mode=040700 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:unlabeled:s0


#line 1 "vendor/samsung/common/sepolicy/servicemanager.te"
#
# servicemanager
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute servicemanager trusteddomain;
typeattribute servicemanager mlstrustedsubject;
#typeattribute servicemanager system_domain;
# temporary permissive to gather the log.
# permissive servicemanager;


#line 14
allow servicemanager property_socket:sock_file write;
#line 14
allow servicemanager init:unix_stream_socket connectto;
#line 14


########## self and domain_type
allow servicemanager edmaudit:process getattr;

########## fs_type
########## dev_type
allow servicemanager device:file { getattr open read ioctl lock };

########## file_type
allow servicemanager security_file:file { read open };
allow servicemanager security_spota_file:file { read open };
#line 25

########## etc_type
allow servicemanager system_prop:property_service set;
allow servicemanager denial_prop:property_service set;

########## known issue.

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
allow servicemanager proc_avc_msg:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
########## file_type
allow servicemanager audit_log:file { { getattr open read ioctl lock } { open append write } };

########## etc_type
########## known issue.

############ avc_log #############
#audit(1388557492.789:250): avc:  denied  { getattr } for  pid=258 comm="servicemanager" scontext=u:r:servicemanager:s0 tcontext=u:r:edmaudit:s0 tclass=process
#audit(1388557492.789:250): arch=40000028 syscall=3 per=800000 success=yes exit=16 a0=b a1=b6a54000 a2=fff a3=ffffff84 items=0 ppid=1 pid=258 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4294967295 comm="servicemanager" exe="/system/bin/servicemanager" subj=u:r:servicemanager:s0 key=(null)
#audit(1388573275.010:15): avc:  denied  { read } for  pid=258 comm="servicemanager" name="sepolicy" dev="mmcblk0p26" ino=131621 scontext=u:r:servicemanager:s0 tcontext=u:object_r:security_file:s0 tclass=file
#audit(1388573275.010:15): avc:  denied  { open } for  pid=258 comm="servicemanager" name="sepolicy" dev="mmcblk0p26" ino=131621 scontext=u:r:servicemanager:s0 tcontext=u:object_r:security_file:s0 tclass=file


#line 1 "vendor/samsung/common/sepolicy/service.te"
############ aosp and sec_common #############
type apaservice_service, service_manager_type;
type bauthserver_service, service_manager_type;
type bintvoutservice_service, service_manager_type;
type ese_service, service_manager_type;
type jackservice_service, service_manager_type;
type otp_server_service, service_manager_type;
type platform_app_service, service_manager_type;
type sensorhubservice_service, service_manager_type;
type tlc_server_service, service_manager_type;
type wlandutservice_service, service_manager_type;
type writingbuddymanager_service, service_manager_type;
############ knox_common #############

############ qcom_common #############
type adsprpcd_service, service_manager_type;

############ carrier_common #############
type dmb_service, service_manager_type;
type tbased_service, service_manager_type;

############ carrier_jpn
# Fullseg / Oneseg
type oneseg_mw_service, service_manager_type;
type dtvserver_service, service_manager_type;
type mmb_mw_service, service_manager_type;
#line 1 "vendor/samsung/common/sepolicy/surfaceflinger.te"
#
# surfaceflinger
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute surfaceflinger trusteddomain;
#typeattribute surfaceflinger system_domain;
# temporary permissive to gather the log.
# permissive surfaceflinger;


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow surfaceflinger adbd:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow adbd surfaceflinger:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow surfaceflinger adbd:fd use;
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow surfaceflinger containerdomain:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow containerdomain surfaceflinger:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow surfaceflinger containerdomain:fd use;
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow surfaceflinger bintvoutservice:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow bintvoutservice surfaceflinger:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow surfaceflinger bintvoutservice:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow surfaceflinger mediaserver:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow mediaserver surfaceflinger:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow surfaceflinger mediaserver:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow surfaceflinger nfc:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow nfc surfaceflinger:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow surfaceflinger nfc:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow surfaceflinger radio:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow radio surfaceflinger:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow surfaceflinger radio:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow surfaceflinger servicemanager:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow servicemanager surfaceflinger:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow surfaceflinger servicemanager:fd use;
#line 19


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow surfaceflinger system:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow system surfaceflinger:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow surfaceflinger system:fd use;
#line 20


#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow surfaceflinger zygote:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow zygote surfaceflinger:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow surfaceflinger zygote:fd use;
#line 21


#line 22
allow surfaceflinger dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 22
allow surfaceflinger dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 22
allow surfaceflinger dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 22
allow surfaceflinger bugreport_exec:file { execute execute_no_trans };
#line 22
allow surfaceflinger dumpstate_exec:file { execute execute_no_trans };
#line 22
allow surfaceflinger dumpsys_exec:file { execute execute_no_trans };
#line 22


#line 23
allow surfaceflinger mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 23
allow surfaceflinger mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 23
# TODO: Figure out proper sockets
#line 23
allow surfaceflinger mobicoredaemon:unix_stream_socket connectto;
#line 23


########## self and domain_type
allow surfaceflinger bugreport:dir { open getattr read search ioctl };
allow surfaceflinger bugreport:file { getattr open read ioctl lock };
allow surfaceflinger containerdomain:fd use;
allow surfaceflinger newAttr33:dir { open getattr read search ioctl };
allow surfaceflinger newAttr33:{ file lnk_file } { getattr open read ioctl lock };
allow surfaceflinger dumpstate:dir { open getattr read search ioctl };
allow surfaceflinger dumpstate:file { getattr open read ioctl lock };
allow surfaceflinger dumpsys:dir { open getattr read search ioctl };
allow surfaceflinger dumpsys:file { getattr open read ioctl lock };
#neverallow by Google:(domain init:binder call;)  allow surfaceflinger init:binder transfer;
allow surfaceflinger init:dir { open getattr read search ioctl };
allow surfaceflinger init:file { getattr open read ioctl lock };
allow surfaceflinger mediaserver:dir { open getattr read search ioctl };
allow surfaceflinger mediaserver:file { getattr open read ioctl lock };
allow surfaceflinger radio:dir { open getattr read search ioctl };
allow surfaceflinger radio:file { getattr open read ioctl lock };
#neverallow by Google: neverallow { domain -debuggerd -vold -dumpstate -system_server } self:capability sys_ptrace
allow surfaceflinger self:capability { dac_read_search sys_resource dac_override };
allow surfaceflinger self:unix_stream_socket write;
allow surfaceflinger shell:dir search;
allow surfaceflinger shell:file { getattr open read ioctl lock };
allow surfaceflinger system_app:file { getattr open read ioctl lock };
allow surfaceflinger s_system_app:file { getattr open read ioctl lock };
#line 48
allow surfaceflinger vold:dir search;

########## fs_type
allow surfaceflinger debugfs:file { getattr open read ioctl lock };
allow surfaceflinger sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow surfaceflinger camera_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow surfaceflinger hpd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow surfaceflinger i2c_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow surfaceflinger tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow surfaceflinger ump_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow surfaceflinger isolated_app_tmpfs:file write;
allow surfaceflinger media_rw_data_file:file { open append write };
allow surfaceflinger shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow surfaceflinger system_data_file:file { getattr open read ioctl lock };
allow surfaceflinger system_file:file { getattr execute execute_no_trans };

########## etc_type
allow surfaceflinger debug_prop:property_service set;

########## known issue.
#r_dir_file(surfaceflinger, file_type)
# replacing r_dir_file macro and removing container related access
allow surfaceflinger newAttr59:dir { open getattr read search ioctl };
allow surfaceflinger newAttr59:{ file lnk_file } { getattr open read ioctl lock };

# Do not allow accessing SDcard files as unsafe ejection could
# cause the kernel to kill the process.
#allow surfaceflinger sdcard_type:file w_file_perms;

# for CTS
allow surfaceflinger app_data_file:file { open append write };
allow surfaceflinger gad_untrusted_app_data_file:file { open append write };
#line 83
allow surfaceflinger platform_app_data_file:file { { getattr open read ioctl lock } { open append write } };
allow surfaceflinger untrusteddomain:dir { open getattr read search ioctl };
allow surfaceflinger untrusteddomain:file { getattr open read ioctl lock };

# for ACT 
allow surfaceflinger untrusted_app_tmpfs:file { open append write };

# for Bugreport

#line 91
allow surfaceflinger init:unix_stream_socket connectto;
#line 91
allow surfaceflinger init:unix_stream_socket { read write };
#line 91

allow surfaceflinger devpts:chr_file { read write };

#from NSA
allow surfaceflinger ctl_default_prop:property_service set;

# reserved memory to support DRM Scenario
allow surfaceflinger sysfs:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };

# support cryptfs_do_dumpstate
allow surfaceflinger cache_file:file write;

############ qcom_common #############
########## type and macro.

#line 105
# Call the server domain and optionally transfer references to it.
#line 105
allow surfaceflinger bluetooth:binder { call transfer };
#line 105
# Allow the serverdomain to transfer references to the client on the reply.
#line 105
allow bluetooth surfaceflinger:binder transfer;
#line 105
# Receive and use open files from the server.
#line 105
allow surfaceflinger bluetooth:fd use;
#line 105


########## self and domain_type
allow surfaceflinger bootanim:fd use;
allow surfaceflinger domain:dir { getattr search };
allow surfaceflinger domain:lnk_file read;
allow surfaceflinger mediaserver:fd use;
allow surfaceflinger nfc:fd use;
allow surfaceflinger radio:fd use;
allow surfaceflinger system:fd use;
allow surfaceflinger bluetooth:fd use;
allow surfaceflinger self:tcp_socket create;
allow surfaceflinger system_app:dir { open getattr read search ioctl };
allow surfaceflinger s_system_app:dir { open getattr read search ioctl };
#line 118

########## fs_type
allow surfaceflinger sysfs:file write;
allow surfaceflinger sysfs_graphics:file write;

########## dev_type
allow surfaceflinger kgsl_device:chr_file { { { getattr open read ioctl lock } { open append write } } execute };

########## file_type
allow surfaceflinger shell_data_file:dir { open getattr read search ioctl };

########## etc_type
allow surfaceflinger shell_prop:property_service set;

########## known issue.
## from J GED 
allow surfaceflinger sysfs_graphics:file { { getattr open read ioctl lock } { open append write } };

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow surfaceflinger bintvoutservice:file { getattr open read ioctl lock };
allow surfaceflinger mobexdaemon:file { getattr open read ioctl lock };
allow surfaceflinger servicemanager:file { getattr open read ioctl lock };
allow surfaceflinger system_app:fifo_file { open append write };
allow surfaceflinger s_system_app:fifo_file { open append write };
#line 143

########## fs_type
########## dev_type
allow surfaceflinger hpd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow surfaceflinger hpd_device:sock_file { getattr open read ioctl lock };
allow surfaceflinger ump_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow surfaceflinger s5p_smem_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow surfaceflinger system_data_file:dir { { open getattr read search ioctl } add_name write }; 
allow surfaceflinger system_data_file:file { open append write };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { getattr } for  pid=441 comm="surfaceflinger" path="/sys/kernel/debug/tracing/trace_marker" dev="debugfs" ino=4616 #scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:debugfs:s0 tclass=file
# avc:  denied  { read } for  pid=22103 comm="sh" name="sync" dev="debugfs" ino=9227 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:debugfs:s0 tclass=file
# avc:  denied  { read } for  pid=9978 comm="lsof" name="fd" dev="proc" ino=286397 scontext=u:r:surfaceflinger:s0 tcontext=u:r:IPSecService:s0 tclass=dir SEPF_SAMSUNG-SM-N910A_4.4.4_0018
# avc:  denied  { open } for  pid=9978 comm="lsof" path="/proc/1076/fd" dev="proc" ino=286397 scontext=u:r:surfaceflinger:s0 tcontext=u:r:IPSecService:s0 tclass=dir SEPF_SAMSUNG-SM-N910A_4.4.4_0018
# avc:  denied  { getattr } for  pid=9978 comm="lsof" path="/proc/1076/maps" dev="proc" ino=286410 scontext=u:r:surfaceflinger:s0 tcontext=u:r:IPSecService:s0 tclass=file SEPF_SAMSUNG-SM-N910A_4.4.4_0018
# avc:  denied  { write } for  pid=2916 comm="surfaceflinger" name="isolated" dev="sysfs" ino=5651 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs:s0 tclass=file
#       item=0 name="/sys/devices/ion.17/ion_cma/ion_video/isolated" inode=5651 dev=00:0e mode=0100777 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs:s0
# avc:  denied  { write } for  pid=305 comm="surfaceflinger" name="vendor_name" dev="sysfs" ino=13117 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs_graphics:s0 tclass=file No Property
# item=0 name="/sys/devices/virtual/graphics/fb1/vendor_name" inode=13117 dev=00:0c mode=0100664 ouid=1000 ogid=1003 rdev=00:00 obj=u:object_r:sysfs_graphics:s0
#audit(46769.760:27): avc:  denied  { read write } for  pid=179 comm="surfaceflinger" name="vendor_name" dev="sysfs" ino=10843 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs_graphics:s0 tclass=file
#audit(46769.760:27): avc:  denied  { open } for  pid=179 comm="surfaceflinger" name="vendor_name" dev="sysfs" ino=10843 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs_graphics:s0 tclass=file
#audit(46769.760:27): arch=40000028 syscall=322 per=800000 success=yes exit=12 a0=ffffff9c a1=becdc5a4 a2=20002 a3=0 items=1 ppid=1 pid=179 auid=4294967295 uid=1000 gid=1003 euid=1000 suid=1000 fsuid=1000 egid=1003 sgid=1003 fsgid=1003 tty=(none) ses=42949audit(46769.760:27):  cwd="/"
#audit(46769.760:27): item=0 name="/sys/devices/virtual/graphics/fb1/vendor_name" inode=10843 dev=00:0c mode=0100664 ouid=1000 ogid=1003 rdev=00:00 obj=u:object_r:sysfs_graphics:s0
# avc:  denied  { write } for  pid=7899 comm="dumpsys" path="/cache/recovery/last_ode_dumpstate_error_unencrypted.log" dev="mmcblk0p24" ino=16002 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:cache_file:s0 tclass=file SEPF_SAMSUNG-SM-T537A_5.0.2_0009


#line 1 "vendor/samsung/common/sepolicy/su.te"

#line 1
#neverallow Google CTS-android-5.0.2_r1 :    allow su self:capability sys_ptrace;
#line 1

#line 1
    ## JDWP on eng binary
#line 1
 typeattribute su mlstrustedsubject;
#line 1
 allow appdomain su:unix_stream_socket connectto;
#line 1
	
#line 8

#line 1 "vendor/samsung/common/sepolicy/system_app.te"
#
# system_app
#

############ aosp and sec_common #############
########## type and macro.
typeattribute system_app mlstrustedsubject;
typeattribute s_system_app mlstrustedsubject;
#line 8
# for B2C users
typeattribute system_app trusteddomain;
typeattribute s_system_app trusteddomain;
#line 10
typeattribute system_app trusted_app_domain;
typeattribute s_system_app trusted_app_domain;
#line 11
# temporary permissive to gather the log.
# permissive system_app;


#line 14
allow system_app kernel:system syslog_read;
allow s_system_app kernel:system syslog_read;
#line 14


#line 15
allow system_app log_device:chr_file read;
allow s_system_app log_device:chr_file read;
#line 15
allow system_app system_file:file { getattr execute execute_no_trans };
allow s_system_app system_file:file { getattr execute execute_no_trans };
#line 15


#binder_call(system_app, init)
#violate neverallow rule


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow system_app bintvoutservice:binder { call transfer };
allow s_system_app bintvoutservice:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow bintvoutservice system_app:binder transfer;
allow bintvoutservice s_system_app:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow system_app bintvoutservice:fd use;
allow s_system_app bintvoutservice:fd use;
#line 20


#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow system_app sensorhubservice:binder { call transfer };
allow s_system_app sensorhubservice:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow sensorhubservice system_app:binder transfer;
allow sensorhubservice s_system_app:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow system_app sensorhubservice:fd use;
allow s_system_app sensorhubservice:fd use;
#line 21


#line 22
# Call the server domain and optionally transfer references to it.
#line 22
allow system_app healthd:binder { call transfer };
allow s_system_app healthd:binder { call transfer };
#line 22
# Allow the serverdomain to transfer references to the client on the reply.
#line 22
allow healthd system_app:binder transfer;
allow healthd s_system_app:binder transfer;
#line 22
# Receive and use open files from the server.
#line 22
allow system_app healthd:fd use;
allow s_system_app healthd:fd use;
#line 22


#line 23
# Call the server domain and optionally transfer references to it.
#line 23
allow system_app jackservice:binder { call transfer };
allow s_system_app jackservice:binder { call transfer };
#line 23
# Allow the serverdomain to transfer references to the client on the reply.
#line 23
allow jackservice system_app:binder transfer;
allow jackservice s_system_app:binder transfer;
#line 23
# Receive and use open files from the server.
#line 23
allow system_app jackservice:fd use;
allow s_system_app jackservice:fd use;
#line 23


#line 24
# Call the server domain and optionally transfer references to it.
#line 24
allow system_app zygote:binder { call transfer };
allow s_system_app zygote:binder { call transfer };
#line 24
# Allow the serverdomain to transfer references to the client on the reply.
#line 24
allow zygote system_app:binder transfer;
allow zygote s_system_app:binder transfer;
#line 24
# Receive and use open files from the server.
#line 24
allow system_app zygote:fd use;
allow s_system_app zygote:fd use;
#line 24


#line 25
allow system_app dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 25
allow system_app dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 25
allow system_app dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 25
allow system_app bugreport_exec:file { execute execute_no_trans };
allow s_system_app bugreport_exec:file { execute execute_no_trans };
#line 25
allow system_app dumpstate_exec:file { execute execute_no_trans };
allow s_system_app dumpstate_exec:file { execute execute_no_trans };
#line 25
allow system_app dumpsys_exec:file { execute execute_no_trans };
allow s_system_app dumpsys_exec:file { execute execute_no_trans };
#line 25


#line 26
allow system_app mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 26
allow system_app mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 26
# TODO: Figure out proper sockets
#line 26
allow system_app mobicoredaemon:unix_stream_socket connectto;
allow s_system_app mobicoredaemon:unix_stream_socket connectto;
#line 26


#line 27
allow system_app cs_socket:sock_file write;
allow s_system_app cs_socket:sock_file write;
#line 27
allow system_app cs:unix_stream_socket connectto;
allow s_system_app cs:unix_stream_socket connectto;
#line 27


#line 28
allow system_app epm_socket:sock_file write;
allow s_system_app epm_socket:sock_file write;
#line 28
allow system_app epmd:unix_stream_socket connectto;
allow s_system_app epmd:unix_stream_socket connectto;
#line 28


#line 29
allow system_app property_socket:sock_file write;
allow s_system_app property_socket:sock_file write;
#line 29
allow system_app init:unix_stream_socket connectto;
allow s_system_app init:unix_stream_socket connectto;
#line 29


# ime_app(com.sec.android.inputmethod)
# Remote Code Execution issue
# https://www.nowsecure.com/blog/2015/06/16/remote-code-execution-as-system-user-on-samsung-phones/

type ime_app, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr12, newAttr13, newAttr10, newAttr14, newAttr15, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50, newAttr93, newAttr94;


#line 37
typeattribute ime_app appdomain;
#line 37
# Label ashmem objects with our own unique type.
#line 37

#line 37
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 37
type ime_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 37
type_transition ime_app tmpfs:file ime_app_tmpfs;
#line 37
allow ime_app ime_app_tmpfs:file { read write };
#line 37

#line 37
# Map with PROT_EXEC.
#line 37
allow ime_app ime_app_tmpfs:file execute;
#line 37


#line 38
typeattribute ime_app netdomain;
#line 38


#line 39
typeattribute ime_app binderservicedomain;
#line 39


typeattribute ime_app mlstrustedsubject;
typeattribute ime_app trusteddomain;
typeattribute ime_app trusted_app_domain;

########## self and domain_type
allow system_app at_distributor:unix_stream_socket connectto;
allow s_system_app at_distributor:unix_stream_socket connectto;
#line 47
allow system_app connfwexe:unix_stream_socket connectto;
allow s_system_app connfwexe:unix_stream_socket connectto;
#line 48
allow system_app container_app:dir { open getattr read search ioctl };
allow s_system_app container_app:dir { open getattr read search ioctl };
#line 49
allow system_app cs:unix_stream_socket connectto;
allow s_system_app cs:unix_stream_socket connectto;
#line 50
allow system_app init:process signull;
allow s_system_app init:process signull;
#line 51
allow system_app init:unix_dgram_socket sendto;
allow s_system_app init:unix_dgram_socket sendto;
#line 52
allow system_app init:unix_stream_socket setopt;
allow s_system_app init:unix_stream_socket setopt;
#line 53
allow system_app IPSecService:unix_stream_socket connectto;
allow s_system_app IPSecService:unix_stream_socket connectto;
#line 54
allow system_app kernel:process setsched;
allow s_system_app kernel:process setsched;
#line 55
allow system_app kernel:system module_request;
allow s_system_app kernel:system module_request;
#line 56
#neverallow Google CTS-android-5.0.2_r1 :allow system_app kiesexe:process signal;
allow system_app mediaserver:unix_stream_socket connectto;
allow s_system_app mediaserver:unix_stream_socket connectto;
#line 58
allow system_app mobexdaemon:unix_stream_socket connectto;
allow s_system_app mobexdaemon:unix_stream_socket connectto;
#line 59
allow system_app netd:unix_stream_socket connectto;
allow s_system_app netd:unix_stream_socket connectto;
#line 60
allow system_app samsung_app:lnk_file { getattr open read ioctl lock };
allow s_system_app samsung_app:lnk_file { getattr open read ioctl lock };
#line 61
allow system_app secure_storage:unix_stream_socket connectto;
allow s_system_app secure_storage:unix_stream_socket connectto;
#line 62

#allow system_app self:capability { setuid setgid net_raw chown sys_ptrace sys_module setgid net_admin dac_override };
#violate neverallow rule

allow system_app self:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app self:chr_file { { getattr open read ioctl lock } { open append write } };
#line 67

#allow system_app self:netlink_kobject_uevent_socket *;
#violate neverallow rule. change to:
allow system_app self:netlink_kobject_uevent_socket { read create getattr setattr lock relabelfrom relabelto bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
allow s_system_app self:netlink_kobject_uevent_socket { read create getattr setattr lock relabelfrom relabelto bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 71

allow system_app self:netlink_route_socket *;
allow s_system_app self:netlink_route_socket *;
#line 73
allow system_app self:packet_socket { write bind create read setopt };
allow s_system_app self:packet_socket { write bind create read setopt };
#line 74
allow system_app self:tun_socket create;
allow s_system_app self:tun_socket create;
#line 75
allow system_app self:{ udp_socket tcp_socket rawip_socket } *;
allow s_system_app self:{ udp_socket tcp_socket rawip_socket } *;
#line 76
allow system_app sensorhubservice:fifo_file { getattr open read ioctl lock };
allow s_system_app sensorhubservice:fifo_file { getattr open read ioctl lock };
#line 77
allow system_app syscope_app:process signal;
allow s_system_app syscope_app:process signal;
#line 78
allow system_app system:tcp_socket { getattr getopt };
allow s_system_app system:tcp_socket { getattr getopt };
#line 79
allow system_app system:unix_stream_socket connectto;
allow s_system_app system:unix_stream_socket connectto;
#line 80
allow system_app untrusteddomain:lnk_file { { getattr link unlink rename } { getattr open read ioctl lock } };
allow s_system_app untrusteddomain:lnk_file { { getattr link unlink rename } { getattr open read ioctl lock } };
#line 81
allow system_app vcsFPService:process signull;
allow s_system_app vcsFPService:process signull;
#line 82
allow system_app vold:unix_stream_socket connectto;
allow s_system_app vold:unix_stream_socket connectto;
#line 83
allow system_app wpa:unix_dgram_socket sendto;
allow s_system_app wpa:unix_dgram_socket sendto;
#line 84

########## fs_type
allow system_app cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 87
allow system_app cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app cgroup:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 88
allow system_app debugfs:file { getattr open read ioctl lock };
allow s_system_app debugfs:file { getattr open read ioctl lock };
#line 89

#allow system_app proc:file w_file_perms;
#violate neverallow rule. change to:
allow system_app proc:file { open append };
allow s_system_app proc:file { open append };
#line 93

allow system_app sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 95
allow system_app sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 96

allow system_app sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write } };
#line 98
allow system_app sysfs_exynos_writable:file { open append write };
allow s_system_app sysfs_exynos_writable:file { open append write };
#line 99
allow system_app sysfs_lcd_writable:file { open append write };
allow s_system_app sysfs_lcd_writable:file { open append write };
#line 100
allow system_app sysfs_mst_writable:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app sysfs_mst_writable:file { { getattr open read ioctl lock } { open append write } };
#line 101
allow system_app sysfs_sec:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app sysfs_sec:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 102
allow system_app sysfs_sec:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow s_system_app sysfs_sec:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
#line 103
allow system_app sysfs_sensor_writable:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app sysfs_sensor_writable:file { { getattr open read ioctl lock } { open append write } };
#line 104
allow system_app sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
#line 105
allow system_app tmpfs:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app tmpfs:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 106
allow system_app tmpfs:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app tmpfs:file { { getattr open read ioctl lock } { open append write } };
#line 107

########## dev_type
allow system_app alarm_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app alarm_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 110

#allow system_app block_device:blk_file rw_file_perms;
#violate neverallow rule. change to:
allow system_app block_device:blk_file { getattr ioctl lock append };
allow s_system_app block_device:blk_file { getattr ioctl lock append };
#line 114

allow system_app block_device:lnk_file { getattr open read ioctl lock };
allow s_system_app block_device:lnk_file { getattr open read ioctl lock };
#line 116
allow system_app device:sock_file write;
allow s_system_app device:sock_file write;
#line 117
allow system_app device:file { getattr open read ioctl lock };
allow s_system_app device:file { getattr open read ioctl lock };
#line 118
allow system_app dw_mmc_device:dir { open getattr read search ioctl };
allow s_system_app dw_mmc_device:dir { open getattr read search ioctl };
#line 119
allow system_app dw_mmc_device:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app dw_mmc_device:file { { getattr open read ioctl lock } { open append write } };
#line 120
#neverallow Google CTS-android-5.0.2_r1 : allow system_app efsblk_device:blk_file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow system_app emmcblk_device:blk_file rw_file_perms;
allow system_app graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 123
allow system_app input_device:chr_file { read write ioctl open };
allow s_system_app input_device:chr_file { read write ioctl open };
#line 124
allow system_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 125
allow system_app null_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app null_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 126
allow system_app ovr_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app ovr_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 127
#neverallow Google CTS-android-5.0.2_r1 : allow system_app paramblk_device:blk_file rw_file_perms;
allow system_app secure_storage_device:dir { open getattr read search ioctl };
allow s_system_app secure_storage_device:dir { open getattr read search ioctl };
#line 129
allow system_app secure_storage_device:sock_file { open append write };
allow s_system_app secure_storage_device:sock_file { open append write };
#line 130
allow system_app socket_device:dir { open search write add_name remove_name };
allow s_system_app socket_device:dir { open search write add_name remove_name };
#line 131

#allow system_app socket_device:sock_file write;
#violate neverallow rule

#allow system_app socket_device:sock_file create_file_perms;
#violate neverallow rule. change to:
allow system_app socket_device:sock_file { create setattr { getattr open read ioctl lock } append { getattr link unlink rename } };
allow s_system_app socket_device:sock_file { create setattr { getattr open read ioctl lock } append { getattr link unlink rename } };
#line 138

allow system_app tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 140
allow system_app tui_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app tui_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 141
allow system_app uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 142
allow system_app url_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app url_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 143
allow system_app validity_device:{ fifo_file chr_file } { { getattr open read ioctl lock } { open append write } };
allow s_system_app validity_device:{ fifo_file chr_file } { { getattr open read ioctl lock } { open append write } };
#line 144
allow system_app validity_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app validity_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 145
allow system_app validity_device:file { getattr open read ioctl lock };
allow s_system_app validity_device:file { getattr open read ioctl lock };
#line 146

########## file_type
allow system_app anr_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app anr_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 149
allow system_app anr_data_file:file { getattr link unlink rename };
allow s_system_app anr_data_file:file { getattr link unlink rename };
#line 150
allow system_app app_data_file:file { execute execmod };
allow system_app gad_untrusted_app_data_file:file { execute execmod };
allow s_system_app app_data_file:file { execute execmod };
allow s_system_app gad_untrusted_app_data_file:file { execute execmod };
#line 151
allow system_app app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 152
allow system_app app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 153

#allow system_app apk_tmp_file:file rw_file_perms;
#violate neverallow rule. change to

allow system_app audit_log:file { open append write };
allow s_system_app audit_log:file { open append write };
#line 158
allow system_app backup_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app backup_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 159
allow system_app backup_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app backup_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 160
allow system_app cache_backup_file:file { getattr link unlink rename };
allow s_system_app cache_backup_file:file { getattr link unlink rename };
#line 161
allow system_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 162
allow system_app carrier_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app carrier_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 163
allow system_app carrier_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app carrier_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 164
allow system_app carrier_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app carrier_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 165
allow system_app container_system_file:dir getattr;
allow s_system_app container_system_file:dir getattr;
#line 166
allow system_app cs_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app cs_socket:sock_file { { getattr open read ioctl lock } { open append write } };
#line 167
#Remote Code Execution issue: allow system_app dalvikcache_data_file:dir rw_dir_perms;
#Remote Code Execution issue: allow system_app dalvikcache_data_file:file create_file_perms;

#allow system_app dhcp_data_file:file create_file_perms;
#violate neverallow rule. change to:
allow system_app dhcp_data_file:file { getattr open read ioctl lock };
allow s_system_app dhcp_data_file:file { getattr open read ioctl lock };
#line 173

allow system_app dhcp_exec:file { getattr execute execute_no_trans };
allow s_system_app dhcp_exec:file { getattr execute execute_no_trans };
#line 175
allow system_app diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 176
allow system_app dnsproxyd_socket:sock_file { open append write };
allow s_system_app dnsproxyd_socket:sock_file { open append write };
#line 177

#allow system_app drm_data_file:dir rw_dir_perms;
#violate neverallow rule. change to:
allow system_app drm_data_file:dir { { open getattr read search ioctl } add_name remove_name };
allow s_system_app drm_data_file:dir { { open getattr read search ioctl } add_name remove_name };
#line 181

#allow system_app drm_data_file:file create_file_perms;
#violate neverallow rule. change to:
allow system_app drm_data_file:file { getattr open read ioctl lock };
allow s_system_app drm_data_file:file { getattr open read ioctl lock };
#line 185
allow system_app drm_playready_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app drm_playready_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 186
allow system_app drm_playready_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app drm_playready_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 187

allow system_app dumpstate_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app dumpstate_socket:sock_file { { getattr open read ioctl lock } { open append write } };
#line 189

#allow system_app efs_file:dir create_dir_perms;
#violate neverallow rule. change to:
allow system_app efs_file:dir { create reparent rmdir setattr open getattr search ioctl add_name remove_name link unlink rename };	
allow s_system_app efs_file:dir { create reparent rmdir setattr open getattr search ioctl add_name remove_name link unlink rename };	
#line 193

#allow system_app efs_file:file create_file_perms;
#violate neverallow rule. change to:
allow system_app efs_file:file { create setattr open ioctl lock append getattr link unlink rename };
allow s_system_app efs_file:file { create setattr open ioctl lock append getattr link unlink rename };
#line 197

allow system_app epm_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app epm_socket:sock_file { { getattr open read ioctl lock } { open append write } };
#line 199
allow system_app gps_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app gps_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 200
allow system_app gps_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app gps_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 201
allow system_app hidden_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app hidden_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 202
allow system_app hidden_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app hidden_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 203
allow system_app icd_exec:file { getattr open read ioctl lock };
allow s_system_app icd_exec:file { getattr open read ioctl lock };
#line 204
allow system_app ipsec_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app ipsec_socket:sock_file { { getattr open read ioctl lock } { open append write } };
#line 205
allow system_app msockets_socket:sock_file { open append write };
allow s_system_app msockets_socket:sock_file { open append write };
#line 206
allow system_app mtp_socket:sock_file { open append write };
allow s_system_app mtp_socket:sock_file { open append write };
#line 207
allow system_app platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 208
allow system_app platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 209
allow system_app radio_data_file:file { getattr open read ioctl lock };
allow s_system_app radio_data_file:file { getattr open read ioctl lock };
#line 210
allow system_app shell_exec:file { getattr execute execute_no_trans };
allow s_system_app shell_exec:file { getattr execute execute_no_trans };
#line 211
allow system_app security_file:dir { open getattr read search ioctl };
allow system_app security_spota_file:dir { open getattr read search ioctl };
allow s_system_app security_file:dir { open getattr read search ioctl };
allow s_system_app security_spota_file:dir { open getattr read search ioctl };
#line 212
allow system_app security_file:file { getattr open read ioctl lock };
allow system_app security_spota_file:file { getattr open read ioctl lock };
allow s_system_app security_file:file { getattr open read ioctl lock };
allow s_system_app security_spota_file:file { getattr open read ioctl lock };
#line 213
allow system_app sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 214
allow system_app sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 215
allow system_app store_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app store_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 216
allow system_app store_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app store_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 217
allow system_app system_app_data_file:file { getattr execute execute_no_trans };
allow s_system_app system_app_data_file:file { getattr execute execute_no_trans };
#line 218
allow system_app system_app_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app system_app_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 219
allow system_app system_app_tmpfs:file { open append write };
allow s_system_app system_app_tmpfs:file { open append write };
#line 220
allow system_app system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 221
allow system_app system_data_file:fifo_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app system_data_file:fifo_file { { getattr open read ioctl lock } { open append write } };
#line 222
allow system_app system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 223
allow system_app system_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app system_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 224
allow system_app system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app system_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 225
allow system_app system_fifo:fifo_file { open append write };
allow s_system_app system_fifo:fifo_file { open append write };
#line 226

#allow system_app system_file:file setattr;
#violate neverallow rule

allow system_app tima_dump_exec:file { getattr execute execute_no_trans };
allow s_system_app tima_dump_exec:file { getattr execute execute_no_trans };
#line 231
allow system_app tombstone_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app tombstone_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 232
allow system_app tombstone_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app tombstone_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 233
allow system_app unlabeled:file write;
allow s_system_app unlabeled:file write;
#line 234
allow system_app users_system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app users_system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 235
allow system_app users_system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app users_system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 236

#allow system_app wifi_data_file:dir rw_dir_perms;
#violate neverallow rule. change to:
allow system_app wifi_data_file:dir { open getattr read search ioctl };
allow s_system_app wifi_data_file:dir { open getattr read search ioctl };
#line 240

#allow system_app wifi_data_file:file create_file_perms;
#violate neverallow rule. change to:
allow system_app wifi_data_file:file { getattr open read ioctl lock };
allow s_system_app wifi_data_file:file { getattr open read ioctl lock };
#line 244

#allow system_app wifi_data_file:sock_file create_file_perms;
#violate neverallow rule. change to:
allow system_app wifi_data_file:sock_file { getattr open read ioctl lock };
allow s_system_app wifi_data_file:sock_file { getattr open read ioctl lock };
#line 248

allow system_app wifi_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app wifi_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 250
allow system_app wifi_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app wifi_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 251
allow system_app wpa_socket:sock_file { open append write };
allow s_system_app wpa_socket:sock_file { open append write };
#line 252

########## etc_type
allow system_app ctl_default_prop:property_service set;
allow s_system_app ctl_default_prop:property_service set;
#line 255
allow system_app ctl_dumpstate_prop:property_service set;
allow s_system_app ctl_dumpstate_prop:property_service set;
#line 256
#neverallow Google CTS-android-5.0.2_r1 : allow system_app default_prop:property_service set;
allow system_app csc_prop:property_service set;
allow s_system_app csc_prop:property_service set;
#line 258
allow system_app ims_service:service_manager add;
allow s_system_app ims_service:service_manager add;
#line 259
allow system_app log_prop:property_service set;
allow s_system_app log_prop:property_service set;
#line 260
allow system_app node:{ tcp_socket udp_socket } node_bind;
allow s_system_app node:{ tcp_socket udp_socket } node_bind;
#line 261
allow system_app port:tcp_socket { name_bind name_connect };
allow s_system_app port:tcp_socket { name_bind name_connect };
#line 262
allow system_app port:udp_socket name_bind;
allow s_system_app port:udp_socket name_bind;
#line 263
allow system_app seclevel_prop:property_service set;
allow s_system_app seclevel_prop:property_service set;
#line 264
allow system_app shell_prop:property_service set;
allow s_system_app shell_prop:property_service set;
#line 265
allow system_app system_prop:property_service set;
allow s_system_app system_prop:property_service set;
#line 266
allow system_app writingbuddymanager_service:service_manager add;
allow s_system_app writingbuddymanager_service:service_manager add;
#line 267

########## known issue.
#r_dir_file(system_app, file_type)
# replacing r_dir_file macro and removing container related access
allow system_app newAttr54:dir { open getattr read search ioctl };
allow s_system_app newAttr54:dir { open getattr read search ioctl };
#line 272
allow system_app newAttr54:{ file lnk_file } { getattr open read ioctl lock };
allow s_system_app newAttr54:{ file lnk_file } { getattr open read ioctl lock };
#line 273

# Allow settings app to read from asec
allow system_app asec_apk_file:dir search;
allow s_system_app asec_apk_file:dir search;
#line 276
allow system_app asec_apk_file:file { getattr open read ioctl lock };
allow s_system_app asec_apk_file:file { getattr open read ioctl lock };
#line 277

# Remove remount permission to satisfy assertion that appdomain apps cannot have mounton/unmount capabilities
#allow system_app labeledfs:filesystem remount;

#from NSA
# Perform binder IPC to any app domain.

#line 283
# Call the server domain and optionally transfer references to it.
#line 283
allow system_app appdomain:binder { call transfer };
allow s_system_app appdomain:binder { call transfer };
#line 283
# Allow the serverdomain to transfer references to the client on the reply.
#line 283
allow appdomain system_app:binder transfer;
allow appdomain s_system_app:binder transfer;
#line 283
# Receive and use open files from the server.
#line 283
allow system_app appdomain:fd use;
allow s_system_app appdomain:fd use;
#line 283


# Read SELinux enforcing status.

#line 286
allow system_app selinuxfs:dir { open getattr read search ioctl };
allow s_system_app selinuxfs:dir { open getattr read search ioctl };
#line 286
allow system_app selinuxfs:file { getattr open read ioctl lock };
allow s_system_app selinuxfs:file { getattr open read ioctl lock };
#line 286


# filterpackageservice app: load library downfilter library
allow system_app downfilters_lib_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app downfilters_lib_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 290
allow system_app downfilters_lib_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app downfilters_lib_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 291

# com.samsung.syncmlservice
allow system_app otadm_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app otadm_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 294
allow system_app otadm_efs_file:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app otadm_efs_file:file { { getattr open read ioctl lock } { open append write } };
#line 295

# com.sec.android.security.LogGuard
allow system_app iss_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app iss_efs_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 298
allow system_app iss_efs_file:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app iss_efs_file:file { { getattr open read ioctl lock } { open append write } };
#line 299

# efs relabeling for DRK and Contents Protection Key
allow system_app prov_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app prov_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 302
allow system_app prov_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app prov_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 303
allow system_app cpk_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app cpk_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 304
allow system_app cpk_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app cpk_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 305

# Rolback BSP Qcom Policy changes for /dev/qseecom.
allow system_app qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 308

# com.sec.keyverifier read dev/icd, dev/icdr, dev/tzic
allow system_app icd_device:chr_file { getattr open read ioctl lock };
allow s_system_app icd_device:chr_file { getattr open read ioctl lock };
#line 311
allow system_app tzic_device:chr_file { getattr open read ioctl lock };
allow s_system_app tzic_device:chr_file { getattr open read ioctl lock };
#line 312


############ knox_common #############
########## type and macro.
########## self and domain_type

#line 317
# Call the server domain and optionally transfer references to it.
#line 317
allow system_app containerdomain:binder { call transfer };
allow s_system_app containerdomain:binder { call transfer };
#line 317
# Allow the serverdomain to transfer references to the client on the reply.
#line 317
allow containerdomain system_app:binder transfer;
allow containerdomain s_system_app:binder transfer;
#line 317
# Receive and use open files from the server.
#line 317
allow system_app containerdomain:fd use;
allow s_system_app containerdomain:fd use;
#line 317


########## fs_type
allow system_app proc_avc_msg:file { getattr open read ioctl lock };
allow s_system_app proc_avc_msg:file { getattr open read ioctl lock };
#line 321

########## dev_type
allow system_app knox_dar_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow s_system_app knox_dar_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 324
allow system_app knox_kap_device:chr_file { getattr open read ioctl lock };
allow s_system_app knox_kap_device:chr_file { getattr open read ioctl lock };
#line 325

########## file_type
allow system_app container_app_data_backend:dir { open getattr read search ioctl };
allow system_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow s_system_app container_app_data_backend:dir { open getattr read search ioctl };
allow s_system_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
#line 328
allow system_app container_app_data_backend:lnk_file { getattr open read ioctl lock };
allow system_app bbccontainer_app_data_backend:lnk_file { getattr open read ioctl lock };
allow s_system_app container_app_data_backend:lnk_file { getattr open read ioctl lock };
allow s_system_app bbccontainer_app_data_backend:lnk_file { getattr open read ioctl lock };
#line 329
allow system_app irm_media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app irm_media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 330
allow system_app irm_media_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app irm_media_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 331
allow system_app knox_clipboard_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow s_system_app knox_clipboard_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 332
allow system_app knox_clipboard_file:file { { getattr open read ioctl lock } { open append write } };
allow s_system_app knox_clipboard_file:file { { getattr open read ioctl lock } { open append write } };
#line 333

########## etc_type
allow system_app knox_kap_prop:property_service set;
allow s_system_app knox_kap_prop:property_service set;
#line 336

########## known issue.


############ qcom_common #############
########## type and macro.
########## self and domain_type
allow system_app androidshmservice:binder call; 
allow s_system_app androidshmservice:binder call; 
#line 344
allow system_app apaservice:binder call; 
allow s_system_app apaservice:binder call; 
#line 345
allow system_app ATFWD-daemon:blk_file { getattr open read ioctl lock };
allow s_system_app ATFWD-daemon:blk_file { getattr open read ioctl lock };
#line 346
allow system_app jackservice:binder call; 
allow s_system_app jackservice:binder call; 
#line 347
allow system_app logwrapper:unix_dgram_socket sendto;
allow s_system_app logwrapper:unix_dgram_socket sendto;
#line 348
allow system_app mm-pp-daemon:unix_stream_socket connectto;
allow s_system_app mm-pp-daemon:unix_stream_socket connectto;
#line 349
allow system_app mpdecision:unix_stream_socket connectto;
allow s_system_app mpdecision:unix_stream_socket connectto;
#line 350
allow system_app qmuxd:unix_stream_socket connectto;
allow s_system_app qmuxd:unix_stream_socket connectto;
#line 351
allow system_app qseecomd:unix_dgram_socket sendto;
allow s_system_app qseecomd:unix_dgram_socket sendto;
#line 352
allow system_app rild:unix_stream_socket connectto; 
allow s_system_app rild:unix_stream_socket connectto; 
#line 353
allow system_app secstarter:unix_dgram_socket sendto;
allow s_system_app secstarter:unix_dgram_socket sendto;
#line 354

########## fs_type
allow system_app ecryptfs:filesystem getattr;
allow s_system_app ecryptfs:filesystem getattr;
#line 357
allow system_app firmware:file { getattr open read ioctl lock };
allow s_system_app firmware:file { getattr open read ioctl lock };
#line 358

########## dev_type
#allow system_app audio_device:chr_file rw_file_perms;
#violate neverallow rule. change to:

allow system_app device:sock_file write;
allow s_system_app device:sock_file write;
#line 364
#neverallow Google CTS-android-5.0.2_r1 : allow system_app emmcblk_device:blk_file create_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow system_app padblk_device:blk_file create_file_perms;

########## file_type
allow system_app app_library_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app app_library_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 369
allow system_app carrier_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app carrier_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 370
allow system_app dhcp_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow s_system_app dhcp_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 371
allow system_app pps_socket:sock_file { open append write };
allow s_system_app pps_socket:sock_file { open append write };
#line 372
allow system_app qmux_radio_socket:dir { write add_name };
allow s_system_app qmux_radio_socket:dir { write add_name };
#line 373
allow system_app qmux_radio_socket:sock_file { write create setattr };
allow s_system_app qmux_radio_socket:sock_file { write create setattr };
#line 374

#allow system_app shell_data_file:file w_file_perms;
#violate neverallow rule. change to:
allow system_app shell_data_file:file { open write };
allow s_system_app shell_data_file:file { open write };
#line 378

allow system_app system_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow s_system_app system_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 380
allow system_app su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow s_system_app su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 381
allow system_app zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow s_system_app zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 382

########## etc_type

########## known issue.
#TUI
allow system_app system_server:unix_dgram_socket sendto;
allow s_system_app system_server:unix_dgram_socket sendto;
#line 388

# dontaudit from MtpApplication. MtpApplication enumerates /data directory. /data/rfs doesn't need to enumerate.
dontaudit system_app rfs_data_file:dir getattr;
dontaudit s_system_app rfs_data_file:dir getattr;
#line 391

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow system_app adbd:unix_stream_socket accept; 
allow s_system_app adbd:unix_stream_socket accept; 
#line 396
allow system_app diagexe:unix_stream_socket connectto;
allow s_system_app diagexe:unix_stream_socket connectto;
#line 397
allow system_app syscope_app:process signal;
allow s_system_app syscope_app:process signal;
#line 398
allow system_app system:tcp_socket { read write };
allow s_system_app system:tcp_socket { read write };
#line 399

########## fs_type
########## dev_type
allow system_app s5p_smem_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app s5p_smem_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 403

########## file_type
allow system_app apk_data_file:dir { open getattr read search ioctl };
allow s_system_app apk_data_file:dir { open getattr read search ioctl };
#line 406
allow system_app asec_image_file:dir { open getattr read search ioctl };
allow s_system_app asec_image_file:dir { open getattr read search ioctl };
#line 407
allow system_app drm_security_system_file:dir { open getattr read search ioctl };
allow s_system_app drm_security_system_file:dir { open getattr read search ioctl };
#line 408
allow system_app app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow s_system_app app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 409
allow system_app app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 410
allow system_app sensor_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow s_system_app sensor_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 411
allow system_app shell_data_file:dir { open getattr read search ioctl };
allow s_system_app shell_data_file:dir { open getattr read search ioctl };
#line 412
allow system_app su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow s_system_app su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 413
allow system_app system_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow s_system_app system_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 414

#allow system_app system_file:file create_file_perms;
#violate neverallow rule. change to:
allow system_app system_file:file { getattr open read ioctl lock };
allow s_system_app system_file:file { getattr open read ioctl lock };
#line 418

allow system_app system_file:lnk_file { getattr execute };
allow s_system_app system_file:lnk_file { getattr execute };
#line 420

########## etc_type
allow system_app seclevel_prop:property_service set;
allow s_system_app seclevel_prop:property_service set;
#line 423

########## known issue.


############ avc_log #############
# avc:  denied  { add_name write } for  pid=6359 comm=".MtpApplication" name="mtp_event_socket" scontext=u:r:system_app:s0 #tcontext=u:object_r:socket_device:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# avc:  denied  { create } for  pid=6359 comm=".MtpApplication" name="mtp_event_socket" scontext=u:r:system_app:s0 #tcontext=u:object_r:socket_device:s0 tclass=sock_file SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# avc:  denied  { execute } for  pid=4992 comm="com.wssnps" path="/data/data/com.wssnps/files/libCryptionkey.so" dev="mmcblk0p25" #ino=914470 scontext=u:r:system_app:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# avc:  denied  { lock } for  pid=1113 comm="erprint.service" path="/dev/validity/ValidityService.pid" dev="tmpfs" ino=9838 #scontext=u:r:system_app:s0 tcontext=u:object_r:validity_device:s0 tclass=file
# avc:  denied  { signull } for  pid=1113 comm="erprint.service" #scontext=u:r:system_app:s0 tcontext=u:r:vcsFPService:s0 tclass=process
# avc:  denied  { signull } for  pid=1261 comm="erprint.service" scontext=u:r:system_app:s0 tcontext=u:r:init:s0 tclass=process 
# avc:  denied  { write } for  pid=19163 comm="debug_interface" name="dip_cmd" dev="tmpfs" ino=2749 scontext=u:r:system_app:s0 #tcontext=u:object_r:msockets_socket:s0 tclass=sock_file
# avc:  denied  { write } for  pid=12299 comm="TMS_SVC_MAIN" name="cs_socket" dev="tmpfs" ino=10954 scontext=u:r:system_app:s0 (TmsService.Process) tcontext=u:object_r:cs_socket:s0 (skm daemon) tclass=sock_file SEPF_SM-N910F_4.4.4_A018
# avc:  denied  { connectto } for  pid=20065 comm="TMS_SVC_MAIN" path="/dev/socket/cs_socket/cs_socket" scontext=u:r:system_app:s0 tcontext=u:r:cs:s0 tclass=unix_stream_socket SEPF_SM-N910F_4.4.4_A018
#avc:  denied  { ioctl open read } for  pid=11745 comm="droid.hmt.vrsvc" path="/dev/ovr0" dev="tmpfs" ino=55244 scontext=u:r:system_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file SEPF_SM-N910F_4.4.4_0018 # com.samsung.android.hmt.vrsvc
# avc:  denied  { create write } for  pid=6630 comm="g.syncmlservice" name="omadm_io_ipc_channel" scontext=u:r:system_app:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=sock_file SEPF_SM-N910V_4.4.4_0018 # com.samsung.syncmlservicecom.samsung.syncmlservice
# avc:  denied  { rmdir remove_name write } for  pid=11695 comm=".android.system" name="mdm" dev="mmcblk0p27" ino=1441800 scontext=u:r:system_app:s0 tcontext=u:object_r:tombstone_data_file:s0 tclass=dir SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { unlink } for  pid=7076 comm=".android.system" name="load.cmm" dev="mmcblk0p26" ino=391715 scontext=u:r:system_app:s0 tcontext=u:object_r:tombstone_data_file:s0 tclass=file
# avc:  denied  { write } for  pid=1838 comm="pboarduiservice" name="1149786200740_639_632" dev="mmcblk0p27" ino=1048631 scontext=u:r:system_app:s0 tcontext=u:object_r:knox_clipboard_file:s0:c2 tclass=dir
# avc:  denied  { read } for  pid=8573 comm="ung.inputmethod" name="lib" dev="ecryptfs" ino=615 scontext=u:r:system_app:s0:c2 tcontext=u:object_r:container_app_data_backend:s0 tclass=lnk_file SEPF_SM-N9108W_4.4.4_A019
#from CTS testing
# avc:  denied  { getattr } for  pid=4611 comm=".MtpApplication" path="/data/knox" dev="mmcblk0p25" ino=522245 #scontext=u:r:system_app:s0 tcontext=u:object_r:container_app_data_backend:s0 tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { write } for  pid=7652 comm="Thread-727" name="dek_req" dev="tmpfs" ino=10429 scontext=u:r:system_app:s0:c2 tcontext=u:object_r:knox_dar_device:s0 tclass=chr_file SEPF_SAMSUNG-SM-N910A_4.4.4_A019
# avc:  denied  { sendto } for  pid=2660 comm="eui:sui_service" path=007375696C7374 scontext=u:r:system_app:s0 tcontext=u:r:qseecomd:s0 tclass=unix_dgram_socket
# Camera data/DownFilters/Lib 
# avc:  denied  { setattr } for  pid=17855 comm="FilterPackageSe" name="Lib" dev="mmcblk0p26" ino=131037 scontext=u:r:system_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=dir
# audit(1415732666.465:203): avc:  denied  { write } for  pid=17855 comm="FilterPackageSe" name="Lib" dev="mmcblk0p26" ino=131037 scontext=u:r:system_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=dir
# audit(1415732666.465:203): avc:  denied  { add_name } for  pid=17855 comm="FilterPackageSe" name="com.samsung.android.filter.effect.sunshine.libsunshine.sig" scontext=u:r:system_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=dir
# audit(1415732666.465:203): avc:  denied  { create } for  pid=17855 comm="FilterPackageSe" name="com.samsung.android.filter.effect.sunshine.libsunshine.sig" scontext=u:r:system_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=file
# audit(1415732666.465:203): avc:  denied  { write } for  pid=17855 comm="FilterPackageSe" name="com.samsung.android.filter.effect.sunshine.libsunshine.sig" dev="mmcblk0p26" ino=131963 scontext=u:r:system_app:s0 tcontext=u:object_r:downfilters_lib_file:s0 tclass=file
# audit(1417179275.760:204): avc:  denied  { read } for  pid=15422 comm="onic.tuiservice" name="t-base-tui" dev="tmpfs" ino=7994 scontext=u:r:system_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# audit(1417179275.760:204): avc:  denied  { open } for  pid=15422 comm="onic.tuiservice" path="/dev/t-base-tui" dev="tmpfs" ino=7994 scontext=u:r:system_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# audit(1417179275.760:204): arch=40000028 syscall=322 per=800000 success=yes exit=28 a0=ffffff9c a1=b43e2fd9 a2=20800 a3=0 items=1 ppid=2955 pid=15422 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 ses=4294967295 tty=(none) comm="onic.tuiservice" exe="/system/bin/app_process32" subj=u:r:system_app:s0 key=(null)
# audit(1417179275.760:204):  cwd="/"
# audit(1417179275.760:204): item=0 name="/dev/t-base-tui" inode=7994 dev=00:0d mode=020660 ouid=1000 ogid=1000 rdev=f1:00 obj=u:object_r:device:s0
# audit(1417179275.760:205): avc:  denied  { ioctl } for  pid=15422 comm="onic.tuiservice" path="/dev/t-base-tui" dev="tmpfs" ino=7994 scontext=u:r:system_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file
#audit(1388535096.149:209): avc:  denied  { write } for  pid=9859 comm="Thread-1043" name="mtp_sink_socket" dev="tmpfs" ino=71345 scontext=u:r:system_app:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file
#saddr=01002F6465762F736F636B65742F6D74702F6D74705F73696E6B5F736F636B65740
# com.samsung.android.MtpApplication
# audit(741.079:205): avc:  denied  { write } for  pid=10993 comm="Thread-1271" name=".playready" dev="mmcblk0p27" ino=784900 scontext=u:r:system_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=dir permissive=1
# audit(741.079:205): avc:  denied  { create } for  pid=10993 comm="Thread-1271" name="keyfile.dat" scontext=u:r:system_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=file permissive=1
# audit(741.079:205): avc:  denied  { write } for  pid=10993 comm="Thread-1271" path="/data/data/.drm/.playready/keyfile.dat" dev="mmcblk0p27" ino=786323 scontext=u:r:system_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=file permissive=1
# audit(741.079:205): item=1 name="/data/data/.drm/.playready/keyfile.dat" inode=786323 dev=b3:1b mode=0100600 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:drm_data_file:s0 nametype=CREATE
# audit(741.079:206): avc:  denied  { setattr } for  pid=10993 comm="Thread-1271" name="keyfile.dat" dev="mmcblk0p27" ino=786323 scontext=u:r:system_app:s0 tcontext=u:object_r:drm_data_file:s0 tclass=file permissive=1
# audit(741.079:206): item=0 name="/data/data/.drm/.playready/keyfile.dat" inode=786323 dev=b3:1b mode=0100600 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:drm_data_file:s0 nametype=NORMAL
# /sys/class/mst/mst_ftmdrv/transmit : com.sec.android.app.hwmoduletest, com.sec.factory
# avc:  denied  { write } for  pid=3889 comm="Thread-1646" name="transmit" dev="sysfs" ino=12755 scontext=u:r:system_app:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=0
# avc:  denied  { write } for  pid=8549 comm="Thread-818" name="url" dev="tmpfs" ino=3002 scontext=u:r:system_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=0 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { open } for  pid=13227 comm="Thread-832" path="/dev/url" dev="tmpfs" ino=3002 scontext=u:r:system_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { read } for  pid=13227 comm="Thread-832" name="url" dev="tmpfs" ino=3002 scontext=u:r:system_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=1 SEPF_SM-G925F_5.0.1_0002
# avc:  denied  { write } for  pid=27039 comm="ImsServiceStub" name="ipsec_socket" dev="tmpfs" ino=19859 scontext=u:r:system_app:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file permissive=0 SEPF_SAMSUNG-SM-G920A_5.0.2_0002
# avc:  denied  { set } for property=com.google.clientidbase.ms scontext=u:r:system_app:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { read } for  pid=18158 comm="ndroid.settings" name="sepolicy_version" dev="sda17" ino=1441806 scontext=u:r:system_app:s0 tcontext=u:object_r:security_file:s0 tclass=file permissive=0
# avc:  denied  { read } for  pid=12958 comm="Thread-1667" name="Screenshot_2015-01-30-15-39-17.png_thum.jpg" dev="sda20" ino=1179659 scontext=u:r:system_app:s0 tcontext=u:object_r:knox_clipboard_file:s0:c2 tclass=file permissive=0 SEPF_SM-G9250_5.0.2_0003
# avc:  denied  { getattr } for  pid=12958 comm="Thread-1667" path="/data/clipboard100/3132646383920_596_287/Screenshot_2015-01-30-15-39-17.png" dev="sda20" ino=1179658 scontext=u:r:system_app:s0 tcontext=u:object_r:knox_clipboard_file:s0:c2 tclass=file permissive=0 SEPF_SM-G9250_5.0.2_0003
# avc:  denied  { set } for property=diag.oriented scontext=u:r:system_app:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { read } for  pid=4955 comm="g.syncmlservice" name="otadm_sw_version" dev="mmcblk0p11" ino=78 scontext=u:r:system_app:s0 tcontext=u:object_r:efs_file:s0 tclass=file SEPF_SM-T807V_5.0.2_0005
# avc:  denied  { write } for  pid=4955 comm="g.syncmlservice" name="/" dev="mmcblk0p11" ino=2 scontext=u:r:system_app:s0 tcontext=u:object_r:efs_file:s0 tclass=file
# avc:  denied  { getattr } for  pid=19711 comm="Thread-435" path="/data/system/container" dev="sda19" ino=524351 scontext=u:r:system_app:s0 tcontext=u:object_r:container_system_file:s0 tclass=dir permissive=0

#line 1 "vendor/samsung/common/sepolicy/system_server.te"
#
# system_server
#

############ aosp and sec_common #############
########## type and macro.
typealias system_server alias system;

# for B2C users
typeattribute system_server trusteddomain;
#typeattribute system_server system_domain;
# temporary permissive to gather the log.
# permissive system;


#line 15
allow system_server persdata_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 15
allow system_server persdata_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 15


#line 16
allow system_server kernel:system syslog_read;
#line 16


#line 17
allow system_server log_device:chr_file read;
#line 17
allow system_server system_file:file { getattr execute execute_no_trans };
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow system_server at_distributor:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow at_distributor system_server:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow system_server at_distributor:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow system_server bintvoutservice:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow bintvoutservice system_server:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow system_server bintvoutservice:fd use;
#line 19


#line 20
# Call the server domain and optionally transfer references to it.
#line 20
allow system_server connfwexe:binder { call transfer };
#line 20
# Allow the serverdomain to transfer references to the client on the reply.
#line 20
allow connfwexe system_server:binder transfer;
#line 20
# Receive and use open files from the server.
#line 20
allow system_server connfwexe:fd use;
#line 20


#line 21
# Call the server domain and optionally transfer references to it.
#line 21
allow system_server container_app:binder { call transfer };
#line 21
# Allow the serverdomain to transfer references to the client on the reply.
#line 21
allow container_app system_server:binder transfer;
#line 21
# Receive and use open files from the server.
#line 21
allow system_server container_app:fd use;
#line 21


#line 22
# Call the server domain and optionally transfer references to it.
#line 22
allow system_server dumpstate:binder { call transfer };
#line 22
# Allow the serverdomain to transfer references to the client on the reply.
#line 22
allow dumpstate system_server:binder transfer;
#line 22
# Receive and use open files from the server.
#line 22
allow system_server dumpstate:fd use;
#line 22


#line 23
# Call the server domain and optionally transfer references to it.
#line 23
allow system_server gpsd:binder { call transfer };
#line 23
# Allow the serverdomain to transfer references to the client on the reply.
#line 23
allow gpsd system_server:binder transfer;
#line 23
# Receive and use open files from the server.
#line 23
allow system_server gpsd:fd use;
#line 23


#neverallow by Google:(domain init:binder call;) 
#binder_call(system_server, init)


#line 28
# Call the server domain and optionally transfer references to it.
#line 28
allow system_server init_shell:binder { call transfer };
#line 28
# Allow the serverdomain to transfer references to the client on the reply.
#line 28
allow init_shell system_server:binder transfer;
#line 28
# Receive and use open files from the server.
#line 28
allow system_server init_shell:fd use;
#line 28


#line 29
# Call the server domain and optionally transfer references to it.
#line 29
allow system_server kiesexe:binder { call transfer };
#line 29
# Allow the serverdomain to transfer references to the client on the reply.
#line 29
allow kiesexe system_server:binder transfer;
#line 29
# Receive and use open files from the server.
#line 29
allow system_server kiesexe:fd use;
#line 29


#line 30
# Call the server domain and optionally transfer references to it.
#line 30
allow system_server rild:binder { call transfer };
#line 30
# Allow the serverdomain to transfer references to the client on the reply.
#line 30
allow rild system_server:binder transfer;
#line 30
# Receive and use open files from the server.
#line 30
allow system_server rild:fd use;
#line 30


#line 31
# Call the server domain and optionally transfer references to it.
#line 31
allow system_server sec-ril:binder { call transfer };
#line 31
# Allow the serverdomain to transfer references to the client on the reply.
#line 31
allow sec-ril system_server:binder transfer;
#line 31
# Receive and use open files from the server.
#line 31
allow system_server sec-ril:fd use;
#line 31


#line 32
# Call the server domain and optionally transfer references to it.
#line 32
allow system_server sensorhubservice:binder { call transfer };
#line 32
# Allow the serverdomain to transfer references to the client on the reply.
#line 32
allow sensorhubservice system_server:binder transfer;
#line 32
# Receive and use open files from the server.
#line 32
allow system_server sensorhubservice:fd use;
#line 32


#line 33
# Call the server domain and optionally transfer references to it.
#line 33
allow system_server servicemanager:binder { call transfer };
#line 33
# Allow the serverdomain to transfer references to the client on the reply.
#line 33
allow servicemanager system_server:binder transfer;
#line 33
# Receive and use open files from the server.
#line 33
allow system_server servicemanager:fd use;
#line 33


#line 34
# Call the server domain and optionally transfer references to it.
#line 34
allow system_server zygote:binder { call transfer };
#line 34
# Allow the serverdomain to transfer references to the client on the reply.
#line 34
allow zygote system_server:binder transfer;
#line 34
# Receive and use open files from the server.
#line 34
allow system_server zygote:fd use;
#line 34


#line 35
# Call the servicemanager and transfer references to it.
#line 35
allow system_server servicemanager:binder { call transfer };
#line 35
# servicemanager performs getpidcon on clients.
#line 35
allow servicemanager system_server:dir search;
#line 35
allow servicemanager system_server:file { read open };
#line 35
allow servicemanager system_server:process getattr;
#line 35
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 35
# all domains in domain.te.
#line 35


#line 36
allow system_server dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 36
allow system_server dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 36
allow system_server dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 36
allow system_server bugreport_exec:file { execute execute_no_trans };
#line 36
allow system_server dumpstate_exec:file { execute execute_no_trans };
#line 36
allow system_server dumpsys_exec:file { execute execute_no_trans };
#line 36


#line 37
allow system_server mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 37
allow system_server mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 37
# TODO: Figure out proper sockets
#line 37
allow system_server mobicoredaemon:unix_stream_socket connectto;
#line 37


#line 38
allow system_server dev_type:dir { open getattr read search ioctl };
#line 38
allow system_server dev_type:{ file lnk_file } { getattr open read ioctl lock };
#line 38


#neverallow by Google: ({ domain -keystore -init -kernel -recovery } keystore_data_file:notdevfile_class_set *;)
#r_dir_file(system_server, file_type)
allow system_server newAttr63:dir { open getattr read search ioctl };
allow system_server newAttr63:{ file lnk_file } { getattr open read ioctl lock };


#line 45
allow system_server containerdomain:dir { open getattr read search ioctl };
#line 45
allow system_server containerdomain:{ file lnk_file } { getattr open read ioctl lock };
#line 45


#line 46
allow system_server charon:unix_stream_socket connectto;
#line 46
allow system_server charon:unix_stream_socket { read write };
#line 46


#line 47
allow system_server actlmand:unix_stream_socket connectto;
#line 47
allow system_server actlmand:unix_stream_socket { read write };
#line 47


########## self and domain_type
allow system_server adbd:binder call;
allow system_server adbd:process sigchld;
allow system_server apaservice:process setsched;
allow system_server appdomain:fifo_file { { getattr open read ioctl lock } { open append write } };
allow system_server appdomain:process getsched;
allow system_server at_distributor:fd use;
allow system_server auditd:lnk_file { getattr open read ioctl lock };
allow system_server bluetooth:unix_stream_socket { getattr getopt read write shutdown };
allow system_server cellgeofenced:unix_stream_socket connectto;
allow system_server container_app:unix_stream_socket { read write };
allow system_server containerdomain:fifo_file { open append write };
allow system_server dhcp:process signal;
allow system_server domain:{ tcp_socket udp_socket } getattr;
allow system_server domain:lnk_file { getattr open read ioctl lock };
allow system_server domain:process getattr;
allow system_server drsd:unix_stream_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow system_server init:fifo_file { read write };
allow system_server init:fifo_file read;
allow system_server init:unix_dgram_socket sendto;
allow system_server init:unix_stream_socket { getopt getattr setopt read write };
allow system_server jackservice:process setsched;
allow system_server kernel:process { getsched setsched };
allow system_server kernel:key search;
allow system_server keystore:keystore_key { insert_as_user get_by_uid delete_as_user set_max_retry_count };
allow system_server mediaserver:{ tcp_socket udp_socket } { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow system_server mediaserver:unix_stream_socket connectto;
allow system_server mediaserver_tmpfs:fd use;
allow system_server p2p_supplicant:unix_dgram_socket sendto;
allow system_server platform_app:dir lock;
allow system_server s_platform_app:dir lock;
#line 79
allow system_server platform_app:udp_socket getopt;
allow system_server s_platform_app:udp_socket getopt;
#line 80
allow system_server rild:binder call;
allow system_server secure_storage:unix_stream_socket connectto;
allow system_server self:capability { setuid chown fowner sys_ptrace setgid dac_override sys_module };
allow system_server self:netlink_route_socket *;
allow system_server self:rawip_socket *;
allow system_server sensorhubservice:fd use;
allow system_server sensorhubservice:fifo_file read;
allow system_server shell:fifo_file { open append write };
allow system_server surfaceflinger:fifo_file { getattr open read ioctl lock };
allow system_server system_app:dir lock;
allow system_server s_system_app:dir lock;
#line 90
allow system_server untrusteddomain:{ tcp_socket udp_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow system_server untrusteddomain:fifo_file { open append write };
allow system_server zygote:file { open append write };
allow system_server zygote:process { signal sigkill getsched };

########## fs_type
allow system_server cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server devpts:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server devpts:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { { getattr open read ioctl lock } { open append write } };
allow system_server proc:dir lock;
allow system_server proc:file { open append write };

#neverallow by Google: ({ fs_type -rootfs }:file execute;) (sdcard_type:file { { getattr open read ioctl lock } { open append write } };)
allow system_server sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } }; 
#allow system_server sdcard_type:file { create_file_perms x_file_perms };
#allow system_server sdcard_type:dir r_file_perms;
#allow system_server sdcard_type:file r_file_perms;
#allow system_server sdcard_type:file execute;

allow system_server sysfs:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server sysfs:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server sysfs_battery_supply:file { { getattr open read ioctl lock } { open append write } };
allow system_server sysfs_battery_supply:file setattr;
allow system_server sysfs_sec:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow system_server sysfs_sec:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow system_server sysrq_proc:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow system_server binder_device:chr_file ioctl;

#neverallow by Google:(block_device:blk_file { open read write };) 
#allow system_server block_device:blk_file rw_file_perms;
#neverallow by Google:(kmem_device:chr_file *;)
allow system_server newAttr29:{ chr_file blk_file } getattr;

#neverallow by Google: 
#allow system_server device:chr_file r_file_perms;

allow system_server gpu_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server device:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server diag_device:chr_file { getattr open read ioctl lock };
allow system_server diag_device:chr_file write;
allow system_server emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow system_server i2c_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server io_device:chr_file { read open ioctl };
allow system_server ir_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server paramblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow system_server radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server secure_storage_device:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };
allow system_server sensor_device:chr_file { getattr open read ioctl lock };
allow system_server socket_device:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server timerirq_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server tzic_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server ump_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server urandom_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server usb_bus_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server usb_bus_device:dir { open getattr read search ioctl };
allow system_server validity_device:{ fifo_file chr_file } { { getattr open read ioctl lock } { open append write } };
allow system_server validity_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

########## file_type
allow system_server { charon_socket dumpstate_socket mtpd_socket racoon_socket }:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server { charon_socket dumpstate_socket mtpd_socket racoon_socket }:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server adbd_socket:sock_file write;
allow system_server apk_tmp_file:file { { getattr open read ioctl lock } { open append write } };
allow system_server app_data_file:dir relabelfrom;
allow system_server gad_untrusted_app_data_file:dir relabelfrom;
#line 157
allow system_server app_data_file:file execute;
allow system_server gad_untrusted_app_data_file:file execute;
#line 158
allow system_server app_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server app_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server app_library_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto relabelfrom };
allow system_server app_library_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } { getattr execute execute_no_trans } };
allow system_server audio_data_file:file { { { getattr open read ioctl lock } { open append write } } { getattr execute execute_no_trans } };
allow system_server audit_log:dir { open search write add_name remove_name };
allow system_server audit_log:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server carrier_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server carrier_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server epm_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server exec_type:file execute;
allow system_server frigate_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server gps_data_file:{ sock_file file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#neverallow by Google CTS : allow system_server { file_type -domain_no_read_file -domain_no_write_file  -exec_type }:dir { create_dir_perms relabelto relabelfrom };
#neverallow by Google CTS : allow system_server { file_type -domain_no_read_file -domain_no_write_file  -exec_type }:file { create_file_perms relabelto relabelfrom };
#neverallow by Google: ({ domain -keystore -init -kernel -recovery } keystore_data_file:notdevfile_class_set *;)
#neverallow by Google CTS : allow system_server newAttr63:notdevfile_class_set r_file_perms;
allow system_server newAttr60:dir { relabelto relabelfrom };
allow system_server newAttr60:file { relabelto relabelfrom };
allow system_server newAttr61:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server newAttr61:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server newAttr64:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };

## Need to test for the below type. ##
##allow system_server { unlabeled container_file_type container_system_file fixmo_app_data_file gad_untrusted_app_data_file good_app_data_file knox_clipboard_file }:dir { create_dir_perms relabelto relabelfrom };
##allow system_server { unlabeled container_file_type container_system_file fixmo_app_data_file gad_untrusted_app_data_file good_app_data_file knox_clipboard_file }:file { create_file_perms relabelto relabelfrom };

allow system_server ppp_system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow system_server sec_efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server sec_efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server security_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server security_spota_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 192
allow system_server security_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server security_spota_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 193
allow system_server shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow system_server su_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow system_server system_data_file:file relabelto;
allow system_server system_fifo:dir { open getattr read search ioctl };

#neverallow by Google: allow system_server system_file:dir rw_dir_perms;
allow system_server system_file:dir { open getattr read search ioctl };
#neverallow by Google: allow system_server system_file:file rw_file_perms;
allow system_server system_file:file { getattr open read ioctl lock };

allow system_server thermal_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server tima_dump_exec:file { getattr execute execute_no_trans };
allow system_server tima_keystore_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server tima_keystore_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server tima_log:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server tima_log:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server tz_socket:sock_file write;
allow system_server users_system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server users_system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server vdc_exec:file { getattr execute execute_no_trans };
allow system_server vold_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server wallpaper_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server wifi_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server wifi_efs_file:dir { open getattr read search ioctl };
allow system_server wifi_efs_file:file { getattr open read ioctl lock };
allow system_server wpa_socket:sock_file { getattr link unlink rename };

########## etc_type
allow system_server audio_prop:property_service set;
allow system_server bluetooth_prop:property_service set;
allow system_server camera_prop:property_service set;
allow system_server ctl_dumpstate_prop:property_service set;
#neverallow by Google CTS : allow system_server default_prop:property_service set;
allow system_server radio_prop:property_service set;
allow system_server setupwizard_prop:property_service set;
allow system_server shell_prop:property_service set;
allow system_server system_prop:property_service set;
allow system_server telecom_service:service_manager add;
allow system_server user_prop:property_service set;
allow system_server vpn_prop:property_service set;

########## known issue.
# Access devices.
allow system_server random_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Explicitly not granting open, these are passed fd's
allow system_server system_app:fifo_file { append write };
allow system_server s_system_app:fifo_file { append write };
#line 240

# for Vmware
allow system_server vmware_app:process sigkill;

# Art platform support
allow system_server app_data_file:dir relabelfrom;
allow system_server gad_untrusted_app_data_file:dir relabelfrom;
#line 246
allow system_server dalvikcache_data_file:file execute;
allow system_server platform_app_data_file:dir relabelfrom;

# socket connection with radio. used for sprint itson IPC
allow system_server radio:unix_stream_socket connectto;

# connection with nqs
allow system_server nqs:unix_stream_socket connectto;

# ReactiveService of system_server : need the socket connection to process AT command
allow system_server at_distributor:unix_stream_socket connectto;
allow system_server ddexe:unix_stream_socket connectto;

# Absolute additions requested by hs2010.kim
allow system_server abt_pers_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server abt_pers_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 263
allow system_server app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 264

# magnetic sensor (/dev/alps_io)
allow system_server input_device:chr_file { { getattr open read ioctl lock } { open append write } };

# to support security_spota_file
allow system_server security_spota_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto };
allow system_server security_spota_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelto };

# neverallow of system_server
#allow system_server security_file:{ dir file } relabelfrom;
dontaudit system_server security_file:{ dir file } relabelfrom;
dontaudit system_server security_spota_file:{ dir file } relabelfrom;
#line 275

## Security team Request to write widevine key via SystemService.
#/data/app/tlcd_sock
allow system_server apk_data_file:file { getattr open read ioctl lock };
allow system_server apk_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
type_transition system_server apk_data_file:sock_file drmserver_socket "tlcd_sock";
allow system_server drmserver_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server apk_data_file:sock_file unlink;
#/dev/s5p-smem
allow system_server s5p_smem_device:chr_file write;

############ knox_common #############
########## type and macro.
########## self and domain_type
allow system_server containerdomain:process { getattr getsched setsched sigkill signal };
allow system_server containerdomain:dir { open getattr read search ioctl };
allow system_server containerdomain:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow system_server containerdomain:{ tcp_socket udp_socket } { setopt read write getopt };

########## fs_type
allow system_server proc_avc_msg:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow system_server kmsg_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server knox_kap_device:chr_file { getattr open read ioctl lock };

########## file_type
allow system_server container_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom };
allow system_server container_app_data_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom };
allow system_server container_app_data_backend:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto };
allow system_server bbccontainer_app_data_backend:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto };
#line 305
allow system_server container_app_data_backend:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelto };
allow system_server bbccontainer_app_data_backend:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelto };
#line 306
allow system_server container_system_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server container_system_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server container_system_file:lnk_file { create rename unlink };
allow system_server knox_clipboard_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto };
allow system_server knox_clipboard_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
allow system_server drs_date_prop:property_service set;
allow system_server knox_kap_prop:property_service set;

########## known issue.
# Allow system server to access persist.security.ams0
allow system_server container_mgmt_prop:property_service set;

# Allow system server to access persist.security.mdm
allow system_server policy_mgmt_prop:property_service set;

# Allow system server to access persist.security.good
allow system_server good_mgmt_prop:property_service set;

# Allow system server to access persist.security.tlc
allow system_server tlc_mgmt_prop:property_service set;

# Allow system server to access audit.ondenial
allow system_server denial_prop:property_service set;

# Knox back-up and restore issue - Need to check 
#neverallow by Google: allow system_server unlabeled:dir create_dir_perms;
#neverallow by Google: allow system_server unlabeled:file create_file_perms;
allow system_server unlabeled:dir { rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server unlabeled:file { setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# connection with epmd

#line 339
allow system_server epm_socket:sock_file write;
#line 339
allow system_server epmd:unix_stream_socket connectto;
#line 339


# sdptest
allow system_server knox_dar_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server knox_dar_shared_device:chr_file { { getattr open read ioctl lock } { open append write } };

# connection with DRSD
allow system_server drsd_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server drsd:unix_stream_socket connectto;

############ qcom_common #############
########## type and macro.

#line 351
# Call the server domain and optionally transfer references to it.
#line 351
allow system_server gsiff_daemon:binder { call transfer };
#line 351
# Allow the serverdomain to transfer references to the client on the reply.
#line 351
allow gsiff_daemon system_server:binder transfer;
#line 351
# Receive and use open files from the server.
#line 351
allow system_server gsiff_daemon:fd use;
#line 351


########## self and domain_type
allow system_server logwrapper:lnk_file { getattr open read ioctl lock };
allow system_server logwrapper:unix_dgram_socket sendto;
allow system_server mm-pp-daemon:unix_stream_socket connectto;
allow system_server mpdecision:unix_dgram_socket sendto;
allow system_server mpdecision:unix_stream_socket connectto;
allow system_server mpdecision_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server qmuxd:unix_stream_socket connectto;
allow system_server secstarter:lnk_file read;
allow system_server self:capability2 block_suspend;

########## fs_type
allow system_server devpts:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server devpts:file { { getattr open read ioctl lock } { open append write } };
allow system_server firmware:dir { open getattr read search ioctl };
#neverallow by Google CTS : allow system_server firmware:file rx_file_perms;
allow system_server firmware:file { getattr open read ioctl lock };
allow system_server sysfs_thermal:dir { open getattr read search ioctl };
allow system_server sysfs_thermal:file { getattr open read ioctl lock };

########## dev_type
allow system_server ciqbridge_device:{ chr_file file } { { getattr open read ioctl lock } { open append write } };
allow system_server ciqbridge_device:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server emmcblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server fm_radio_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server kgsl_device:chr_file { { { getattr open read ioctl lock } { open append write } } execute };
allow system_server mtp_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server padblk_device:blk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server secure_storage_device:sock_file { { getattr open read ioctl lock } { open append write } };
allow system_server smd_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server socket_device:sock_file { open append write };

########## file_type
allow system_server asec_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server imei_efs_file:dir { open getattr read search ioctl };
allow system_server location_data_file:{ file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server mdns_socket:sock_file { open append write };
allow system_server persist_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow system_server persist_data_file:file { open append write };
allow system_server pps_socket:sock_file { open append write };
allow system_server qmux_radio_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow system_server qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow system_server tombstones_data_file:dir { open getattr read search ioctl };

########## etc_type
########## known issue.
#TUI
allow system_server system_app:unix_dgram_socket sendto;
allow system_server s_system_app:unix_dgram_socket sendto;
#line 401

# Rules for TIMA app to work
allow system_server qseecom_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow system_server wcnss_service:unix_stream_socket connectto;

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow system_server kernel:system syslog_read;
allow system_server p2p_supplicant:unix_dgram_socket sendto;
allow system_server self:capability { setuid chown sys_ptrace setgid dac_override };
allow system_server self:netlink_route_socket { write getattr setopt };
allow system_server self:rawip_socket { getopt create setopt };
allow system_server self:rawip_socket { write read };

########## fs_type
allow system_server proc:file { open append write };

########## dev_type
allow system_server akm8963_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server log_device:chr_file { getattr open read ioctl lock };
allow system_server m2m1shot_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server usb_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow system_server bluetooth_efs_file:file { { getattr open read ioctl lock } { open append write } };
allow system_server app_efs_file:file { getattr open read ioctl lock };
allow system_server sensor_efs_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.
# CoverManager.LedCoverController
allow system_server uart_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow system_server uhid_device:chr_file { { getattr open read ioctl lock } { open append write } };

###### Mobile Payments ######
allow system_server sysfs_mst_writable:file { { getattr open read ioctl lock } { open append write } };
allow system_server mst_ctrl_device:chr_file { write open };


############ avc_log #############
# avc:  denied  { execute_no_trans } for  pid=15396 comm="dumpstate" path="/system/bin/vdc" dev="mmcblk0p24" ino=593 scontext=u:r:system_server:s0 tcontext=u:object_r:vdc_exec:s0 tclass=file
# avc:  denied  { unlink } for  pid=3917 comm="WifiStateMachin" name="wlan0" dev="mmcblk0p21" ino=261670 scontext=u:r:system_server:s0 tcontext=u:object_r:wifi_data_file:s0 tclass=sock_file SEPF_SM-N910C_4.4.3_0018
# avc:  denied  { write open } for  pid=3231 comm="system_server" name="/dev/peel_ir" dev="tmpfs" ino=2975 scontext=u:r:system_server:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# avc:  denied  { set } for property=persist.service.bdroid.version scontext=u:r:system_server:s0 tcontext=u:object_r:bluetooth_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=1145 comm="PersonaManagerS" name="dek_evt" dev="tmpfs" ino=9166 scontext=u:r:system_server:s0 tcontext=u:object_r:knox_dar_device:s0 tclass=chr_file SEPF_SAMSUNG-SM-N910A_4.4.4_A018
# avc:  denied  { connectto } for  pid=1103 comm="ActivityManager" path=00636F6D2E6974736F6E696E632E69706374657374 scontext=u:r:system_server:s0 tcontext=u:r:radio:s0 tclass=unix_stream_socket
# avc:  denied  { connectto } for  pid=1077 comm="system_server" path="/dev/socket/nqs_qsb_comm" scontext=u:r:system_server:s0 tcontext=u:r:nqs:s0 tclass=unix_stream_socket
# saddr=01002F6465762F736F636B65742F6E71735F7173625F636F6D6D00 item=0 name=(null) inode=7294 dev=00:0b mode=0140660 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:socket_device:s0
# avc:  denied  { connectto } for  pid=986 comm="EnterpriseParti" path="/dev/socket/epm" scontext=u:r:system_server:s0 tcontext=u:r:epmd:s0 tclass=unix_stream_socket
#audit(46781.281:43): avc:  denied  { search } for  pid=866 comm="system_server" name="thermal" dev="sysfs" ino=15490 scontext=u:r:system_server:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=dir
#audit(46781.281:43): avc:  denied  { read } for  pid=866 comm="system_server" name="temp" dev="sysfs" ino=15502 scontext=u:r:system_server:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=file
#audit(46781.281:43): avc:  denied  { open } for  pid=866 comm="system_server" name="temp" dev="sysfs" ino=15502 scontext=u:r:system_server:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=file
#audit(46781.281:43): arch=40000028 syscall=322 per=800000 success=yes exit=22 a0=ffffff9c a1=afccb40c a2=20000 a3=0 items=1 ppid=408 pid=866 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=429audit(46781.281:43):  cwd="/"
#audit(46781.281:43): item=0 name="/sys/devices/virtual/thermal/thermal_zone0/temp" inode=15502 dev=00:0c mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs_thermal:s0
#audit(46842.290:51): avc:  denied  { search } for  pid=1217 comm="SensorService" name="thermal" dev="sysfs" ino=15490 scontext=u:r:system_server:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=dir
#audit(46842.290:51): avc:  denied  { read } for  pid=1217 comm="SensorService" name="temp" dev="sysfs" ino=15502 scontext=u:r:system_server:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=file
#audit(46842.290:51): avc:  denied  { open } for  pid=1217 comm="SensorService" name="temp" dev="sysfs" ino=15502 scontext=u:r:system_server:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=file
#audit(46842.290:51): arch=40000028 syscall=322 per=800000 success=yes exit=113 a0=ffffff9c a1=afdcb40c a2=20000 a3=0 items=1 ppid=979 pid=1217 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=4audit(46842.290:51):  cwd="/"
#audit(46842.290:51): item=0 name="/sys/devices/virtual/thermal/thermal_zone0/temp" inode=15502 dev=00:0c mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs_thermal:s0
# avc:  denied  { write } for  pid=23159 comm="Thread-144" name="m2m1shot_scaler0" dev="tmpfs" ino=4267 scontext=u:r:system_server:s0 tcontext=u:object_r:m2m1shot_device:s0 tclass=chr_file SEPF_SM-N910C_4.4.4_A018
# avc:  denied  { write } for  pid=3600 comm="cover" name="ttySAC2" dev="tmpfs" ino=3415 scontext=u:r:system_server:s0 tcontext=u:object_r:uart_device:s0 tclass=chr_file SEPF_SM-N910C_4.4.4_A019
# avc:  denied  { write } for  pid=26567 comm="system_server" name="uinput" dev="tmpfs" ino=3232 scontext=u:r:system_server:s0 tcontext=u:object_r:uhid_device:s0 tclass=chr_file SEPF_GT-I9500_5.0_0001
# avc:  denied  { create } for  pid=4759 comm="Thread-197" name="alarm_svc" scontext=u:r:system_server:s0 tcontext=u:object_r:gps_data_file:s0 tclass=sock_file permissive=0
# arch=40000028 syscall=282 per=800000 success=no exit=-13 a0=136 a1=650eba14 a2=22 a3=0 items=3 ppid=376 ppcomm=main pid=4759 auid=4294967295 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 ses=4294967295 tty=(none) comm="Thread-197" exe="/system/bin/app_process32" subj=u:r:system_server:s0 key=(null)
# saddr=/data/misc/location/mq/alarm_svc
# avc:  denied  { write } for  pid=12721 comm=5353524D2048616E646C6572205468 name="siop_level" dev="sysfs" ino=23112 scontext=u:r:system_server:s0 tcontext=u:object_r:sysfs_battery_supply:s0 tclass=file SEPF_SM-N910C_5.0_0002
# item=0 name="/sys/class/power_supply/battery/siop_level" inode=23112 dev=00:0e mode=0100664 ouid=1000 ogid=1001 rdev=00:00 obj=u:object_r:sysfs_battery_supply:s0
# avc:  denied  { search } for  pid=1489 comm="WifiStateMachin" scontext=u:r:system_server:s0 tcontext=u:r:kernel:s0 tclass=key
# TR LTE avc:  denied  { create } for  pid=9055 comm="Thread-618" name="alarm_svc" scontext=u:r:system_server:s0 tcontext=u:object_r:location_data_file:s0 tclass=sock_file permissive=0 SEPF_SM-N910F_5.0.1_0002
# avc:  denied  { connectto } for  pid=9589 comm="Thread-634" path=00616E745F736F636B scontext=u:r:system_server:s0 tcontext=u:r:wcnss_service:s0 tclass=unix_stream_socket permissive=0
# avc:  denied  { read } for  pid=915 comm="system_server" name="alps_io" dev="tmpfs" ino=6947 scontext=u:r:system_server:s0 tcontext=u:object_r:device:s0 tclass=chr_file
# avc:  denied  { setattr } for  pid=4424 comm="system_server" name="fg_asoc" dev="sysfs" ino=27437 scontext=u:r:system_server:s0 tcontext=u:object_r:sysfs_battery_supply:s0 tclass=file permissive=0
# avc:  denied  { set } for property=service.camera.sfs.running scontext=u:r:system_server:s0 tcontext=u:object_r:camera_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=4471 comm="Binder_B" name="tzic" dev="tmpfs" ino=3738 scontext=u:r:system_server:s0 tcontext=u:object_r:tzic_device:s0 tclass=chr_file permissive=1
# P150213-01519 avc:  denied  { set } for property=vpn.status.check scontext=u:r:system_server:s0 tcontext=u:object_r:vpn_prop:s0 tclass=property_service
# P150309-04048 avc:  denied  { set } for property=ril.cpa_navi_state scontext=u:r:system_server:s0 tcontext=u:object_r:radio_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=2944 comm="ActivityManager" name="kmsg" dev="tmpfs" ino=8011 scontext=u:r:system_server:s0 tcontext=u:object_r:kmsg_device:s0 tclass=chr_file permissive=0
# avc:  denied  { set } for property=setupwizard.mode scontext=u:r:system_server:s0 tcontext=u:object_r:setupwizard_prop:s0 tclass=property_service
# widevine avc:  denied  { write } for  pid=11592 comm="wvkprov" name="s5p-smem" dev="tmpfs" ino=3710 scontext=u:r:system_server:s0 tcontext=u:object_r:s5p_smem_device:s0 tclass=chr_file permissive=1
# widevine avc:  denied  { unlink } for  pid=11605 comm="wvkprov" name="tlcd_sock" dev="sda18" ino=655365 scontext=u:r:system_server:s0 tcontext=u:object_r:apk_data_file:s0 tclass=sock_file permissive=1
# widevine avc:  denied  { create } for  pid=11605 comm="wvkprov" name="tlcd_sock" scontext=u:r:system_server:s0 tcontext=u:object_r:apk_data_file:s0 tclass=sock_file permissive=1
# HDCP Key Check  avc:  denied  { write } for  pid=6805 comm="insthk" name="tz" dev="tmpfs" ino=9556 scontext=u:r:system_server:s0 tcontext=u:object_r:tz_socket:s0 tclass=sock_file permissive=1
# avc:  denied  { write } for  pid=5940 comm=5353524D2048616E646C6572205468 name="thermal-recv-client" dev="tmpfs" ino=8410 scontext=u:r:system_server:s0 tcontext=u:object_r:thermal_socket:s0 tclass=sock_file permissive=1 SEPF_SM-A8000_5.1.1_0023
# avc:  denied  { write } for  pid=3634 comm="android.display" name="i2c-11" dev="tmpfs" ino=4327 scontext=u:r:system_server:s0 tcontext=u:object_r:i2c_device:s0 tclass=chr_file permissive=1

#line 1 "vendor/samsung/common/sepolicy/tee.te"
#
# tee
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute tee trusteddomain;
#typeattribute tee system_domain;
# temporary permissive to gather the log.
# permissive tee;

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############



#line 1 "vendor/samsung/common/sepolicy/ueventd.te"
#
# ueventd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute ueventd trusteddomain;
#typeattribute ueventd system_domain;
# temporary permissive to gather the log.
# permissive ueventd;

#neverallow by Google: set_prop(ueventd)

#line 14
allow ueventd property_socket:sock_file write;
#line 14
allow ueventd init:unix_stream_socket connectto;
#line 14


########## self and domain_type
########## fs_type
allow ueventd sdcard_external:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ueventd sdcard_external:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ueventd selinuxfs:dir { open getattr read search ioctl };
allow ueventd selinuxfs:file { getattr open read ioctl lock };
allow ueventd sysfs:dir { relabelfrom relabelto setattr };
allow ueventd sysfs:file { relabelfrom relabelto };
allow ueventd sysfs_lcd_writable:file { { getattr open read ioctl lock } { open append write } };
allow ueventd sysfs_sec:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow ueventd sysfs_sec:{ file lnk_file } { { getattr open read ioctl lock } { open append write } };
allow ueventd sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };
allow ueventd sysfs_type:file { relabelfrom relabelto };
allow ueventd newAttr85:file { open append write };
allow ueventd tmpfs:file { getattr open read ioctl lock };

########## dev_type
allow ueventd block_device:lnk_file { { getattr open read ioctl lock } { getattr link unlink rename } };
allow ueventd device:lnk_file { getattr open read ioctl lock };
allow ueventd dw_mmc_device:lnk_file { getattr open read ioctl lock };

########## file_type
allow ueventd app_data_type:dir { open getattr read search ioctl };
allow ueventd app_data_type:file { getattr open read ioctl lock };
allow ueventd isolated_app_tmpfs:file { { getattr open read ioctl lock } { open append write } };
allow ueventd persist_data_file:dir { open getattr read search ioctl };
allow ueventd persist_data_file:file { getattr open read ioctl lock };
allow ueventd security_file:file { getattr open read ioctl lock };
allow ueventd security_spota_file:file { getattr open read ioctl lock };
#line 44
allow ueventd system_data_file:dir { open getattr read search ioctl };
allow ueventd system_data_file:file { getattr open read ioctl lock };
allow ueventd untrusted_app_tmpfs:file write;

########## etc_type
########## known issue.

############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
allow ueventd proc_avc_msg:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow ueventd knox_kap_device : chr_file { create setattr unlink } ;

########## file_type
########## etc_type
########## known issue.

############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
#neverallow Google CTS-android-5.0.2_r1 : allow ueventd firmware:dir create_dir_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow ueventd firmware:file create_file_perms;
allow ueventd firmware:dir { open getattr read search ioctl };
allow ueventd firmware:file { getattr open read ioctl lock };
allow ueventd sysfs_thermal:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow ueventd device:lnk_file { getattr link unlink rename };

########## file_type
allow ueventd persist_data_file:dir { open getattr read search ioctl };
allow ueventd persist_data_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow ueventd self:capability fowner;

########## fs_type
########## dev_type
allow ueventd dw_mmc_device:lnk_file { getattr open read ioctl lock };
allow ueventd usb_device:lnk_file { getattr open read ioctl lock };

########## file_type

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { search } for  pid=2858 comm="ueventd" name="/" dev="mmcblk0p22" ino=2 scontext=u:r:ueventd:s0 tcontext=u:object_r:persist_data_file:s0 tclass=dir
# avc:  denied  { write } for  pid=1563 comm="ueventd" path=2F6465762F6173686D656D202864656C6574656429 dev="tmpfs" ino=649233 scontext=u:r:ueventd:s0 tcontext=u:object_r:untrusted_app_tmpfs:s0 tclass=file
# avc:  denied  { getattr } for  pid=13740 comm="ueventd" path="/data/data/com.vlingo.midas/UDT_Always_Deep_recog.bin" dev="mmcblk0p27" ino=525892 scontext=u:r:ueventd:s0 tcontext=u:object_r:app_data_file:s0 tclass=file SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { open } for  pid=13740 comm="ueventd" path="/data/data/com.vlingo.midas/UDT_Always_Deep_recog.bin" dev="mmcblk0p27" ino=525892 scontext=u:r:ueventd:s0 tcontext=u:object_r:app_data_file:s0 tclass=file SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { read } for  pid=13740 comm="ueventd" name="UDT_Always_Deep_recog.bin" dev="mmcblk0p27" ino=525892 scontext=u:r:ueventd:s0 tcontext=u:object_r:app_data_file:s0 tclass=file SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { open } for  pid=8556 comm="ueventd" path="/data/firmware/florida-dsp3-ez2-control.bin" dev="mmcblk0p21" ino=524305 scontext=u:r:ueventd:s0 tcontext=u:object_r:system_data_file:s0 tclass=file SEPF_SM-N910C_4.4.4_0018
# audit(72726.269:3): avc:  denied  { write } for  pid=160 comm="ueventd" name="uevent" dev="sysfs" ino=16238 scontext=u:r:ueventd:s0 tcontext=u:object_r:sysfs_sec:s0 tclass=file
# audit(72726.269:3): avc:  denied  { open } for  pid=160 comm="ueventd" name="uevent" dev="sysfs" ino=16238 scontext=u:r:ueventd:s0 tcontext=u:object_r:sysfs_sec:s0 tclass=file
# audit(72726.269:3): arch=40000028 syscall=322 per=800000 success=yes exit=11 a0=a a1=40497 a2=20001 a3=0 items=1 ppid=1 pid=160 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="ueventd" exe="/init" suaudit(72726.269:3):  cwd="/"
# audit(72726.269:3): item=0 name="uevent" inode=16238 dev=00:0c mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs_sec:s0
# avc:  denied  { search } for  pid=2858 comm="ueventd" name="/" dev="mmcblk0p22" ino=2 scontext=u:r:ueventd:s0 tcontext=u:object_r:persist_data_file:s0 tclass=dir
#audit(46764.060:3): avc:  denied  { write } for  pid=160 comm="ueventd" name="uevent" dev="sysfs" ino=15843 scontext=u:r:ueventd:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=file
#audit(46764.060:3): avc:  denied  { open } for  pid=160 comm="ueventd" name="uevent" dev="sysfs" ino=15843 scontext=u:r:ueventd:s0 tcontext=u:object_r:sysfs_thermal:s0 tclass=file
#audit(46764.060:3): arch=40000028 syscall=322 per=800000 success=yes exit=11 a0=a a1=40497 a2=20001 a3=0 items=1 ppid=1 pid=160 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="ueventd" exe="/init" suaudit(46764.060:3):  cwd="/"
#audit(46764.060:3): item=0 name="uevent" inode=15843 dev=00:0c mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs_thermal:s0


#line 1 "vendor/samsung/common/sepolicy/unconfined.te"
allow unconfineddomain domain:binder set_context_mgr;
#line 1 "vendor/samsung/common/sepolicy/uncrypt.te"
#
# uncrypt
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
#typeattribute uncrypt trusteddomain;
#typeattribute uncrypt system_domain;
# temporary permissive to gather the log.
# permissive uncrypt;

########## self and domain_type
########## fs_type
########## dev_type
allow uncrypt userdatablk_device:lnk_file { getattr open read ioctl lock };
allow uncrypt userdatablk_device:blk_file { open append write };
allow uncrypt emmcblk_device:lnk_file { getattr open read ioctl lock };
allow uncrypt emmcblk_device:blk_file { open append write };

########## file_type
allow uncrypt media_rw_data_file:dir { open getattr read search ioctl };
allow uncrypt media_rw_data_file:file { getattr open read ioctl lock };
allow uncrypt system_data_file:dir { open getattr read search ioctl };
allow uncrypt system_data_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.
############ avc_log #############
#avc:  denied  { open } for  pid=28440 comm="uncrypt" name="update.zip" dev="mmcblk0p26" ino=523293 scontext=u:r:uncrypt:s0 tcontext=u:object_r:system_data_file:s0 tclass=file SEPF_SM-G900F_5.0_A001 arch=40000028 syscall=322 per=800000 success=no exit=-13 a0=ffffff9c a1=bee0679c a2=20000 a3=0 items=1 ppid=1 pid=28440 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="uncrypt" exe="/system/bin/uncrypt" subj=u:r:uncrypt:s0 key=(null) cwd="/" item=0 name="/data/fota/update.zip" inode=523293 dev=b3:1a mode=0100600 ouid=1000 ogid=1000 rdev=00:00 obj=u:object_r:system_data_file:s0
#avc:  denied  { write } for  pid=8241 comm="uncrypt" name="mmcblk0p26" dev="tmpfs" ino=9720 scontext=u:r:uncrypt:s0 tcontext=u:object_r:userdatablk_device:s0 tclass=blk_file SEPF_SM-G900F_5.0_A001 type=1300 msg=audit(1414404695.738:197): arch=40000028 syscall=322 per=800000 success=no exit=-13 a0=ffffff9c a1=b6c60070 a2=20001 a3=0 items=1 ppid=1 pid=8241 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="uncrypt" exe="/system/bin/uncrypt" subj=u:r:uncrypt:s0 key=(null) type=1307 msg=audit(1414404695.738:197):  cwd="/"type=1302 msg=audit(1414404695.738:197): item=0 name="/dev/block/platform/msm_sdcc.1/by-name/userdata" inode=9720 dev=00:0b mode=060600 ouid=0 ogid=0 rdev=b3:1a obj=u:object_r:userdatablk_device:s0 
# avc:  denied  { getattr } for  pid=15726 comm="uncrypt" path="/data/media" dev="mmcblk0p26" ino=130836 scontext=u:r:uncrypt:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir SEPF_SM-G900F_5.0_A001
#  item=0 name="/data/media/0/fota/test.zip" inode=131614 dev=b3:1a mode=0100664 ouid=1023 ogid=1023 rdev=00:00 obj=u:object_r:media_rw_data_file:s0
# avc:  denied  { read } for  pid=9316 comm="uncrypt" name="test.zip" dev="mmcblk0p26" ino=131614 scontext=u:r:uncrypt:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SM-G900F_5.0_A001
# avc:  denied  { open } for  pid=9316 comm="uncrypt" name="test.zip" dev="mmcblk0p26" ino=131614 scontext=u:r:uncrypt:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=file SEPF_SM-G900F_5.0_A001

#line 1 "vendor/samsung/common/sepolicy/untrusted_app.te"
#
# Untrusted appdomain
#

############ aosp and sec_common #############
dontaudit untrusteddomain debugfs:file read;
dontaudit untrusteddomain hw_random_device:chr_file getattr;
dontaudit untrusteddomain kmem_device:chr_file getattr;
dontaudit untrusteddomain self:capability net_raw;
dontaudit untrusteddomain setupwizard_prop:property_service set;
dontaudit untrusteddomain property_socket:sock_file write;
dontaudit untrusted_app isolated_app_tmpfs:file write;
dontaudit umcagent_app isolated_app_tmpfs:file write;
dontaudit vpn_untrusted_app isolated_app_tmpfs:file write;
dontaudit trustonicpartner_app isolated_app_tmpfs:file write;
dontaudit llk_untrusted_app isolated_app_tmpfs:file write;
dontaudit filtered_untrusted_app isolated_app_tmpfs:file write;
dontaudit filtered_google_app isolated_app_tmpfs:file write;
dontaudit knox_untrusted_app isolated_app_tmpfs:file write;
dontaudit irm_app isolated_app_tmpfs:file write;
dontaudit gad_untrusted_app isolated_app_tmpfs:file write;
dontaudit carrier_app isolated_app_tmpfs:file write;
#line 13
dontaudit filtered_google_app isolated_app_tmpfs:file write;

########## type and macro.

#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow untrusteddomain bintvoutservice:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow bintvoutservice untrusteddomain:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow untrusteddomain bintvoutservice:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow untrusteddomain sensorhubservice:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow sensorhubservice untrusteddomain:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow untrusteddomain sensorhubservice:fd use;
#line 17


#line 18
allow untrusteddomain dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 18
allow untrusteddomain dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18
allow untrusteddomain dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 18
allow untrusteddomain bugreport_exec:file { execute execute_no_trans };
#line 18
allow untrusteddomain dumpstate_exec:file { execute execute_no_trans };
#line 18
allow untrusteddomain dumpsys_exec:file { execute execute_no_trans };
#line 18


#line 19
allow untrusteddomain dumplog_data_file:dir { open getattr read search ioctl };
#line 19
allow untrusteddomain dumplog_data_file:file { getattr open read ioctl lock };
#line 19


########## self and domain_type
allow untrusteddomain init:unix_stream_socket setopt;
allow untrusteddomain kernel:process setsched;
allow untrusteddomain rild:unix_stream_socket connectto;
allow untrusteddomain sec-ril:unix_stream_socket connectto;

#allow untrusteddomain self:netlink_kobject_uevent_socket { read bind create setopt };
#violate neverallow rule

#allow untrusteddomain self:netlink_socket create;
#violate neverallow rule

allow untrusteddomain self:packet_socket create;
allow untrusteddomain system:tcp_socket { read write };
allow untrusteddomain system:unix_stream_socket { lock shutdown };
allow untrusteddomain zygote:binder call;

########## fs_type
allow untrusteddomain debugfs:file execute;
allow untrusteddomain devpts:dir { open getattr read search ioctl };
allow untrusteddomain selinuxfs:dir { open getattr read search ioctl };
allow untrusteddomain selinuxfs:file { getattr open read };

########## dev_type
allow untrusteddomain newAttr30:{ blk_file chr_file } getattr;
allow untrusteddomain dev_type:lnk_file { getattr open read ioctl lock };
allow untrusteddomain ovr_device:chr_file { getattr open read ioctl lock };
allow untrusteddomain qtaguid_device:chr_file { getattr open read ioctl lock };

########## file_type
#neverallow by Google:  allow untrustedappdomain apk_tmp_file:file rw_file_perms;
allow untrusteddomain apk_tmp_file:file { getattr open read ioctl lock };
allow untrusteddomain persist_data_file:dir { open getattr read search ioctl };
allow untrusteddomain platform_media_app_data_file:file { getattr open read ioctl lock };
allow untrusteddomain system_app_data_file:dir { open getattr read search ioctl };
allow untrusteddomain system_app_data_file:file { getattr open read ioctl lock };
allow untrusteddomain system_data_file:dir { open getattr read search ioctl };
allow untrusteddomain system_data_file:file { getattr open read ioctl lock };

dontaudit untrusteddomain properties_device:file execute;

########## etc_type
dontaudit untrusteddomain csc_prop:property_service set;

########## known issue.
# ORIGINALLY FROM SEPOLICY/NSA OVERRIDING
#

typeattribute untrusted_app untrustedappdomain;
typeattribute umcagent_app untrustedappdomain;
typeattribute vpn_untrusted_app untrustedappdomain;
typeattribute trustonicpartner_app untrustedappdomain;
typeattribute llk_untrusted_app untrustedappdomain;
typeattribute filtered_untrusted_app untrustedappdomain;
typeattribute filtered_google_app untrustedappdomain;
typeattribute knox_untrusted_app untrustedappdomain;
typeattribute irm_app untrustedappdomain;
typeattribute gad_untrusted_app untrustedappdomain;
typeattribute carrier_app untrustedappdomain;
#line 70
typeattribute untrusted_app untrusteddomain;
typeattribute umcagent_app untrusteddomain;
typeattribute vpn_untrusted_app untrusteddomain;
typeattribute trustonicpartner_app untrusteddomain;
typeattribute llk_untrusted_app untrusteddomain;
typeattribute filtered_untrusted_app untrusteddomain;
typeattribute filtered_google_app untrusteddomain;
typeattribute knox_untrusted_app untrusteddomain;
typeattribute irm_app untrusteddomain;
typeattribute gad_untrusted_app untrusteddomain;
typeattribute carrier_app untrusteddomain;
#line 71

allow untrusted_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow umcagent_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow vpn_untrusted_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow trustonicpartner_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow llk_untrusted_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow filtered_untrusted_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow filtered_google_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow knox_untrusted_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow irm_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow untrusted_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow umcagent_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow vpn_untrusted_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow trustonicpartner_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow llk_untrusted_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow filtered_untrusted_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow filtered_google_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow knox_untrusted_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow irm_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow gad_untrusted_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow gad_untrusted_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow carrier_app app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
allow carrier_app gad_untrusted_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } lock };
#line 73
allow untrusted_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow umcagent_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vpn_untrusted_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow trustonicpartner_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow llk_untrusted_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow filtered_untrusted_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow filtered_google_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_untrusted_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow irm_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow untrusted_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow umcagent_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vpn_untrusted_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow trustonicpartner_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow llk_untrusted_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow filtered_untrusted_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow filtered_google_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow knox_untrusted_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow irm_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gad_untrusted_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow gad_untrusted_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow carrier_app app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow carrier_app gad_untrusted_app_data_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 74

allow untrusteddomain tun_device:chr_file { { getattr open read ioctl lock } { open append write } };

# Internal SDCard rw access.
allow untrusteddomain sdcard_internal:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow untrusteddomain sdcard_internal:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow untrusteddomain sdcard_internal:blk_file { getattr open read ioctl lock };
allow untrusteddomain sdcard_internal:chr_file { getattr open read ioctl lock };
allow untrusteddomain sdcard_internal:lnk_file write;

# External SDCard rw access.
allow untrusteddomain sdcard_external:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow untrusteddomain sdcard_external:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# dontaudit internal SDCard execute access. need to allow it back in prod branch.
dontaudit untrusteddomain sdcard_internal:file execute;

# ASEC
allow untrusteddomain asec_apk_file:dir { getattr };
allow untrusteddomain asec_apk_file:file { getattr open read ioctl lock };

# Create tcp/udp sockets
allow untrusteddomain node_type:{ tcp_socket udp_socket } node_bind;
allow untrusteddomain self:{ tcp_socket udp_socket } { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } accept listen };
# Bind to a particular hostname/address/interface (e.g., localhost) instead of
# ANY. Normally, apps should not be listening on all interfaces.
allow untrusteddomain port:{ tcp_socket udp_socket } name_bind;
#
# ORIGINALLY FROM SEPOLICY/NSA OVERRIDING END

# for Google Apps
allow untrusteddomain devpts:chr_file { { getattr open read ioctl lock } { open append write } };
#allow untrusteddomain { file_type -container_service_secure_type -container_file_type -fixmo_app_data_file -good_app_data_file -drsd_socket }:sock_file rw_file_perms;
allow untrusteddomain newAttr53:sock_file { { getattr open read ioctl lock } { open append write } };
#line 109

allow untrusteddomain newAttr33:dir { open getattr read search ioctl };
#allow { untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:dir r_dir_perms;
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:dir r_dir_perms;
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:dir r_dir_perms;
#neverallow by Google: allow untrusteddomain { zygote_socket zygote_tmpfs}:file rw_file_perms;
#neverallow by Google: allow untrusteddomain { zygote_socket zygote_tmpfs}:dir rw_dir_perms;
allow newAttr98 { zygote_socket zygote_tmpfs }:file { { getattr open read ioctl lock } { open append write } };
allow newAttr98 { zygote_socket zygote_tmpfs }:dir { { open getattr read search ioctl } { open search write add_name remove_name } };

#For com.osp.app.signin
allow untrusteddomain app_library_file:dir { read getattr };

# com.samsung.ssd.wolfserver issue
allow untrusteddomain at_distributor:unix_stream_socket connectto;

# VMware
allow untrusteddomain kernel:unix_dgram_socket sendto;

# torrent, VMWare, etc
allow untrusteddomain self:netlink_route_socket *;

# To use Samsung Music Player
allow untrusteddomain system_file:file execmod;

# To use Group Play
# neverallow by Google: unix_socket_connect(untrustedappdomain, property, init)

# To Aceess mac.info from dropbox
allow untrusteddomain wifi_efs_file:file { { getattr open read ioctl lock } { open append write } };

# Market apps access 
# Remove execute permission to satisfy assertion that domain cannot execute type it can write
allow untrusteddomain asec_apk_file:file { getattr open read ioctl lock };
allow untrusteddomain platform_app_data_file:file { getattr open read ioctl lock };

# for VZWAPN Service
allow untrusteddomain commonplatformappdomain:unix_stream_socket connectto;

# To Access Banking apps
allow untrusteddomain rootfs:file { getattr open read ioctl lock };

# for Alyac
allow untrusteddomain dhcp_system_file:file { getattr open read ioctl lock };
allow untrusteddomain ppp_system_file:file { getattr open read ioctl lock };

# UT
#neverallow by Google: allow untrusteddomain property_socket:sock_file w_file_perms;
allow untrusteddomain zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#allow untrusteddomain self:capability net_raw;

# H 4.3 cts issue libcore.java.nio.BufferTest, testDevZeroMapRW ISSUE
allow untrustedappdomain zero_device:chr_file { { getattr open read ioctl lock } { open append write } };

# for AWS log server
#neverallow by Google: allow untrusteddomain camera_device:chr_file rw_file_perms;
#neverallow Google CTS-android-5.0.2_r1 : allow { untrusteddomain -untrusted_app } camera_device:chr_file rw_file_perms;
allow untrusteddomain filtered_google_app:file write;
allow untrusteddomain kernel:system module_request;
allow untrusteddomain mediaserver:unix_stream_socket connectto;
allow untrusteddomain node:rawip_socket node_bind;
allow untrusteddomain tty_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow untrusteddomain video_device:chr_file { { getattr open read ioctl lock } { open append write } };

# From mobilecare
allow untrusteddomain self:file { getattr execute execute_no_trans };
allow untrusteddomain bluetooth:unix_stream_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow untrusteddomain devpts:chr_file { getattr open read ioctl lock };
allow untrusteddomain self:rawip_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow untrusteddomain shell:unix_stream_socket connectto;
allow untrusteddomain untrusted_app_tmpfs:file { open append write };
allow untrusteddomain shell_data_file:dir { open search write add_name remove_name };

# for sidesync
#allow untrusteddomain graphics_device:chr_file create_file_perms;
#violate neverallow rule. change to:
#change start
allow newAttr96 graphics_device:chr_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow { isolated_app untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app } graphics_device:chr_file { create setattr getattr open ioctl lock append link unlink rename };
#change end

# for "whatsapp"
# The following rule is already covered by app.te: "allow appdomain init:binder { call transfer };"
#allow untrusteddomain init:binder { transfer call };
allow untrusteddomain init:unix_stream_socket setopt;

# for MobileIron
# neverallow for untrusted_app
#allow untrusteddomain hw_random_device:chr_file getattr;

# Adjustment according to Google review 08-23-2013
allow untrusteddomain devpts:chr_file { { getattr open read ioctl lock } { open append write } };

#neverallow by Google:  allow untrustedappdomain socket_device:sock_file rw_file_perms;
allow untrustedappdomain socket_device:sock_file { getattr open read ioctl lock };

allow untrusteddomain ueventd:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow untrusteddomain exec_type:file getattr;
#neverallow by Google: allow untrustedappdomain { zygote_socket zygote_tmpfs}:dir rw_dir_perms;
#neverallow by Google: allow untrustedappdomain { zygote_socket zygote_tmpfs}:file_class_set rw_file_perms;


#Move the following rules to B2B minimalist
#if (unconstrained_apps) {

allow untrusteddomain kernel:system { ipc_info };
#neverallow by Google:  allow untrusteddomain newAttr33:process { signal signull getsched getpgid getcap getattr };
allow untrusteddomain newAttr33:process { signull getsched getpgid getcap getattr };

#allow {untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:process { signal signull getsched getpgid getcap getattr };
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:process { signal signull getsched getpgid getcap getattr };
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:process { signal signull getsched getpgid getcap getattr };

allow newAttr97 newAttr33:fd use;
allow knox_untrusted_app newAttr34:fd use;
allow gad_untrusted_app newAttr39:fd use;
allow untrusteddomain newAttr33:dir { open getattr read search ioctl };
#allow {untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:dir r_dir_perms;
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:dir r_dir_perms;
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:dir r_dir_perms;
allow untrusteddomain newAttr33:{ { chr_file blk_file } { file lnk_file sock_file fifo_file } } { getattr open read ioctl lock };
#allow {untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:file_class_set r_file_perms;
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:file_class_set r_file_perms;
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:file_class_set r_file_perms;
allow untrusteddomain newAttr33:fifo_file { { getattr open read ioctl lock } { open append write } };
#allow {untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:fifo_file rw_file_perms;
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:fifo_file rw_file_perms;
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:fifo_file rw_file_perms;

#allow untrusteddomain newAttr33:socket_class_set { ioctl read getattr bind connect getopt accept };
allow untrusteddomain newAttr33:{ socket tun_socket { tcp_socket udp_socket unix_stream_socket unix_dgram_socket } } { ioctl read getattr bind connect getopt accept };
#allow {untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:socket_class_set { ioctl read getattr bind connect getopt accept };
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:socket_class_set { ioctl read getattr bind connect getopt accept };
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:socket_class_set { ioctl read getattr bind connect getopt accept };

allow untrusteddomain newAttr33:{ sem msgq shm ipc } ~{ create destroy setattr };
#allow {untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:ipc_class_set ~{ create destroy setattr };
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:ipc_class_set ~{ create destroy setattr };
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:ipc_class_set ~{ create destroy setattr };

allow untrusteddomain newAttr33:key { view read search };
#allow {untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:key { view read search };
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:key { view read search };
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:key { view read search };

allow untrusteddomain newAttr33:msg *;
#allow {untrusteddomain -knox_untrusted_app -gad_untrusted_app} newAttr33:msg *;
#allow knox_untrusted_app { domain -containerdomain -fixmo_app -good_app -gad_untrusted_app}:msg *;
#allow gad_untrusted_app { domain -containerdomain -fixmo_app -good_app -knox_untrusted_app}:msg *;


# allow untrusteddomain newAttr33:fd use;
# allow untrusteddomain newAttr33:dir r_dir_perms;
# allow untrusteddomain newAttr33:file_class_set r_file_perms;
# allow untrusteddomain newAttr33:fifo_file rw_file_perms;
# allow untrusteddomain newAttr33:socket_class_set { ioctl read getattr bind connect getopt accept };
# allow untrusteddomain newAttr33:ipc_class_set ~{ create destroy setattr };
# allow untrusteddomain newAttr33:key { view read search };
# allow untrusteddomain newAttr33:msg *;

allow untrusteddomain newAttr31:dir { open getattr read search ioctl };
#allow untrusteddomain { dev_type -kmem_device -hw_random_device }:{ notdevfile_class_set chr_file } r_file_perms;
allow untrusteddomain newAttr28:{ { file lnk_file sock_file fifo_file } chr_file } { getattr open read ioctl lock };
allow untrusteddomain newAttr33:peer recv;

#allow newAttr97 { domain -containerdomain -fixmo_app -good_app -knox_system_app }:binder { call transfer };
allow newAttr97 newAttr37:binder { call transfer };

allow knox_untrusted_app newAttr36:binder { call transfer };
allow gad_untrusted_app newAttr38:binder { call transfer };


#line 280
# Call the server domain and optionally transfer references to it.
#line 280
allow knox_untrusted_app knox_system_app:binder { call transfer };
#line 280
# Allow the serverdomain to transfer references to the client on the reply.
#line 280
allow knox_system_app knox_untrusted_app:binder transfer;
#line 280
# Receive and use open files from the server.
#line 280
allow knox_untrusted_app knox_system_app:fd use;
#line 280


allow untrusteddomain newAttr76:dir { open getattr read search ioctl };
allow untrusteddomain newAttr70:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };

# Remove duplicate rule
#allow untrusteddomain { file_type -container_service_secure_type -container_file_type}:file rx_file_perms;
allow untrusteddomain newAttr55:dir { open getattr read search ioctl };
allow untrusteddomain newAttr55:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };
#allow untrusteddomain { file_type -efs_file -system_file -system_data_file -security_file -knox_clipboard_file -unlabeled -container_file_type }:file rx_file_perms;
#allow untrusteddomain { file_type -efs_file -system_file -system_data_file -security_file -knox_clipboard_file -unlabeled -container_file_type -fixmo_app_data_file -good_app_data_file }:file r_file_perms;
allow untrusteddomain { exec_type library_file_type }:file { getattr execute execute_no_trans };

allow untrusteddomain newAttr30:{ chr_file blk_file } getattr;

allow untrusteddomain shell_exec:file execute;

#}

# se.ericsson.modemtoolbox app for logging modem log.
allow { untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app adbd shell } msockets_socket:dir { open getattr read search ioctl };
allow { untrusted_app umcagent_app vpn_untrusted_app trustonicpartner_app llk_untrusted_app filtered_untrusted_app filtered_google_app knox_untrusted_app irm_app gad_untrusted_app carrier_app adbd shell } msockets_socket:sock_file { { getattr open read ioctl lock } { open append write } };

# dontaudit chmod tmpfs directory, /storage/emulated
# com.infinit.wostore.ui, com.flyingottersoftware.mega and etc
dontaudit untrusted_app tmpfs:dir setattr;
dontaudit umcagent_app tmpfs:dir setattr;
dontaudit vpn_untrusted_app tmpfs:dir setattr;
dontaudit trustonicpartner_app tmpfs:dir setattr;
dontaudit llk_untrusted_app tmpfs:dir setattr;
dontaudit filtered_untrusted_app tmpfs:dir setattr;
dontaudit filtered_google_app tmpfs:dir setattr;
dontaudit knox_untrusted_app tmpfs:dir setattr;
dontaudit irm_app tmpfs:dir setattr;
dontaudit gad_untrusted_app tmpfs:dir setattr;
dontaudit carrier_app tmpfs:dir setattr;
#line 306

# mmb.android.MMbTeTestAppAp in carrier_jpn
allow untrusted_app mmb_mw:unix_stream_socket connectto;
allow umcagent_app mmb_mw:unix_stream_socket connectto;
allow vpn_untrusted_app mmb_mw:unix_stream_socket connectto;
allow trustonicpartner_app mmb_mw:unix_stream_socket connectto;
allow llk_untrusted_app mmb_mw:unix_stream_socket connectto;
allow filtered_untrusted_app mmb_mw:unix_stream_socket connectto;
allow filtered_google_app mmb_mw:unix_stream_socket connectto;
allow knox_untrusted_app mmb_mw:unix_stream_socket connectto;
allow irm_app mmb_mw:unix_stream_socket connectto;
allow gad_untrusted_app mmb_mw:unix_stream_socket connectto;
allow carrier_app mmb_mw:unix_stream_socket connectto;
#line 309
allow untrusted_app mmb_data_file:sock_file write;
allow umcagent_app mmb_data_file:sock_file write;
allow vpn_untrusted_app mmb_data_file:sock_file write;
allow trustonicpartner_app mmb_data_file:sock_file write;
allow llk_untrusted_app mmb_data_file:sock_file write;
allow filtered_untrusted_app mmb_data_file:sock_file write;
allow filtered_google_app mmb_data_file:sock_file write;
allow knox_untrusted_app mmb_data_file:sock_file write;
allow irm_app mmb_data_file:sock_file write;
allow gad_untrusted_app mmb_data_file:sock_file write;
allow carrier_app mmb_data_file:sock_file write;
#line 310

# com.innowireless.xcal.mobile4g
allow untrusted_app DMM-daemon:unix_stream_socket connectto;
allow umcagent_app DMM-daemon:unix_stream_socket connectto;
allow vpn_untrusted_app DMM-daemon:unix_stream_socket connectto;
allow trustonicpartner_app DMM-daemon:unix_stream_socket connectto;
allow llk_untrusted_app DMM-daemon:unix_stream_socket connectto;
allow filtered_untrusted_app DMM-daemon:unix_stream_socket connectto;
allow filtered_google_app DMM-daemon:unix_stream_socket connectto;
allow knox_untrusted_app DMM-daemon:unix_stream_socket connectto;
allow irm_app DMM-daemon:unix_stream_socket connectto;
allow gad_untrusted_app DMM-daemon:unix_stream_socket connectto;
allow carrier_app DMM-daemon:unix_stream_socket connectto;
#line 313

# P150521-00805
allow untrusted_app untrusted_app_tmpfs:file execmod;
allow umcagent_app untrusted_app_tmpfs:file execmod;
allow vpn_untrusted_app untrusted_app_tmpfs:file execmod;
allow trustonicpartner_app untrusted_app_tmpfs:file execmod;
allow llk_untrusted_app untrusted_app_tmpfs:file execmod;
allow filtered_untrusted_app untrusted_app_tmpfs:file execmod;
allow filtered_google_app untrusted_app_tmpfs:file execmod;
allow knox_untrusted_app untrusted_app_tmpfs:file execmod;
allow irm_app untrusted_app_tmpfs:file execmod;
allow gad_untrusted_app untrusted_app_tmpfs:file execmod;
allow carrier_app untrusted_app_tmpfs:file execmod;
#line 316


############ knox_common #############
########## type and macro.
########## self and domain_type
# knoxVpnFdTransfer
allow untrusted_app system_server:unix_stream_socket connectto;
allow umcagent_app system_server:unix_stream_socket connectto;
allow vpn_untrusted_app system_server:unix_stream_socket connectto;
allow trustonicpartner_app system_server:unix_stream_socket connectto;
allow llk_untrusted_app system_server:unix_stream_socket connectto;
allow filtered_untrusted_app system_server:unix_stream_socket connectto;
allow filtered_google_app system_server:unix_stream_socket connectto;
allow knox_untrusted_app system_server:unix_stream_socket connectto;
allow irm_app system_server:unix_stream_socket connectto;
allow gad_untrusted_app system_server:unix_stream_socket connectto;
allow carrier_app system_server:unix_stream_socket connectto;
#line 323

########## fs_type
########## dev_type
########## file_type
allow untrusted_app container_app_data_backend:dir { open getattr read search ioctl };
allow umcagent_app container_app_data_backend:dir { open getattr read search ioctl };
allow vpn_untrusted_app container_app_data_backend:dir { open getattr read search ioctl };
allow trustonicpartner_app container_app_data_backend:dir { open getattr read search ioctl };
allow llk_untrusted_app container_app_data_backend:dir { open getattr read search ioctl };
allow filtered_untrusted_app container_app_data_backend:dir { open getattr read search ioctl };
allow filtered_google_app container_app_data_backend:dir { open getattr read search ioctl };
allow untrusted_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow umcagent_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow vpn_untrusted_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow trustonicpartner_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow llk_untrusted_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow filtered_untrusted_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow filtered_google_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow knox_untrusted_app container_app_data_backend:dir { open getattr read search ioctl };
allow knox_untrusted_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow irm_app container_app_data_backend:dir { open getattr read search ioctl };
allow irm_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow gad_untrusted_app container_app_data_backend:dir { open getattr read search ioctl };
allow gad_untrusted_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
allow carrier_app container_app_data_backend:dir { open getattr read search ioctl };
allow carrier_app bbccontainer_app_data_backend:dir { open getattr read search ioctl };
#line 328

########## etc_type
########## known issue.
# dontaudit filtered_google_app (gms)
dontaudit untrusteddomain newAttr33:dir { search getattr read };
dontaudit untrusteddomain newAttr33:{ file lnk_file } getattr;


############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
# for vzw.apnservice
allow untrusteddomain samsung_app:unix_stream_socket connectto;
allow untrusteddomain app_data_file:file { getattr execute execute_no_trans };
allow untrusteddomain gad_untrusted_app_data_file:file { getattr execute execute_no_trans };
#line 346
allow untrusteddomain mpdecision:unix_stream_socket connectto;

#Support OBDM_Permissions.apk
allow untrusteddomain diag_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow untrusteddomain qmux_radio_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow untrusteddomain qmux_radio_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow untrusteddomain qmuxd:unix_stream_socket connectto;

########## known issue.

############ slsi_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
allow untrusteddomain m2m1shot_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow untrusteddomain qtaguid_device:chr_file { getattr open read ioctl lock };

########## file_type
allow untrusteddomain app_data_file:file { getattr execute execute_no_trans };
allow untrusteddomain gad_untrusted_app_data_file:file { getattr execute execute_no_trans };
#line 366
allow untrusteddomain app_library_file:file { getattr open read ioctl lock };
allow untrusteddomain cache_file:file { open append write };
allow untrusteddomain wifi_efs_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.
# for Android Chrome
allow untrusteddomain video_device:chr_file { { getattr open read ioctl lock } { open append write } };

############ filtered untrust app #############
#
# filtered_google_app
#
typealias untrusted_app_devpts alias filtered_google_app_devpts;
typealias untrusted_app_tmpfs alias filtered_google_app_tmpfs;

#neverallow Google CTS-android-5.0.2_r1 : allow filtered_google_app system_data_file:file { unlink rename };
#neverallow Google CTS-android-5.0.2_r1 : allow filtered_google_app system_data_file:dir { create rmdir };
allow filtered_google_app platform_app_data_file:file { unlink rename };
allow filtered_google_app untrusted_app:process { getattr sigkill signal ptrace };
allow filtered_google_app umcagent_app:process { getattr sigkill signal ptrace };
allow filtered_google_app vpn_untrusted_app:process { getattr sigkill signal ptrace };
allow filtered_google_app trustonicpartner_app:process { getattr sigkill signal ptrace };
allow filtered_google_app llk_untrusted_app:process { getattr sigkill signal ptrace };
allow filtered_google_app filtered_untrusted_app:process { getattr sigkill signal ptrace };
allow filtered_google_app filtered_google_app:process { getattr sigkill signal ptrace };
allow filtered_google_app knox_untrusted_app:process { getattr sigkill signal ptrace };
allow filtered_google_app irm_app:process { getattr sigkill signal ptrace };
allow filtered_google_app gad_untrusted_app:process { getattr sigkill signal ptrace };
#line 386
allow filtered_google_app carrier_app:process { getattr sigkill signal ptrace };
#line 387
#allow filtered_google_app debugfs:file r_file_perms;
allow filtered_google_app container_app_data_backend:file execute;
allow filtered_google_app bbccontainer_app_data_backend:file execute;
#line 389
#auditallow filtered_google_app container_app_data_backend:file execute;
allow filtered_google_app system_app_data_file:file { getattr link unlink rename };

#
# filtered_untrusted_app
#
typealias untrusted_app_devpts alias filtered_untrusted_app_devpts;
typealias untrusted_app_tmpfs alias filtered_untrusted_app_tmpfs;
dontaudit filtered_untrusted_app sysfs:file { setattr write };

#
# llk_untrusted_app
#
typealias untrusted_app_devpts alias llk_untrusted_app_devpts;
typealias untrusted_app_tmpfs alias llk_untrusted_app_tmpfs;
allow llk_untrusted_app device:fifo_file { { getattr open read ioctl lock } { open append write } };
allow llk_untrusted_app device:sock_file { { getattr open read ioctl lock } { open append write } };

#
# trustonic partner apps
#
# trustonic partner apps should have same policy with untrusted_app because of carrier app(untrusted_app)'s rule.
typealias untrusted_app_devpts alias trustonicpartner_app_devpts;
typealias untrusted_app_tmpfs alias trustonicpartner_app_tmpfs;
allow trustonicpartner_app mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow trustonicpartner_app mobicoredaemon:unix_stream_socket connectto;

#
# SDP user 0 
#
#
allow untrusted_app knox_dar_shared_device:chr_file write;
allow umcagent_app knox_dar_shared_device:chr_file write;
allow vpn_untrusted_app knox_dar_shared_device:chr_file write;
allow trustonicpartner_app knox_dar_shared_device:chr_file write;
allow llk_untrusted_app knox_dar_shared_device:chr_file write;
allow filtered_untrusted_app knox_dar_shared_device:chr_file write;
allow filtered_google_app knox_dar_shared_device:chr_file write;
allow knox_untrusted_app knox_dar_shared_device:chr_file write;
allow irm_app knox_dar_shared_device:chr_file write;
allow gad_untrusted_app knox_dar_shared_device:chr_file write;
#line 421
allow carrier_app knox_dar_shared_device:chr_file write;
#line 424

#
# vpn_untrusted_app
#
typealias untrusted_app_devpts alias vpn_untrusted_app_devpts;
typealias untrusted_app_tmpfs alias vpn_untrusted_app_tmpfs;
dontaudit vpn_untrusted_app system_data_file:dir setattr;

#
# UMCJSAgent (umcagent_app)
#
# for DCM
allow umcagent_app dcm_data_file:dir { open getattr read search ioctl };
allow umcagent_app dcm_data_file:file { getattr open read ioctl lock };

############ avc_log #############
#from CTS testing
# avc:  denied  { getattr } for  pid=3808 comm="FinalizerDaemon" path="/data/data/com.android.providers.downloads/cache/#libAppDataSearchExt_armeabi_v7a.v3.so" dev="mmcblk0p25" ino=784889 scontext=u:r:filtered_google_app:s0 tcontext=u:object_r:download_file:s0 tclass=file SEPF_SAMSUNG-SM-#N900A_4.4.2_0016
# avc:  denied  { read } for  pid=11869 comm="libOVR" name="ovr0" dev="tmpfs" ino=55244 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:device:s0 tclass=chr_file SEPF_SM-N910F_4.4.4_0018 com.oculusvr.vrexperiment
# avc:  denied  { open } for  pid=29328 comm="SharedPreferenc" name="pref_sbeam.xml" dev="mmcblk0p25" ino=784839 #scontext=u:r:untrusted_app:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file SEPF_SAMSUNG-SM-N900A_4.4.3_0018
# avc:  denied  { lock } for  pid=8486 comm="atlas_injectOnN" path="/data/data/com.taobao.taobao/files/odex" dev="mmcblk0p27" ino=657 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:app_data_file:s0 tclass=dir
# avc:  denied  { setattr } for  pid=7384 comm="chmod" name="/" dev=tmpfs ino=1957 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:tmpfs:s0 tclass=dir VE=SEPF_SHV-E250L_4.3_0023_M
#       item=0 name="/storage/emulated" inode=1957 dev=00:15 mode=040050 ouid=0 ogid=1028 rdev=00:00 obj=u:object_r:tmpfs:s0
# avc:  denied  { read } for  pid=20780 comm="NetworkLocation" name="mem" dev="debugfs" ino=303350 scontext=u:r:filtered_google_app:s0 tcontext=u:object_r:debugfs:s0 tclass=file SEPF_SM-N910F_4.4.4_A019
#audit(1403174072.948:224): avc:  denied  { read } for  pid=7917 comm="resourcemanager" name="EN.FWaRG5DpV6i9w-YgQVEJDS9vjGlQ3WjqN9iPc9-OpO58Rt8onYhSD76sJk--" dev="sdcardfs" #ino=131639 scontext=u:r:untrusted_app:s0:c2 tcontext=u:object_r:container_app_data
# avc:  denied  { write } for  pid=9645 comm="Binder_2" name="m2m1shot_scaler0" dev="tmpfs" ino=4017 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:m2m1shot_device:s0 tclass=chr_file SEPF_SM-N910S_4.4.4_A019
# avc:  denied  { set } for property=csc.country_code scontext=u:r:untrusted_app:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service
# avc:  denied  { set } for property=csc.countryiso_code scontext=u:r:untrusted_app:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service
# avc:  denied  { set } for property=csc.sales_code scontext=u:r:untrusted_app:s0 tcontext=u:object_r:csc_prop:s0 tclass=property_service
# avc:  denied  { write } for  pid=986 comm="netd" path="socket:[81199]" dev="sockfs" ino=81199 scontext=u:r:netd:s0 tcontext=u:r:trustonicpartner_app:s0 tclass=tcp_socket
# avc:  denied  { getattr } for  pid=5820 comm="IntentService[S" path="/proc/5458" dev="proc" ino=30684 scontext=u:r:filtered_google_app:s0 tcontext=u:r:knox_system_app:s0:c2 tclass=dir
# avc:  denied  { read } for  pid=19592 comm=4173796E635461736B202332 name="7349" dev="proc" ino=55553 scontext=u:r:s_untrusted_app:s0:c2 tcontext=u:r:media_app:s0:c3 tclass=dir
# avc:  denied  { connectto } for  pid=11928 comm="10149" path=knoxVpnFdTransfer scontext=u:r:untrusted_app:s0 tcontext=u:r:system_server:s0 tclass=unix_stream_socket permissive=1 SEPF_SM-G925F_5.0.2_0002
# avc:  denied  { write } for  pid=10785 comm=".MMbTeTestAppAp" name="LOCAL_SOCKET_MMBFCCTLMW_REGIST" dev="sda20" ino=1439013 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:system_data_file:s0 tclass=sock_file permissive=1 SEPF_SGH-N516_5.0.2_0002
# avc:  denied  { connectto } for  pid=10785 comm=".MMbTeTestAppAp" path="/data/mmb/common/fcctl/LOCAL_SOCKET_MMBFCCTLMW_REGIST" scontext=u:r:untrusted_app:s0 tcontext=u:r:mmb_mw:s0 tclass=unix_stream_socket permissive=1 SEPF_SGH-N516_5.0.2_0002
# avc:  denied  { rename } for  pid=5332 comm="pool-4-thread-1" name="GmsBackupTransport.backupScheduler.xml" dev="sda20" ino=262824 scontext=u:r:filtered_google_app:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file permissive=0
# avc:  denied  { execute } for  pid=27910 comm="supervisor" path="/dev/__properties__" dev="tmpfs" ino=7751 scontext=u:r:knox_untrusted_app:s0 tcontext=u:object_r:properties_device:s0 tclass=file permissive=0
# avc:  denied  { connectto } for  pid=18046 comm="xcal.mobile4g" path=0046756C6C2E444D2E506F727430 scontext=u:r:untrusted_app:s0 tcontext=u:r:DMM-daemon:s0 tclass=unix_stream_socket permissive=1 SEPF_SM-G925V_5.0.2_0007

#line 1 "vendor/samsung/common/sepolicy/vdc.te"
#
# vdc
#

############ aosp and sec_common #############
########## type and macro.
typeattribute vdc trusteddomain;
#typeattribute vdc system_domain;


#line 10
allow vdc dumplog_data_file:dir { open getattr read search ioctl };
#line 10
allow vdc dumplog_data_file:file { getattr open read ioctl lock };
#line 10


########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow vdc system_data_file:dir { open getattr read search ioctl };
allow vdc system_data_file:file { getattr open read ioctl lock };

########## etc_type
########## known issue.

# support cryptfs_do_dumpstate
allow vdc cache_file:file write;
allow vdc sysfs_wake_lock:file write;
allow vdc vold:fifo_file write;
allow vdc vold:netlink_kobject_uevent_socket { read write };


############ knox_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow vdc audit_log:file { open append write };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { append } for  pid=11516 comm="vdc" path="/data/misc/audit/audit.log" dev="mmcblk0p26" ino=1572926 scontext=u:r:vdc:s0 tcontext=u:object_r:audit_log:s0 tclass=file SEPF_SM-G900S_5.0_A001
# avc:  denied  { open } for  pid=12945 comm="vdc" path="/data/misc/lpnet/lpnetConfig" dev="sda18" ino=261652 scontext=u:r:vdc:s0 tcontext=u:object_r:system_data_file:s0 tclass=file permissive=1
# arch=c00000b7 syscall=56 success=yes exit=3 a0=ffffff9c a1=7f9b834e98 a2=0 a3=0 items=0 ppid=12273 ppcomm=dumpstate pid=12945 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 ses=4294967295 tty=(none) comm="vdc" exe="/system/bin/vdc" subj=u:r:vdc:s0 key=(null)
# avc:  denied  { write } for  pid=7887 comm="vdc" path="/cache/recovery/last_ode_dumpstate_error_unencrypted.log" dev="mmcblk0p24" ino=16002 scontext=u:r:vdc:s0 tcontext=u:object_r:cache_file:s0 tclass=file SEPF_SAMSUNG-SM-T537A_5.0.2_0009
# avc:  denied  { read write } for  pid=7887 comm="vdc" path="socket:[7401]" dev="sockfs" ino=7401 scontext=u:r:vdc:s0 tcontext=u:r:vold:s0 tclass=netlink_kobject_uevent_socket SEPF_SAMSUNG-SM-T537A_5.0.2_0009
# avc:  denied  { write } for  pid=7887 comm="vdc" path="pipe:[7402]" dev="pipefs" ino=7402 scontext=u:r:vdc:s0 tcontext=u:r:vold:s0 tclass=fifo_file SEPF_SAMSUNG-SM-T537A_5.0.2_0009
# avc:  denied  { write } for  pid=7887 comm="vdc" path="/sys/power/wake_lock" dev="sysfs" ino=62 scontext=u:r:vdc:s0 tcontext=u:object_r:sysfs_wake_lock:s0 tclass=file SEPF_SAMSUNG-SM-T537A_5.0.2_0009

#line 1 "vendor/samsung/common/sepolicy/vold.te"
#
# vold
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute vold trusteddomain;
#typeattribute vold system_domain;
# temporary permissive to gather the log.
# permissive vold;


#line 13
# Allow the necessary permissions.
#line 13

#line 13
# Old domain may exec the file and transition to the new domain.
#line 13
allow vold dumpstate_exec:file { getattr open read execute };
#line 13
allow vold dumpstate:process transition;
#line 13
# New domain is entered by executing the file.
#line 13
allow dumpstate dumpstate_exec:file { entrypoint open read execute getattr };
#line 13
# New domain can send SIGCHLD to its caller.
#line 13
allow dumpstate vold:process sigchld;
#line 13
# Enable AT_SECURE, i.e. libc secure mode.
#line 13
dontaudit vold dumpstate:process noatsecure;
#line 13
# XXX dontaudit candidate but requires further study.
#line 13
allow vold dumpstate:process { siginh rlimitinh };
#line 13

#line 13
# Make the transition occur by default.
#line 13
type_transition vold dumpstate_exec:process dumpstate;
#line 13


#line 14
allow vold secure_storage_device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 14
allow vold secure_storage_device:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 14
allow vold secure_storage_device:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 14
allow vold efs_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 14
allow vold efs_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 14


########## self and domain_type
allow vold epmd:key *;
allow vold kernel:system syslog_read;
allow vold mobicoredaemon:unix_stream_socket connectto;
allow vold secure_storage:unix_stream_socket connectto;
allow vold self:capability { sys_boot sys_rawio sys_resource setuid net_raw setgid kill ipc_lock };
allow vold self:capability2 syslog;
allow vold self:key *;

########## fs_type
allow vold firmware:dir { open getattr read search ioctl };
allow vold firmware:file { getattr open read ioctl lock };
allow vold proc:file write;
allow vold sdcard_type:filesystem relabelfrom;
allow vold sysfs_ss_writable:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow vold carrierblk_device:blk_file { { getattr open read ioctl lock } { open append write } };

#neverallow by Google:(device:chr_file { open read write };)
#allow vold device:chr_file create_file_perms;
allow vold device:chr_file { create setattr ioctl lock append execute { getattr link unlink rename } };

allow vold device:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold emmcblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow vold hiddenblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow vold mmcblk0rpmb_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow vold mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vold paramblk_device:blk_file { { getattr open read ioctl lock } { open append write } };
allow vold persdatablk_device:blk_file { getattr open read ioctl lock };
allow vold random_device:chr_file { getattr open read ioctl lock };
allow vold swap_device:blk_file { getattr open read ioctl lock };

########## file_type
allow vold anr_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold anr_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 53
allow vold app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 54
allow vold asec_apk_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton relabelto };
allow vold asec_apk_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelto };
allow vold asec_apk_file:lnk_file relabelto;
allow vold asec_image_file:dir { mounton create } ;
allow vold cache_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold cache_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold efs_file:dir { open getattr read search ioctl };
allow vold frigate_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow vold media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold obb_apk_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow vold obb_apk_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold platform_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold platform_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold security_file:dir { open getattr read search ioctl };
allow vold security_spota_file:dir { open getattr read search ioctl };
#line 71
allow vold security_file:file { getattr open read ioctl lock };
allow vold security_spota_file:file { getattr open read ioctl lock };
#line 72
allow vold system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold system_data_file:lnk_file { getattr link unlink rename };
allow vold system_data_file:lnk_file { getattr open read ioctl lock };
allow vold unlabeled:dir { { open getattr read search ioctl } relabelfrom };
allow vold unlabeled:file relabelfrom;
allow vold unlabeled:filesystem { mount unmount relabelfrom };
allow vold unlabeled:lnk_file relabelfrom;
allow vold wifi_data_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow vold wifi_data_file:file { { getattr open read ioctl lock } { open append write } };

########## etc_type
allow vold km_fips_prop:property_service set;

########## known issue.
# To access system encryption
allow vold system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold system_prop:property_service set;
#neverallow Google CTS-android-5.0.2_r1 : allow vold default_prop:property_service set;
allow vold userdatablk_device:blk_file { { getattr open read ioctl lock } { open append write } };

# Personal Page
allow vold personal_page_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold personal_page_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Request AES module.
allow vold kernel:system module_request;

# Write to /proc/sysrq-trigger
allow vold sysrq_proc:file { open append write };

#from CTS testing
allow vold media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

#from NSA
allow vold ctl_default_prop:property_service set;

allow vold domain:process getattr;

# encrypted device -> create container -> add_key(syscall 309) error at mounting encryptfs
allow vold init:key write;



############ knox_common #############
########## type and macro.
########## self and domain_type
allow vold container_app:fd use;
allow vold untrusted_app:fd use;
allow vold umcagent_app:fd use;
allow vold vpn_untrusted_app:fd use;
allow vold trustonicpartner_app:fd use;
allow vold llk_untrusted_app:fd use;
allow vold filtered_untrusted_app:fd use;
allow vold filtered_google_app:fd use;
allow vold knox_untrusted_app:fd use;
allow vold irm_app:fd use;
allow vold gad_untrusted_app:fd use;
allow vold carrier_app:fd use;
#line 121

########## fs_type
allow vold labeledfs:filesystem relabelfrom;

########## dev_type
########## file_type
allow vold container_app_data_backend:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold bbccontainer_app_data_backend:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 128
allow vold container_app_data_backend:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow vold bbccontainer_app_data_backend:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
#line 129
allow vold container_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold container_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold container_app_data_file:filesystem { relabelfrom relabelto mount unmount };
allow vold container_app_data_file:lnk_file read;
allow vold container_app_sdcard_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold container_app_sdcard_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold container_app_sdcard_file:filesystem { relabelfrom relabelto mount unmount };
allow vold knox_clipboard_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold knox_clipboard_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow vold media_rw_data_file:dir mounton;

########## etc_type
########## known issue.
## Knox Sensitive data protection, DEK engine driver access
allow vold container_app_data_file:lnk_file getattr;

# to support writeData of ApplicationPolicy, copyFile() API of RCPManagerService
allow vold container_system_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold container_system_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# restorecon by addding category to encryptfs
# container_app_backend(/data/knox/data/xxx/), media_rw_data_file(/mnt/shell/emulated/xxx/) and all app data.
allow vold { container_app_data_backend bbccontainer_app_data_backend media_rw_data_file system_data_file app_data_type } :dir { relabelfrom relabelto };
allow vold { container_app_data_backend bbccontainer_app_data_backend media_rw_data_file system_data_file app_data_type } :{ file lnk_file } { relabelfrom relabelto };

# create/remove container for each app data in EcryptFS's source and target(/data/knox/data/xxx and /data/user/xxx)
allow vold { container_app_data_backend bbccontainer_app_data_backend media_rw_data_file system_data_file app_data_type } :dir { write getattr rmdir read remove_name open };
allow vold { container_app_data_backend bbccontainer_app_data_backend media_rw_data_file system_data_file app_data_type } :{ file lnk_file } { getattr unlink };
allow vold app_data_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold app_data_type:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# due to CTS 5.0_r3 : epmd code merged into vold code.
allow vold knox_dar_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vold knox_dar_shared_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow vold users_system_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow vold users_system_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };


############ qcom_common #############
########## type and macro.
########## self and domain_type
########## fs_type
########## dev_type
########## file_type
allow vold mmcblk0_device:blk_file { getattr open read ioctl lock };
#neverallow Google CTS-android-5.0.2_r1 : allow vold default_prop:property_service set;
allow vold qseecom_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { create } for  pid=495 comm="vold" name="Android" scontext=u:r:vold:s0 tcontext=u:object_r:media_rw_data_file:s0 #tclass=dir SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { create } for  pid=495 comm="vold" name=".nomedia" scontext=u:r:vold:s0 tcontext=u:object_r:media_rw_data_file:s0 #tclass=file SEPF_SAMSUNG-SM-N900A_4.4.2_0016
# avc:  denied  { read write } for  pid=2799 comm="vold" name="mobicore-user" dev="tmpfs" ino=2277 scontext=u:r:vold:s0 #tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file
# avc:  denied  { connectto } for  pid=2789 comm="vold" path=006D636461656D6F6E scontext=u:r:vold:s0 tcontext=u:r:mobicoredaemon:s0 #tclass=unix_stream_socket
# denial from am dumpheap pid# /data/log/vold_xx.hprof in DiskUtil::getHeapDump
# avc:  denied  { execute } for  pid=24834 comm="Compiler" path="/dev/ashmem" dev="tmpfs" ino=8994 scontext=u:r:vold:s0 tcontext=u:object_r:ashmem_device:s0 tclass=chr_file SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { write } for  pid=8967 comm="app_process" name="system@framework@am.jar@classes.dex" dev="mmcblk0p27" ino=131121 scontext=u:r:vold:s0 tcontext=u:object_r:dalvikcache_data_file:s0 tclass=file
# avc:  denied  { setattr } for  pid=8967 comm="app_process" name="system@framework@am.jar@classes.dex" dev="mmcblk0p27" ino=131121 scontext=u:r:vold:s0 tcontext=u:object_r:dalvikcache_data_file:s0 tclass=file
# avc:  denied  { getattr } for  pid=6366 comm="ps" scontext=u:r:vold:s0 tcontext=u:r:rfs_access:s0 tclass=process
# avc:  denied  { call } for  pid=24826 comm="app_process" scontext=u:r:vold:s0 tcontext=u:r:system_server:s0 tclass=binder SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { execute } for  pid=8967 comm="am" name="app_process" dev="mmcblk0p24" ino=289 scontext=u:r:vold:s0 tcontext=u:object_r:zygote_exec:s0 tclass=file
# avc:  denied  { execute_no_trans } for  pid=8967 comm="am" path="/system/bin/app_process" dev="mmcblk0p24" ino=289 scontext=u:r:vold:s0 tcontext=u:object_r:zygote_exec:s0 tclass=file
# avc:  denied  { write } for  pid=3043 comm="vold" scontext=u:r:vold:s0 tcontext=u:r:init:s0 tclass=key SEPF_SM-N910S_4.4.4_A019
# avc:  denied  { mounton } for  pid=492 comm="vold" path="/mnt/shell/emulated/100" dev="sdcardfs" ino=1044488 scontext=u:r:vold:s0 tcontext=u:object_r:media_rw_data_file:s0:c2 tclass=dir
# avc:  denied  { relabelfrom } for  pid=4810 comm="vold" scontext=u:r:vold:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem
# avc:  denied  { add_name } for  pid=2950 comm="vold" name="clips.info" scontext=u:r:vold:s0 tcontext=u:object_r:system_app_data_file:s0:c2 tclass=dir SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { create } for  pid=2950 comm="vold" name="11438307923917_937_370" scontext=u:r:vold:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=dir SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { read } for  pid=629 comm="vold" name="EN.FWbkckeoADv-T-ZoCP9Wwj3.HPfIg6mVhOvYuc2LTvgoQyKn7iXAcx6z6E--" dev="mmcblk0p27" ino=262986 scontext=u:r:vold:s0  tcontext=u:object_r:system_app_data_file:s0:c4 tclass=dir SEPF_SM-N910F_4.4.4_0018
# avc:  denied  { remove_name } for  pid=2950 comm="vold" name="EN.FWanz2hQjeTD6kY9D1e6yJ.Kn3wq85Tww5HLeC34iVA1kAwMjfMQn1YJe---" dev="dm-0" ino=131652 scontext=u:r:vold:s0 tcontext=u:object_r:nfc_data_file:s0:c2 tclass=dir SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { rmdir } for  pid=2950 comm="vold" name="EN.FWanz2hQjeTD6kY9D1e6yJ.Kn3wq85Tww5HLjkTje94jE95cXRo8D3r9yU--" dev="dm-0" ino=132360 scontext=u:r:vold:s0 tcontext=u:object_r:nfc_data_file:s0:c2 tclass=dir SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { setattr } for  pid=2950 comm="vold" name="clips.info" dev="ecryptfs" ino=131812 scontext=u:r:vold:s0 tcontext=u:object_r:system_app_data_file:s0 tclass=file SEPF_SM-N910C_4.4.4_0018
# avc:  denied  { unlink } for  pid=2950 comm="vold" name="EN.FWanz2hQjeTD6kY9D1e6yJ.Kn3wq85Tww5HLeC34iVA1kAwMjfMQn1YJe---" dev="dm-0" ino=131240 scontext=u:r:vold:s0 tcontext=u:object_r:app_data_file:s0 tclass=lnk_file
# avc:  denied  { unlink } for  pid=2950 comm="vold" name="EN.FWanz2hQjeTD6kY9D1e6yJ.Kn3wq85Tww5HL8lbiOik60vc5SUB3ni64BU--" dev="dm-0" ino=131772 scontext=u:r:vold:s0 tcontext=u:object_r:system_app_data_file:s0:c2 tclass=file
# avc:  denied  { relabelfrom } for  pid=492 comm="vold" name="100" dev="sdcardfs" ino=1044488 scontext=u:r:vold:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
# avc:  denied  { relabelto } for  pid=492 comm="vold" name="100" dev="sdcardfs" ino=1044488 scontext=u:r:vold:s0 tcontext=u:object_r:media_rw_data_file:s0:c2 tclass=dir
# avc:  denied  { relabelfrom } for  pid=492 comm="vold" name="knox_1_wallpaper.jpg" dev="ecryptfs" ino=131343 scontext=u:r:vold:s0 tcontext=u:object_r:system_data_file:s0 tclass=file
# avc:  denied  { relabelto } for  pid=492 comm="vold" name="knox_1_wallpaper.jpg" dev="ecryptfs" ino=131343 scontext=u:r:vold:s0 tcontext=u:object_r:system_data_file:s0:c2 tclass=file
# avc:  denied  { relabelfrom } for  pid=492 comm="vold" name="100" dev="mmcblk0p25" ino=130586 scontext=u:r:vold:s0 tcontext=u:object_r:container_app_data_backend:s0 tclass=dir
# avc:  denied  { relabelto } for  pid=492 comm="vold" name="100" dev="mmcblk0p25" ino=130586 scontext=u:r:vold:s0 tcontext=u:object_r:container_app_data_backend:s0:c2 tclass=dir
# avc:  denied  { relabelfrom } for  pid=492 comm="vold" name="cache" dev="ecryptfs" ino=131796 scontext=u:r:vold:s0 tcontext=u:object_r:platform_app_data_file:s0 tclass=dir
# avc:  denied  { relabelto } for  pid=492 comm="vold" name="cache" dev="ecryptfs" ino=131796 scontext=u:r:vold:s0 tcontext=u:object_r:platform_app_data_file:s0:c2 tclass=dir
# avc:  denied  { search } for  pid=3010 comm="vold" name="container" dev="mmcblk0p21" ino=262147 scontext=u:r:vold:s0 tcontext=u:object_r:container_system_file:s0 tclass=dir SEPF_SM-N910S_4.4.4_A019
# avc:  denied  { set } for property=storage.mmc.size scontext=u:r:vold:s0 tcontext=u:object_r:default_prop:s0 tclass=property_service
# avc:  denied  { sys_rawio } for  pid=3047 comm="vold" capability=17  scontext=u:r:vold:s0 tcontext=u:r:vold:s0 tclass=capability
# avc:  denied  { use } for  pid=3304 comm="vold" path="/mnt/shell/knox-emulated/101/EN.FYa1SEzByqco8-bWLH9jwyKMko.0me1quEdOlbk4SqaJgG3PN-H.2UPU9UiZMbTBYwwN5llO01lzDleexrTRSEE-g.LOqGIYtnCU" dev="sdcardfs" ino=457825 scontext=u:r:vold:s0 tcontext=u:r:untrusted_app:s0:c3 tclass=fd permissive=0
#avc:  denied  { create } for  pid=3184 comm="vold" name="VFEKEK_101" scontext=u:r:vold:s0 tcontext=u:object_r:users_system_data_file:s0 tclass=file permissive=1
#avc:  denied  { write } for  pid=3184 comm="vold" name="dek_req" dev="tmpfs" ino=9073 scontext=u:r:vold:s0 tcontext=u:object_r:knox_dar_shared_device:s0 tclass=chr_file permissive=1
#avc:  denied  { write } for  pid=3184 comm="vold" name="dek_kek" dev="tmpfs" ino=9071 scontext=u:r:vold:s0 tcontext=u:object_r:knox_dar_device:s0 tclass=chr_file permissive=1
# avc:  denied  { read write } for  pid=3753 comm="vold" name="mmcblk0rpmb" dev="tmpfs" ino=4875 scontext=u:r:vold:s0 tcontext=u:object_r:mmcblk0rpmb_device:s0 tclass=blk_file

#line 1 "vendor/samsung/common/sepolicy/watchdogd.te"
#
# watchdogd
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute watchdogd trusteddomain;
#typeattribute watchdogd system_domain;
# temporary permissive to gather the log.
# permissive watchdogd;

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/wpa.te"
#
# domain
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute wpa trusteddomain;
typeattribute wpa system_domain;


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow wpa servicemanager:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow servicemanager wpa:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow wpa servicemanager:fd use;
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow wpa keystore:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow keystore wpa:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow wpa keystore:fd use;
#line 12


########## self and domain_type
allow wpa debuggerd:unix_dgram_socket sendto;
allow wpa dumpstate:unix_dgram_socket sendto;
allow wpa init:unix_dgram_socket sendto;
allow wpa init:unix_stream_socket connectto;
allow wpa init_shell:unix_dgram_socket sendto;
allow wpa keystore:unix_stream_socket connectto;
allow wpa rild:unix_stream_socket connectto;
allow wpa secure_storage:unix_stream_socket connectto;
allow wpa self:netlink_route_socket *;
allow wpa self:netlink_socket *;
allow wpa self:packet_socket *;
allow wpa self:udp_socket *;
allow wpa shell:unix_dgram_socket sendto;
allow wpa system_app:unix_dgram_socket sendto;
allow wpa s_system_app:unix_dgram_socket sendto;
#line 29

########## fs_type
#neverallow by Google CTS : allow wpa sdcard_type:dir rw_dir_perms;
allow wpa sdcard_type:dir getattr;
#neverallow by Google CTS : allow wpa sdcard_type:file { r_file_perms link_file_perms };

########## dev_type
allow wpa device:file { getattr open read ioctl lock };
allow wpa secure_storage_device:dir { open getattr read search ioctl };
allow wpa secure_storage_device:sock_file { open append write };

########## file_type
allow wpa property_socket:sock_file { open append write };
allow wpa system_data_file:dir { open getattr read search ioctl };
allow wpa system_data_file:file { open append write };
allow wpa wifi_data_file:sock_file { open append write };
allow wpa wpa_exec:file execute_no_trans;

########## etc_type
########## known issue.
# for CTS

#line 50
allow wpa su:unix_dgram_socket sendto;
#line 52


#r_dir_file(wpa, file_type)
# replacing r_dir_file macro and removing container related access
#allow wpa { file_type -system_file -system_data_file -security_file -knox_clipboard_file -unlabeled -container_file_type -fixmo_app_data_file -good_app_data_file }:dir r_dir_perms;
#allow wpa { file_type -system_file -system_data_file -security_file -knox_clipboard_file -unlabeled -container_file_type -fixmo_app_data_file -good_app_data_file }:{ file lnk_file } r_file_perms;
allow wpa newAttr59:dir { open getattr read search ioctl };
allow wpa newAttr59:{ file lnk_file } { getattr open read ioctl lock };




############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/z_aws.te"
#
# z_aws.te
#

##### appdomain #####
allow appdomain anr_data_file:file { { getattr open read ioctl lock } { open append write } };

##### bauthserver #####
allow bauthserver { isolated_app_tmpfs untrusted_app_tmpfs }:file write;
allow bauthserver media_rw_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow bauthserver media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

##### daemon_app_process #####
allow daemon_app_process console_device:chr_file { { getattr open read ioctl lock } { open append write } };

##### diagexe #####
allow diagexe isolated_app:fd use;

##### epmd ####
allow epmd kernel:dir { open getattr read search ioctl };
allow epmd kernel:file { getattr open read ioctl lock };

##### filtered_google_app #####
allow filtered_google_app untrusted_app_tmpfs:file write;

##### rild #####
allow rild socket_device:dir write;

##### rtc_log #####
allow rtc_log { isolated_app_tmpfs untrusted_app_tmpfs }:file write;

##### ss_kbservice_daemon #####
allow ss_kbservice_daemon ss_kbservice_daemon_socket:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow ss_kbservice_daemon ss_kbservice_daemon_socket:{ file fifo_file lnk_file sock_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow ss_kbservice_daemon system_data_file:fifo_file unlink;

##### surfaceflinger #####
allow surfaceflinger m2m1shot_device:chr_file write;

##### system_app #####
allow system_app proc_net:file write;
allow s_system_app proc_net:file write;
#line 42

##### system_server #####
allow system_server domain:file write;

##### untrusted_app #####
allow untrusted_app block_device:blk_file getattr;
allow umcagent_app block_device:blk_file getattr;
allow vpn_untrusted_app block_device:blk_file getattr;
allow trustonicpartner_app block_device:blk_file getattr;
allow llk_untrusted_app block_device:blk_file getattr;
allow filtered_untrusted_app block_device:blk_file getattr;
allow filtered_google_app block_device:blk_file getattr;
allow knox_untrusted_app block_device:blk_file getattr;
allow irm_app block_device:blk_file getattr;
allow gad_untrusted_app block_device:blk_file getattr;
allow carrier_app block_device:blk_file getattr;
#line 48
allow untrusted_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow umcagent_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow vpn_untrusted_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow trustonicpartner_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow llk_untrusted_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow filtered_untrusted_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow filtered_google_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow knox_untrusted_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow irm_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow gad_untrusted_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow carrier_app download_file:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
#line 49
allow untrusted_app download_file:fd use;
allow umcagent_app download_file:fd use;
allow vpn_untrusted_app download_file:fd use;
allow trustonicpartner_app download_file:fd use;
allow llk_untrusted_app download_file:fd use;
allow filtered_untrusted_app download_file:fd use;
allow filtered_google_app download_file:fd use;
allow knox_untrusted_app download_file:fd use;
allow irm_app download_file:fd use;
allow gad_untrusted_app download_file:fd use;
allow carrier_app download_file:fd use;
#line 50
allow untrusted_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow umcagent_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow vpn_untrusted_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow trustonicpartner_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow llk_untrusted_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow filtered_untrusted_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow filtered_google_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow knox_untrusted_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow irm_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow gad_untrusted_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
allow carrier_app download_file:file { unlink { { getattr open read ioctl lock } { open append write } } };
#line 51
allow untrusted_app knox_kap_device:chr_file getattr;
allow umcagent_app knox_kap_device:chr_file getattr;
allow vpn_untrusted_app knox_kap_device:chr_file getattr;
allow trustonicpartner_app knox_kap_device:chr_file getattr;
allow llk_untrusted_app knox_kap_device:chr_file getattr;
allow filtered_untrusted_app knox_kap_device:chr_file getattr;
allow filtered_google_app knox_kap_device:chr_file getattr;
allow knox_untrusted_app knox_kap_device:chr_file getattr;
allow irm_app knox_kap_device:chr_file getattr;
allow gad_untrusted_app knox_kap_device:chr_file getattr;
allow carrier_app knox_kap_device:chr_file getattr;
#line 52
allow untrusted_app knox_untrusted_app:process sigkill;
allow umcagent_app knox_untrusted_app:process sigkill;
allow vpn_untrusted_app knox_untrusted_app:process sigkill;
allow trustonicpartner_app knox_untrusted_app:process sigkill;
allow llk_untrusted_app knox_untrusted_app:process sigkill;
allow filtered_untrusted_app knox_untrusted_app:process sigkill;
allow filtered_google_app knox_untrusted_app:process sigkill;
allow knox_untrusted_app knox_untrusted_app:process sigkill;
allow irm_app knox_untrusted_app:process sigkill;
allow gad_untrusted_app knox_untrusted_app:process sigkill;
allow carrier_app knox_untrusted_app:process sigkill;
#line 53
allow untrusted_app platform_app_data_file:file { rename unlink };
allow umcagent_app platform_app_data_file:file { rename unlink };
allow vpn_untrusted_app platform_app_data_file:file { rename unlink };
allow trustonicpartner_app platform_app_data_file:file { rename unlink };
allow llk_untrusted_app platform_app_data_file:file { rename unlink };
allow filtered_untrusted_app platform_app_data_file:file { rename unlink };
allow filtered_google_app platform_app_data_file:file { rename unlink };
allow knox_untrusted_app platform_app_data_file:file { rename unlink };
allow irm_app platform_app_data_file:file { rename unlink };
allow gad_untrusted_app platform_app_data_file:file { rename unlink };
allow carrier_app platform_app_data_file:file { rename unlink };
#line 54

##### zygote #####
allow zygote zygote:capability2 syslog;


### Analysis AWS log from PROD Server(March-15) 
# avc:  denied  { write } for  pid=5232 comm="Binder_2" path=2F6465762F6173686D656D2F4469736361726461626C654D656D6F72794173686D656D416C6C6F6361746F72202864656C6574656429 dev="tmpfs" ino=2009647 scontext=u:r:bauthserver:s0 tcontext=u:object_r:isolated_app_tmpfs:s0 tclass=file permissive=0 SEPF_SM-G925F_5.0.2_0009
# avc:  denied  { write } for  pid=5540 comm="Binder_2" path=2F6465762F6173686D656D2F4469736361726461626C654D656D6F72794173686D656D416C6C6F6361746F72202864656C6574656429 dev="tmpfs" ino=1712808 scontext=u:r:bauthserver:s0 tcontext=u:object_r:untrusted_app_tmpfs:s0 tclass=file permissive=0 SEPF_SM-G920F_5.0.2_0008
# avc:  denied  { read write } for  pid=4482 comm="app_process" path="/dev/ttyHSL0" dev="tmpfs" ino=9478 scontext=u:r:daemon_app_process:s0 tcontext=u:object_r:console_device:s0 tclass=chr_file permissive=0 SEPF_SM-N915G_5.0.1_0009
# avc:  denied  { use } for  pid=2985 comm="diagexe" path=2F6465762F6173686D656D2F4469736361726461626C654D656D6F72794173686D656D416C6C6F6361746F72202864656C6574656429 dev="tmpfs" ino=2055985 scontext=u:r:diagexe:s0 tcontext=u:r:isolated_app:s0 tclass=fd permissive=0 SEPF_SM-G920F_5.0.2_0008
# avc:  denied  { write } for  pid=22865 comm=4173796E635461736B202331 path=2F6465762F6173686D656D2F4469736361726461626C654D656D6F72794173686D656D416C6C6F6361746F72202864656C6574656429 dev="tmpfs" ino=15845139 scontext=u:r:filtered_google_app:s0:c2 tcontext=u:object_r:untrusted_app_tmpfs:s0 tclass=fil
# avc:  denied  { write } for  pid=2978 comm="rtc_log.sh" path=2F6465762F6173686D656D2F536B69615F4173686D656D5F4469736361726461626C655F4D656D6F7279202864656C6574656429 dev="tmpfs" ino=3335076 scontext=u:r:rtc_log:s0 tcontext=u:object_r:untrusted_app_tmpfs:s0 tclass=file permissive=0 SEPF_SM-G920F_5.0.2_0008
# avc:  denied  { getattr } for  pid=514 comm="epmd" path="/proc/1370/fd/0" dev="proc" ino=158263 scontext=u:r:epmd:s0 tcontext=u:r:kernel:s0 tclass=dir SEPF_SM-P905_5.0.2_0010
# avc:  denied  { unlink } for  pid=23744 comm="ss_kbservice_da" name="ss_kbservice_daemon" dev="mmcblk0p21" ino=3579 scontext=u:r:ss_kbservice_daemon:s0 tcontext=u:object_r:ss_kbservice_daemon_socket:s0 tclass=fifo_file SEPF_SM-G900H_5.0_0009
# avc:  denied  { getattr } for  pid=4786 comm=4173796E635461736B202334 path="/dev/block/dm-11" dev="tmpfs" ino=76128 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:block_device:s0 tclass=blk_file SEPF_SM-T800_5.0.2_0009
# avc:  denied  { use } for  pid=18475 comm="Blue_AnalyticsQ" path="pipe:[139472]" dev="pipefs" ino=139472 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:download_file:s0 tclass=fd SEPF_GT-I9505_4.4.2_0032
# avc:  denied  { getattr } for  pid=16976 comm="ls" path="/dev/knox_kap" dev="tmpfs" ino=3440 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:knox_kap_device:s0 tclass=chr_file permissive=0 SEPF_SM-G920F_5.0.2_0008
# avc:  denied  { sigkill } for  pid=8181 comm="box:managespace" scontext=u:r:untrusted_app:s0 tcontext=u:r:knox_untrusted_app:s0 tclass=process SEPF_SM-T800_5.0.2_0009
# 2709569 cnt, avc:  denied  { rename } for  pid=4837 comm="pool-1-thread-1" name="DownloadService.xml" dev="mmcblk0p21" ino=265260 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:platform_app_data_file:s0 tclass=file
#line 1 "vendor/samsung/common/sepolicy/zygote.te"
#
# Zygote
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute zygote trusteddomain;
#typeattribute zygote system_domain;
# temporary permissive to gather the log.
# permissive zygote;


#line 13
allow zygote log_device:chr_file read;
#line 13
allow zygote system_file:file { getattr execute execute_no_trans };
#line 13


#line 14
# Call the servicemanager and transfer references to it.
#line 14
allow zygote servicemanager:binder { call transfer };
#line 14
# servicemanager performs getpidcon on clients.
#line 14
allow servicemanager zygote:dir search;
#line 14
allow servicemanager zygote:file { read open };
#line 14
allow servicemanager zygote:process getattr;
#line 14
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 14
# all domains in domain.te.
#line 14


#line 15
# Call the server domain and optionally transfer references to it.
#line 15
allow zygote appdomain:binder { call transfer };
#line 15
# Allow the serverdomain to transfer references to the client on the reply.
#line 15
allow appdomain zygote:binder transfer;
#line 15
# Receive and use open files from the server.
#line 15
allow zygote appdomain:fd use;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow zygote radio:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow radio zygote:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow zygote radio:fd use;
#line 16


#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow zygote servicemanager:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow servicemanager zygote:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow zygote servicemanager:fd use;
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow zygote surfaceflinger:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow surfaceflinger zygote:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow zygote surfaceflinger:fd use;
#line 18


#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow zygote system:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow system zygote:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow zygote system:fd use;
#line 19


#line 20
allow zygote dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 20
allow zygote dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 20
allow zygote dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 20
allow zygote bugreport_exec:file { execute execute_no_trans };
#line 20
allow zygote dumpstate_exec:file { execute execute_no_trans };
#line 20
allow zygote dumpsys_exec:file { execute execute_no_trans };
#line 20



#line 22
allow zygote bluetooth_efs_file:dir { open getattr read search ioctl };
#line 22
allow zygote bluetooth_efs_file:{ file lnk_file } { getattr open read ioctl lock };
#line 22


#line 23
allow zygote property_socket:sock_file write;
#line 23
allow zygote init:unix_stream_socket connectto;
#line 23


#line 24
allow zygote dnsproxyd_socket:sock_file write;
#line 24
allow zygote init:unix_stream_socket connectto;
#line 24


########## self and domain_type
allow zygote at_distributor:fd use;
allow zygote init:fifo_file { { getattr open read ioctl lock } { open append write } };
allow zygote init:unix_stream_socket { read write };
allow zygote netd:unix_stream_socket connectto;
allow zygote platform_app:process ptrace;
allow zygote s_platform_app:process ptrace;
#line 32
allow zygote samsung_app:process ptrace;
#neverallow by Google: neverallow { domain -debuggerd -vold -dumpstate -system_server } self:capability sys_ptrace
allow zygote self:capability { net_admin fsetid kill net_raw sys_resource };
allow zygote system:fifo_file { open append write };
## naver line pop2, appstore: ANR occurs at exception
#allow zygote untrusteddomain:process ptrace;

########## fs_type
allow zygote sdcard_type:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow zygote sdcard_type:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow zygote sdcard_type:filesystem unmount;
allow zygote { sysfs proc }:file write;
allow zygote sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write } };
allow zygote tmpfs:dir { open getattr read search ioctl };
allow zygote tmpfs:filesystem unmount;

########## dev_type
allow zygote graphics_device:chr_file { { getattr open read ioctl lock } { open append write } };
allow zygote hci_attach_dev:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
allow zygote anr_data_file:file { { getattr open read ioctl lock } { open append write } };
allow zygote app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow zygote gad_untrusted_app_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 55
allow zygote app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow zygote gad_untrusted_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 56
allow zygote app_library_file:dir { open getattr read search ioctl };
allow zygote app_library_file:file { getattr open read ioctl lock };
allow zygote media_rw_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow zygote media_rw_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow zygote obb_apk_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow zygote shell_data_file:dir { { open getattr read search ioctl } mounton };
allow zygote system_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };

#neverallow by Google: allow zygote system_file:dir write;

allow zygote system_library_file:dir { open getattr read search ioctl };
allow zygote zygote_exec:file { open execute_no_trans };
allow zygote zygote_tmpfs:file append;

########## etc_type
allow zygote csc_prop:property_service set;
#neverallow Google CTS-android-5.0.2_r1 : allow zygote default_prop:property_service set;
allow zygote setupwizard_prop:property_service set;
allow zygote system_prop:property_service set;
allow zygote denial_prop:property_service set;

########## known issue.
# for vmware
allow zygote vmware_app:process { dyntransition setpgid };

#neverallow by Google:(domain init:binder call;)  allow zygote init:binder call;

#from CTS testing
allow zygote media_rw_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };

#from NSA
# handle bugreports b/10498304
allow zygote ashmem_device:chr_file execute;
allow zygote shell_data_file:file { write getattr };
allow zygote system:binder { transfer call };
allow zygote servicemanager:binder { call };

# for patchoat: create symlink /data/dalvik-cache/arm/system@framework@boot.oat target: /system/framework/arm/boot.oat
allow zygote dalvikcache_data_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

############ knox_common #############
########## type and macro.

#line 98
# Call the server domain and optionally transfer references to it.
#line 98
allow zygote containerdomain:binder { call transfer };
#line 98
# Allow the serverdomain to transfer references to the client on the reply.
#line 98
allow containerdomain zygote:binder transfer;
#line 98
# Receive and use open files from the server.
#line 98
allow zygote containerdomain:fd use;
#line 98


########## self and domain_type
########## fs_type
allow zygote labeledfs:filesystem unmount;
allow zygote proc_avc_msg:file { { getattr open read ioctl lock } { open append write } };

########## dev_type
allow vold knox_dar_device:chr_file { getattr open read ioctl lock };
allow vold knox_dar_shared_device:chr_file { getattr open read ioctl lock };

########## file_type
allow zygote audit_log:file { { getattr open read ioctl lock } { open append write } };
allow zygote container_app_data_backend:dir { { { open getattr read search ioctl } { open search write add_name remove_name } } mounton setattr };
allow zygote bbccontainer_app_data_backend:dir { { { open getattr read search ioctl } { open search write add_name remove_name } } mounton setattr };
#line 112
allow zygote container_app_data_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } mounton };
allow zygote container_app_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow zygote container_app_sdcard_file:dir mounton;
allow zygote container_file_type:dir { open getattr read search ioctl };
allow zygote irm_media_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow zygote irm_media_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

########## etc_type
########## known issue.
# Zygote should never trust 3rd party apps..
allow zygote containerdomain:fd use;
allow zygote containerdomain:process { dyntransition getpgid setpgid };


############ qcom_common #############
########## type and macro.
########## self and domain_type
allow zygote self:tcp_socket *;
## naver line pop2, appstore: ANR occurs at exception
#allow zygote untrusteddomain:process ptrace;

########## fs_type
########## dev_type
allow zygote bluetooth_serial_device:chr_file { { getattr open read ioctl lock } { open append write } };

########## file_type
########## etc_type
allow zygote { node port }:tcp_socket { node_bind name_bind };

########## known issue.


############ avc_log #############
#audit(1388534515.039:169): avc:  denied  { create } for  pid=1841 comm="zygote" name="legacy" scontext=u:r:zygote:s0 tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
#audit(1403080203.525:249): avc:  denied  { mounton } for  pid=17957 comm="zygote" path="/storage/emulated/legacy" dev="sdcardfs" ino=1044486 scontext=u:r:zygote:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
#audit(1403080203.525:249): avc:  denied  { mounton } for  pid=17957 comm="zygote" path="/storage/emulated/legacy" dev="sdcardfs" ino=1044486 scontext=u:r:zygote:s0 #tcontext=u:object_r:media_rw_data_file:s0 tclass=dir
#audit(1403079336.410:218): avc:  denied  { write } for  pid=6473 comm="zygote" name="100" dev="mmcblk0p25" ino=130587 scontext=u:r:zygote:s0 #tcontext=u:object_r:container_app_data_backend:s0:c2 tclass=dir
#audit(1403076996.610:30): avc:  denied  { read } for  pid=510 comm="vold" name="dek_log" dev="tmpfs" ino=8883 scontext=u:r:vold:s0 tcontext=u:object_r:knox_dar_device:s0 tclass=chr_file
#audit(1403173619.348:201): avc:  denied  { unmount } for  pid=5340 comm="zygote" scontext=u:r:zygote:s0 tcontext=u:object_r:labeledfs:s0 tclass=filesystem
#audit(1388537169.452:209): avc:  denied  { create } for  pid=12715 comm="main" name="system@framework@boot.oat" scontext=u:r:zygote:s0 tcontext=u:object_r:dalvikcache_data_file:s0 tclass=lnk_file
# avc:  denied  { write } for  pid=20928 comm="zygote" name="boot_low_freq" dev="sysfs" ino=20638 scontext=u:r:zygote:s0 tcontext=u:object_r:sysfs_devices_system_cpu:s0 tclass=file permissive=0 SEPF_SM-G920S_5.1.1_0013


#line 1 "vendor/samsung/common/sepolicy/zzknox_v2.te"
# knox 2.0 SEC_KNOX_CONTAINER_VERSION=v30

# duplicate rule with sepolicy/app.te
#binder_call(appdomain, appdomain)

#neverallow Google CTS-android-5.0.2_r1 : allow { trusteddomain -cts_trusted_domain } newAttr33:binder { call transfer };
#neverallow Google CTS-android-5.0.2_r1 : allow cts_trusted_domain newAttr35:binder { call transfer };
allow trusteddomain newAttr35:binder { call transfer };

allow newAttr98 newAttr35:binder { call transfer };

#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_att/diagandroid_app.te"
#
# diagandroid_app for CIQ
#

############ aosp and sec_common #############
########## type and macro.
#neverallow Google CTS-android-5.0.2_r1 :typeof diagandroid_app, system_app;

########## self and domain_type
########## fs_type
########## dev_type
########## file_type
########## etc_type
########## known issue.

############ avc_log #############


#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_att/radio.te"
#
# radio
#

# CIQ FEATURE
allow radio diagandroid_app:unix_stream_socket connectto;

############ avc_log #############
# avc:  denied  { connectto } for  pid=1472 comm="m.android.phone" path=00636F6D2E6361727269657269712E69716167656E74 scontext=u:r:radio:s0 tcontext=u:r:system_app:s0 tclass=unix_stream_socket Enterprise Policy

#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_att/system_server.te"
#
# system_server
#

# CIQ FEATURE
allow system_server diagandroid_app:unix_stream_socket connectto;

############ avc_log #############
# avc:  denied  { connectto } for  pid=1078 comm="android.bg" path=00636F6D2E6361727269657269712E69716167656E74 scontext=u:r:system_server:s0 tcontext=u:r:system_app:s0 tclass=unix_stream_socket SEPF_SAMSUNG-SM-N910A_4.4.4_A022

#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/adbd.te"
allow adbd sprintitson_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/app.te"
allow newAttr10 carrier_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr10 carrier_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow containerdomain carrier_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow containerdomain carrier_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

allow untrusteddomain cfiat_socket:sock_file { { getattr open read ioctl lock } { open append write } };
allow untrusteddomain kipc_socket:sock_file { { getattr open read ioctl lock } { open append write } };

#SEC_SEforAndroid : Conflict with good requirements
allow newAttr1 sprintitson_file:file execute;

#allow system_app self:netlink_socket *;
#violate neverallow rule

#allow shell sprintitson_file:dir { write remove_name };
#allow shell sprintitson_file:file link_file_perms;

## avc_msg
# P140930-00286 avc:  denied  { execute } for  pid=3912 comm="facebook.katana" path="/carrier/itson/resources/libitsonoem.so" dev="mmcblk0p26" ino=28 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:sprintitson_file:s0 tclass=file SEPF_SM-N915P_4.4.4_A019


#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/file.te"
type cfiat_socket, file_type, socket_file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr56, newAttr53, newAttr57, newAttr58, newAttr59, newAttr60, newAttr63, newAttr61, newAttr64, newAttr62, newAttr65, newAttr66, newAttr69;
type kipc_socket, file_type, socket_file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr53, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;
type itson_socket, file_type, socket_file_type, newAttr16, newAttr18, newAttr19, newAttr17, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69;

#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/init.te"

# Transitions to seclabel processes in init.rc
allow init itsonbs:process transition;


#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/installd.te"
allow installd sprintitson_file:dir { relabelto { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } };
allow installd sprintitson_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd sprintitson_file:lnk_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow installd carrier_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/itsonbs.te"
#
# itsonbs
#

type itsonbs, domain, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type itsonbs_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 8
# Old domain may exec the file and transition to the new domain.
#line 8
allow init itsonbs_exec:file { getattr open read execute };
#line 8
allow init itsonbs:process transition;
#line 8
# New domain is entered by executing the file.
#line 8
allow itsonbs itsonbs_exec:file { entrypoint open read execute getattr };
#line 8
# New domain can send SIGCHLD to its caller.
#line 8
allow itsonbs init:process sigchld;
#line 8
# Enable AT_SECURE, i.e. libc secure mode.
#line 8
dontaudit init itsonbs:process noatsecure;
#line 8
# XXX dontaudit candidate but requires further study.
#line 8
allow init itsonbs:process { siginh rlimitinh };
#line 8


#line 9
allow itsonbs dumplog_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
#line 9
allow itsonbs dumplog_data_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 9
allow itsonbs dumplog_data_file:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#line 9
allow itsonbs bugreport_exec:file { execute execute_no_trans };
#line 9
allow itsonbs dumpstate_exec:file { execute execute_no_trans };
#line 9
allow itsonbs dumpsys_exec:file { execute execute_no_trans };
#line 9


allow itsonbs itsonbs_exec:file { entrypoint { getattr open read ioctl lock } };

allow itsonbs carrier_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelfrom };
#neverallow Google CTS-android-5.0.2_r1 : allow itsonbs carrier_file:{ file lnk_file } { create_file_perms execute relabelfrom };
allow itsonbs carrier_file:{ file lnk_file } { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelfrom };

allow itsonbs carrier_file:file execute_no_trans;
allow itsonbs cgroup:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow itsonbs devpts:chr_file { getattr open read ioctl lock };
allow itsonbs kernel:key { view read search };
allow itsonbs security_file:file { read open };
allow itsonbs security_spota_file:file { read open };
#line 22
allow itsonbs self:capability { dac_override sys_admin sys_module fowner chown fsetid };
allow itsonbs shell_data_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow itsonbs shell_data_file:{ file lnk_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#neverallow Google CTS-android-5.0.2_r1 : allow itsonbs shell_data_file:file x_file_perms;
allow itsonbs shell_exec:file { getattr open read ioctl lock };
allow itsonbs sprintitson_file:dir { { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } } relabelto };
#neverallow Google CTS-android-5.0.2_r1 : allow itsonbs sprintitson_file:{ file lnk_file } { create_file_perms execute relabelto };
allow itsonbs sprintitson_file:{ file lnk_file } { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } relabelto };

allow itsonbs sprintitson_file:file execute_no_trans;
allow itsonbs system_file:dir { open getattr read search ioctl };
allow itsonbs system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };



# temporary permissive to gather the log.
# permissive itsonbs;

## avc_log : AOSP/B2C
# avc:  denied  { chown } for  pid=402 comm="update_binary" capability=0  scontext=u:r:itsonbs:s0 tcontext=u:r:itsonbs:s0 tclass=capability
# avc:  denied  { fowner } for  pid=402 comm="update_binary" capability=3  scontext=u:r:itsonbs:s0 tcontext=u:r:itsonbs:s0 tclass=capability
# avc:  denied  { fsetid } for  pid=402 comm="update_binary" capability=4  scontext=u:r:itsonbs:s0 tcontext=u:r:itsonbs:s0 tclass=capability
# avc:  denied  { execute } for  pid=402 comm="itson_installer" name="update_binary" dev="mmcblk0p27" ino=655371 scontext=u:r:itsonbs:s0 tcontext=u:object_r:shell_data_file:s0 tclass=file
# avc:  denied  { execute_no_trans } for  pid=402 comm="itson_installer" path="/data/local/tmp/update_binary" dev="mmcblk0p27" ino=655371 scontext=u:r:itsonbs:s0 tcontext=u:object_r:shell_data_file:s0 tclass=file
# avc:  denied  { add_name } for  pid=363 comm="itson_installer" name="0" scontext=u:r:itsonbs:s0 tcontext=u:object_r:cgroup:s0 tclass=dir SEPF_SM-G900P_5.0_0001
# avc:  denied  { sys_admin } for  pid=362 comm="restorecon" capability=21  scontext=u:r:itsonbs:s0 tcontext=u:r:itsonbs:s0 tclass=capability
# avc:  denied  { create } for  pid=375 comm="itson_installer" name="0" scontext=u:r:itsonbs:s0 tcontext=u:object_r:cgroup:s0 tclass=dir
# audit(1388617084.780:13): arch=40000028 syscall=39 per=800000 success=no exit=-13 a0=be94e20c a1=1fd a2=be94e20c a3=0 items=1 ppid=370 pid=375 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="itson_installer" exe="/system/vendor/itson/itson_installer" subj=u:r:itsonbs:s0 key=(null)
# audit(1388617084.780:13):  cwd="/"
# audit(1388617084.780:13): item=0 name="/acct/uid/0" inode=6947 dev=00:0d mode=040755 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:cgroup:s0
# avc:  denied  { search } for  pid=243 comm="insmod" scontext=u:r:itsonbs:s0 tcontext=u:r:kernel:s0 tclass=key permissive=1 SEPF_SM-G530P_5.1_0011

#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/itsonclient_app.te"
#
# Sprint ItsOn
#

############ aosp and sec_common #############
########## type and macro.
type itsonclient_app, untrusteddomain, domain, newAttr1, newAttr4, newAttr5, newAttr8, newAttr7, newAttr3, newAttr6, newAttr2, newAttr9, newAttr10, newAttr11, newAttr25, newAttr32, newAttr33, newAttr34, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr95, newAttr96, newAttr97, newAttr98;

#line 8
typeattribute itsonclient_app appdomain;
#line 8
# Label ashmem objects with our own unique type.
#line 8

#line 8
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 8
type itsonclient_app_tmpfs, file_type, tmpfs_file_type, newAttr54, newAttr55, newAttr53, newAttr56, newAttr57, newAttr58, newAttr59, newAttr60, newAttr61, newAttr63, newAttr62, newAttr64, newAttr65, newAttr66, newAttr69, newAttr89, newAttr90;
#line 8
type_transition itsonclient_app tmpfs:file itsonclient_app_tmpfs;
#line 8
allow itsonclient_app itsonclient_app_tmpfs:file { read write };
#line 8

#line 8
# Map with PROT_EXEC.
#line 8
allow itsonclient_app itsonclient_app_tmpfs:file execute;
#line 8


#line 9
# Each domain gets a unique devpts type.
#line 9
type itsonclient_app_devpts, fs_type, newAttr67, newAttr68, newAttr70, newAttr71, newAttr72, newAttr73, newAttr74, newAttr75, newAttr77, newAttr76, newAttr69;
#line 9
# Label the pty with the unique type when created.
#line 9
type_transition itsonclient_app devpts:chr_file itsonclient_app_devpts;
#line 9
# Allow use of the pty after creation.
#line 9
allow itsonclient_app itsonclient_app_devpts:chr_file { open getattr read write ioctl };
#line 9
# Note: devpts:dir search and ptmx_device:chr_file rw_file_perms
#line 9
# allowed to everyone via domain.te.
#line 9


#line 10
typeattribute itsonclient_app netdomain;
#line 10


#line 11
typeattribute itsonclient_app bluetoothdomain;
#line 11



#line 13
typeattribute itsonclient_app platformappdomain;
#line 13
typeattribute itsonclient_app mlstrustedsubject;
#line 13

# Access the network.

#line 15
typeattribute itsonclient_app netdomain;
#line 15



########## self and domain_type
allow itsonclient_app zygote:binder { call transfer };
#neverallow Google CTS-android-5.0.2_r1 : allow itsonclient_app self:{ socket netlink_socket } *;
# appdomain: relax netlink_socket neverallow rule, REf: https://android.googlesource.com/platform/external/sepolicy/+/d31936f89c49bc5c54b84bd5095f3c417da14935 
allow itsonclient_app self:{ socket netlink_socket } *;

allow itsonclient_app self:udp_socket { create setopt bind node_bind getattr connect write getopt read };

########## fs_type
########## dev_type
########## file_type
allow itsonclient_app sprintitson_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow itsonclient_app sprintitson_file:{ file lnk_file sock_file fifo_file } { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow itsonclient_app sprintitson_file:file { { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } } execute };

########## etc_type
allow itsonclient_app port:tcp_socket { name_connect name_bind };

########## known issue.

#allow system_app self:netlink_socket *;
#violate neverallow rule
#allow shell sprintitson_file:dir { write remove_name };
#allow shell sprintitson_file:file link_file_perms;

#Policy from itson vendor.
# Allow system to read apk to dex it

#line 45
allow system_server sprintitson_file:dir { open getattr read search ioctl };
#line 45
allow system_server sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
#line 45


#line 46
allow system_app sprintitson_file:dir { open getattr read search ioctl };
allow s_system_app sprintitson_file:dir { open getattr read search ioctl };
#line 46
allow system_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow s_system_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
#line 46


#line 47
allow dex2oat sprintitson_file:dir { open getattr read search ioctl };
#line 47
allow dex2oat sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
#line 47


# This is for the client to load its data other app to load itson-oem.jar

#line 50
allow untrusted_app sprintitson_file:dir { open getattr read search ioctl };
allow umcagent_app sprintitson_file:dir { open getattr read search ioctl };
allow vpn_untrusted_app sprintitson_file:dir { open getattr read search ioctl };
allow trustonicpartner_app sprintitson_file:dir { open getattr read search ioctl };
allow llk_untrusted_app sprintitson_file:dir { open getattr read search ioctl };
allow filtered_untrusted_app sprintitson_file:dir { open getattr read search ioctl };
allow filtered_google_app sprintitson_file:dir { open getattr read search ioctl };
allow knox_untrusted_app sprintitson_file:dir { open getattr read search ioctl };
allow irm_app sprintitson_file:dir { open getattr read search ioctl };
allow gad_untrusted_app sprintitson_file:dir { open getattr read search ioctl };
allow carrier_app sprintitson_file:dir { open getattr read search ioctl };
#line 50
allow untrusted_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow umcagent_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow vpn_untrusted_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow trustonicpartner_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow llk_untrusted_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow filtered_untrusted_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow filtered_google_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow knox_untrusted_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow irm_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow gad_untrusted_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
allow carrier_app sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
#line 50


#line 51
allow radio sprintitson_file:dir { open getattr read search ioctl };
#line 51
allow radio sprintitson_file:{ file lnk_file } { getattr open read ioctl lock };
#line 51


# Allow app to create/read/write to the local socket
allow itsonclient_app itson_socket:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
allow itsonclient_app itson_socket:dir { { open getattr read search ioctl } { open search write add_name remove_name } };
allow itsonclient_app itson_socket:sock_file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };

# Allow other app to see the socket and connect to it

#line 59
allow untrusted_app itson_socket:dir { open getattr read search ioctl };
allow umcagent_app itson_socket:dir { open getattr read search ioctl };
allow vpn_untrusted_app itson_socket:dir { open getattr read search ioctl };
allow trustonicpartner_app itson_socket:dir { open getattr read search ioctl };
allow llk_untrusted_app itson_socket:dir { open getattr read search ioctl };
allow filtered_untrusted_app itson_socket:dir { open getattr read search ioctl };
allow filtered_google_app itson_socket:dir { open getattr read search ioctl };
allow knox_untrusted_app itson_socket:dir { open getattr read search ioctl };
allow irm_app itson_socket:dir { open getattr read search ioctl };
allow gad_untrusted_app itson_socket:dir { open getattr read search ioctl };
allow carrier_app itson_socket:dir { open getattr read search ioctl };
#line 59
allow untrusted_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow umcagent_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow vpn_untrusted_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow trustonicpartner_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow llk_untrusted_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow filtered_untrusted_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow filtered_google_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow knox_untrusted_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow irm_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow gad_untrusted_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
allow carrier_app itson_socket:{ file lnk_file } { getattr open read ioctl lock };
#line 59


#line 60
allow untrusted_app itson_socket:sock_file write;
allow umcagent_app itson_socket:sock_file write;
allow vpn_untrusted_app itson_socket:sock_file write;
allow trustonicpartner_app itson_socket:sock_file write;
allow llk_untrusted_app itson_socket:sock_file write;
allow filtered_untrusted_app itson_socket:sock_file write;
allow filtered_google_app itson_socket:sock_file write;
allow knox_untrusted_app itson_socket:sock_file write;
allow irm_app itson_socket:sock_file write;
allow gad_untrusted_app itson_socket:sock_file write;
allow carrier_app itson_socket:sock_file write;
#line 60
allow untrusted_app itsonclient_app:unix_stream_socket connectto;
allow umcagent_app itsonclient_app:unix_stream_socket connectto;
allow vpn_untrusted_app itsonclient_app:unix_stream_socket connectto;
allow trustonicpartner_app itsonclient_app:unix_stream_socket connectto;
allow llk_untrusted_app itsonclient_app:unix_stream_socket connectto;
allow filtered_untrusted_app itsonclient_app:unix_stream_socket connectto;
allow filtered_google_app itsonclient_app:unix_stream_socket connectto;
allow knox_untrusted_app itsonclient_app:unix_stream_socket connectto;
allow irm_app itsonclient_app:unix_stream_socket connectto;
allow gad_untrusted_app itsonclient_app:unix_stream_socket connectto;
allow carrier_app itsonclient_app:unix_stream_socket connectto;
#line 60


#line 61
allow untrusted_app itson_socket:sock_file write;
allow umcagent_app itson_socket:sock_file write;
allow vpn_untrusted_app itson_socket:sock_file write;
allow trustonicpartner_app itson_socket:sock_file write;
allow llk_untrusted_app itson_socket:sock_file write;
allow filtered_untrusted_app itson_socket:sock_file write;
allow filtered_google_app itson_socket:sock_file write;
allow knox_untrusted_app itson_socket:sock_file write;
allow irm_app itson_socket:sock_file write;
allow gad_untrusted_app itson_socket:sock_file write;
allow carrier_app itson_socket:sock_file write;
#line 61
allow untrusted_app itsonclient_app:unix_dgram_socket sendto;
allow umcagent_app itsonclient_app:unix_dgram_socket sendto;
allow vpn_untrusted_app itsonclient_app:unix_dgram_socket sendto;
allow trustonicpartner_app itsonclient_app:unix_dgram_socket sendto;
allow llk_untrusted_app itsonclient_app:unix_dgram_socket sendto;
allow filtered_untrusted_app itsonclient_app:unix_dgram_socket sendto;
allow filtered_google_app itsonclient_app:unix_dgram_socket sendto;
allow knox_untrusted_app itsonclient_app:unix_dgram_socket sendto;
allow irm_app itsonclient_app:unix_dgram_socket sendto;
allow gad_untrusted_app itsonclient_app:unix_dgram_socket sendto;
allow carrier_app itsonclient_app:unix_dgram_socket sendto;
#line 61


############ avc_log #############
#avc:  denied  { write } for  pid=2170 comm="Thread-92" name="itson" dev="tmpfs" ino=10253 scontext=u:r:itsonclient_app:s0 tcontext=u:object_r:socket_device:s0 tclass=dir
#audit(1416964424.911:219): arch=40000028 syscall=282 per=800000 success=no exit=-13 a0=22 a1=b3b23914 a2=6e a3=b6f73cd8 items=1 ppid=491 pid=2170 auid=4294967295 uid=4002 gid=4002 euid=4002 suid=4002 fsuid=4002 egid=4002 sgid=4002 fsgid=4002 tty=(none) ses=4294967295 comm="Thread-92" exe="/system/bin/app_process32" subj=u:r:itsonclient_app:s0 key=(null)
#audit(1416964424.911:219): saddr=01002F6465762F736F636B65742F6974736F6E2F6E6F746966790
#audit(1416964424.911:219): item=0 name=(null) inode=10253 dev=00:0b mode=042771 ouid=4002 ogid=4002 rdev=00:00 obj=u:object_r:socket_device:s0



#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/platform_app.te"
#
# Platform app
#

allow platform_app sprintitson_file:file execute;
allow s_platform_app sprintitson_file:file execute;
#line 6

## avc_log : B2C
# avc:  denied  { execute } for  pid=9651 comm=”app.videoplayer” path=”/carrier/itson/resources/libitsonoem.so" dev="mmcblk0p26" ino=27 scontext=u:r:platform_app:s0 tcontext=u:object_r:sprintitson_file:s0 tclass=file

## avc_log : B2B

#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/radio.te"
allow radio carrier_file:dir { open getattr read search ioctl };
allow radio carrier_file:file { getattr open read ioctl lock };
allow radio sprintitson_file:dir { open getattr read search ioctl };
allow radio sprintitson_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };


## avc_log : AOSP/B2C
# avc:  denied  { read } for  pid=1416 comm="m.android.phone" name="itson-oem.jar" dev="mmcblk0p26" ino=22 scontext=u:r:radio:s0 tcontext=u:object_r:sprintitson_file:s0 tclass=file
# avc:  denied  { open } for  pid=1416 comm="m.android.phone" path="/carrier/itson/resources/itson-oem.jar" dev="mmcblk0p26" ino=22 scontext=u:r:radio:s0 tcontext=u:object_r:sprintitson_file:s0 tclass=file
#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_spr/system_server.te"

#line 1
allow system_server itson_socket:sock_file write;
#line 1
allow system_server itsonclient_app:unix_stream_socket connectto;
#line 1


#line 2
allow system_server itson_socket:sock_file write;
#line 2
allow system_server itsonclient_app:unix_dgram_socket sendto;
#line 2


allow system sprintitson_file:file { getattr execute execute_no_trans };

#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_tfntmo/app.te"
allow newAttr10 carrier_file:dir { create reparent rmdir setattr { { open getattr read search ioctl } { open search write add_name remove_name } } { getattr link unlink rename } };
allow newAttr10 carrier_file:file { create setattr { { getattr open read ioctl lock } { open append write } } { getattr link unlink rename } };
#allow containerdomain carrier_file:dir create_dir_perms;
#allow containerdomain carrier_file:file create_file_perms;


#============= untrusted_app(com.tmobile.simlock) for tsdaemon ==============
allow filtered_untrusted_app tsdaemon:unix_stream_socket connectto;

#line 9
 allow untrusted_app tsdaemon:unix_stream_socket connectto;	
#line 11


#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_tfntmo/bootanim.te"
allow bootanim carrier_file:dir { open getattr read search ioctl };
allow bootanim carrier_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_tfntmo/radio.te"
allow radio carrier_file:file { getattr open read ioctl lock };
#line 1 "vendor/samsung/common/sepolicy/carrier/carrier_tfntmo/tsdaemon.te"
#
# tsdaemon
#
# Communicates with Device Unlock app, t-base trusted application, and CP, for TMUS Remote SIM Unlock (RSU) project
# Provides following functions in RSU feature:
#   - Handle actions initiated by user from Unlock app, com.tmobile.simlock (Permanent Unlock/ Temporary Unlock / Key registration / etc)
#   - Communicate to t-base trusted application for unlock request generation and unlock response verification
#   - Communicate to CP for unlock request generation and unlock setting applying
# Client-server solution, but tsdaemon itself does not communicate with TMUS unlock server. (Unlock app, com.tmobile.simlock, communicates with the TMUS unlock server.)
# Only com.tmobile.simlock apk needs to communicate with tsdaemon. No other apps.
# Contact: s2.patil, jiaming.liu, a.verma. MNO Team 2
#

############ aosp and sec_common #############
########## type and macro.
type tsdaemon, domain, newAttr25, newAttr32, newAttr34, newAttr33, newAttr35, newAttr36, newAttr37, newAttr38, newAttr39, newAttr40, newAttr41, newAttr42, newAttr43, newAttr44, newAttr45, newAttr46, newAttr47, newAttr48, newAttr49, newAttr50;
type tsdaemon_exec, exec_type, file_type, newAttr52, newAttr54, newAttr55, newAttr56, newAttr57, newAttr58, newAttr59, newAttr63, newAttr64, newAttr88;


#line 19

#line 19
# Allow the necessary permissions.
#line 19

#line 19
# Old domain may exec the file and transition to the new domain.
#line 19
allow init tsdaemon_exec:file { getattr open read execute };
#line 19
allow init tsdaemon:process transition;
#line 19
# New domain is entered by executing the file.
#line 19
allow tsdaemon tsdaemon_exec:file { entrypoint open read execute getattr };
#line 19
# New domain can send SIGCHLD to its caller.
#line 19
allow tsdaemon init:process sigchld;
#line 19
# Enable AT_SECURE, i.e. libc secure mode.
#line 19
dontaudit init tsdaemon:process noatsecure;
#line 19
# XXX dontaudit candidate but requires further study.
#line 19
allow init tsdaemon:process { siginh rlimitinh };
#line 19

#line 19
# Make the transition occur by default.
#line 19
type_transition init tsdaemon_exec:process tsdaemon;
#line 19

#line 19

#line 19
## SEC_SEforAndroid : added the type, tmpfs_file_type
#line 19
type tsdaemon_tmpfs, file_type, tmpfs_file_type, newAttr53, newAttr54, newAttr55, newAttr56, newAttr57, newAttr60, newAttr58, newAttr59, newAttr61, newAttr62, newAttr63, newAttr64, newAttr65, newAttr66, newAttr89, newAttr69, newAttr90;
#line 19
type_transition tsdaemon tmpfs:file tsdaemon_tmpfs;
#line 19
allow tsdaemon tsdaemon_tmpfs:file { read write };
#line 19

#line 19


#line 20
allow tsdaemon mobicore_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 20
allow tsdaemon mobicore-user_device:chr_file { { getattr open read ioctl lock } { open append write } };
#line 20
# TODO: Figure out proper sockets
#line 20
allow tsdaemon mobicoredaemon:unix_stream_socket connectto;
#line 20


#line 21
allow tsdaemon rild_socket:sock_file write;
#line 21
allow tsdaemon rild:unix_stream_socket connectto;
#line 21


#to collect denials
#permissive tsdaemon;

########## self and domain_type
########## fs_type
allow tsdaemon sysfs_wake_lock:file write;

########## dev_type
########## file_type
########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { connectto } for  pid=3129 comm="tsdaemon" path=006D636461656D6F6E scontext=u:r:tsdaemon:s0 tcontext=u:r:mobicoredaemon:s0 tclass=unix_stream_socket permissive=1
# avc:  denied  { read write } for  pid=3129 comm="tsdaemon" name="mobicore-user" dev="tmpfs" ino=15595 scontext=u:r:tsdaemon:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file permissive=1
# avc:  denied  { open } for  pid=3129 comm="tsdaemon" path="/dev/mobicore-user" dev="tmpfs" ino=15595 scontext=u:r:tsdaemon:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file permissive=1
# avc:  denied  { ioctl } for  pid=3129 comm="tsdaemon" path="/dev/mobicore-user" dev="tmpfs" ino=15595 scontext=u:r:tsdaemon:s0 tcontext=u:object_r:mobicore-user_device:s0 tclass=chr_file permissive=1
# avc:  denied  { connectto } for  pid=3129 comm="tsdaemon" path=004D756C7469636C69656E74 scontext=u:r:tsdaemon:s0 tcontext=u:r:rild:s0 tclass=unix_stream_socket permissive=1
# avc:  denied  { connectto } for  pid=11083 comm="SimLockService]" path=tsd.socket scontext=u:r:untrusted_app:s0 tcontext=u:r:tsdaemon:s0 tclass=unix_stream_socket permissive=1

#line 1 "vendor/samsung/common/sepolicy/aosp/roles"
role r;
role r types domain;
#line 1 "vendor/samsung/common/sepolicy/aosp/users"
user u roles { r } level s0 range s0 - s0:c0.c1023;
#line 1 "vendor/samsung/common/sepolicy/aosp/initial_sid_contexts"
sid kernel u:r:kernel:s0
sid security u:object_r:kernel:s0
sid unlabeled u:object_r:unlabeled:s0
sid fs u:object_r:labeledfs:s0
sid file u:object_r:unlabeled:s0
sid file_labels u:object_r:unlabeled:s0
sid init u:object_r:unlabeled:s0
sid any_socket u:object_r:unlabeled:s0
sid port u:object_r:port:s0
sid netif u:object_r:netif:s0
sid netmsg u:object_r:unlabeled:s0
sid node u:object_r:node:s0
sid igmp_packet u:object_r:unlabeled:s0
sid icmp_socket u:object_r:unlabeled:s0
sid tcp_socket u:object_r:unlabeled:s0
sid sysctl_modprobe u:object_r:unlabeled:s0
sid sysctl u:object_r:proc:s0
sid sysctl_fs u:object_r:unlabeled:s0
sid sysctl_kernel u:object_r:unlabeled:s0
sid sysctl_net u:object_r:unlabeled:s0
sid sysctl_net_unix u:object_r:unlabeled:s0
sid sysctl_vm u:object_r:unlabeled:s0
sid sysctl_dev u:object_r:unlabeled:s0
sid kmod u:object_r:unlabeled:s0
sid policy u:object_r:unlabeled:s0
sid scmp_packet u:object_r:unlabeled:s0
sid devnull u:object_r:null_device:s0
#line 1 "vendor/samsung/common/sepolicy/aosp/fs_use"
# Label inodes via getxattr.
fs_use_xattr yaffs2 u:object_r:labeledfs:s0;
fs_use_xattr jffs2 u:object_r:labeledfs:s0;
fs_use_xattr ext2 u:object_r:labeledfs:s0;
fs_use_xattr ext3 u:object_r:labeledfs:s0;
fs_use_xattr ext4 u:object_r:labeledfs:s0;
fs_use_xattr xfs u:object_r:labeledfs:s0;
fs_use_xattr btrfs u:object_r:labeledfs:s0;
fs_use_xattr f2fs u:object_r:labeledfs:s0;

# Label inodes from task label.
fs_use_task pipefs u:object_r:pipefs:s0;
fs_use_task sockfs u:object_r:sockfs:s0;

# Label inodes from combination of task label and fs label.
# Define type_transition rules if you want per-domain types.
fs_use_trans devpts u:object_r:devpts:s0;
fs_use_trans tmpfs u:object_r:tmpfs:s0;
fs_use_trans devtmpfs u:object_r:device:s0;
fs_use_trans shm u:object_r:shm:s0;
fs_use_trans mqueue u:object_r:mqueue:s0;

#line 1 "vendor/samsung/common/sepolicy/model/ctsv2/fs_use"
############ knox_common #############
## Multi Security Contexts
# Label for vfat and sdcardfs
fs_use_xattr sdcardfs u:object_r:xsdcardfs:s0;
fs_use_xattr vfat u:object_r:xsdcardfs:s0;
# Label for eCryptfs.
fs_use_xattr ecryptfs u:object_r:labeledfs:s0;

#line 1 "vendor/samsung/common/sepolicy/fs_use"

############ aosp and sec_common #############
# Label for SCFS
fs_use_xattr scfs u:object_r:labeledfs:s0;


############ knox_common #############

#line 1 "vendor/samsung/common/sepolicy/aosp/genfs_contexts"
# Label inodes with the fs label.
genfscon rootfs / u:object_r:rootfs:s0
# proc labeling can be further refined (longest matching prefix).
genfscon proc / u:object_r:proc:s0
genfscon proc /net u:object_r:proc_net:s0
genfscon proc /net/xt_qtaguid/ctrl u:object_r:qtaguid_proc:s0
genfscon proc /cpuinfo u:object_r:proc_cpuinfo:s0
genfscon proc /sysrq-trigger u:object_r:proc_sysrq:s0
genfscon proc /sys/fs/protected_hardlinks u:object_r:proc_security:s0
genfscon proc /sys/fs/protected_symlinks u:object_r:proc_security:s0
genfscon proc /sys/fs/suid_dumpable u:object_r:proc_security:s0
genfscon proc /sys/kernel/core_pattern u:object_r:usermodehelper:s0
genfscon proc /sys/kernel/dmesg_restrict u:object_r:proc_security:s0
genfscon proc /sys/kernel/hotplug u:object_r:usermodehelper:s0
genfscon proc /sys/kernel/kptr_restrict u:object_r:proc_security:s0
genfscon proc /sys/kernel/modprobe u:object_r:usermodehelper:s0
genfscon proc /sys/kernel/modules_disabled u:object_r:proc_security:s0
genfscon proc /sys/kernel/poweroff_cmd u:object_r:usermodehelper:s0
genfscon proc /sys/kernel/randomize_va_space u:object_r:proc_security:s0
genfscon proc /sys/kernel/usermodehelper u:object_r:usermodehelper:s0
genfscon proc /sys/net u:object_r:proc_net:s0
genfscon proc /sys/vm/mmap_min_addr u:object_r:proc_security:s0
# selinuxfs booleans can be individually labeled.
genfscon selinuxfs / u:object_r:selinuxfs:s0
genfscon cgroup / u:object_r:cgroup:s0
# sysfs labels can be set by userspace.
genfscon sysfs / u:object_r:sysfs:s0
genfscon inotifyfs / u:object_r:inotify:s0
genfscon vfat / u:object_r:vfat:s0
genfscon debugfs / u:object_r:debugfs:s0
genfscon fuse / u:object_r:fuse:s0
genfscon pstore / u:object_r:pstorefs:s0
genfscon functionfs / u:object_r:functionfs:s0
genfscon usbfs / u:object_r:usbfs:s0
#line 1 "vendor/samsung/common/sepolicy/BSP/bsp_qcom_v2/bsp/common/genfs_contexts"
genfscon proc /asound/card0/state u:object_r:proc_audiod:s0
genfscon proc /proc/sys/vm/dirty_ratio  u:object_r:proc_dirty_ratio:s0
#line 1 "vendor/samsung/common/sepolicy/genfs_contexts"

############ aosp and sec_common #############
genfscon anon_inodefs / u:object_r:anon_inodefs:s0

genfscon vfat /firmware/ u:object_r:firmware:s0

genfscon sdcardfs /	u:object_r:sdcard_internal:s0
genfscon iso9660 /	u:object_r:sdcard_external:s0
genfscon udf /		u:object_r:sdcard_external:s0
genfscon udfs /		u:object_r:sdcard_external:s0
genfscon exfat /	u:object_r:sdcard_external:s0
genfscon ecryptfs /	u:object_r:sdcard_external:s0

genfscon proc /bluetooth/sleep u:object_r:proc_bluetooth_writable:s0
genfscon proc /spd u:object_r:proc_spd:s0


############ knox_common #############
genfscon proc /avc_msg u:object_r:proc_avc_msg:s0


############ qcom_common #############


############ slsi_common #############



#line 1 "vendor/samsung/common/sepolicy/aosp/port_contexts"
# portcon statements go here, e.g.
# portcon tcp 80 u:object_r:http_port:s0

