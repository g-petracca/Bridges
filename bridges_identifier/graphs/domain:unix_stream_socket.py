import networkx as nx
from networkx_viewer import Viewer
G = nx.DiGraph()
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('unconfineddomain','unconfineddomain')
G.add_edge('vmwared','unconfineddomain')
G.edge['vmwared']['unconfineddomain']['read-write'] = '* >getattr'
app = Viewer(G)
app.mainloop()